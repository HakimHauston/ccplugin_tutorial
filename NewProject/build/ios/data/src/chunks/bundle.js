System.register([], function(_export, _context) { return { execute: function () {
System.register("chunks:///_virtual/262.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.msFromTime = exports.OrdinaryHasInstance = exports.SecFromTime = exports.MinFromTime = exports.HourFromTime = exports.DateFromTime = exports.MonthFromTime = exports.InLeapYear = exports.DayWithinYear = exports.DaysInYear = exports.YearFromTime = exports.TimeFromYear = exports.DayFromYear = exports.WeekDay = exports.Day = exports.Type = exports.HasOwnProperty = exports.ArrayCreate = exports.SameValue = exports.ToObject = exports.TimeClip = exports.ToNumber = exports.ToString = void 0;
        /**
         * https://tc39.es/ecma262/#sec-tostring
         */

        function ToString(o) {
          // Only symbol is irregular...
          if (typeof o === 'symbol') {
            throw TypeError('Cannot convert a Symbol value to a string');
          }

          return String(o);
        }

        exports.ToString = ToString;
        /**
         * https://tc39.es/ecma262/#sec-tonumber
         * @param val
         */

        function ToNumber(val) {
          if (val === undefined) {
            return NaN;
          }

          if (val === null) {
            return +0;
          }

          if (typeof val === 'boolean') {
            return val ? 1 : +0;
          }

          if (typeof val === 'number') {
            return val;
          }

          if (typeof val === 'symbol' || typeof val === 'bigint') {
            throw new TypeError('Cannot convert symbol/bigint to number');
          }

          return Number(val);
        }

        exports.ToNumber = ToNumber;
        /**
         * https://tc39.es/ecma262/#sec-tointeger
         * @param n
         */

        function ToInteger(n) {
          var number = ToNumber(n);

          if (isNaN(number) || SameValue(number, -0)) {
            return 0;
          }

          if (isFinite(number)) {
            return number;
          }

          var integer = Math.floor(Math.abs(number));

          if (number < 0) {
            integer = -integer;
          }

          if (SameValue(integer, -0)) {
            return 0;
          }

          return integer;
        }
        /**
         * https://tc39.es/ecma262/#sec-timeclip
         * @param time
         */


        function TimeClip(time) {
          if (!isFinite(time)) {
            return NaN;
          }

          if (Math.abs(time) > 8.64 * 1e15) {
            return NaN;
          }

          return ToInteger(time);
        }

        exports.TimeClip = TimeClip;
        /**
         * https://tc39.es/ecma262/#sec-toobject
         * @param arg
         */

        function ToObject(arg) {
          if (arg == null) {
            throw new TypeError('undefined/null cannot be converted to object');
          }

          return Object(arg);
        }

        exports.ToObject = ToObject;
        /**
         * https://www.ecma-international.org/ecma-262/11.0/index.html#sec-samevalue
         * @param x
         * @param y
         */

        function SameValue(x, y) {
          if (Object.is) {
            return Object.is(x, y);
          } // SameValue algorithm


          if (x === y) {
            // Steps 1-5, 7-10
            // Steps 6.b-6.e: +0 != -0
            return x !== 0 || 1 / x === 1 / y;
          } // Step 6.a: NaN == NaN


          return x !== x && y !== y;
        }

        exports.SameValue = SameValue;
        /**
         * https://www.ecma-international.org/ecma-262/11.0/index.html#sec-arraycreate
         * @param len
         */

        function ArrayCreate(len) {
          return new Array(len);
        }

        exports.ArrayCreate = ArrayCreate;
        /**
         * https://www.ecma-international.org/ecma-262/11.0/index.html#sec-hasownproperty
         * @param o
         * @param prop
         */

        function HasOwnProperty(o, prop) {
          return Object.prototype.hasOwnProperty.call(o, prop);
        }

        exports.HasOwnProperty = HasOwnProperty;
        /**
         * https://www.ecma-international.org/ecma-262/11.0/index.html#sec-type
         * @param x
         */

        function Type(x) {
          if (x === null) {
            return 'Null';
          }

          if (typeof x === 'undefined') {
            return 'Undefined';
          }

          if (typeof x === 'function' || typeof x === 'object') {
            return 'Object';
          }

          if (typeof x === 'number') {
            return 'Number';
          }

          if (typeof x === 'boolean') {
            return 'Boolean';
          }

          if (typeof x === 'string') {
            return 'String';
          }

          if (typeof x === 'symbol') {
            return 'Symbol';
          }

          if (typeof x === 'bigint') {
            return 'BigInt';
          }
        }

        exports.Type = Type;
        var MS_PER_DAY = 86400000;
        /**
         * https://www.ecma-international.org/ecma-262/11.0/index.html#eqn-modulo
         * @param x
         * @param y
         * @return k of the same sign as y
         */

        function mod(x, y) {
          return x - Math.floor(x / y) * y;
        }
        /**
         * https://tc39.es/ecma262/#eqn-Day
         * @param t
         */


        function Day(t) {
          return Math.floor(t / MS_PER_DAY);
        }

        exports.Day = Day;
        /**
         * https://tc39.es/ecma262/#sec-week-day
         * @param t
         */

        function WeekDay(t) {
          return mod(Day(t) + 4, 7);
        }

        exports.WeekDay = WeekDay;
        /**
         * https://tc39.es/ecma262/#sec-year-number
         * @param y
         */

        function DayFromYear(y) {
          return Date.UTC(y, 0) / MS_PER_DAY;
        }

        exports.DayFromYear = DayFromYear;
        /**
         * https://tc39.es/ecma262/#sec-year-number
         * @param y
         */

        function TimeFromYear(y) {
          return Date.UTC(y, 0);
        }

        exports.TimeFromYear = TimeFromYear;
        /**
         * https://tc39.es/ecma262/#sec-year-number
         * @param t
         */

        function YearFromTime(t) {
          return new Date(t).getUTCFullYear();
        }

        exports.YearFromTime = YearFromTime;

        function DaysInYear(y) {
          if (y % 4 !== 0) {
            return 365;
          }

          if (y % 100 !== 0) {
            return 366;
          }

          if (y % 400 !== 0) {
            return 365;
          }

          return 366;
        }

        exports.DaysInYear = DaysInYear;

        function DayWithinYear(t) {
          return Day(t) - DayFromYear(YearFromTime(t));
        }

        exports.DayWithinYear = DayWithinYear;

        function InLeapYear(t) {
          return DaysInYear(YearFromTime(t)) === 365 ? 0 : 1;
        }

        exports.InLeapYear = InLeapYear;
        /**
         * https://tc39.es/ecma262/#sec-month-number
         * @param t
         */

        function MonthFromTime(t) {
          var dwy = DayWithinYear(t);
          var leap = InLeapYear(t);

          if (dwy >= 0 && dwy < 31) {
            return 0;
          }

          if (dwy < 59 + leap) {
            return 1;
          }

          if (dwy < 90 + leap) {
            return 2;
          }

          if (dwy < 120 + leap) {
            return 3;
          }

          if (dwy < 151 + leap) {
            return 4;
          }

          if (dwy < 181 + leap) {
            return 5;
          }

          if (dwy < 212 + leap) {
            return 6;
          }

          if (dwy < 243 + leap) {
            return 7;
          }

          if (dwy < 273 + leap) {
            return 8;
          }

          if (dwy < 304 + leap) {
            return 9;
          }

          if (dwy < 334 + leap) {
            return 10;
          }

          if (dwy < 365 + leap) {
            return 11;
          }

          throw new Error('Invalid time');
        }

        exports.MonthFromTime = MonthFromTime;

        function DateFromTime(t) {
          var dwy = DayWithinYear(t);
          var mft = MonthFromTime(t);
          var leap = InLeapYear(t);

          if (mft === 0) {
            return dwy + 1;
          }

          if (mft === 1) {
            return dwy - 30;
          }

          if (mft === 2) {
            return dwy - 58 - leap;
          }

          if (mft === 3) {
            return dwy - 89 - leap;
          }

          if (mft === 4) {
            return dwy - 119 - leap;
          }

          if (mft === 5) {
            return dwy - 150 - leap;
          }

          if (mft === 6) {
            return dwy - 180 - leap;
          }

          if (mft === 7) {
            return dwy - 211 - leap;
          }

          if (mft === 8) {
            return dwy - 242 - leap;
          }

          if (mft === 9) {
            return dwy - 272 - leap;
          }

          if (mft === 10) {
            return dwy - 303 - leap;
          }

          if (mft === 11) {
            return dwy - 333 - leap;
          }

          throw new Error('Invalid time');
        }

        exports.DateFromTime = DateFromTime;
        var HOURS_PER_DAY = 24;
        var MINUTES_PER_HOUR = 60;
        var SECONDS_PER_MINUTE = 60;
        var MS_PER_SECOND = 1e3;
        var MS_PER_MINUTE = MS_PER_SECOND * SECONDS_PER_MINUTE;
        var MS_PER_HOUR = MS_PER_MINUTE * MINUTES_PER_HOUR;

        function HourFromTime(t) {
          return mod(Math.floor(t / MS_PER_HOUR), HOURS_PER_DAY);
        }

        exports.HourFromTime = HourFromTime;

        function MinFromTime(t) {
          return mod(Math.floor(t / MS_PER_MINUTE), MINUTES_PER_HOUR);
        }

        exports.MinFromTime = MinFromTime;

        function SecFromTime(t) {
          return mod(Math.floor(t / MS_PER_SECOND), SECONDS_PER_MINUTE);
        }

        exports.SecFromTime = SecFromTime;

        function IsCallable(fn) {
          return typeof fn === 'function';
        }
        /**
         * The abstract operation OrdinaryHasInstance implements
         * the default algorithm for determining if an object O
         * inherits from the instance object inheritance path
         * provided by constructor C.
         * @param C class
         * @param O object
         * @param internalSlots internalSlots
         */


        function OrdinaryHasInstance(C, O, internalSlots) {
          if (!IsCallable(C)) {
            return false;
          }

          if (internalSlots === null || internalSlots === void 0 ? void 0 : internalSlots.boundTargetFunction) {
            var BC = internalSlots === null || internalSlots === void 0 ? void 0 : internalSlots.boundTargetFunction;
            return O instanceof BC;
          }

          if (typeof O !== 'object') {
            return false;
          }

          var P = C.prototype;

          if (typeof P !== 'object') {
            throw new TypeError('OrdinaryHasInstance called on an object with an invalid prototype property.');
          }

          return Object.prototype.isPrototypeOf.call(P, O);
        }

        exports.OrdinaryHasInstance = OrdinaryHasInstance;

        function msFromTime(t) {
          return mod(t, MS_PER_SECOND);
        }

        exports.msFromTime = msFromTime; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.msFromTime;
        module.exports.OrdinaryHasInstance;
        module.exports.SecFromTime;
        module.exports.MinFromTime;
        module.exports.HourFromTime;
        module.exports.DateFromTime;
        module.exports.MonthFromTime;
        module.exports.InLeapYear;
        module.exports.DayWithinYear;
        module.exports.DaysInYear;
        module.exports.YearFromTime;
        module.exports.TimeFromYear;
        module.exports.DayFromYear;
        module.exports.WeekDay;
        module.exports.Day;
        module.exports.Type;
        module.exports.HasOwnProperty;
        module.exports.ArrayCreate;
        module.exports.SameValue;
        module.exports.ToObject;
        module.exports.TimeClip;
        module.exports.ToNumber;
        module.exports.ToString;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/2622.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.msFromTime = exports.OrdinaryHasInstance = exports.SecFromTime = exports.MinFromTime = exports.HourFromTime = exports.DateFromTime = exports.MonthFromTime = exports.InLeapYear = exports.DayWithinYear = exports.DaysInYear = exports.YearFromTime = exports.TimeFromYear = exports.DayFromYear = exports.WeekDay = exports.Day = exports.Type = exports.HasOwnProperty = exports.ArrayCreate = exports.SameValue = exports.ToObject = exports.TimeClip = exports.ToNumber = exports.ToString = void 0;
        /**
         * https://tc39.es/ecma262/#sec-tostring
         */

        function ToString(o) {
          // Only symbol is irregular...
          if (typeof o === 'symbol') {
            throw TypeError('Cannot convert a Symbol value to a string');
          }

          return String(o);
        }

        exports.ToString = ToString;
        /**
         * https://tc39.es/ecma262/#sec-tonumber
         * @param val
         */

        function ToNumber(val) {
          if (val === undefined) {
            return NaN;
          }

          if (val === null) {
            return +0;
          }

          if (typeof val === 'boolean') {
            return val ? 1 : +0;
          }

          if (typeof val === 'number') {
            return val;
          }

          if (typeof val === 'symbol' || typeof val === 'bigint') {
            throw new TypeError('Cannot convert symbol/bigint to number');
          }

          return Number(val);
        }

        exports.ToNumber = ToNumber;
        /**
         * https://tc39.es/ecma262/#sec-tointeger
         * @param n
         */

        function ToInteger(n) {
          var number = ToNumber(n);

          if (isNaN(number) || SameValue(number, -0)) {
            return 0;
          }

          if (isFinite(number)) {
            return number;
          }

          var integer = Math.floor(Math.abs(number));

          if (number < 0) {
            integer = -integer;
          }

          if (SameValue(integer, -0)) {
            return 0;
          }

          return integer;
        }
        /**
         * https://tc39.es/ecma262/#sec-timeclip
         * @param time
         */


        function TimeClip(time) {
          if (!isFinite(time)) {
            return NaN;
          }

          if (Math.abs(time) > 8.64 * 1e15) {
            return NaN;
          }

          return ToInteger(time);
        }

        exports.TimeClip = TimeClip;
        /**
         * https://tc39.es/ecma262/#sec-toobject
         * @param arg
         */

        function ToObject(arg) {
          if (arg == null) {
            throw new TypeError('undefined/null cannot be converted to object');
          }

          return Object(arg);
        }

        exports.ToObject = ToObject;
        /**
         * https://www.ecma-international.org/ecma-262/11.0/index.html#sec-samevalue
         * @param x
         * @param y
         */

        function SameValue(x, y) {
          if (Object.is) {
            return Object.is(x, y);
          } // SameValue algorithm


          if (x === y) {
            // Steps 1-5, 7-10
            // Steps 6.b-6.e: +0 != -0
            return x !== 0 || 1 / x === 1 / y;
          } // Step 6.a: NaN == NaN


          return x !== x && y !== y;
        }

        exports.SameValue = SameValue;
        /**
         * https://www.ecma-international.org/ecma-262/11.0/index.html#sec-arraycreate
         * @param len
         */

        function ArrayCreate(len) {
          return new Array(len);
        }

        exports.ArrayCreate = ArrayCreate;
        /**
         * https://www.ecma-international.org/ecma-262/11.0/index.html#sec-hasownproperty
         * @param o
         * @param prop
         */

        function HasOwnProperty(o, prop) {
          return Object.prototype.hasOwnProperty.call(o, prop);
        }

        exports.HasOwnProperty = HasOwnProperty;
        /**
         * https://www.ecma-international.org/ecma-262/11.0/index.html#sec-type
         * @param x
         */

        function Type(x) {
          if (x === null) {
            return 'Null';
          }

          if (typeof x === 'undefined') {
            return 'Undefined';
          }

          if (typeof x === 'function' || typeof x === 'object') {
            return 'Object';
          }

          if (typeof x === 'number') {
            return 'Number';
          }

          if (typeof x === 'boolean') {
            return 'Boolean';
          }

          if (typeof x === 'string') {
            return 'String';
          }

          if (typeof x === 'symbol') {
            return 'Symbol';
          }

          if (typeof x === 'bigint') {
            return 'BigInt';
          }
        }

        exports.Type = Type;
        var MS_PER_DAY = 86400000;
        /**
         * https://www.ecma-international.org/ecma-262/11.0/index.html#eqn-modulo
         * @param x
         * @param y
         * @return k of the same sign as y
         */

        function mod(x, y) {
          return x - Math.floor(x / y) * y;
        }
        /**
         * https://tc39.es/ecma262/#eqn-Day
         * @param t
         */


        function Day(t) {
          return Math.floor(t / MS_PER_DAY);
        }

        exports.Day = Day;
        /**
         * https://tc39.es/ecma262/#sec-week-day
         * @param t
         */

        function WeekDay(t) {
          return mod(Day(t) + 4, 7);
        }

        exports.WeekDay = WeekDay;
        /**
         * https://tc39.es/ecma262/#sec-year-number
         * @param y
         */

        function DayFromYear(y) {
          return Date.UTC(y, 0) / MS_PER_DAY;
        }

        exports.DayFromYear = DayFromYear;
        /**
         * https://tc39.es/ecma262/#sec-year-number
         * @param y
         */

        function TimeFromYear(y) {
          return Date.UTC(y, 0);
        }

        exports.TimeFromYear = TimeFromYear;
        /**
         * https://tc39.es/ecma262/#sec-year-number
         * @param t
         */

        function YearFromTime(t) {
          return new Date(t).getUTCFullYear();
        }

        exports.YearFromTime = YearFromTime;

        function DaysInYear(y) {
          if (y % 4 !== 0) {
            return 365;
          }

          if (y % 100 !== 0) {
            return 366;
          }

          if (y % 400 !== 0) {
            return 365;
          }

          return 366;
        }

        exports.DaysInYear = DaysInYear;

        function DayWithinYear(t) {
          return Day(t) - DayFromYear(YearFromTime(t));
        }

        exports.DayWithinYear = DayWithinYear;

        function InLeapYear(t) {
          return DaysInYear(YearFromTime(t)) === 365 ? 0 : 1;
        }

        exports.InLeapYear = InLeapYear;
        /**
         * https://tc39.es/ecma262/#sec-month-number
         * @param t
         */

        function MonthFromTime(t) {
          var dwy = DayWithinYear(t);
          var leap = InLeapYear(t);

          if (dwy >= 0 && dwy < 31) {
            return 0;
          }

          if (dwy < 59 + leap) {
            return 1;
          }

          if (dwy < 90 + leap) {
            return 2;
          }

          if (dwy < 120 + leap) {
            return 3;
          }

          if (dwy < 151 + leap) {
            return 4;
          }

          if (dwy < 181 + leap) {
            return 5;
          }

          if (dwy < 212 + leap) {
            return 6;
          }

          if (dwy < 243 + leap) {
            return 7;
          }

          if (dwy < 273 + leap) {
            return 8;
          }

          if (dwy < 304 + leap) {
            return 9;
          }

          if (dwy < 334 + leap) {
            return 10;
          }

          if (dwy < 365 + leap) {
            return 11;
          }

          throw new Error('Invalid time');
        }

        exports.MonthFromTime = MonthFromTime;

        function DateFromTime(t) {
          var dwy = DayWithinYear(t);
          var mft = MonthFromTime(t);
          var leap = InLeapYear(t);

          if (mft === 0) {
            return dwy + 1;
          }

          if (mft === 1) {
            return dwy - 30;
          }

          if (mft === 2) {
            return dwy - 58 - leap;
          }

          if (mft === 3) {
            return dwy - 89 - leap;
          }

          if (mft === 4) {
            return dwy - 119 - leap;
          }

          if (mft === 5) {
            return dwy - 150 - leap;
          }

          if (mft === 6) {
            return dwy - 180 - leap;
          }

          if (mft === 7) {
            return dwy - 211 - leap;
          }

          if (mft === 8) {
            return dwy - 242 - leap;
          }

          if (mft === 9) {
            return dwy - 272 - leap;
          }

          if (mft === 10) {
            return dwy - 303 - leap;
          }

          if (mft === 11) {
            return dwy - 333 - leap;
          }

          throw new Error('Invalid time');
        }

        exports.DateFromTime = DateFromTime;
        var HOURS_PER_DAY = 24;
        var MINUTES_PER_HOUR = 60;
        var SECONDS_PER_MINUTE = 60;
        var MS_PER_SECOND = 1e3;
        var MS_PER_MINUTE = MS_PER_SECOND * SECONDS_PER_MINUTE;
        var MS_PER_HOUR = MS_PER_MINUTE * MINUTES_PER_HOUR;

        function HourFromTime(t) {
          return mod(Math.floor(t / MS_PER_HOUR), HOURS_PER_DAY);
        }

        exports.HourFromTime = HourFromTime;

        function MinFromTime(t) {
          return mod(Math.floor(t / MS_PER_MINUTE), MINUTES_PER_HOUR);
        }

        exports.MinFromTime = MinFromTime;

        function SecFromTime(t) {
          return mod(Math.floor(t / MS_PER_SECOND), SECONDS_PER_MINUTE);
        }

        exports.SecFromTime = SecFromTime;

        function IsCallable(fn) {
          return typeof fn === 'function';
        }
        /**
         * The abstract operation OrdinaryHasInstance implements
         * the default algorithm for determining if an object O
         * inherits from the instance object inheritance path
         * provided by constructor C.
         * @param C class
         * @param O object
         * @param internalSlots internalSlots
         */


        function OrdinaryHasInstance(C, O, internalSlots) {
          if (!IsCallable(C)) {
            return false;
          }

          if (internalSlots === null || internalSlots === void 0 ? void 0 : internalSlots.boundTargetFunction) {
            var BC = internalSlots === null || internalSlots === void 0 ? void 0 : internalSlots.boundTargetFunction;
            return O instanceof BC;
          }

          if (typeof O !== 'object') {
            return false;
          }

          var P = C.prototype;

          if (typeof P !== 'object') {
            throw new TypeError('OrdinaryHasInstance called on an object with an invalid prototype property.');
          }

          return Object.prototype.isPrototypeOf.call(P, O);
        }

        exports.OrdinaryHasInstance = OrdinaryHasInstance;

        function msFromTime(t) {
          return mod(t, MS_PER_SECOND);
        }

        exports.msFromTime = msFromTime; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.msFromTime;
        module.exports.OrdinaryHasInstance;
        module.exports.SecFromTime;
        module.exports.MinFromTime;
        module.exports.HourFromTime;
        module.exports.DateFromTime;
        module.exports.MonthFromTime;
        module.exports.InLeapYear;
        module.exports.DayWithinYear;
        module.exports.DaysInYear;
        module.exports.YearFromTime;
        module.exports.TimeFromYear;
        module.exports.DayFromYear;
        module.exports.WeekDay;
        module.exports.Day;
        module.exports.Type;
        module.exports.HasOwnProperty;
        module.exports.ArrayCreate;
        module.exports.SameValue;
        module.exports.ToObject;
        module.exports.TimeClip;
        module.exports.ToNumber;
        module.exports.ToString;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/2623.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.msFromTime = exports.OrdinaryHasInstance = exports.SecFromTime = exports.MinFromTime = exports.HourFromTime = exports.DateFromTime = exports.MonthFromTime = exports.InLeapYear = exports.DayWithinYear = exports.DaysInYear = exports.YearFromTime = exports.TimeFromYear = exports.DayFromYear = exports.WeekDay = exports.Day = exports.Type = exports.HasOwnProperty = exports.ArrayCreate = exports.SameValue = exports.ToObject = exports.TimeClip = exports.ToNumber = exports.ToString = void 0;
        /**
         * https://tc39.es/ecma262/#sec-tostring
         */

        function ToString(o) {
          // Only symbol is irregular...
          if (typeof o === 'symbol') {
            throw TypeError('Cannot convert a Symbol value to a string');
          }

          return String(o);
        }

        exports.ToString = ToString;
        /**
         * https://tc39.es/ecma262/#sec-tonumber
         * @param val
         */

        function ToNumber(val) {
          if (val === undefined) {
            return NaN;
          }

          if (val === null) {
            return +0;
          }

          if (typeof val === 'boolean') {
            return val ? 1 : +0;
          }

          if (typeof val === 'number') {
            return val;
          }

          if (typeof val === 'symbol' || typeof val === 'bigint') {
            throw new TypeError('Cannot convert symbol/bigint to number');
          }

          return Number(val);
        }

        exports.ToNumber = ToNumber;
        /**
         * https://tc39.es/ecma262/#sec-tointeger
         * @param n
         */

        function ToInteger(n) {
          var number = ToNumber(n);

          if (isNaN(number) || SameValue(number, -0)) {
            return 0;
          }

          if (isFinite(number)) {
            return number;
          }

          var integer = Math.floor(Math.abs(number));

          if (number < 0) {
            integer = -integer;
          }

          if (SameValue(integer, -0)) {
            return 0;
          }

          return integer;
        }
        /**
         * https://tc39.es/ecma262/#sec-timeclip
         * @param time
         */


        function TimeClip(time) {
          if (!isFinite(time)) {
            return NaN;
          }

          if (Math.abs(time) > 8.64 * 1e15) {
            return NaN;
          }

          return ToInteger(time);
        }

        exports.TimeClip = TimeClip;
        /**
         * https://tc39.es/ecma262/#sec-toobject
         * @param arg
         */

        function ToObject(arg) {
          if (arg == null) {
            throw new TypeError('undefined/null cannot be converted to object');
          }

          return Object(arg);
        }

        exports.ToObject = ToObject;
        /**
         * https://www.ecma-international.org/ecma-262/11.0/index.html#sec-samevalue
         * @param x
         * @param y
         */

        function SameValue(x, y) {
          if (Object.is) {
            return Object.is(x, y);
          } // SameValue algorithm


          if (x === y) {
            // Steps 1-5, 7-10
            // Steps 6.b-6.e: +0 != -0
            return x !== 0 || 1 / x === 1 / y;
          } // Step 6.a: NaN == NaN


          return x !== x && y !== y;
        }

        exports.SameValue = SameValue;
        /**
         * https://www.ecma-international.org/ecma-262/11.0/index.html#sec-arraycreate
         * @param len
         */

        function ArrayCreate(len) {
          return new Array(len);
        }

        exports.ArrayCreate = ArrayCreate;
        /**
         * https://www.ecma-international.org/ecma-262/11.0/index.html#sec-hasownproperty
         * @param o
         * @param prop
         */

        function HasOwnProperty(o, prop) {
          return Object.prototype.hasOwnProperty.call(o, prop);
        }

        exports.HasOwnProperty = HasOwnProperty;
        /**
         * https://www.ecma-international.org/ecma-262/11.0/index.html#sec-type
         * @param x
         */

        function Type(x) {
          if (x === null) {
            return 'Null';
          }

          if (typeof x === 'undefined') {
            return 'Undefined';
          }

          if (typeof x === 'function' || typeof x === 'object') {
            return 'Object';
          }

          if (typeof x === 'number') {
            return 'Number';
          }

          if (typeof x === 'boolean') {
            return 'Boolean';
          }

          if (typeof x === 'string') {
            return 'String';
          }

          if (typeof x === 'symbol') {
            return 'Symbol';
          }

          if (typeof x === 'bigint') {
            return 'BigInt';
          }
        }

        exports.Type = Type;
        var MS_PER_DAY = 86400000;
        /**
         * https://www.ecma-international.org/ecma-262/11.0/index.html#eqn-modulo
         * @param x
         * @param y
         * @return k of the same sign as y
         */

        function mod(x, y) {
          return x - Math.floor(x / y) * y;
        }
        /**
         * https://tc39.es/ecma262/#eqn-Day
         * @param t
         */


        function Day(t) {
          return Math.floor(t / MS_PER_DAY);
        }

        exports.Day = Day;
        /**
         * https://tc39.es/ecma262/#sec-week-day
         * @param t
         */

        function WeekDay(t) {
          return mod(Day(t) + 4, 7);
        }

        exports.WeekDay = WeekDay;
        /**
         * https://tc39.es/ecma262/#sec-year-number
         * @param y
         */

        function DayFromYear(y) {
          return Date.UTC(y, 0) / MS_PER_DAY;
        }

        exports.DayFromYear = DayFromYear;
        /**
         * https://tc39.es/ecma262/#sec-year-number
         * @param y
         */

        function TimeFromYear(y) {
          return Date.UTC(y, 0);
        }

        exports.TimeFromYear = TimeFromYear;
        /**
         * https://tc39.es/ecma262/#sec-year-number
         * @param t
         */

        function YearFromTime(t) {
          return new Date(t).getUTCFullYear();
        }

        exports.YearFromTime = YearFromTime;

        function DaysInYear(y) {
          if (y % 4 !== 0) {
            return 365;
          }

          if (y % 100 !== 0) {
            return 366;
          }

          if (y % 400 !== 0) {
            return 365;
          }

          return 366;
        }

        exports.DaysInYear = DaysInYear;

        function DayWithinYear(t) {
          return Day(t) - DayFromYear(YearFromTime(t));
        }

        exports.DayWithinYear = DayWithinYear;

        function InLeapYear(t) {
          return DaysInYear(YearFromTime(t)) === 365 ? 0 : 1;
        }

        exports.InLeapYear = InLeapYear;
        /**
         * https://tc39.es/ecma262/#sec-month-number
         * @param t
         */

        function MonthFromTime(t) {
          var dwy = DayWithinYear(t);
          var leap = InLeapYear(t);

          if (dwy >= 0 && dwy < 31) {
            return 0;
          }

          if (dwy < 59 + leap) {
            return 1;
          }

          if (dwy < 90 + leap) {
            return 2;
          }

          if (dwy < 120 + leap) {
            return 3;
          }

          if (dwy < 151 + leap) {
            return 4;
          }

          if (dwy < 181 + leap) {
            return 5;
          }

          if (dwy < 212 + leap) {
            return 6;
          }

          if (dwy < 243 + leap) {
            return 7;
          }

          if (dwy < 273 + leap) {
            return 8;
          }

          if (dwy < 304 + leap) {
            return 9;
          }

          if (dwy < 334 + leap) {
            return 10;
          }

          if (dwy < 365 + leap) {
            return 11;
          }

          throw new Error('Invalid time');
        }

        exports.MonthFromTime = MonthFromTime;

        function DateFromTime(t) {
          var dwy = DayWithinYear(t);
          var mft = MonthFromTime(t);
          var leap = InLeapYear(t);

          if (mft === 0) {
            return dwy + 1;
          }

          if (mft === 1) {
            return dwy - 30;
          }

          if (mft === 2) {
            return dwy - 58 - leap;
          }

          if (mft === 3) {
            return dwy - 89 - leap;
          }

          if (mft === 4) {
            return dwy - 119 - leap;
          }

          if (mft === 5) {
            return dwy - 150 - leap;
          }

          if (mft === 6) {
            return dwy - 180 - leap;
          }

          if (mft === 7) {
            return dwy - 211 - leap;
          }

          if (mft === 8) {
            return dwy - 242 - leap;
          }

          if (mft === 9) {
            return dwy - 272 - leap;
          }

          if (mft === 10) {
            return dwy - 303 - leap;
          }

          if (mft === 11) {
            return dwy - 333 - leap;
          }

          throw new Error('Invalid time');
        }

        exports.DateFromTime = DateFromTime;
        var HOURS_PER_DAY = 24;
        var MINUTES_PER_HOUR = 60;
        var SECONDS_PER_MINUTE = 60;
        var MS_PER_SECOND = 1e3;
        var MS_PER_MINUTE = MS_PER_SECOND * SECONDS_PER_MINUTE;
        var MS_PER_HOUR = MS_PER_MINUTE * MINUTES_PER_HOUR;

        function HourFromTime(t) {
          return mod(Math.floor(t / MS_PER_HOUR), HOURS_PER_DAY);
        }

        exports.HourFromTime = HourFromTime;

        function MinFromTime(t) {
          return mod(Math.floor(t / MS_PER_MINUTE), MINUTES_PER_HOUR);
        }

        exports.MinFromTime = MinFromTime;

        function SecFromTime(t) {
          return mod(Math.floor(t / MS_PER_SECOND), SECONDS_PER_MINUTE);
        }

        exports.SecFromTime = SecFromTime;

        function IsCallable(fn) {
          return typeof fn === 'function';
        }
        /**
         * The abstract operation OrdinaryHasInstance implements
         * the default algorithm for determining if an object O
         * inherits from the instance object inheritance path
         * provided by constructor C.
         * @param C class
         * @param O object
         * @param internalSlots internalSlots
         */


        function OrdinaryHasInstance(C, O, internalSlots) {
          if (!IsCallable(C)) {
            return false;
          }

          if (internalSlots === null || internalSlots === void 0 ? void 0 : internalSlots.boundTargetFunction) {
            var BC = internalSlots === null || internalSlots === void 0 ? void 0 : internalSlots.boundTargetFunction;
            return O instanceof BC;
          }

          if (typeof O !== 'object') {
            return false;
          }

          var P = C.prototype;

          if (typeof P !== 'object') {
            throw new TypeError('OrdinaryHasInstance called on an object with an invalid prototype property.');
          }

          return Object.prototype.isPrototypeOf.call(P, O);
        }

        exports.OrdinaryHasInstance = OrdinaryHasInstance;

        function msFromTime(t) {
          return mod(t, MS_PER_SECOND);
        }

        exports.msFromTime = msFromTime; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.msFromTime;
        module.exports.OrdinaryHasInstance;
        module.exports.SecFromTime;
        module.exports.MinFromTime;
        module.exports.HourFromTime;
        module.exports.DateFromTime;
        module.exports.MonthFromTime;
        module.exports.InLeapYear;
        module.exports.DayWithinYear;
        module.exports.DaysInYear;
        module.exports.YearFromTime;
        module.exports.TimeFromYear;
        module.exports.DayFromYear;
        module.exports.WeekDay;
        module.exports.Day;
        module.exports.Type;
        module.exports.HasOwnProperty;
        module.exports.ArrayCreate;
        module.exports.SameValue;
        module.exports.ToObject;
        module.exports.TimeClip;
        module.exports.ToNumber;
        module.exports.ToString;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/2624.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.msFromTime = exports.OrdinaryHasInstance = exports.SecFromTime = exports.MinFromTime = exports.HourFromTime = exports.DateFromTime = exports.MonthFromTime = exports.InLeapYear = exports.DayWithinYear = exports.DaysInYear = exports.YearFromTime = exports.TimeFromYear = exports.DayFromYear = exports.WeekDay = exports.Day = exports.Type = exports.HasOwnProperty = exports.ArrayCreate = exports.SameValue = exports.ToObject = exports.TimeClip = exports.ToNumber = exports.ToString = void 0;
        /**
         * https://tc39.es/ecma262/#sec-tostring
         */

        function ToString(o) {
          // Only symbol is irregular...
          if (typeof o === 'symbol') {
            throw TypeError('Cannot convert a Symbol value to a string');
          }

          return String(o);
        }

        exports.ToString = ToString;
        /**
         * https://tc39.es/ecma262/#sec-tonumber
         * @param val
         */

        function ToNumber(val) {
          if (val === undefined) {
            return NaN;
          }

          if (val === null) {
            return +0;
          }

          if (typeof val === 'boolean') {
            return val ? 1 : +0;
          }

          if (typeof val === 'number') {
            return val;
          }

          if (typeof val === 'symbol' || typeof val === 'bigint') {
            throw new TypeError('Cannot convert symbol/bigint to number');
          }

          return Number(val);
        }

        exports.ToNumber = ToNumber;
        /**
         * https://tc39.es/ecma262/#sec-tointeger
         * @param n
         */

        function ToInteger(n) {
          var number = ToNumber(n);

          if (isNaN(number) || SameValue(number, -0)) {
            return 0;
          }

          if (isFinite(number)) {
            return number;
          }

          var integer = Math.floor(Math.abs(number));

          if (number < 0) {
            integer = -integer;
          }

          if (SameValue(integer, -0)) {
            return 0;
          }

          return integer;
        }
        /**
         * https://tc39.es/ecma262/#sec-timeclip
         * @param time
         */


        function TimeClip(time) {
          if (!isFinite(time)) {
            return NaN;
          }

          if (Math.abs(time) > 8.64 * 1e15) {
            return NaN;
          }

          return ToInteger(time);
        }

        exports.TimeClip = TimeClip;
        /**
         * https://tc39.es/ecma262/#sec-toobject
         * @param arg
         */

        function ToObject(arg) {
          if (arg == null) {
            throw new TypeError('undefined/null cannot be converted to object');
          }

          return Object(arg);
        }

        exports.ToObject = ToObject;
        /**
         * https://www.ecma-international.org/ecma-262/11.0/index.html#sec-samevalue
         * @param x
         * @param y
         */

        function SameValue(x, y) {
          if (Object.is) {
            return Object.is(x, y);
          } // SameValue algorithm


          if (x === y) {
            // Steps 1-5, 7-10
            // Steps 6.b-6.e: +0 != -0
            return x !== 0 || 1 / x === 1 / y;
          } // Step 6.a: NaN == NaN


          return x !== x && y !== y;
        }

        exports.SameValue = SameValue;
        /**
         * https://www.ecma-international.org/ecma-262/11.0/index.html#sec-arraycreate
         * @param len
         */

        function ArrayCreate(len) {
          return new Array(len);
        }

        exports.ArrayCreate = ArrayCreate;
        /**
         * https://www.ecma-international.org/ecma-262/11.0/index.html#sec-hasownproperty
         * @param o
         * @param prop
         */

        function HasOwnProperty(o, prop) {
          return Object.prototype.hasOwnProperty.call(o, prop);
        }

        exports.HasOwnProperty = HasOwnProperty;
        /**
         * https://www.ecma-international.org/ecma-262/11.0/index.html#sec-type
         * @param x
         */

        function Type(x) {
          if (x === null) {
            return 'Null';
          }

          if (typeof x === 'undefined') {
            return 'Undefined';
          }

          if (typeof x === 'function' || typeof x === 'object') {
            return 'Object';
          }

          if (typeof x === 'number') {
            return 'Number';
          }

          if (typeof x === 'boolean') {
            return 'Boolean';
          }

          if (typeof x === 'string') {
            return 'String';
          }

          if (typeof x === 'symbol') {
            return 'Symbol';
          }

          if (typeof x === 'bigint') {
            return 'BigInt';
          }
        }

        exports.Type = Type;
        var MS_PER_DAY = 86400000;
        /**
         * https://www.ecma-international.org/ecma-262/11.0/index.html#eqn-modulo
         * @param x
         * @param y
         * @return k of the same sign as y
         */

        function mod(x, y) {
          return x - Math.floor(x / y) * y;
        }
        /**
         * https://tc39.es/ecma262/#eqn-Day
         * @param t
         */


        function Day(t) {
          return Math.floor(t / MS_PER_DAY);
        }

        exports.Day = Day;
        /**
         * https://tc39.es/ecma262/#sec-week-day
         * @param t
         */

        function WeekDay(t) {
          return mod(Day(t) + 4, 7);
        }

        exports.WeekDay = WeekDay;
        /**
         * https://tc39.es/ecma262/#sec-year-number
         * @param y
         */

        function DayFromYear(y) {
          return Date.UTC(y, 0) / MS_PER_DAY;
        }

        exports.DayFromYear = DayFromYear;
        /**
         * https://tc39.es/ecma262/#sec-year-number
         * @param y
         */

        function TimeFromYear(y) {
          return Date.UTC(y, 0);
        }

        exports.TimeFromYear = TimeFromYear;
        /**
         * https://tc39.es/ecma262/#sec-year-number
         * @param t
         */

        function YearFromTime(t) {
          return new Date(t).getUTCFullYear();
        }

        exports.YearFromTime = YearFromTime;

        function DaysInYear(y) {
          if (y % 4 !== 0) {
            return 365;
          }

          if (y % 100 !== 0) {
            return 366;
          }

          if (y % 400 !== 0) {
            return 365;
          }

          return 366;
        }

        exports.DaysInYear = DaysInYear;

        function DayWithinYear(t) {
          return Day(t) - DayFromYear(YearFromTime(t));
        }

        exports.DayWithinYear = DayWithinYear;

        function InLeapYear(t) {
          return DaysInYear(YearFromTime(t)) === 365 ? 0 : 1;
        }

        exports.InLeapYear = InLeapYear;
        /**
         * https://tc39.es/ecma262/#sec-month-number
         * @param t
         */

        function MonthFromTime(t) {
          var dwy = DayWithinYear(t);
          var leap = InLeapYear(t);

          if (dwy >= 0 && dwy < 31) {
            return 0;
          }

          if (dwy < 59 + leap) {
            return 1;
          }

          if (dwy < 90 + leap) {
            return 2;
          }

          if (dwy < 120 + leap) {
            return 3;
          }

          if (dwy < 151 + leap) {
            return 4;
          }

          if (dwy < 181 + leap) {
            return 5;
          }

          if (dwy < 212 + leap) {
            return 6;
          }

          if (dwy < 243 + leap) {
            return 7;
          }

          if (dwy < 273 + leap) {
            return 8;
          }

          if (dwy < 304 + leap) {
            return 9;
          }

          if (dwy < 334 + leap) {
            return 10;
          }

          if (dwy < 365 + leap) {
            return 11;
          }

          throw new Error('Invalid time');
        }

        exports.MonthFromTime = MonthFromTime;

        function DateFromTime(t) {
          var dwy = DayWithinYear(t);
          var mft = MonthFromTime(t);
          var leap = InLeapYear(t);

          if (mft === 0) {
            return dwy + 1;
          }

          if (mft === 1) {
            return dwy - 30;
          }

          if (mft === 2) {
            return dwy - 58 - leap;
          }

          if (mft === 3) {
            return dwy - 89 - leap;
          }

          if (mft === 4) {
            return dwy - 119 - leap;
          }

          if (mft === 5) {
            return dwy - 150 - leap;
          }

          if (mft === 6) {
            return dwy - 180 - leap;
          }

          if (mft === 7) {
            return dwy - 211 - leap;
          }

          if (mft === 8) {
            return dwy - 242 - leap;
          }

          if (mft === 9) {
            return dwy - 272 - leap;
          }

          if (mft === 10) {
            return dwy - 303 - leap;
          }

          if (mft === 11) {
            return dwy - 333 - leap;
          }

          throw new Error('Invalid time');
        }

        exports.DateFromTime = DateFromTime;
        var HOURS_PER_DAY = 24;
        var MINUTES_PER_HOUR = 60;
        var SECONDS_PER_MINUTE = 60;
        var MS_PER_SECOND = 1e3;
        var MS_PER_MINUTE = MS_PER_SECOND * SECONDS_PER_MINUTE;
        var MS_PER_HOUR = MS_PER_MINUTE * MINUTES_PER_HOUR;

        function HourFromTime(t) {
          return mod(Math.floor(t / MS_PER_HOUR), HOURS_PER_DAY);
        }

        exports.HourFromTime = HourFromTime;

        function MinFromTime(t) {
          return mod(Math.floor(t / MS_PER_MINUTE), MINUTES_PER_HOUR);
        }

        exports.MinFromTime = MinFromTime;

        function SecFromTime(t) {
          return mod(Math.floor(t / MS_PER_SECOND), SECONDS_PER_MINUTE);
        }

        exports.SecFromTime = SecFromTime;

        function IsCallable(fn) {
          return typeof fn === 'function';
        }
        /**
         * The abstract operation OrdinaryHasInstance implements
         * the default algorithm for determining if an object O
         * inherits from the instance object inheritance path
         * provided by constructor C.
         * @param C class
         * @param O object
         * @param internalSlots internalSlots
         */


        function OrdinaryHasInstance(C, O, internalSlots) {
          if (!IsCallable(C)) {
            return false;
          }

          if (internalSlots === null || internalSlots === void 0 ? void 0 : internalSlots.boundTargetFunction) {
            var BC = internalSlots === null || internalSlots === void 0 ? void 0 : internalSlots.boundTargetFunction;
            return O instanceof BC;
          }

          if (typeof O !== 'object') {
            return false;
          }

          var P = C.prototype;

          if (typeof P !== 'object') {
            throw new TypeError('OrdinaryHasInstance called on an object with an invalid prototype property.');
          }

          return Object.prototype.isPrototypeOf.call(P, O);
        }

        exports.OrdinaryHasInstance = OrdinaryHasInstance;

        function msFromTime(t) {
          return mod(t, MS_PER_SECOND);
        }

        exports.msFromTime = msFromTime; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.msFromTime;
        module.exports.OrdinaryHasInstance;
        module.exports.SecFromTime;
        module.exports.MinFromTime;
        module.exports.HourFromTime;
        module.exports.DateFromTime;
        module.exports.MonthFromTime;
        module.exports.InLeapYear;
        module.exports.DayWithinYear;
        module.exports.DaysInYear;
        module.exports.YearFromTime;
        module.exports.TimeFromYear;
        module.exports.DayFromYear;
        module.exports.WeekDay;
        module.exports.Day;
        module.exports.Type;
        module.exports.HasOwnProperty;
        module.exports.ArrayCreate;
        module.exports.SameValue;
        module.exports.ToObject;
        module.exports.TimeClip;
        module.exports.ToNumber;
        module.exports.ToString;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/2625.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.msFromTime = exports.OrdinaryHasInstance = exports.SecFromTime = exports.MinFromTime = exports.HourFromTime = exports.DateFromTime = exports.MonthFromTime = exports.InLeapYear = exports.DayWithinYear = exports.DaysInYear = exports.YearFromTime = exports.TimeFromYear = exports.DayFromYear = exports.WeekDay = exports.Day = exports.Type = exports.HasOwnProperty = exports.ArrayCreate = exports.SameValue = exports.ToObject = exports.TimeClip = exports.ToNumber = exports.ToString = void 0;
        /**
         * https://tc39.es/ecma262/#sec-tostring
         */

        function ToString(o) {
          // Only symbol is irregular...
          if (typeof o === 'symbol') {
            throw TypeError('Cannot convert a Symbol value to a string');
          }

          return String(o);
        }

        exports.ToString = ToString;
        /**
         * https://tc39.es/ecma262/#sec-tonumber
         * @param val
         */

        function ToNumber(val) {
          if (val === undefined) {
            return NaN;
          }

          if (val === null) {
            return +0;
          }

          if (typeof val === 'boolean') {
            return val ? 1 : +0;
          }

          if (typeof val === 'number') {
            return val;
          }

          if (typeof val === 'symbol' || typeof val === 'bigint') {
            throw new TypeError('Cannot convert symbol/bigint to number');
          }

          return Number(val);
        }

        exports.ToNumber = ToNumber;
        /**
         * https://tc39.es/ecma262/#sec-tointeger
         * @param n
         */

        function ToInteger(n) {
          var number = ToNumber(n);

          if (isNaN(number) || SameValue(number, -0)) {
            return 0;
          }

          if (isFinite(number)) {
            return number;
          }

          var integer = Math.floor(Math.abs(number));

          if (number < 0) {
            integer = -integer;
          }

          if (SameValue(integer, -0)) {
            return 0;
          }

          return integer;
        }
        /**
         * https://tc39.es/ecma262/#sec-timeclip
         * @param time
         */


        function TimeClip(time) {
          if (!isFinite(time)) {
            return NaN;
          }

          if (Math.abs(time) > 8.64 * 1e15) {
            return NaN;
          }

          return ToInteger(time);
        }

        exports.TimeClip = TimeClip;
        /**
         * https://tc39.es/ecma262/#sec-toobject
         * @param arg
         */

        function ToObject(arg) {
          if (arg == null) {
            throw new TypeError('undefined/null cannot be converted to object');
          }

          return Object(arg);
        }

        exports.ToObject = ToObject;
        /**
         * https://www.ecma-international.org/ecma-262/11.0/index.html#sec-samevalue
         * @param x
         * @param y
         */

        function SameValue(x, y) {
          if (Object.is) {
            return Object.is(x, y);
          } // SameValue algorithm


          if (x === y) {
            // Steps 1-5, 7-10
            // Steps 6.b-6.e: +0 != -0
            return x !== 0 || 1 / x === 1 / y;
          } // Step 6.a: NaN == NaN


          return x !== x && y !== y;
        }

        exports.SameValue = SameValue;
        /**
         * https://www.ecma-international.org/ecma-262/11.0/index.html#sec-arraycreate
         * @param len
         */

        function ArrayCreate(len) {
          return new Array(len);
        }

        exports.ArrayCreate = ArrayCreate;
        /**
         * https://www.ecma-international.org/ecma-262/11.0/index.html#sec-hasownproperty
         * @param o
         * @param prop
         */

        function HasOwnProperty(o, prop) {
          return Object.prototype.hasOwnProperty.call(o, prop);
        }

        exports.HasOwnProperty = HasOwnProperty;
        /**
         * https://www.ecma-international.org/ecma-262/11.0/index.html#sec-type
         * @param x
         */

        function Type(x) {
          if (x === null) {
            return 'Null';
          }

          if (typeof x === 'undefined') {
            return 'Undefined';
          }

          if (typeof x === 'function' || typeof x === 'object') {
            return 'Object';
          }

          if (typeof x === 'number') {
            return 'Number';
          }

          if (typeof x === 'boolean') {
            return 'Boolean';
          }

          if (typeof x === 'string') {
            return 'String';
          }

          if (typeof x === 'symbol') {
            return 'Symbol';
          }

          if (typeof x === 'bigint') {
            return 'BigInt';
          }
        }

        exports.Type = Type;
        var MS_PER_DAY = 86400000;
        /**
         * https://www.ecma-international.org/ecma-262/11.0/index.html#eqn-modulo
         * @param x
         * @param y
         * @return k of the same sign as y
         */

        function mod(x, y) {
          return x - Math.floor(x / y) * y;
        }
        /**
         * https://tc39.es/ecma262/#eqn-Day
         * @param t
         */


        function Day(t) {
          return Math.floor(t / MS_PER_DAY);
        }

        exports.Day = Day;
        /**
         * https://tc39.es/ecma262/#sec-week-day
         * @param t
         */

        function WeekDay(t) {
          return mod(Day(t) + 4, 7);
        }

        exports.WeekDay = WeekDay;
        /**
         * https://tc39.es/ecma262/#sec-year-number
         * @param y
         */

        function DayFromYear(y) {
          return Date.UTC(y, 0) / MS_PER_DAY;
        }

        exports.DayFromYear = DayFromYear;
        /**
         * https://tc39.es/ecma262/#sec-year-number
         * @param y
         */

        function TimeFromYear(y) {
          return Date.UTC(y, 0);
        }

        exports.TimeFromYear = TimeFromYear;
        /**
         * https://tc39.es/ecma262/#sec-year-number
         * @param t
         */

        function YearFromTime(t) {
          return new Date(t).getUTCFullYear();
        }

        exports.YearFromTime = YearFromTime;

        function DaysInYear(y) {
          if (y % 4 !== 0) {
            return 365;
          }

          if (y % 100 !== 0) {
            return 366;
          }

          if (y % 400 !== 0) {
            return 365;
          }

          return 366;
        }

        exports.DaysInYear = DaysInYear;

        function DayWithinYear(t) {
          return Day(t) - DayFromYear(YearFromTime(t));
        }

        exports.DayWithinYear = DayWithinYear;

        function InLeapYear(t) {
          return DaysInYear(YearFromTime(t)) === 365 ? 0 : 1;
        }

        exports.InLeapYear = InLeapYear;
        /**
         * https://tc39.es/ecma262/#sec-month-number
         * @param t
         */

        function MonthFromTime(t) {
          var dwy = DayWithinYear(t);
          var leap = InLeapYear(t);

          if (dwy >= 0 && dwy < 31) {
            return 0;
          }

          if (dwy < 59 + leap) {
            return 1;
          }

          if (dwy < 90 + leap) {
            return 2;
          }

          if (dwy < 120 + leap) {
            return 3;
          }

          if (dwy < 151 + leap) {
            return 4;
          }

          if (dwy < 181 + leap) {
            return 5;
          }

          if (dwy < 212 + leap) {
            return 6;
          }

          if (dwy < 243 + leap) {
            return 7;
          }

          if (dwy < 273 + leap) {
            return 8;
          }

          if (dwy < 304 + leap) {
            return 9;
          }

          if (dwy < 334 + leap) {
            return 10;
          }

          if (dwy < 365 + leap) {
            return 11;
          }

          throw new Error('Invalid time');
        }

        exports.MonthFromTime = MonthFromTime;

        function DateFromTime(t) {
          var dwy = DayWithinYear(t);
          var mft = MonthFromTime(t);
          var leap = InLeapYear(t);

          if (mft === 0) {
            return dwy + 1;
          }

          if (mft === 1) {
            return dwy - 30;
          }

          if (mft === 2) {
            return dwy - 58 - leap;
          }

          if (mft === 3) {
            return dwy - 89 - leap;
          }

          if (mft === 4) {
            return dwy - 119 - leap;
          }

          if (mft === 5) {
            return dwy - 150 - leap;
          }

          if (mft === 6) {
            return dwy - 180 - leap;
          }

          if (mft === 7) {
            return dwy - 211 - leap;
          }

          if (mft === 8) {
            return dwy - 242 - leap;
          }

          if (mft === 9) {
            return dwy - 272 - leap;
          }

          if (mft === 10) {
            return dwy - 303 - leap;
          }

          if (mft === 11) {
            return dwy - 333 - leap;
          }

          throw new Error('Invalid time');
        }

        exports.DateFromTime = DateFromTime;
        var HOURS_PER_DAY = 24;
        var MINUTES_PER_HOUR = 60;
        var SECONDS_PER_MINUTE = 60;
        var MS_PER_SECOND = 1e3;
        var MS_PER_MINUTE = MS_PER_SECOND * SECONDS_PER_MINUTE;
        var MS_PER_HOUR = MS_PER_MINUTE * MINUTES_PER_HOUR;

        function HourFromTime(t) {
          return mod(Math.floor(t / MS_PER_HOUR), HOURS_PER_DAY);
        }

        exports.HourFromTime = HourFromTime;

        function MinFromTime(t) {
          return mod(Math.floor(t / MS_PER_MINUTE), MINUTES_PER_HOUR);
        }

        exports.MinFromTime = MinFromTime;

        function SecFromTime(t) {
          return mod(Math.floor(t / MS_PER_SECOND), SECONDS_PER_MINUTE);
        }

        exports.SecFromTime = SecFromTime;

        function IsCallable(fn) {
          return typeof fn === 'function';
        }
        /**
         * The abstract operation OrdinaryHasInstance implements
         * the default algorithm for determining if an object O
         * inherits from the instance object inheritance path
         * provided by constructor C.
         * @param C class
         * @param O object
         * @param internalSlots internalSlots
         */


        function OrdinaryHasInstance(C, O, internalSlots) {
          if (!IsCallable(C)) {
            return false;
          }

          if (internalSlots === null || internalSlots === void 0 ? void 0 : internalSlots.boundTargetFunction) {
            var BC = internalSlots === null || internalSlots === void 0 ? void 0 : internalSlots.boundTargetFunction;
            return O instanceof BC;
          }

          if (typeof O !== 'object') {
            return false;
          }

          var P = C.prototype;

          if (typeof P !== 'object') {
            throw new TypeError('OrdinaryHasInstance called on an object with an invalid prototype property.');
          }

          return Object.prototype.isPrototypeOf.call(P, O);
        }

        exports.OrdinaryHasInstance = OrdinaryHasInstance;

        function msFromTime(t) {
          return mod(t, MS_PER_SECOND);
        }

        exports.msFromTime = msFromTime; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.msFromTime;
        module.exports.OrdinaryHasInstance;
        module.exports.SecFromTime;
        module.exports.MinFromTime;
        module.exports.HourFromTime;
        module.exports.DateFromTime;
        module.exports.MonthFromTime;
        module.exports.InLeapYear;
        module.exports.DayWithinYear;
        module.exports.DaysInYear;
        module.exports.YearFromTime;
        module.exports.TimeFromYear;
        module.exports.DayFromYear;
        module.exports.WeekDay;
        module.exports.Day;
        module.exports.Type;
        module.exports.HasOwnProperty;
        module.exports.ArrayCreate;
        module.exports.SameValue;
        module.exports.ToObject;
        module.exports.TimeClip;
        module.exports.ToNumber;
        module.exports.ToString;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/2626.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.msFromTime = exports.OrdinaryHasInstance = exports.SecFromTime = exports.MinFromTime = exports.HourFromTime = exports.DateFromTime = exports.MonthFromTime = exports.InLeapYear = exports.DayWithinYear = exports.DaysInYear = exports.YearFromTime = exports.TimeFromYear = exports.DayFromYear = exports.WeekDay = exports.Day = exports.Type = exports.HasOwnProperty = exports.ArrayCreate = exports.SameValue = exports.ToObject = exports.TimeClip = exports.ToNumber = exports.ToString = void 0;
        /**
         * https://tc39.es/ecma262/#sec-tostring
         */

        function ToString(o) {
          // Only symbol is irregular...
          if (typeof o === 'symbol') {
            throw TypeError('Cannot convert a Symbol value to a string');
          }

          return String(o);
        }

        exports.ToString = ToString;
        /**
         * https://tc39.es/ecma262/#sec-tonumber
         * @param val
         */

        function ToNumber(val) {
          if (val === undefined) {
            return NaN;
          }

          if (val === null) {
            return +0;
          }

          if (typeof val === 'boolean') {
            return val ? 1 : +0;
          }

          if (typeof val === 'number') {
            return val;
          }

          if (typeof val === 'symbol' || typeof val === 'bigint') {
            throw new TypeError('Cannot convert symbol/bigint to number');
          }

          return Number(val);
        }

        exports.ToNumber = ToNumber;
        /**
         * https://tc39.es/ecma262/#sec-tointeger
         * @param n
         */

        function ToInteger(n) {
          var number = ToNumber(n);

          if (isNaN(number) || SameValue(number, -0)) {
            return 0;
          }

          if (isFinite(number)) {
            return number;
          }

          var integer = Math.floor(Math.abs(number));

          if (number < 0) {
            integer = -integer;
          }

          if (SameValue(integer, -0)) {
            return 0;
          }

          return integer;
        }
        /**
         * https://tc39.es/ecma262/#sec-timeclip
         * @param time
         */


        function TimeClip(time) {
          if (!isFinite(time)) {
            return NaN;
          }

          if (Math.abs(time) > 8.64 * 1e15) {
            return NaN;
          }

          return ToInteger(time);
        }

        exports.TimeClip = TimeClip;
        /**
         * https://tc39.es/ecma262/#sec-toobject
         * @param arg
         */

        function ToObject(arg) {
          if (arg == null) {
            throw new TypeError('undefined/null cannot be converted to object');
          }

          return Object(arg);
        }

        exports.ToObject = ToObject;
        /**
         * https://www.ecma-international.org/ecma-262/11.0/index.html#sec-samevalue
         * @param x
         * @param y
         */

        function SameValue(x, y) {
          if (Object.is) {
            return Object.is(x, y);
          } // SameValue algorithm


          if (x === y) {
            // Steps 1-5, 7-10
            // Steps 6.b-6.e: +0 != -0
            return x !== 0 || 1 / x === 1 / y;
          } // Step 6.a: NaN == NaN


          return x !== x && y !== y;
        }

        exports.SameValue = SameValue;
        /**
         * https://www.ecma-international.org/ecma-262/11.0/index.html#sec-arraycreate
         * @param len
         */

        function ArrayCreate(len) {
          return new Array(len);
        }

        exports.ArrayCreate = ArrayCreate;
        /**
         * https://www.ecma-international.org/ecma-262/11.0/index.html#sec-hasownproperty
         * @param o
         * @param prop
         */

        function HasOwnProperty(o, prop) {
          return Object.prototype.hasOwnProperty.call(o, prop);
        }

        exports.HasOwnProperty = HasOwnProperty;
        /**
         * https://www.ecma-international.org/ecma-262/11.0/index.html#sec-type
         * @param x
         */

        function Type(x) {
          if (x === null) {
            return 'Null';
          }

          if (typeof x === 'undefined') {
            return 'Undefined';
          }

          if (typeof x === 'function' || typeof x === 'object') {
            return 'Object';
          }

          if (typeof x === 'number') {
            return 'Number';
          }

          if (typeof x === 'boolean') {
            return 'Boolean';
          }

          if (typeof x === 'string') {
            return 'String';
          }

          if (typeof x === 'symbol') {
            return 'Symbol';
          }

          if (typeof x === 'bigint') {
            return 'BigInt';
          }
        }

        exports.Type = Type;
        var MS_PER_DAY = 86400000;
        /**
         * https://www.ecma-international.org/ecma-262/11.0/index.html#eqn-modulo
         * @param x
         * @param y
         * @return k of the same sign as y
         */

        function mod(x, y) {
          return x - Math.floor(x / y) * y;
        }
        /**
         * https://tc39.es/ecma262/#eqn-Day
         * @param t
         */


        function Day(t) {
          return Math.floor(t / MS_PER_DAY);
        }

        exports.Day = Day;
        /**
         * https://tc39.es/ecma262/#sec-week-day
         * @param t
         */

        function WeekDay(t) {
          return mod(Day(t) + 4, 7);
        }

        exports.WeekDay = WeekDay;
        /**
         * https://tc39.es/ecma262/#sec-year-number
         * @param y
         */

        function DayFromYear(y) {
          return Date.UTC(y, 0) / MS_PER_DAY;
        }

        exports.DayFromYear = DayFromYear;
        /**
         * https://tc39.es/ecma262/#sec-year-number
         * @param y
         */

        function TimeFromYear(y) {
          return Date.UTC(y, 0);
        }

        exports.TimeFromYear = TimeFromYear;
        /**
         * https://tc39.es/ecma262/#sec-year-number
         * @param t
         */

        function YearFromTime(t) {
          return new Date(t).getUTCFullYear();
        }

        exports.YearFromTime = YearFromTime;

        function DaysInYear(y) {
          if (y % 4 !== 0) {
            return 365;
          }

          if (y % 100 !== 0) {
            return 366;
          }

          if (y % 400 !== 0) {
            return 365;
          }

          return 366;
        }

        exports.DaysInYear = DaysInYear;

        function DayWithinYear(t) {
          return Day(t) - DayFromYear(YearFromTime(t));
        }

        exports.DayWithinYear = DayWithinYear;

        function InLeapYear(t) {
          return DaysInYear(YearFromTime(t)) === 365 ? 0 : 1;
        }

        exports.InLeapYear = InLeapYear;
        /**
         * https://tc39.es/ecma262/#sec-month-number
         * @param t
         */

        function MonthFromTime(t) {
          var dwy = DayWithinYear(t);
          var leap = InLeapYear(t);

          if (dwy >= 0 && dwy < 31) {
            return 0;
          }

          if (dwy < 59 + leap) {
            return 1;
          }

          if (dwy < 90 + leap) {
            return 2;
          }

          if (dwy < 120 + leap) {
            return 3;
          }

          if (dwy < 151 + leap) {
            return 4;
          }

          if (dwy < 181 + leap) {
            return 5;
          }

          if (dwy < 212 + leap) {
            return 6;
          }

          if (dwy < 243 + leap) {
            return 7;
          }

          if (dwy < 273 + leap) {
            return 8;
          }

          if (dwy < 304 + leap) {
            return 9;
          }

          if (dwy < 334 + leap) {
            return 10;
          }

          if (dwy < 365 + leap) {
            return 11;
          }

          throw new Error('Invalid time');
        }

        exports.MonthFromTime = MonthFromTime;

        function DateFromTime(t) {
          var dwy = DayWithinYear(t);
          var mft = MonthFromTime(t);
          var leap = InLeapYear(t);

          if (mft === 0) {
            return dwy + 1;
          }

          if (mft === 1) {
            return dwy - 30;
          }

          if (mft === 2) {
            return dwy - 58 - leap;
          }

          if (mft === 3) {
            return dwy - 89 - leap;
          }

          if (mft === 4) {
            return dwy - 119 - leap;
          }

          if (mft === 5) {
            return dwy - 150 - leap;
          }

          if (mft === 6) {
            return dwy - 180 - leap;
          }

          if (mft === 7) {
            return dwy - 211 - leap;
          }

          if (mft === 8) {
            return dwy - 242 - leap;
          }

          if (mft === 9) {
            return dwy - 272 - leap;
          }

          if (mft === 10) {
            return dwy - 303 - leap;
          }

          if (mft === 11) {
            return dwy - 333 - leap;
          }

          throw new Error('Invalid time');
        }

        exports.DateFromTime = DateFromTime;
        var HOURS_PER_DAY = 24;
        var MINUTES_PER_HOUR = 60;
        var SECONDS_PER_MINUTE = 60;
        var MS_PER_SECOND = 1e3;
        var MS_PER_MINUTE = MS_PER_SECOND * SECONDS_PER_MINUTE;
        var MS_PER_HOUR = MS_PER_MINUTE * MINUTES_PER_HOUR;

        function HourFromTime(t) {
          return mod(Math.floor(t / MS_PER_HOUR), HOURS_PER_DAY);
        }

        exports.HourFromTime = HourFromTime;

        function MinFromTime(t) {
          return mod(Math.floor(t / MS_PER_MINUTE), MINUTES_PER_HOUR);
        }

        exports.MinFromTime = MinFromTime;

        function SecFromTime(t) {
          return mod(Math.floor(t / MS_PER_SECOND), SECONDS_PER_MINUTE);
        }

        exports.SecFromTime = SecFromTime;

        function IsCallable(fn) {
          return typeof fn === 'function';
        }
        /**
         * The abstract operation OrdinaryHasInstance implements
         * the default algorithm for determining if an object O
         * inherits from the instance object inheritance path
         * provided by constructor C.
         * @param C class
         * @param O object
         * @param internalSlots internalSlots
         */


        function OrdinaryHasInstance(C, O, internalSlots) {
          if (!IsCallable(C)) {
            return false;
          }

          if (internalSlots === null || internalSlots === void 0 ? void 0 : internalSlots.boundTargetFunction) {
            var BC = internalSlots === null || internalSlots === void 0 ? void 0 : internalSlots.boundTargetFunction;
            return O instanceof BC;
          }

          if (typeof O !== 'object') {
            return false;
          }

          var P = C.prototype;

          if (typeof P !== 'object') {
            throw new TypeError('OrdinaryHasInstance called on an object with an invalid prototype property.');
          }

          return Object.prototype.isPrototypeOf.call(P, O);
        }

        exports.OrdinaryHasInstance = OrdinaryHasInstance;

        function msFromTime(t) {
          return mod(t, MS_PER_SECOND);
        }

        exports.msFromTime = msFromTime; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.msFromTime;
        module.exports.OrdinaryHasInstance;
        module.exports.SecFromTime;
        module.exports.MinFromTime;
        module.exports.HourFromTime;
        module.exports.DateFromTime;
        module.exports.MonthFromTime;
        module.exports.InLeapYear;
        module.exports.DayWithinYear;
        module.exports.DaysInYear;
        module.exports.YearFromTime;
        module.exports.TimeFromYear;
        module.exports.DayFromYear;
        module.exports.WeekDay;
        module.exports.Day;
        module.exports.Type;
        module.exports.HasOwnProperty;
        module.exports.ArrayCreate;
        module.exports.SameValue;
        module.exports.ToObject;
        module.exports.TimeClip;
        module.exports.ToNumber;
        module.exports.ToString;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/2627.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.msFromTime = exports.OrdinaryHasInstance = exports.SecFromTime = exports.MinFromTime = exports.HourFromTime = exports.DateFromTime = exports.MonthFromTime = exports.InLeapYear = exports.DayWithinYear = exports.DaysInYear = exports.YearFromTime = exports.TimeFromYear = exports.DayFromYear = exports.WeekDay = exports.Day = exports.Type = exports.HasOwnProperty = exports.ArrayCreate = exports.SameValue = exports.ToObject = exports.TimeClip = exports.ToNumber = exports.ToString = void 0;
        /**
         * https://tc39.es/ecma262/#sec-tostring
         */

        function ToString(o) {
          // Only symbol is irregular...
          if (typeof o === 'symbol') {
            throw TypeError('Cannot convert a Symbol value to a string');
          }

          return String(o);
        }

        exports.ToString = ToString;
        /**
         * https://tc39.es/ecma262/#sec-tonumber
         * @param val
         */

        function ToNumber(val) {
          if (val === undefined) {
            return NaN;
          }

          if (val === null) {
            return +0;
          }

          if (typeof val === 'boolean') {
            return val ? 1 : +0;
          }

          if (typeof val === 'number') {
            return val;
          }

          if (typeof val === 'symbol' || typeof val === 'bigint') {
            throw new TypeError('Cannot convert symbol/bigint to number');
          }

          return Number(val);
        }

        exports.ToNumber = ToNumber;
        /**
         * https://tc39.es/ecma262/#sec-tointeger
         * @param n
         */

        function ToInteger(n) {
          var number = ToNumber(n);

          if (isNaN(number) || SameValue(number, -0)) {
            return 0;
          }

          if (isFinite(number)) {
            return number;
          }

          var integer = Math.floor(Math.abs(number));

          if (number < 0) {
            integer = -integer;
          }

          if (SameValue(integer, -0)) {
            return 0;
          }

          return integer;
        }
        /**
         * https://tc39.es/ecma262/#sec-timeclip
         * @param time
         */


        function TimeClip(time) {
          if (!isFinite(time)) {
            return NaN;
          }

          if (Math.abs(time) > 8.64 * 1e15) {
            return NaN;
          }

          return ToInteger(time);
        }

        exports.TimeClip = TimeClip;
        /**
         * https://tc39.es/ecma262/#sec-toobject
         * @param arg
         */

        function ToObject(arg) {
          if (arg == null) {
            throw new TypeError('undefined/null cannot be converted to object');
          }

          return Object(arg);
        }

        exports.ToObject = ToObject;
        /**
         * https://www.ecma-international.org/ecma-262/11.0/index.html#sec-samevalue
         * @param x
         * @param y
         */

        function SameValue(x, y) {
          if (Object.is) {
            return Object.is(x, y);
          } // SameValue algorithm


          if (x === y) {
            // Steps 1-5, 7-10
            // Steps 6.b-6.e: +0 != -0
            return x !== 0 || 1 / x === 1 / y;
          } // Step 6.a: NaN == NaN


          return x !== x && y !== y;
        }

        exports.SameValue = SameValue;
        /**
         * https://www.ecma-international.org/ecma-262/11.0/index.html#sec-arraycreate
         * @param len
         */

        function ArrayCreate(len) {
          return new Array(len);
        }

        exports.ArrayCreate = ArrayCreate;
        /**
         * https://www.ecma-international.org/ecma-262/11.0/index.html#sec-hasownproperty
         * @param o
         * @param prop
         */

        function HasOwnProperty(o, prop) {
          return Object.prototype.hasOwnProperty.call(o, prop);
        }

        exports.HasOwnProperty = HasOwnProperty;
        /**
         * https://www.ecma-international.org/ecma-262/11.0/index.html#sec-type
         * @param x
         */

        function Type(x) {
          if (x === null) {
            return 'Null';
          }

          if (typeof x === 'undefined') {
            return 'Undefined';
          }

          if (typeof x === 'function' || typeof x === 'object') {
            return 'Object';
          }

          if (typeof x === 'number') {
            return 'Number';
          }

          if (typeof x === 'boolean') {
            return 'Boolean';
          }

          if (typeof x === 'string') {
            return 'String';
          }

          if (typeof x === 'symbol') {
            return 'Symbol';
          }

          if (typeof x === 'bigint') {
            return 'BigInt';
          }
        }

        exports.Type = Type;
        var MS_PER_DAY = 86400000;
        /**
         * https://www.ecma-international.org/ecma-262/11.0/index.html#eqn-modulo
         * @param x
         * @param y
         * @return k of the same sign as y
         */

        function mod(x, y) {
          return x - Math.floor(x / y) * y;
        }
        /**
         * https://tc39.es/ecma262/#eqn-Day
         * @param t
         */


        function Day(t) {
          return Math.floor(t / MS_PER_DAY);
        }

        exports.Day = Day;
        /**
         * https://tc39.es/ecma262/#sec-week-day
         * @param t
         */

        function WeekDay(t) {
          return mod(Day(t) + 4, 7);
        }

        exports.WeekDay = WeekDay;
        /**
         * https://tc39.es/ecma262/#sec-year-number
         * @param y
         */

        function DayFromYear(y) {
          return Date.UTC(y, 0) / MS_PER_DAY;
        }

        exports.DayFromYear = DayFromYear;
        /**
         * https://tc39.es/ecma262/#sec-year-number
         * @param y
         */

        function TimeFromYear(y) {
          return Date.UTC(y, 0);
        }

        exports.TimeFromYear = TimeFromYear;
        /**
         * https://tc39.es/ecma262/#sec-year-number
         * @param t
         */

        function YearFromTime(t) {
          return new Date(t).getUTCFullYear();
        }

        exports.YearFromTime = YearFromTime;

        function DaysInYear(y) {
          if (y % 4 !== 0) {
            return 365;
          }

          if (y % 100 !== 0) {
            return 366;
          }

          if (y % 400 !== 0) {
            return 365;
          }

          return 366;
        }

        exports.DaysInYear = DaysInYear;

        function DayWithinYear(t) {
          return Day(t) - DayFromYear(YearFromTime(t));
        }

        exports.DayWithinYear = DayWithinYear;

        function InLeapYear(t) {
          return DaysInYear(YearFromTime(t)) === 365 ? 0 : 1;
        }

        exports.InLeapYear = InLeapYear;
        /**
         * https://tc39.es/ecma262/#sec-month-number
         * @param t
         */

        function MonthFromTime(t) {
          var dwy = DayWithinYear(t);
          var leap = InLeapYear(t);

          if (dwy >= 0 && dwy < 31) {
            return 0;
          }

          if (dwy < 59 + leap) {
            return 1;
          }

          if (dwy < 90 + leap) {
            return 2;
          }

          if (dwy < 120 + leap) {
            return 3;
          }

          if (dwy < 151 + leap) {
            return 4;
          }

          if (dwy < 181 + leap) {
            return 5;
          }

          if (dwy < 212 + leap) {
            return 6;
          }

          if (dwy < 243 + leap) {
            return 7;
          }

          if (dwy < 273 + leap) {
            return 8;
          }

          if (dwy < 304 + leap) {
            return 9;
          }

          if (dwy < 334 + leap) {
            return 10;
          }

          if (dwy < 365 + leap) {
            return 11;
          }

          throw new Error('Invalid time');
        }

        exports.MonthFromTime = MonthFromTime;

        function DateFromTime(t) {
          var dwy = DayWithinYear(t);
          var mft = MonthFromTime(t);
          var leap = InLeapYear(t);

          if (mft === 0) {
            return dwy + 1;
          }

          if (mft === 1) {
            return dwy - 30;
          }

          if (mft === 2) {
            return dwy - 58 - leap;
          }

          if (mft === 3) {
            return dwy - 89 - leap;
          }

          if (mft === 4) {
            return dwy - 119 - leap;
          }

          if (mft === 5) {
            return dwy - 150 - leap;
          }

          if (mft === 6) {
            return dwy - 180 - leap;
          }

          if (mft === 7) {
            return dwy - 211 - leap;
          }

          if (mft === 8) {
            return dwy - 242 - leap;
          }

          if (mft === 9) {
            return dwy - 272 - leap;
          }

          if (mft === 10) {
            return dwy - 303 - leap;
          }

          if (mft === 11) {
            return dwy - 333 - leap;
          }

          throw new Error('Invalid time');
        }

        exports.DateFromTime = DateFromTime;
        var HOURS_PER_DAY = 24;
        var MINUTES_PER_HOUR = 60;
        var SECONDS_PER_MINUTE = 60;
        var MS_PER_SECOND = 1e3;
        var MS_PER_MINUTE = MS_PER_SECOND * SECONDS_PER_MINUTE;
        var MS_PER_HOUR = MS_PER_MINUTE * MINUTES_PER_HOUR;

        function HourFromTime(t) {
          return mod(Math.floor(t / MS_PER_HOUR), HOURS_PER_DAY);
        }

        exports.HourFromTime = HourFromTime;

        function MinFromTime(t) {
          return mod(Math.floor(t / MS_PER_MINUTE), MINUTES_PER_HOUR);
        }

        exports.MinFromTime = MinFromTime;

        function SecFromTime(t) {
          return mod(Math.floor(t / MS_PER_SECOND), SECONDS_PER_MINUTE);
        }

        exports.SecFromTime = SecFromTime;

        function IsCallable(fn) {
          return typeof fn === 'function';
        }
        /**
         * The abstract operation OrdinaryHasInstance implements
         * the default algorithm for determining if an object O
         * inherits from the instance object inheritance path
         * provided by constructor C.
         * @param C class
         * @param O object
         * @param internalSlots internalSlots
         */


        function OrdinaryHasInstance(C, O, internalSlots) {
          if (!IsCallable(C)) {
            return false;
          }

          if (internalSlots === null || internalSlots === void 0 ? void 0 : internalSlots.boundTargetFunction) {
            var BC = internalSlots === null || internalSlots === void 0 ? void 0 : internalSlots.boundTargetFunction;
            return O instanceof BC;
          }

          if (typeof O !== 'object') {
            return false;
          }

          var P = C.prototype;

          if (typeof P !== 'object') {
            throw new TypeError('OrdinaryHasInstance called on an object with an invalid prototype property.');
          }

          return Object.prototype.isPrototypeOf.call(P, O);
        }

        exports.OrdinaryHasInstance = OrdinaryHasInstance;

        function msFromTime(t) {
          return mod(t, MS_PER_SECOND);
        }

        exports.msFromTime = msFromTime; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.msFromTime;
        module.exports.OrdinaryHasInstance;
        module.exports.SecFromTime;
        module.exports.MinFromTime;
        module.exports.HourFromTime;
        module.exports.DateFromTime;
        module.exports.MonthFromTime;
        module.exports.InLeapYear;
        module.exports.DayWithinYear;
        module.exports.DaysInYear;
        module.exports.YearFromTime;
        module.exports.TimeFromYear;
        module.exports.DayFromYear;
        module.exports.WeekDay;
        module.exports.Day;
        module.exports.Type;
        module.exports.HasOwnProperty;
        module.exports.ArrayCreate;
        module.exports.SameValue;
        module.exports.ToObject;
        module.exports.TimeClip;
        module.exports.ToNumber;
        module.exports.ToString;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/aliases.generated.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.variantAlias = exports.scriptAlias = exports.territoryAlias = exports.languageAlias = void 0;
        /* @generated */
        // prettier-ignore  

        exports.languageAlias = {
          "aa-saaho": "ssy",
          "aam": "aas",
          "aar": "aa",
          "abk": "ab",
          "adp": "dz",
          "afr": "af",
          "agp": "apf",
          "ais": "ami",
          "aju": "jrb",
          "aka": "ak",
          "alb": "sq",
          "als": "sq",
          "amh": "am",
          "ara": "ar",
          "arb": "ar",
          "arg": "an",
          "arm": "hy",
          "art-lojban": "jbo",
          "asd": "snz",
          "asm": "as",
          "aue": "ktz",
          "ava": "av",
          "ave": "ae",
          "aym": "ay",
          "ayr": "ay",
          "ayx": "nun",
          "aze": "az",
          "azj": "az",
          "bak": "ba",
          "bam": "bm",
          "baq": "eu",
          "baz": "nvo",
          "bcc": "bal",
          "bcl": "bik",
          "bel": "be",
          "ben": "bn",
          "bgm": "bcg",
          "bh": "bho",
          "bhk": "fbl",
          "bic": "bir",
          "bih": "bho",
          "bis": "bi",
          "bjd": "drl",
          "bjq": "bzc",
          "bkb": "ebk",
          "blg": "iba",
          "bod": "bo",
          "bos": "bs",
          "bre": "br",
          "btb": "beb",
          "bul": "bg",
          "bur": "my",
          "bxk": "luy",
          "bxr": "bua",
          "cat": "ca",
          "ccq": "rki",
          "cel-gaulish": "xtg",
          "ces": "cs",
          "cha": "ch",
          "che": "ce",
          "chi": "zh",
          "chu": "cu",
          "chv": "cv",
          "cjr": "mom",
          "cka": "cmr",
          "cld": "syr",
          "cmk": "xch",
          "cmn": "zh",
          "cnr": "sr-ME",
          "cor": "kw",
          "cos": "co",
          "coy": "pij",
          "cqu": "quh",
          "cre": "cr",
          "cwd": "cr",
          "cym": "cy",
          "cze": "cs",
          "daf": "dnj",
          "dan": "da",
          "dap": "njz",
          "deu": "de",
          "dgo": "doi",
          "dhd": "mwr",
          "dik": "din",
          "diq": "zza",
          "dit": "dif",
          "div": "dv",
          "djl": "dze",
          "dkl": "aqd",
          "drh": "mn",
          "drr": "kzk",
          "drw": "fa-AF",
          "dud": "uth",
          "duj": "dwu",
          "dut": "nl",
          "dwl": "dbt",
          "dzo": "dz",
          "ekk": "et",
          "ell": "el",
          "elp": "amq",
          "emk": "man",
          "en-GB-oed": "en-GB-oxendict",
          "eng": "en",
          "epo": "eo",
          "esk": "ik",
          "est": "et",
          "eus": "eu",
          "ewe": "ee",
          "fao": "fo",
          "fas": "fa",
          "fat": "ak",
          "fij": "fj",
          "fin": "fi",
          "fra": "fr",
          "fre": "fr",
          "fry": "fy",
          "fuc": "ff",
          "ful": "ff",
          "gav": "dev",
          "gaz": "om",
          "gbc": "wny",
          "gbo": "grb",
          "geo": "ka",
          "ger": "de",
          "gfx": "vaj",
          "ggn": "gvr",
          "ggo": "esg",
          "ggr": "gtu",
          "gio": "aou",
          "gla": "gd",
          "gle": "ga",
          "glg": "gl",
          "gli": "kzk",
          "glv": "gv",
          "gno": "gon",
          "gre": "el",
          "grn": "gn",
          "gti": "nyc",
          "gug": "gn",
          "guj": "gu",
          "guv": "duz",
          "gya": "gba",
          "hat": "ht",
          "hau": "ha",
          "hbs": "sr-Latn",
          "hdn": "hai",
          "hea": "hmn",
          "heb": "he",
          "her": "hz",
          "him": "srx",
          "hin": "hi",
          "hmo": "ho",
          "hrr": "jal",
          "hrv": "hr",
          "hun": "hu",
          "hy-arevmda": "hyw",
          "hye": "hy",
          "i-ami": "ami",
          "i-bnn": "bnn",
          "i-default": "en-x-i-default",
          "i-enochian": "und-x-i-enochian",
          "i-hak": "hak",
          "i-klingon": "tlh",
          "i-lux": "lb",
          "i-mingo": "see-x-i-mingo",
          "i-navajo": "nv",
          "i-pwn": "pwn",
          "i-tao": "tao",
          "i-tay": "tay",
          "i-tsu": "tsu",
          "ibi": "opa",
          "ibo": "ig",
          "ice": "is",
          "ido": "io",
          "iii": "ii",
          "ike": "iu",
          "iku": "iu",
          "ile": "ie",
          "ill": "ilm",
          "ilw": "gal",
          "in": "id",
          "ina": "ia",
          "ind": "id",
          "ipk": "ik",
          "isl": "is",
          "ita": "it",
          "iw": "he",
          "izi": "eza",
          "jar": "jgk",
          "jav": "jv",
          "jeg": "oyb",
          "ji": "yi",
          "jpn": "ja",
          "jw": "jv",
          "kal": "kl",
          "kan": "kn",
          "kas": "ks",
          "kat": "ka",
          "kau": "kr",
          "kaz": "kk",
          "kdv": "zkd",
          "kgc": "tdf",
          "kgd": "ncq",
          "kgh": "kml",
          "khk": "mn",
          "khm": "km",
          "kik": "ki",
          "kin": "rw",
          "kir": "ky",
          "kmr": "ku",
          "knc": "kr",
          "kng": "kg",
          "knn": "kok",
          "koj": "kwv",
          "kom": "kv",
          "kon": "kg",
          "kor": "ko",
          "kpp": "jkm",
          "kpv": "kv",
          "krm": "bmf",
          "ktr": "dtp",
          "kua": "kj",
          "kur": "ku",
          "kvs": "gdj",
          "kwq": "yam",
          "kxe": "tvd",
          "kxl": "kru",
          "kzh": "dgl",
          "kzj": "dtp",
          "kzt": "dtp",
          "lao": "lo",
          "lat": "la",
          "lav": "lv",
          "lbk": "bnc",
          "leg": "enl",
          "lii": "raq",
          "lim": "li",
          "lin": "ln",
          "lit": "lt",
          "llo": "ngt",
          "lmm": "rmx",
          "ltz": "lb",
          "lub": "lu",
          "lug": "lg",
          "lvs": "lv",
          "mac": "mk",
          "mah": "mh",
          "mal": "ml",
          "mao": "mi",
          "mar": "mr",
          "may": "ms",
          "meg": "cir",
          "mgx": "jbk",
          "mhr": "chm",
          "mkd": "mk",
          "mlg": "mg",
          "mlt": "mt",
          "mnk": "man",
          "mnt": "wnn",
          "mo": "ro",
          "mof": "xnt",
          "mol": "ro",
          "mon": "mn",
          "mri": "mi",
          "msa": "ms",
          "mst": "mry",
          "mup": "raj",
          "mwd": "dmw",
          "mwj": "vaj",
          "mya": "my",
          "myd": "aog",
          "myt": "mry",
          "nad": "xny",
          "nau": "na",
          "nav": "nv",
          "nbf": "nru",
          "nbl": "nr",
          "nbx": "ekc",
          "ncp": "kdz",
          "nde": "nd",
          "ndo": "ng",
          "nep": "ne",
          "nld": "nl",
          "nln": "azd",
          "nlr": "nrk",
          "nno": "nn",
          "nns": "nbr",
          "nnx": "ngv",
          "no-bok": "nb",
          "no-bokmal": "nb",
          "no-nyn": "nn",
          "no-nynorsk": "nn",
          "nob": "nb",
          "noo": "dtd",
          "nor": "no",
          "npi": "ne",
          "nts": "pij",
          "nxu": "bpp",
          "nya": "ny",
          "oci": "oc",
          "ojg": "oj",
          "oji": "oj",
          "ori": "or",
          "orm": "om",
          "ory": "or",
          "oss": "os",
          "oun": "vaj",
          "pan": "pa",
          "pat": "kxr",
          "pbu": "ps",
          "pcr": "adx",
          "per": "fa",
          "pes": "fa",
          "pli": "pi",
          "plt": "mg",
          "pmc": "huw",
          "pmu": "phr",
          "pnb": "lah",
          "pol": "pl",
          "por": "pt",
          "ppa": "bfy",
          "ppr": "lcq",
          "prs": "fa-AF",
          "pry": "prt",
          "pus": "ps",
          "puz": "pub",
          "que": "qu",
          "quz": "qu",
          "rmr": "emx",
          "rmy": "rom",
          "roh": "rm",
          "ron": "ro",
          "rum": "ro",
          "run": "rn",
          "rus": "ru",
          "sag": "sg",
          "san": "sa",
          "sap": "aqt",
          "sca": "hle",
          "scc": "sr",
          "scr": "hr",
          "sgl": "isk",
          "sgn-BE-FR": "sfb",
          "sgn-BE-NL": "vgt",
          "sgn-BR": "bzs",
          "sgn-CH-DE": "sgg",
          "sgn-CO": "csn",
          "sgn-DE": "gsg",
          "sgn-DK": "dsl",
          "sgn-ES": "ssp",
          "sgn-FR": "fsl",
          "sgn-GB": "bfi",
          "sgn-GR": "gss",
          "sgn-IE": "isg",
          "sgn-IT": "ise",
          "sgn-JP": "jsl",
          "sgn-MX": "mfs",
          "sgn-NI": "ncs",
          "sgn-NL": "dse",
          "sgn-NO": "nsi",
          "sgn-PT": "psr",
          "sgn-SE": "swl",
          "sgn-US": "ase",
          "sgn-ZA": "sfs",
          "sh": "sr-Latn",
          "sin": "si",
          "skk": "oyb",
          "slk": "sk",
          "slo": "sk",
          "slv": "sl",
          "sme": "se",
          "smo": "sm",
          "sna": "sn",
          "snd": "sd",
          "som": "so",
          "sot": "st",
          "spa": "es",
          "spy": "kln",
          "sqi": "sq",
          "src": "sc",
          "srd": "sc",
          "srp": "sr",
          "ssw": "ss",
          "sul": "sgd",
          "sum": "ulw",
          "sun": "su",
          "swa": "sw",
          "swc": "sw-CD",
          "swe": "sv",
          "swh": "sw",
          "tah": "ty",
          "tam": "ta",
          "tat": "tt",
          "tdu": "dtp",
          "tel": "te",
          "tgg": "bjp",
          "tgk": "tg",
          "tgl": "fil",
          "tha": "th",
          "thc": "tpo",
          "thw": "ola",
          "thx": "oyb",
          "tib": "bo",
          "tid": "itd",
          "tie": "ras",
          "tir": "ti",
          "tkk": "twm",
          "tl": "fil",
          "tlw": "weo",
          "tmp": "tyj",
          "tne": "kak",
          "tnf": "fa-AF",
          "ton": "to",
          "tsf": "taj",
          "tsn": "tn",
          "tso": "ts",
          "ttq": "tmh",
          "tuk": "tk",
          "tur": "tr",
          "tw": "ak",
          "twi": "ak",
          "uig": "ug",
          "ukr": "uk",
          "umu": "del",
          "und-aaland": "und-AX",
          "und-arevela": "und",
          "und-arevmda": "und",
          "und-bokmal": "und",
          "und-hakka": "und",
          "und-hepburn-heploc": "und-alalc97",
          "und-lojban": "und",
          "und-nynorsk": "und",
          "und-saaho": "und",
          "und-xiang": "und",
          "unp": "wro",
          "uok": "ema",
          "urd": "ur",
          "uzb": "uz",
          "uzn": "uz",
          "ven": "ve",
          "vie": "vi",
          "vol": "vo",
          "wel": "cy",
          "wgw": "wgb",
          "wit": "nol",
          "wiw": "nwo",
          "wln": "wa",
          "wol": "wo",
          "xba": "cax",
          "xho": "xh",
          "xia": "acn",
          "xkh": "waw",
          "xpe": "kpe",
          "xrq": "dmw",
          "xsj": "suj",
          "xsl": "den",
          "ybd": "rki",
          "ydd": "yi",
          "yen": "ynq",
          "yid": "yi",
          "yiy": "yrm",
          "yma": "lrr",
          "ymt": "mtm",
          "yor": "yo",
          "yos": "zom",
          "yuu": "yug",
          "zai": "zap",
          "zh-cmn": "zh",
          "zh-cmn-Hans": "zh-Hans",
          "zh-cmn-Hant": "zh-Hant",
          "zh-gan": "gan",
          "zh-guoyu": "zh",
          "zh-hakka": "hak",
          "zh-min": "nan-x-zh-min",
          "zh-min-nan": "nan",
          "zh-wuu": "wuu",
          "zh-xiang": "hsn",
          "zh-yue": "yue",
          "zha": "za",
          "zho": "zh",
          "zir": "scv",
          "zsm": "ms",
          "zul": "zu",
          "zyb": "za"
        };
        exports.territoryAlias = {
          "100": "BG",
          "104": "MM",
          "108": "BI",
          "112": "BY",
          "116": "KH",
          "120": "CM",
          "124": "CA",
          "132": "CV",
          "136": "KY",
          "140": "CF",
          "144": "LK",
          "148": "TD",
          "152": "CL",
          "156": "CN",
          "158": "TW",
          "162": "CX",
          "166": "CC",
          "170": "CO",
          "172": "RU AM AZ BY GE KG KZ MD TJ TM UA UZ",
          "174": "KM",
          "175": "YT",
          "178": "CG",
          "180": "CD",
          "184": "CK",
          "188": "CR",
          "191": "HR",
          "192": "CU",
          "196": "CY",
          "200": "CZ SK",
          "203": "CZ",
          "204": "BJ",
          "208": "DK",
          "212": "DM",
          "214": "DO",
          "218": "EC",
          "222": "SV",
          "226": "GQ",
          "230": "ET",
          "231": "ET",
          "232": "ER",
          "233": "EE",
          "234": "FO",
          "238": "FK",
          "239": "GS",
          "242": "FJ",
          "246": "FI",
          "248": "AX",
          "249": "FR",
          "250": "FR",
          "254": "GF",
          "258": "PF",
          "260": "TF",
          "262": "DJ",
          "266": "GA",
          "268": "GE",
          "270": "GM",
          "275": "PS",
          "276": "DE",
          "278": "DE",
          "280": "DE",
          "288": "GH",
          "292": "GI",
          "296": "KI",
          "300": "GR",
          "304": "GL",
          "308": "GD",
          "312": "GP",
          "316": "GU",
          "320": "GT",
          "324": "GN",
          "328": "GY",
          "332": "HT",
          "334": "HM",
          "336": "VA",
          "340": "HN",
          "344": "HK",
          "348": "HU",
          "352": "IS",
          "356": "IN",
          "360": "ID",
          "364": "IR",
          "368": "IQ",
          "372": "IE",
          "376": "IL",
          "380": "IT",
          "384": "CI",
          "388": "JM",
          "392": "JP",
          "398": "KZ",
          "400": "JO",
          "404": "KE",
          "408": "KP",
          "410": "KR",
          "414": "KW",
          "417": "KG",
          "418": "LA",
          "422": "LB",
          "426": "LS",
          "428": "LV",
          "430": "LR",
          "434": "LY",
          "438": "LI",
          "440": "LT",
          "442": "LU",
          "446": "MO",
          "450": "MG",
          "454": "MW",
          "458": "MY",
          "462": "MV",
          "466": "ML",
          "470": "MT",
          "474": "MQ",
          "478": "MR",
          "480": "MU",
          "484": "MX",
          "492": "MC",
          "496": "MN",
          "498": "MD",
          "499": "ME",
          "500": "MS",
          "504": "MA",
          "508": "MZ",
          "512": "OM",
          "516": "NA",
          "520": "NR",
          "524": "NP",
          "528": "NL",
          "530": "CW SX BQ",
          "531": "CW",
          "532": "CW SX BQ",
          "533": "AW",
          "534": "SX",
          "535": "BQ",
          "536": "SA IQ",
          "540": "NC",
          "548": "VU",
          "554": "NZ",
          "558": "NI",
          "562": "NE",
          "566": "NG",
          "570": "NU",
          "574": "NF",
          "578": "NO",
          "580": "MP",
          "581": "UM",
          "582": "FM MH MP PW",
          "583": "FM",
          "584": "MH",
          "585": "PW",
          "586": "PK",
          "591": "PA",
          "598": "PG",
          "600": "PY",
          "604": "PE",
          "608": "PH",
          "612": "PN",
          "616": "PL",
          "620": "PT",
          "624": "GW",
          "626": "TL",
          "630": "PR",
          "634": "QA",
          "638": "RE",
          "642": "RO",
          "643": "RU",
          "646": "RW",
          "652": "BL",
          "654": "SH",
          "659": "KN",
          "660": "AI",
          "662": "LC",
          "663": "MF",
          "666": "PM",
          "670": "VC",
          "674": "SM",
          "678": "ST",
          "682": "SA",
          "686": "SN",
          "688": "RS",
          "690": "SC",
          "694": "SL",
          "702": "SG",
          "703": "SK",
          "704": "VN",
          "705": "SI",
          "706": "SO",
          "710": "ZA",
          "716": "ZW",
          "720": "YE",
          "724": "ES",
          "728": "SS",
          "729": "SD",
          "732": "EH",
          "736": "SD",
          "740": "SR",
          "744": "SJ",
          "748": "SZ",
          "752": "SE",
          "756": "CH",
          "760": "SY",
          "762": "TJ",
          "764": "TH",
          "768": "TG",
          "772": "TK",
          "776": "TO",
          "780": "TT",
          "784": "AE",
          "788": "TN",
          "792": "TR",
          "795": "TM",
          "796": "TC",
          "798": "TV",
          "800": "UG",
          "804": "UA",
          "807": "MK",
          "810": "RU AM AZ BY EE GE KZ KG LV LT MD TJ TM UA UZ",
          "818": "EG",
          "826": "GB",
          "830": "JE GG",
          "831": "GG",
          "832": "JE",
          "833": "IM",
          "834": "TZ",
          "840": "US",
          "850": "VI",
          "854": "BF",
          "858": "UY",
          "860": "UZ",
          "862": "VE",
          "876": "WF",
          "882": "WS",
          "886": "YE",
          "887": "YE",
          "890": "RS ME SI HR MK BA",
          "891": "RS ME",
          "894": "ZM",
          "958": "AA",
          "959": "QM",
          "960": "QN",
          "962": "QP",
          "963": "QQ",
          "964": "QR",
          "965": "QS",
          "966": "QT",
          "967": "EU",
          "968": "QV",
          "969": "QW",
          "970": "QX",
          "971": "QY",
          "972": "QZ",
          "973": "XA",
          "974": "XB",
          "975": "XC",
          "976": "XD",
          "977": "XE",
          "978": "XF",
          "979": "XG",
          "980": "XH",
          "981": "XI",
          "982": "XJ",
          "983": "XK",
          "984": "XL",
          "985": "XM",
          "986": "XN",
          "987": "XO",
          "988": "XP",
          "989": "XQ",
          "990": "XR",
          "991": "XS",
          "992": "XT",
          "993": "XU",
          "994": "XV",
          "995": "XW",
          "996": "XX",
          "997": "XY",
          "998": "XZ",
          "999": "ZZ",
          "004": "AF",
          "008": "AL",
          "010": "AQ",
          "012": "DZ",
          "016": "AS",
          "020": "AD",
          "024": "AO",
          "028": "AG",
          "031": "AZ",
          "032": "AR",
          "036": "AU",
          "040": "AT",
          "044": "BS",
          "048": "BH",
          "050": "BD",
          "051": "AM",
          "052": "BB",
          "056": "BE",
          "060": "BM",
          "062": "034 143",
          "064": "BT",
          "068": "BO",
          "070": "BA",
          "072": "BW",
          "074": "BV",
          "076": "BR",
          "084": "BZ",
          "086": "IO",
          "090": "SB",
          "092": "VG",
          "096": "BN",
          "AAA": "AA",
          "ABW": "AW",
          "AFG": "AF",
          "AGO": "AO",
          "AIA": "AI",
          "ALA": "AX",
          "ALB": "AL",
          "AN": "CW SX BQ",
          "AND": "AD",
          "ANT": "CW SX BQ",
          "ARE": "AE",
          "ARG": "AR",
          "ARM": "AM",
          "ASC": "AC",
          "ASM": "AS",
          "ATA": "AQ",
          "ATF": "TF",
          "ATG": "AG",
          "AUS": "AU",
          "AUT": "AT",
          "AZE": "AZ",
          "BDI": "BI",
          "BEL": "BE",
          "BEN": "BJ",
          "BES": "BQ",
          "BFA": "BF",
          "BGD": "BD",
          "BGR": "BG",
          "BHR": "BH",
          "BHS": "BS",
          "BIH": "BA",
          "BLM": "BL",
          "BLR": "BY",
          "BLZ": "BZ",
          "BMU": "BM",
          "BOL": "BO",
          "BRA": "BR",
          "BRB": "BB",
          "BRN": "BN",
          "BTN": "BT",
          "BU": "MM",
          "BUR": "MM",
          "BVT": "BV",
          "BWA": "BW",
          "CAF": "CF",
          "CAN": "CA",
          "CCK": "CC",
          "CHE": "CH",
          "CHL": "CL",
          "CHN": "CN",
          "CIV": "CI",
          "CMR": "CM",
          "COD": "CD",
          "COG": "CG",
          "COK": "CK",
          "COL": "CO",
          "COM": "KM",
          "CPT": "CP",
          "CPV": "CV",
          "CRI": "CR",
          "CS": "RS ME",
          "CT": "KI",
          "CUB": "CU",
          "CUW": "CW",
          "CXR": "CX",
          "CYM": "KY",
          "CYP": "CY",
          "CZE": "CZ",
          "DD": "DE",
          "DDR": "DE",
          "DEU": "DE",
          "DGA": "DG",
          "DJI": "DJ",
          "DMA": "DM",
          "DNK": "DK",
          "DOM": "DO",
          "DY": "BJ",
          "DZA": "DZ",
          "ECU": "EC",
          "EGY": "EG",
          "ERI": "ER",
          "ESH": "EH",
          "ESP": "ES",
          "EST": "EE",
          "ETH": "ET",
          "FIN": "FI",
          "FJI": "FJ",
          "FLK": "FK",
          "FQ": "AQ TF",
          "FRA": "FR",
          "FRO": "FO",
          "FSM": "FM",
          "FX": "FR",
          "FXX": "FR",
          "GAB": "GA",
          "GBR": "GB",
          "GEO": "GE",
          "GGY": "GG",
          "GHA": "GH",
          "GIB": "GI",
          "GIN": "GN",
          "GLP": "GP",
          "GMB": "GM",
          "GNB": "GW",
          "GNQ": "GQ",
          "GRC": "GR",
          "GRD": "GD",
          "GRL": "GL",
          "GTM": "GT",
          "GUF": "GF",
          "GUM": "GU",
          "GUY": "GY",
          "HKG": "HK",
          "HMD": "HM",
          "HND": "HN",
          "HRV": "HR",
          "HTI": "HT",
          "HUN": "HU",
          "HV": "BF",
          "IDN": "ID",
          "IMN": "IM",
          "IND": "IN",
          "IOT": "IO",
          "IRL": "IE",
          "IRN": "IR",
          "IRQ": "IQ",
          "ISL": "IS",
          "ISR": "IL",
          "ITA": "IT",
          "JAM": "JM",
          "JEY": "JE",
          "JOR": "JO",
          "JPN": "JP",
          "JT": "UM",
          "KAZ": "KZ",
          "KEN": "KE",
          "KGZ": "KG",
          "KHM": "KH",
          "KIR": "KI",
          "KNA": "KN",
          "KOR": "KR",
          "KWT": "KW",
          "LAO": "LA",
          "LBN": "LB",
          "LBR": "LR",
          "LBY": "LY",
          "LCA": "LC",
          "LIE": "LI",
          "LKA": "LK",
          "LSO": "LS",
          "LTU": "LT",
          "LUX": "LU",
          "LVA": "LV",
          "MAC": "MO",
          "MAF": "MF",
          "MAR": "MA",
          "MCO": "MC",
          "MDA": "MD",
          "MDG": "MG",
          "MDV": "MV",
          "MEX": "MX",
          "MHL": "MH",
          "MI": "UM",
          "MKD": "MK",
          "MLI": "ML",
          "MLT": "MT",
          "MMR": "MM",
          "MNE": "ME",
          "MNG": "MN",
          "MNP": "MP",
          "MOZ": "MZ",
          "MRT": "MR",
          "MSR": "MS",
          "MTQ": "MQ",
          "MUS": "MU",
          "MWI": "MW",
          "MYS": "MY",
          "MYT": "YT",
          "NAM": "NA",
          "NCL": "NC",
          "NER": "NE",
          "NFK": "NF",
          "NGA": "NG",
          "NH": "VU",
          "NIC": "NI",
          "NIU": "NU",
          "NLD": "NL",
          "NOR": "NO",
          "NPL": "NP",
          "NQ": "AQ",
          "NRU": "NR",
          "NT": "SA IQ",
          "NTZ": "SA IQ",
          "NZL": "NZ",
          "OMN": "OM",
          "PAK": "PK",
          "PAN": "PA",
          "PC": "FM MH MP PW",
          "PCN": "PN",
          "PER": "PE",
          "PHL": "PH",
          "PLW": "PW",
          "PNG": "PG",
          "POL": "PL",
          "PRI": "PR",
          "PRK": "KP",
          "PRT": "PT",
          "PRY": "PY",
          "PSE": "PS",
          "PU": "UM",
          "PYF": "PF",
          "PZ": "PA",
          "QAT": "QA",
          "QMM": "QM",
          "QNN": "QN",
          "QPP": "QP",
          "QQQ": "QQ",
          "QRR": "QR",
          "QSS": "QS",
          "QTT": "QT",
          "QU": "EU",
          "QUU": "EU",
          "QVV": "QV",
          "QWW": "QW",
          "QXX": "QX",
          "QYY": "QY",
          "QZZ": "QZ",
          "REU": "RE",
          "RH": "ZW",
          "ROU": "RO",
          "RUS": "RU",
          "RWA": "RW",
          "SAU": "SA",
          "SCG": "RS ME",
          "SDN": "SD",
          "SEN": "SN",
          "SGP": "SG",
          "SGS": "GS",
          "SHN": "SH",
          "SJM": "SJ",
          "SLB": "SB",
          "SLE": "SL",
          "SLV": "SV",
          "SMR": "SM",
          "SOM": "SO",
          "SPM": "PM",
          "SRB": "RS",
          "SSD": "SS",
          "STP": "ST",
          "SU": "RU AM AZ BY EE GE KZ KG LV LT MD TJ TM UA UZ",
          "SUN": "RU AM AZ BY EE GE KZ KG LV LT MD TJ TM UA UZ",
          "SUR": "SR",
          "SVK": "SK",
          "SVN": "SI",
          "SWE": "SE",
          "SWZ": "SZ",
          "SXM": "SX",
          "SYC": "SC",
          "SYR": "SY",
          "TAA": "TA",
          "TCA": "TC",
          "TCD": "TD",
          "TGO": "TG",
          "THA": "TH",
          "TJK": "TJ",
          "TKL": "TK",
          "TKM": "TM",
          "TLS": "TL",
          "TMP": "TL",
          "TON": "TO",
          "TP": "TL",
          "TTO": "TT",
          "TUN": "TN",
          "TUR": "TR",
          "TUV": "TV",
          "TWN": "TW",
          "TZA": "TZ",
          "UGA": "UG",
          "UK": "GB",
          "UKR": "UA",
          "UMI": "UM",
          "URY": "UY",
          "USA": "US",
          "UZB": "UZ",
          "VAT": "VA",
          "VCT": "VC",
          "VD": "VN",
          "VEN": "VE",
          "VGB": "VG",
          "VIR": "VI",
          "VNM": "VN",
          "VUT": "VU",
          "WK": "UM",
          "WLF": "WF",
          "WSM": "WS",
          "XAA": "XA",
          "XBB": "XB",
          "XCC": "XC",
          "XDD": "XD",
          "XEE": "XE",
          "XFF": "XF",
          "XGG": "XG",
          "XHH": "XH",
          "XII": "XI",
          "XJJ": "XJ",
          "XKK": "XK",
          "XLL": "XL",
          "XMM": "XM",
          "XNN": "XN",
          "XOO": "XO",
          "XPP": "XP",
          "XQQ": "XQ",
          "XRR": "XR",
          "XSS": "XS",
          "XTT": "XT",
          "XUU": "XU",
          "XVV": "XV",
          "XWW": "XW",
          "XXX": "XX",
          "XYY": "XY",
          "XZZ": "XZ",
          "YD": "YE",
          "YEM": "YE",
          "YMD": "YE",
          "YU": "RS ME",
          "YUG": "RS ME",
          "ZAF": "ZA",
          "ZAR": "CD",
          "ZMB": "ZM",
          "ZR": "CD",
          "ZWE": "ZW",
          "ZZZ": "ZZ"
        };
        exports.scriptAlias = {
          "Qaai": "Zinh"
        };
        exports.variantAlias = {
          "heploc": "alalc97",
          "polytoni": "polyton"
        }; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.variantAlias;
        module.exports.scriptAlias;
        module.exports.territoryAlias;
        module.exports.languageAlias;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/arrayLikeToArray.js", [], function (exports) {
  'use strict';

  return {
    execute: function () {
      exports('default', _arrayLikeToArray);

      function _arrayLikeToArray(arr, len) {
        if (len == null || len > arr.length) len = arr.length;

        for (var i = 0, arr2 = new Array(len); i < len; i++) {
          arr2[i] = arr[i];
        }

        return arr2;
      }
    }
  };
});

System.register("chunks:///_virtual/arrayWithHoles.js", [], function (exports) {
  'use strict';

  return {
    execute: function () {
      exports('default', _arrayWithHoles);

      function _arrayWithHoles(arr) {
        if (Array.isArray(arr)) return arr;
      }
    }
  };
});

System.register("chunks:///_virtual/assertThisInitialized.js", [], function (exports) {
  'use strict';

  return {
    execute: function () {
      exports('default', _assertThisInitialized);

      function _assertThisInitialized(self) {
        if (self === void 0) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }

        return self;
      }
    }
  };
});

System.register("chunks:///_virtual/BasicFormatMatcher.js", ['./cjs-loader.mjs', './tslib3.js', './index16.js', './utils.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.BasicFormatMatcher = void 0;

        var tslib_1 = require("tslib");

        var ecma402_abstract_1 = require("@formatjs/ecma402-abstract");

        var utils_1 = require("./utils");
        /**
         * https://tc39.es/ecma402/#sec-basicformatmatcher
         * @param options
         * @param formats
         */


        function BasicFormatMatcher(options, formats) {
          var bestScore = -Infinity;
          var bestFormat = formats[0];
          (0, ecma402_abstract_1.invariant)(Array.isArray(formats), 'formats should be a list of things');

          for (var _i = 0, formats_1 = formats; _i < formats_1.length; _i++) {
            var format = formats_1[_i];
            var score = 0;

            for (var _a = 0, DATE_TIME_PROPS_1 = utils_1.DATE_TIME_PROPS; _a < DATE_TIME_PROPS_1.length; _a++) {
              var prop = DATE_TIME_PROPS_1[_a];
              var optionsProp = options[prop];
              var formatProp = format[prop];

              if (optionsProp === undefined && formatProp !== undefined) {
                score -= utils_1.additionPenalty;
              } else if (optionsProp !== undefined && formatProp === undefined) {
                score -= utils_1.removalPenalty;
              } else if (optionsProp !== formatProp) {
                var values = void 0;

                if (prop === 'fractionalSecondDigits') {
                  values = [1, 2, 3];
                } else {
                  values = ['2-digit', 'numeric', 'narrow', 'short', 'long'];
                }

                var optionsPropIndex = values.indexOf(optionsProp);
                var formatPropIndex = values.indexOf(formatProp);
                var delta = Math.max(-2, Math.min(formatPropIndex - optionsPropIndex, 2));

                if (delta === 2) {
                  score -= utils_1.longMorePenalty;
                } else if (delta === 1) {
                  score -= utils_1.shortMorePenalty;
                } else if (delta === -1) {
                  score -= utils_1.shortLessPenalty;
                } else if (delta === -2) {
                  score -= utils_1.longLessPenalty;
                }
              }
            }

            if (score > bestScore) {
              bestScore = score;
              bestFormat = format;
            }
          }

          return (0, tslib_1.__assign)({}, bestFormat);
        }

        exports.BasicFormatMatcher = BasicFormatMatcher; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.BasicFormatMatcher;
      }, () => ({
        'tslib': __cjsMetaURL$1,
        '@formatjs/ecma402-abstract': __cjsMetaURL$2,
        './utils': __cjsMetaURL$3
      }));
    }
  };
});

System.register("chunks:///_virtual/BestAvailableLocale.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.BestAvailableLocale = void 0;
        /**
         * https://tc39.es/ecma402/#sec-bestavailablelocale
         * @param availableLocales
         * @param locale
         */

        function BestAvailableLocale(availableLocales, locale) {
          var candidate = locale;

          while (true) {
            if (availableLocales.has(candidate)) {
              return candidate;
            }

            var pos = candidate.lastIndexOf('-');

            if (!~pos) {
              return undefined;
            }

            if (pos >= 2 && candidate[pos - 2] === '-') {
              pos -= 2;
            }

            candidate = candidate.slice(0, pos);
          }
        }

        exports.BestAvailableLocale = BestAvailableLocale; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.BestAvailableLocale;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/BestAvailableLocale2.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.BestAvailableLocale = void 0;
        /**
         * https://tc39.es/ecma402/#sec-bestavailablelocale
         * @param availableLocales
         * @param locale
         */

        function BestAvailableLocale(availableLocales, locale) {
          var candidate = locale;

          while (true) {
            if (availableLocales.has(candidate)) {
              return candidate;
            }

            var pos = candidate.lastIndexOf('-');

            if (!~pos) {
              return undefined;
            }

            if (pos >= 2 && candidate[pos - 2] === '-') {
              pos -= 2;
            }

            candidate = candidate.slice(0, pos);
          }
        }

        exports.BestAvailableLocale = BestAvailableLocale; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.BestAvailableLocale;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/BestAvailableLocale3.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.BestAvailableLocale = void 0;
        /**
         * https://tc39.es/ecma402/#sec-bestavailablelocale
         * @param availableLocales
         * @param locale
         */

        function BestAvailableLocale(availableLocales, locale) {
          var candidate = locale;

          while (true) {
            if (availableLocales.has(candidate)) {
              return candidate;
            }

            var pos = candidate.lastIndexOf('-');

            if (!~pos) {
              return undefined;
            }

            if (pos >= 2 && candidate[pos - 2] === '-') {
              pos -= 2;
            }

            candidate = candidate.slice(0, pos);
          }
        }

        exports.BestAvailableLocale = BestAvailableLocale; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.BestAvailableLocale;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/BestAvailableLocale4.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.BestAvailableLocale = void 0;
        /**
         * https://tc39.es/ecma402/#sec-bestavailablelocale
         * @param availableLocales
         * @param locale
         */

        function BestAvailableLocale(availableLocales, locale) {
          var candidate = locale;

          while (true) {
            if (availableLocales.has(candidate)) {
              return candidate;
            }

            var pos = candidate.lastIndexOf('-');

            if (!~pos) {
              return undefined;
            }

            if (pos >= 2 && candidate[pos - 2] === '-') {
              pos -= 2;
            }

            candidate = candidate.slice(0, pos);
          }
        }

        exports.BestAvailableLocale = BestAvailableLocale; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.BestAvailableLocale;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/BestAvailableLocale5.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.BestAvailableLocale = void 0;
        /**
         * https://tc39.es/ecma402/#sec-bestavailablelocale
         * @param availableLocales
         * @param locale
         */

        function BestAvailableLocale(availableLocales, locale) {
          var candidate = locale;

          while (true) {
            if (availableLocales.has(candidate)) {
              return candidate;
            }

            var pos = candidate.lastIndexOf('-');

            if (!~pos) {
              return undefined;
            }

            if (pos >= 2 && candidate[pos - 2] === '-') {
              pos -= 2;
            }

            candidate = candidate.slice(0, pos);
          }
        }

        exports.BestAvailableLocale = BestAvailableLocale; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.BestAvailableLocale;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/BestAvailableLocale6.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.BestAvailableLocale = void 0;
        /**
         * https://tc39.es/ecma402/#sec-bestavailablelocale
         * @param availableLocales
         * @param locale
         */

        function BestAvailableLocale(availableLocales, locale) {
          var candidate = locale;

          while (true) {
            if (availableLocales.has(candidate)) {
              return candidate;
            }

            var pos = candidate.lastIndexOf('-');

            if (!~pos) {
              return undefined;
            }

            if (pos >= 2 && candidate[pos - 2] === '-') {
              pos -= 2;
            }

            candidate = candidate.slice(0, pos);
          }
        }

        exports.BestAvailableLocale = BestAvailableLocale; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.BestAvailableLocale;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/BestAvailableLocale7.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.BestAvailableLocale = void 0;
        /**
         * https://tc39.es/ecma402/#sec-bestavailablelocale
         * @param availableLocales
         * @param locale
         */

        function BestAvailableLocale(availableLocales, locale) {
          var candidate = locale;

          while (true) {
            if (availableLocales.has(candidate)) {
              return candidate;
            }

            var pos = candidate.lastIndexOf('-');

            if (!~pos) {
              return undefined;
            }

            if (pos >= 2 && candidate[pos - 2] === '-') {
              pos -= 2;
            }

            candidate = candidate.slice(0, pos);
          }
        }

        exports.BestAvailableLocale = BestAvailableLocale; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.BestAvailableLocale;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/BestFitFormatMatcher.js", ['./cjs-loader.mjs', './tslib3.js', './index16.js', './utils.js', './skeleton.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3, __cjsMetaURL$4;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$4 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.BestFitFormatMatcher = exports.bestFitFormatMatcherScore = void 0;

        var tslib_1 = require("tslib");

        var ecma402_abstract_1 = require("@formatjs/ecma402-abstract");

        var utils_1 = require("./utils");

        var skeleton_1 = require("./skeleton");

        function isNumericType(t) {
          return t === 'numeric' || t === '2-digit';
        }
        /**
         * Credit: https://github.com/andyearnshaw/Intl.js/blob/0958dc1ad8153f1056653ea22b8208f0df289a4e/src/12.datetimeformat.js#L611
         * with some modifications
         * @param options
         * @param format
         */


        function bestFitFormatMatcherScore(options, format) {
          var score = 0;

          if (options.hour12 && !format.hour12) {
            score -= utils_1.removalPenalty;
          } else if (!options.hour12 && format.hour12) {
            score -= utils_1.additionPenalty;
          }

          for (var _i = 0, DATE_TIME_PROPS_1 = utils_1.DATE_TIME_PROPS; _i < DATE_TIME_PROPS_1.length; _i++) {
            var prop = DATE_TIME_PROPS_1[_i];
            var optionsProp = options[prop];
            var formatProp = format[prop];

            if (optionsProp === undefined && formatProp !== undefined) {
              score -= utils_1.additionPenalty;
            } else if (optionsProp !== undefined && formatProp === undefined) {
              score -= utils_1.removalPenalty;
            } else if (optionsProp !== formatProp) {
              // extra penalty for numeric vs non-numeric
              if (isNumericType(optionsProp) !== isNumericType(formatProp)) {
                score -= utils_1.differentNumericTypePenalty;
              } else {
                var values = ['2-digit', 'numeric', 'narrow', 'short', 'long'];
                var optionsPropIndex = values.indexOf(optionsProp);
                var formatPropIndex = values.indexOf(formatProp);
                var delta = Math.max(-2, Math.min(formatPropIndex - optionsPropIndex, 2));

                if (delta === 2) {
                  score -= utils_1.longMorePenalty;
                } else if (delta === 1) {
                  score -= utils_1.shortMorePenalty;
                } else if (delta === -1) {
                  score -= utils_1.shortLessPenalty;
                } else if (delta === -2) {
                  score -= utils_1.longLessPenalty;
                }
              }
            }
          }

          return score;
        }

        exports.bestFitFormatMatcherScore = bestFitFormatMatcherScore;
        /**
         * https://tc39.es/ecma402/#sec-bestfitformatmatcher
         * Just alias to basic for now
         * @param options
         * @param formats
         * @param implDetails Implementation details
         */

        function BestFitFormatMatcher(options, formats) {
          var bestScore = -Infinity;
          var bestFormat = formats[0];
          (0, ecma402_abstract_1.invariant)(Array.isArray(formats), 'formats should be a list of things');

          for (var _i = 0, formats_1 = formats; _i < formats_1.length; _i++) {
            var format = formats_1[_i];
            var score = bestFitFormatMatcherScore(options, format);

            if (score > bestScore) {
              bestScore = score;
              bestFormat = format;
            }
          }

          var skeletonFormat = (0, tslib_1.__assign)({}, bestFormat);
          var patternFormat = {
            rawPattern: bestFormat.rawPattern
          };
          (0, skeleton_1.processDateTimePattern)(bestFormat.rawPattern, patternFormat); // Kinda following https://github.com/unicode-org/icu/blob/dd50e38f459d84e9bf1b0c618be8483d318458ad/icu4j/main/classes/core/src/com/ibm/icu/text/DateTimePatternGenerator.java
          // Method adjustFieldTypes

          for (var prop in skeletonFormat) {
            var skeletonValue = skeletonFormat[prop];
            var patternValue = patternFormat[prop];
            var requestedValue = options[prop]; // Don't mess with minute/second or we can get in the situation of
            // 7:0:0 which is weird

            if (prop === 'minute' || prop === 'second') {
              continue;
            } // Nothing to do here


            if (!requestedValue) {
              continue;
            } // https://unicode.org/reports/tr35/tr35-dates.html#Matching_Skeletons
            // Looks like we should not convert numeric to alphabetic but the other way
            // around is ok


            if (isNumericType(patternValue) && !isNumericType(requestedValue)) {
              continue;
            }

            if (skeletonValue === requestedValue) {
              continue;
            }

            patternFormat[prop] = requestedValue;
          } // Copy those over


          patternFormat.pattern = skeletonFormat.pattern;
          patternFormat.pattern12 = skeletonFormat.pattern12;
          patternFormat.skeleton = skeletonFormat.skeleton;
          patternFormat.rangePatterns = skeletonFormat.rangePatterns;
          patternFormat.rangePatterns12 = skeletonFormat.rangePatterns12;
          return patternFormat;
        }

        exports.BestFitFormatMatcher = BestFitFormatMatcher; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.BestFitFormatMatcher;
        module.exports.bestFitFormatMatcherScore;
      }, () => ({
        'tslib': __cjsMetaURL$1,
        '@formatjs/ecma402-abstract': __cjsMetaURL$2,
        './utils': __cjsMetaURL$3,
        './skeleton': __cjsMetaURL$4
      }));
    }
  };
});

System.register("chunks:///_virtual/BestFitMatcher.js", ['./cjs-loader.mjs', './BestAvailableLocale.js', './utils7.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.BestFitMatcher = void 0;

        var BestAvailableLocale_1 = require("./BestAvailableLocale");

        var utils_1 = require("./utils");
        /**
         * https://tc39.es/ecma402/#sec-bestfitmatcher
         * @param availableLocales
         * @param requestedLocales
         * @param getDefaultLocale
         */


        function BestFitMatcher(availableLocales, requestedLocales, getDefaultLocale) {
          var minimizedAvailableLocaleMap = {};
          var availableLocaleMap = {};
          var canonicalizedLocaleMap = {};
          var minimizedAvailableLocales = new Set();
          availableLocales.forEach(function (locale) {
            var minimizedLocale = new Intl.Locale(locale).minimize().toString();
            var canonicalizedLocale = Intl.getCanonicalLocales(locale)[0] || locale;
            minimizedAvailableLocaleMap[minimizedLocale] = locale;
            availableLocaleMap[locale] = locale;
            canonicalizedLocaleMap[canonicalizedLocale] = locale;
            minimizedAvailableLocales.add(minimizedLocale);
            minimizedAvailableLocales.add(locale);
            minimizedAvailableLocales.add(canonicalizedLocale);
          });
          var foundLocale;

          for (var _i = 0, requestedLocales_1 = requestedLocales; _i < requestedLocales_1.length; _i++) {
            var l = requestedLocales_1[_i];

            if (foundLocale) {
              break;
            }

            var noExtensionLocale = l.replace(utils_1.UNICODE_EXTENSION_SEQUENCE_REGEX, '');

            if (availableLocales.has(noExtensionLocale)) {
              foundLocale = noExtensionLocale;
              break;
            }

            if (minimizedAvailableLocales.has(noExtensionLocale)) {
              foundLocale = noExtensionLocale;
              break;
            }

            var locale = new Intl.Locale(noExtensionLocale);
            var maximizedRequestedLocale = locale.maximize().toString();
            var minimizedRequestedLocale = locale.minimize().toString(); // Check minimized locale

            if (minimizedAvailableLocales.has(minimizedRequestedLocale)) {
              foundLocale = minimizedRequestedLocale;
              break;
            } // Lookup algo on maximized locale


            foundLocale = (0, BestAvailableLocale_1.BestAvailableLocale)(minimizedAvailableLocales, maximizedRequestedLocale);
          }

          if (!foundLocale) {
            return {
              locale: getDefaultLocale()
            };
          }

          return {
            locale: availableLocaleMap[foundLocale] || canonicalizedLocaleMap[foundLocale] || minimizedAvailableLocaleMap[foundLocale] || foundLocale
          };
        }

        exports.BestFitMatcher = BestFitMatcher; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.BestFitMatcher;
      }, () => ({
        './BestAvailableLocale': __cjsMetaURL$1,
        './utils': __cjsMetaURL$2
      }));
    }
  };
});

System.register("chunks:///_virtual/BestFitMatcher2.js", ['./cjs-loader.mjs', './BestAvailableLocale2.js', './utils10.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.BestFitMatcher = void 0;

        var BestAvailableLocale_1 = require("./BestAvailableLocale");

        var utils_1 = require("./utils");
        /**
         * https://tc39.es/ecma402/#sec-bestfitmatcher
         * @param availableLocales
         * @param requestedLocales
         * @param getDefaultLocale
         */


        function BestFitMatcher(availableLocales, requestedLocales, getDefaultLocale) {
          var minimizedAvailableLocaleMap = {};
          var availableLocaleMap = {};
          var canonicalizedLocaleMap = {};
          var minimizedAvailableLocales = new Set();
          availableLocales.forEach(function (locale) {
            var minimizedLocale = new Intl.Locale(locale).minimize().toString();
            var canonicalizedLocale = Intl.getCanonicalLocales(locale)[0] || locale;
            minimizedAvailableLocaleMap[minimizedLocale] = locale;
            availableLocaleMap[locale] = locale;
            canonicalizedLocaleMap[canonicalizedLocale] = locale;
            minimizedAvailableLocales.add(minimizedLocale);
            minimizedAvailableLocales.add(locale);
            minimizedAvailableLocales.add(canonicalizedLocale);
          });
          var foundLocale;

          for (var _i = 0, requestedLocales_1 = requestedLocales; _i < requestedLocales_1.length; _i++) {
            var l = requestedLocales_1[_i];

            if (foundLocale) {
              break;
            }

            var noExtensionLocale = l.replace(utils_1.UNICODE_EXTENSION_SEQUENCE_REGEX, '');

            if (availableLocales.has(noExtensionLocale)) {
              foundLocale = noExtensionLocale;
              break;
            }

            if (minimizedAvailableLocales.has(noExtensionLocale)) {
              foundLocale = noExtensionLocale;
              break;
            }

            var locale = new Intl.Locale(noExtensionLocale);
            var maximizedRequestedLocale = locale.maximize().toString();
            var minimizedRequestedLocale = locale.minimize().toString(); // Check minimized locale

            if (minimizedAvailableLocales.has(minimizedRequestedLocale)) {
              foundLocale = minimizedRequestedLocale;
              break;
            } // Lookup algo on maximized locale


            foundLocale = (0, BestAvailableLocale_1.BestAvailableLocale)(minimizedAvailableLocales, maximizedRequestedLocale);
          }

          if (!foundLocale) {
            return {
              locale: getDefaultLocale()
            };
          }

          return {
            locale: availableLocaleMap[foundLocale] || canonicalizedLocaleMap[foundLocale] || minimizedAvailableLocaleMap[foundLocale] || foundLocale
          };
        }

        exports.BestFitMatcher = BestFitMatcher; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.BestFitMatcher;
      }, () => ({
        './BestAvailableLocale': __cjsMetaURL$1,
        './utils': __cjsMetaURL$2
      }));
    }
  };
});

System.register("chunks:///_virtual/BestFitMatcher3.js", ['./cjs-loader.mjs', './BestAvailableLocale3.js', './utils11.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.BestFitMatcher = void 0;

        var BestAvailableLocale_1 = require("./BestAvailableLocale");

        var utils_1 = require("./utils");
        /**
         * https://tc39.es/ecma402/#sec-bestfitmatcher
         * @param availableLocales
         * @param requestedLocales
         * @param getDefaultLocale
         */


        function BestFitMatcher(availableLocales, requestedLocales, getDefaultLocale) {
          var minimizedAvailableLocaleMap = {};
          var availableLocaleMap = {};
          var canonicalizedLocaleMap = {};
          var minimizedAvailableLocales = new Set();
          availableLocales.forEach(function (locale) {
            var minimizedLocale = new Intl.Locale(locale).minimize().toString();
            var canonicalizedLocale = Intl.getCanonicalLocales(locale)[0] || locale;
            minimizedAvailableLocaleMap[minimizedLocale] = locale;
            availableLocaleMap[locale] = locale;
            canonicalizedLocaleMap[canonicalizedLocale] = locale;
            minimizedAvailableLocales.add(minimizedLocale);
            minimizedAvailableLocales.add(locale);
            minimizedAvailableLocales.add(canonicalizedLocale);
          });
          var foundLocale;

          for (var _i = 0, requestedLocales_1 = requestedLocales; _i < requestedLocales_1.length; _i++) {
            var l = requestedLocales_1[_i];

            if (foundLocale) {
              break;
            }

            var noExtensionLocale = l.replace(utils_1.UNICODE_EXTENSION_SEQUENCE_REGEX, '');

            if (availableLocales.has(noExtensionLocale)) {
              foundLocale = noExtensionLocale;
              break;
            }

            if (minimizedAvailableLocales.has(noExtensionLocale)) {
              foundLocale = noExtensionLocale;
              break;
            }

            var locale = new Intl.Locale(noExtensionLocale);
            var maximizedRequestedLocale = locale.maximize().toString();
            var minimizedRequestedLocale = locale.minimize().toString(); // Check minimized locale

            if (minimizedAvailableLocales.has(minimizedRequestedLocale)) {
              foundLocale = minimizedRequestedLocale;
              break;
            } // Lookup algo on maximized locale


            foundLocale = (0, BestAvailableLocale_1.BestAvailableLocale)(minimizedAvailableLocales, maximizedRequestedLocale);
          }

          if (!foundLocale) {
            return {
              locale: getDefaultLocale()
            };
          }

          return {
            locale: availableLocaleMap[foundLocale] || canonicalizedLocaleMap[foundLocale] || minimizedAvailableLocaleMap[foundLocale] || foundLocale
          };
        }

        exports.BestFitMatcher = BestFitMatcher; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.BestFitMatcher;
      }, () => ({
        './BestAvailableLocale': __cjsMetaURL$1,
        './utils': __cjsMetaURL$2
      }));
    }
  };
});

System.register("chunks:///_virtual/BestFitMatcher4.js", ['./cjs-loader.mjs', './BestAvailableLocale4.js', './utils12.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.BestFitMatcher = void 0;

        var BestAvailableLocale_1 = require("./BestAvailableLocale");

        var utils_1 = require("./utils");
        /**
         * https://tc39.es/ecma402/#sec-bestfitmatcher
         * @param availableLocales
         * @param requestedLocales
         * @param getDefaultLocale
         */


        function BestFitMatcher(availableLocales, requestedLocales, getDefaultLocale) {
          var minimizedAvailableLocaleMap = {};
          var availableLocaleMap = {};
          var canonicalizedLocaleMap = {};
          var minimizedAvailableLocales = new Set();
          availableLocales.forEach(function (locale) {
            var minimizedLocale = new Intl.Locale(locale).minimize().toString();
            var canonicalizedLocale = Intl.getCanonicalLocales(locale)[0] || locale;
            minimizedAvailableLocaleMap[minimizedLocale] = locale;
            availableLocaleMap[locale] = locale;
            canonicalizedLocaleMap[canonicalizedLocale] = locale;
            minimizedAvailableLocales.add(minimizedLocale);
            minimizedAvailableLocales.add(locale);
            minimizedAvailableLocales.add(canonicalizedLocale);
          });
          var foundLocale;

          for (var _i = 0, requestedLocales_1 = requestedLocales; _i < requestedLocales_1.length; _i++) {
            var l = requestedLocales_1[_i];

            if (foundLocale) {
              break;
            }

            var noExtensionLocale = l.replace(utils_1.UNICODE_EXTENSION_SEQUENCE_REGEX, '');

            if (availableLocales.has(noExtensionLocale)) {
              foundLocale = noExtensionLocale;
              break;
            }

            if (minimizedAvailableLocales.has(noExtensionLocale)) {
              foundLocale = noExtensionLocale;
              break;
            }

            var locale = new Intl.Locale(noExtensionLocale);
            var maximizedRequestedLocale = locale.maximize().toString();
            var minimizedRequestedLocale = locale.minimize().toString(); // Check minimized locale

            if (minimizedAvailableLocales.has(minimizedRequestedLocale)) {
              foundLocale = minimizedRequestedLocale;
              break;
            } // Lookup algo on maximized locale


            foundLocale = (0, BestAvailableLocale_1.BestAvailableLocale)(minimizedAvailableLocales, maximizedRequestedLocale);
          }

          if (!foundLocale) {
            return {
              locale: getDefaultLocale()
            };
          }

          return {
            locale: availableLocaleMap[foundLocale] || canonicalizedLocaleMap[foundLocale] || minimizedAvailableLocaleMap[foundLocale] || foundLocale
          };
        }

        exports.BestFitMatcher = BestFitMatcher; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.BestFitMatcher;
      }, () => ({
        './BestAvailableLocale': __cjsMetaURL$1,
        './utils': __cjsMetaURL$2
      }));
    }
  };
});

System.register("chunks:///_virtual/BestFitMatcher5.js", ['./cjs-loader.mjs', './BestAvailableLocale5.js', './utils13.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.BestFitMatcher = void 0;

        var BestAvailableLocale_1 = require("./BestAvailableLocale");

        var utils_1 = require("./utils");
        /**
         * https://tc39.es/ecma402/#sec-bestfitmatcher
         * @param availableLocales
         * @param requestedLocales
         * @param getDefaultLocale
         */


        function BestFitMatcher(availableLocales, requestedLocales, getDefaultLocale) {
          var minimizedAvailableLocaleMap = {};
          var availableLocaleMap = {};
          var canonicalizedLocaleMap = {};
          var minimizedAvailableLocales = new Set();
          availableLocales.forEach(function (locale) {
            var minimizedLocale = new Intl.Locale(locale).minimize().toString();
            var canonicalizedLocale = Intl.getCanonicalLocales(locale)[0] || locale;
            minimizedAvailableLocaleMap[minimizedLocale] = locale;
            availableLocaleMap[locale] = locale;
            canonicalizedLocaleMap[canonicalizedLocale] = locale;
            minimizedAvailableLocales.add(minimizedLocale);
            minimizedAvailableLocales.add(locale);
            minimizedAvailableLocales.add(canonicalizedLocale);
          });
          var foundLocale;

          for (var _i = 0, requestedLocales_1 = requestedLocales; _i < requestedLocales_1.length; _i++) {
            var l = requestedLocales_1[_i];

            if (foundLocale) {
              break;
            }

            var noExtensionLocale = l.replace(utils_1.UNICODE_EXTENSION_SEQUENCE_REGEX, '');

            if (availableLocales.has(noExtensionLocale)) {
              foundLocale = noExtensionLocale;
              break;
            }

            if (minimizedAvailableLocales.has(noExtensionLocale)) {
              foundLocale = noExtensionLocale;
              break;
            }

            var locale = new Intl.Locale(noExtensionLocale);
            var maximizedRequestedLocale = locale.maximize().toString();
            var minimizedRequestedLocale = locale.minimize().toString(); // Check minimized locale

            if (minimizedAvailableLocales.has(minimizedRequestedLocale)) {
              foundLocale = minimizedRequestedLocale;
              break;
            } // Lookup algo on maximized locale


            foundLocale = (0, BestAvailableLocale_1.BestAvailableLocale)(minimizedAvailableLocales, maximizedRequestedLocale);
          }

          if (!foundLocale) {
            return {
              locale: getDefaultLocale()
            };
          }

          return {
            locale: availableLocaleMap[foundLocale] || canonicalizedLocaleMap[foundLocale] || minimizedAvailableLocaleMap[foundLocale] || foundLocale
          };
        }

        exports.BestFitMatcher = BestFitMatcher; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.BestFitMatcher;
      }, () => ({
        './BestAvailableLocale': __cjsMetaURL$1,
        './utils': __cjsMetaURL$2
      }));
    }
  };
});

System.register("chunks:///_virtual/BestFitMatcher6.js", ['./cjs-loader.mjs', './BestAvailableLocale6.js', './utils14.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.BestFitMatcher = void 0;

        var BestAvailableLocale_1 = require("./BestAvailableLocale");

        var utils_1 = require("./utils");
        /**
         * https://tc39.es/ecma402/#sec-bestfitmatcher
         * @param availableLocales
         * @param requestedLocales
         * @param getDefaultLocale
         */


        function BestFitMatcher(availableLocales, requestedLocales, getDefaultLocale) {
          var minimizedAvailableLocaleMap = {};
          var availableLocaleMap = {};
          var canonicalizedLocaleMap = {};
          var minimizedAvailableLocales = new Set();
          availableLocales.forEach(function (locale) {
            var minimizedLocale = new Intl.Locale(locale).minimize().toString();
            var canonicalizedLocale = Intl.getCanonicalLocales(locale)[0] || locale;
            minimizedAvailableLocaleMap[minimizedLocale] = locale;
            availableLocaleMap[locale] = locale;
            canonicalizedLocaleMap[canonicalizedLocale] = locale;
            minimizedAvailableLocales.add(minimizedLocale);
            minimizedAvailableLocales.add(locale);
            minimizedAvailableLocales.add(canonicalizedLocale);
          });
          var foundLocale;

          for (var _i = 0, requestedLocales_1 = requestedLocales; _i < requestedLocales_1.length; _i++) {
            var l = requestedLocales_1[_i];

            if (foundLocale) {
              break;
            }

            var noExtensionLocale = l.replace(utils_1.UNICODE_EXTENSION_SEQUENCE_REGEX, '');

            if (availableLocales.has(noExtensionLocale)) {
              foundLocale = noExtensionLocale;
              break;
            }

            if (minimizedAvailableLocales.has(noExtensionLocale)) {
              foundLocale = noExtensionLocale;
              break;
            }

            var locale = new Intl.Locale(noExtensionLocale);
            var maximizedRequestedLocale = locale.maximize().toString();
            var minimizedRequestedLocale = locale.minimize().toString(); // Check minimized locale

            if (minimizedAvailableLocales.has(minimizedRequestedLocale)) {
              foundLocale = minimizedRequestedLocale;
              break;
            } // Lookup algo on maximized locale


            foundLocale = (0, BestAvailableLocale_1.BestAvailableLocale)(minimizedAvailableLocales, maximizedRequestedLocale);
          }

          if (!foundLocale) {
            return {
              locale: getDefaultLocale()
            };
          }

          return {
            locale: availableLocaleMap[foundLocale] || canonicalizedLocaleMap[foundLocale] || minimizedAvailableLocaleMap[foundLocale] || foundLocale
          };
        }

        exports.BestFitMatcher = BestFitMatcher; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.BestFitMatcher;
      }, () => ({
        './BestAvailableLocale': __cjsMetaURL$1,
        './utils': __cjsMetaURL$2
      }));
    }
  };
});

System.register("chunks:///_virtual/BestFitMatcher7.js", ['./cjs-loader.mjs', './BestAvailableLocale7.js', './utils15.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.BestFitMatcher = void 0;

        var BestAvailableLocale_1 = require("./BestAvailableLocale");

        var utils_1 = require("./utils");
        /**
         * https://tc39.es/ecma402/#sec-bestfitmatcher
         * @param availableLocales
         * @param requestedLocales
         * @param getDefaultLocale
         */


        function BestFitMatcher(availableLocales, requestedLocales, getDefaultLocale) {
          var minimizedAvailableLocaleMap = {};
          var availableLocaleMap = {};
          var canonicalizedLocaleMap = {};
          var minimizedAvailableLocales = new Set();
          availableLocales.forEach(function (locale) {
            var minimizedLocale = new Intl.Locale(locale).minimize().toString();
            var canonicalizedLocale = Intl.getCanonicalLocales(locale)[0] || locale;
            minimizedAvailableLocaleMap[minimizedLocale] = locale;
            availableLocaleMap[locale] = locale;
            canonicalizedLocaleMap[canonicalizedLocale] = locale;
            minimizedAvailableLocales.add(minimizedLocale);
            minimizedAvailableLocales.add(locale);
            minimizedAvailableLocales.add(canonicalizedLocale);
          });
          var foundLocale;

          for (var _i = 0, requestedLocales_1 = requestedLocales; _i < requestedLocales_1.length; _i++) {
            var l = requestedLocales_1[_i];

            if (foundLocale) {
              break;
            }

            var noExtensionLocale = l.replace(utils_1.UNICODE_EXTENSION_SEQUENCE_REGEX, '');

            if (availableLocales.has(noExtensionLocale)) {
              foundLocale = noExtensionLocale;
              break;
            }

            if (minimizedAvailableLocales.has(noExtensionLocale)) {
              foundLocale = noExtensionLocale;
              break;
            }

            var locale = new Intl.Locale(noExtensionLocale);
            var maximizedRequestedLocale = locale.maximize().toString();
            var minimizedRequestedLocale = locale.minimize().toString(); // Check minimized locale

            if (minimizedAvailableLocales.has(minimizedRequestedLocale)) {
              foundLocale = minimizedRequestedLocale;
              break;
            } // Lookup algo on maximized locale


            foundLocale = (0, BestAvailableLocale_1.BestAvailableLocale)(minimizedAvailableLocales, maximizedRequestedLocale);
          }

          if (!foundLocale) {
            return {
              locale: getDefaultLocale()
            };
          }

          return {
            locale: availableLocaleMap[foundLocale] || canonicalizedLocaleMap[foundLocale] || minimizedAvailableLocaleMap[foundLocale] || foundLocale
          };
        }

        exports.BestFitMatcher = BestFitMatcher; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.BestFitMatcher;
      }, () => ({
        './BestAvailableLocale': __cjsMetaURL$1,
        './utils': __cjsMetaURL$2
      }));
    }
  };
});

System.register("chunks:///_virtual/CanonicalCodeForDisplayNames.js", ['./cjs-loader.mjs', './index10.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.CanonicalCodeForDisplayNames = void 0;

        var ecma402_abstract_1 = require("@formatjs/ecma402-abstract");

        var UNICODE_REGION_SUBTAG_REGEX = /^([a-z]{2}|[0-9]{3})$/i;
        var ALPHA_4 = /^[a-z]{4}$/i;

        function isUnicodeRegionSubtag(region) {
          return UNICODE_REGION_SUBTAG_REGEX.test(region);
        }

        function isUnicodeScriptSubtag(script) {
          return ALPHA_4.test(script);
        }

        function CanonicalCodeForDisplayNames(type, code) {
          if (type === 'language') {
            return (0, ecma402_abstract_1.CanonicalizeLocaleList)([code])[0];
          }

          if (type === 'region') {
            if (!isUnicodeRegionSubtag(code)) {
              throw RangeError('invalid region');
            }

            return code.toUpperCase();
          }

          if (type === 'script') {
            if (!isUnicodeScriptSubtag(code)) {
              throw RangeError('invalid script');
            }

            return "".concat(code[0].toUpperCase()).concat(code.slice(1).toLowerCase());
          }

          (0, ecma402_abstract_1.invariant)(type === 'currency', 'invalid type');

          if (!(0, ecma402_abstract_1.IsWellFormedCurrencyCode)(code)) {
            throw RangeError('invalid currency');
          }

          return code.toUpperCase();
        }

        exports.CanonicalCodeForDisplayNames = CanonicalCodeForDisplayNames; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.CanonicalCodeForDisplayNames;
      }, () => ({
        '@formatjs/ecma402-abstract': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/CanonicalizeLocaleList.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.CanonicalizeLocaleList = void 0;
        /**
         * http://ecma-international.org/ecma-402/7.0/index.html#sec-canonicalizelocalelist
         * @param locales
         */

        function CanonicalizeLocaleList(locales) {
          // TODO
          return Intl.getCanonicalLocales(locales);
        }

        exports.CanonicalizeLocaleList = CanonicalizeLocaleList; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.CanonicalizeLocaleList;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/CanonicalizeLocaleList10.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.CanonicalizeLocaleList = void 0;
        /**
         * http://ecma-international.org/ecma-402/7.0/index.html#sec-canonicalizelocalelist
         * @param locales
         */

        function CanonicalizeLocaleList(locales) {
          // TODO
          return Intl.getCanonicalLocales(locales);
        }

        exports.CanonicalizeLocaleList = CanonicalizeLocaleList; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.CanonicalizeLocaleList;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/CanonicalizeLocaleList11.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.CanonicalizeLocaleList = void 0;
        /**
         * http://ecma-international.org/ecma-402/7.0/index.html#sec-canonicalizelocalelist
         * @param locales
         */

        function CanonicalizeLocaleList(locales) {
          // TODO
          return Intl.getCanonicalLocales(locales);
        }

        exports.CanonicalizeLocaleList = CanonicalizeLocaleList; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.CanonicalizeLocaleList;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/CanonicalizeLocaleList12.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.CanonicalizeLocaleList = void 0;
        /**
         * http://ecma-international.org/ecma-402/7.0/index.html#sec-canonicalizelocalelist
         * @param locales
         */

        function CanonicalizeLocaleList(locales) {
          // TODO
          return Intl.getCanonicalLocales(locales);
        }

        exports.CanonicalizeLocaleList = CanonicalizeLocaleList; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.CanonicalizeLocaleList;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/CanonicalizeLocaleList13.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.CanonicalizeLocaleList = void 0;
        /**
         * http://ecma-international.org/ecma-402/7.0/index.html#sec-canonicalizelocalelist
         * @param locales
         */

        function CanonicalizeLocaleList(locales) {
          // TODO
          return Intl.getCanonicalLocales(locales);
        }

        exports.CanonicalizeLocaleList = CanonicalizeLocaleList; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.CanonicalizeLocaleList;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/CanonicalizeLocaleList14.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.CanonicalizeLocaleList = void 0;
        /**
         * http://ecma-international.org/ecma-402/7.0/index.html#sec-canonicalizelocalelist
         * @param locales
         */

        function CanonicalizeLocaleList(locales) {
          // TODO
          return Intl.getCanonicalLocales(locales);
        }

        exports.CanonicalizeLocaleList = CanonicalizeLocaleList; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.CanonicalizeLocaleList;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/CanonicalizeLocaleList2.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.CanonicalizeLocaleList = void 0;
        /**
         * http://ecma-international.org/ecma-402/7.0/index.html#sec-canonicalizelocalelist
         * @param locales
         */

        function CanonicalizeLocaleList(locales) {
          // TODO
          return Intl.getCanonicalLocales(locales);
        }

        exports.CanonicalizeLocaleList = CanonicalizeLocaleList; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.CanonicalizeLocaleList;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/CanonicalizeLocaleList3.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.CanonicalizeLocaleList = void 0;
        /**
         * http://ecma-international.org/ecma-402/7.0/index.html#sec-canonicalizelocalelist
         * @param locales
         */

        function CanonicalizeLocaleList(locales) {
          // TODO
          return Intl.getCanonicalLocales(locales);
        }

        exports.CanonicalizeLocaleList = CanonicalizeLocaleList; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.CanonicalizeLocaleList;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/CanonicalizeLocaleList4.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.CanonicalizeLocaleList = void 0;
        /**
         * http://ecma-international.org/ecma-402/7.0/index.html#sec-canonicalizelocalelist
         * @param locales
         */

        function CanonicalizeLocaleList(locales) {
          // TODO
          return Intl.getCanonicalLocales(locales);
        }

        exports.CanonicalizeLocaleList = CanonicalizeLocaleList; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.CanonicalizeLocaleList;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/CanonicalizeLocaleList5.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.CanonicalizeLocaleList = void 0;
        /**
         * http://ecma-international.org/ecma-402/7.0/index.html#sec-canonicalizelocalelist
         * @param locales
         */

        function CanonicalizeLocaleList(locales) {
          // TODO
          return Intl.getCanonicalLocales(locales);
        }

        exports.CanonicalizeLocaleList = CanonicalizeLocaleList; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.CanonicalizeLocaleList;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/CanonicalizeLocaleList6.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.CanonicalizeLocaleList = void 0;
        /**
         * http://ecma-international.org/ecma-402/7.0/index.html#sec-canonicalizelocalelist
         * @param locales
         */

        function CanonicalizeLocaleList(locales) {
          // TODO
          return Intl.getCanonicalLocales(locales);
        }

        exports.CanonicalizeLocaleList = CanonicalizeLocaleList; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.CanonicalizeLocaleList;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/CanonicalizeLocaleList7.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.CanonicalizeLocaleList = void 0;
        /**
         * http://ecma-international.org/ecma-402/7.0/index.html#sec-canonicalizelocalelist
         * @param locales
         */

        function CanonicalizeLocaleList(locales) {
          // TODO
          return Intl.getCanonicalLocales(locales);
        }

        exports.CanonicalizeLocaleList = CanonicalizeLocaleList; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.CanonicalizeLocaleList;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/CanonicalizeLocaleList8.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.CanonicalizeLocaleList = void 0;
        /**
         * http://ecma-international.org/ecma-402/7.0/index.html#sec-canonicalizelocalelist
         * @param locales
         */

        function CanonicalizeLocaleList(locales) {
          // TODO
          return Intl.getCanonicalLocales(locales);
        }

        exports.CanonicalizeLocaleList = CanonicalizeLocaleList; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.CanonicalizeLocaleList;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/CanonicalizeLocaleList9.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.CanonicalizeLocaleList = void 0;
        /**
         * http://ecma-international.org/ecma-402/7.0/index.html#sec-canonicalizelocalelist
         * @param locales
         */

        function CanonicalizeLocaleList(locales) {
          // TODO
          return Intl.getCanonicalLocales(locales);
        }

        exports.CanonicalizeLocaleList = CanonicalizeLocaleList; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.CanonicalizeLocaleList;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/canonicalizer.js", ['./cjs-loader.mjs', './tslib5.js', './aliases.generated.js', './parser.js', './likelySubtags.generated.js', './emitter.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3, __cjsMetaURL$4, __cjsMetaURL$5;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$4 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$5 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.canonicalizeUnicodeLocaleId = exports.canonicalizeUnicodeLanguageId = void 0;

        var tslib_1 = require("tslib");

        var aliases_generated_1 = require("./aliases.generated");

        var parser_1 = require("./parser");

        var likelySubtags_generated_1 = require("./likelySubtags.generated");

        var emitter_1 = require("./emitter");

        function canonicalizeAttrs(strs) {
          return Object.keys(strs.reduce(function (all, str) {
            all[str.toLowerCase()] = 1;
            return all;
          }, {})).sort();
        }

        function canonicalizeKVs(arr) {
          var all = {};
          var result = [];

          for (var _i = 0, arr_1 = arr; _i < arr_1.length; _i++) {
            var kv = arr_1[_i];

            if (kv[0] in all) {
              continue;
            }

            all[kv[0]] = 1;

            if (!kv[1] || kv[1] === 'true') {
              result.push([kv[0].toLowerCase()]);
            } else {
              result.push([kv[0].toLowerCase(), kv[1].toLowerCase()]);
            }
          }

          return result.sort(compareKV);
        }

        function compareKV(t1, t2) {
          return t1[0] < t2[0] ? -1 : t1[0] > t2[0] ? 1 : 0;
        }

        function compareExtension(e1, e2) {
          return e1.type < e2.type ? -1 : e1.type > e2.type ? 1 : 0;
        }

        function mergeVariants(v1, v2) {
          var result = (0, tslib_1.__spreadArray)([], v1, true);

          for (var _i = 0, v2_1 = v2; _i < v2_1.length; _i++) {
            var v = v2_1[_i];

            if (v1.indexOf(v) < 0) {
              result.push(v);
            }
          }

          return result;
        }
        /**
         * CAVEAT: We don't do this section in the spec bc they have no JSON data
         * Use the bcp47 data to replace keys, types, tfields, and tvalues by their canonical forms. See Section 3.6.4 U Extension Data Files) and Section 3.7.1 T Extension Data Files. The aliases are in the alias attribute value, while the canonical is in the name attribute value. For example,
        Because of the following bcp47 data:
        <key name="ms"…>…<type name="uksystem" … alias="imperial" … />…</key>
        We get the following transformation:
        en-u-ms-imperial ⇒ en-u-ms-uksystem
         * @param lang
         */


        function canonicalizeUnicodeLanguageId(unicodeLanguageId) {
          /**
           * If the language subtag matches the type attribute of a languageAlias element in Supplemental Data, replace the language subtag with the replacement value.
           *  1. If there are additional subtags in the replacement value, add them to the result, but only if there is no corresponding subtag already in the tag.
           *  2. Five special deprecated grandfathered codes (such as i-default) are in type attributes, and are also replaced.
           */
          // From https://github.com/unicode-org/icu/blob/master/icu4j/main/classes/core/src/com/ibm/icu/util/ULocale.java#L1246
          // Try language _ variant
          var finalLangAst = unicodeLanguageId;

          if (unicodeLanguageId.variants.length) {
            var replacedLang_1 = '';

            for (var _i = 0, _a = unicodeLanguageId.variants; _i < _a.length; _i++) {
              var variant = _a[_i];

              if (replacedLang_1 = aliases_generated_1.languageAlias[(0, emitter_1.emitUnicodeLanguageId)({
                lang: unicodeLanguageId.lang,
                variants: [variant]
              })]) {
                var replacedLangAst = (0, parser_1.parseUnicodeLanguageId)(replacedLang_1.split(parser_1.SEPARATOR));
                finalLangAst = {
                  lang: replacedLangAst.lang,
                  script: finalLangAst.script || replacedLangAst.script,
                  region: finalLangAst.region || replacedLangAst.region,
                  variants: mergeVariants(finalLangAst.variants, replacedLangAst.variants)
                };
                break;
              }
            }
          } // language _ script _ country
          // ug-Arab-CN -> ug-CN


          if (finalLangAst.script && finalLangAst.region) {
            var replacedLang_2 = aliases_generated_1.languageAlias[(0, emitter_1.emitUnicodeLanguageId)({
              lang: finalLangAst.lang,
              script: finalLangAst.script,
              region: finalLangAst.region,
              variants: []
            })];

            if (replacedLang_2) {
              var replacedLangAst = (0, parser_1.parseUnicodeLanguageId)(replacedLang_2.split(parser_1.SEPARATOR));
              finalLangAst = {
                lang: replacedLangAst.lang,
                script: replacedLangAst.script,
                region: replacedLangAst.region,
                variants: finalLangAst.variants
              };
            }
          } // language _ country
          // eg. az_AZ -> az_Latn_A


          if (finalLangAst.region) {
            var replacedLang_3 = aliases_generated_1.languageAlias[(0, emitter_1.emitUnicodeLanguageId)({
              lang: finalLangAst.lang,
              region: finalLangAst.region,
              variants: []
            })];

            if (replacedLang_3) {
              var replacedLangAst = (0, parser_1.parseUnicodeLanguageId)(replacedLang_3.split(parser_1.SEPARATOR));
              finalLangAst = {
                lang: replacedLangAst.lang,
                script: finalLangAst.script || replacedLangAst.script,
                region: replacedLangAst.region,
                variants: finalLangAst.variants
              };
            }
          } // only language
          // e.g. twi -> ak


          var replacedLang = aliases_generated_1.languageAlias[(0, emitter_1.emitUnicodeLanguageId)({
            lang: finalLangAst.lang,
            variants: []
          })];

          if (replacedLang) {
            var replacedLangAst = (0, parser_1.parseUnicodeLanguageId)(replacedLang.split(parser_1.SEPARATOR));
            finalLangAst = {
              lang: replacedLangAst.lang,
              script: finalLangAst.script || replacedLangAst.script,
              region: finalLangAst.region || replacedLangAst.region,
              variants: finalLangAst.variants
            };
          }

          if (finalLangAst.region) {
            var region = finalLangAst.region.toUpperCase();
            var regionAlias = aliases_generated_1.territoryAlias[region];
            var replacedRegion = void 0;

            if (regionAlias) {
              var regions = regionAlias.split(' ');
              replacedRegion = regions[0];
              var likelySubtag = likelySubtags_generated_1.likelySubtags[(0, emitter_1.emitUnicodeLanguageId)({
                lang: finalLangAst.lang,
                script: finalLangAst.script,
                variants: []
              })];

              if (likelySubtag) {
                var likelyRegion = (0, parser_1.parseUnicodeLanguageId)(likelySubtag.split(parser_1.SEPARATOR)).region;

                if (likelyRegion && regions.indexOf(likelyRegion) > -1) {
                  replacedRegion = likelyRegion;
                }
              }
            }

            if (replacedRegion) {
              finalLangAst.region = replacedRegion;
            }

            finalLangAst.region = finalLangAst.region.toUpperCase();
          }

          if (finalLangAst.script) {
            finalLangAst.script = finalLangAst.script[0].toUpperCase() + finalLangAst.script.slice(1).toLowerCase();

            if (aliases_generated_1.scriptAlias[finalLangAst.script]) {
              finalLangAst.script = aliases_generated_1.scriptAlias[finalLangAst.script];
            }
          }

          if (finalLangAst.variants.length) {
            for (var i = 0; i < finalLangAst.variants.length; i++) {
              var variant = finalLangAst.variants[i].toLowerCase();

              if (aliases_generated_1.variantAlias[variant]) {
                var alias = aliases_generated_1.variantAlias[variant];

                if ((0, parser_1.isUnicodeVariantSubtag)(alias)) {
                  finalLangAst.variants[i] = alias;
                } else if ((0, parser_1.isUnicodeLanguageSubtag)(alias)) {
                  // Yes this can happen per the spec
                  finalLangAst.lang = alias;
                }
              }
            }

            finalLangAst.variants.sort();
          }

          return finalLangAst;
        }

        exports.canonicalizeUnicodeLanguageId = canonicalizeUnicodeLanguageId;
        /**
         * Canonicalize based on
         * https://www.unicode.org/reports/tr35/tr35.html#Canonical_Unicode_Locale_Identifiers
         * https://tc39.es/ecma402/#sec-canonicalizeunicodelocaleid
         * IMPORTANT: This modifies the object inline
         * @param locale
         */

        function canonicalizeUnicodeLocaleId(locale) {
          locale.lang = canonicalizeUnicodeLanguageId(locale.lang);

          if (locale.extensions) {
            for (var _i = 0, _a = locale.extensions; _i < _a.length; _i++) {
              var extension = _a[_i];

              switch (extension.type) {
                case 'u':
                  extension.keywords = canonicalizeKVs(extension.keywords);

                  if (extension.attributes) {
                    extension.attributes = canonicalizeAttrs(extension.attributes);
                  }

                  break;

                case 't':
                  if (extension.lang) {
                    extension.lang = canonicalizeUnicodeLanguageId(extension.lang);
                  }

                  extension.fields = canonicalizeKVs(extension.fields);
                  break;

                default:
                  extension.value = extension.value.toLowerCase();
                  break;
              }
            }

            locale.extensions.sort(compareExtension);
          }

          return locale;
        }

        exports.canonicalizeUnicodeLocaleId = canonicalizeUnicodeLocaleId; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.canonicalizeUnicodeLocaleId;
        module.exports.canonicalizeUnicodeLanguageId;
      }, () => ({
        'tslib': __cjsMetaURL$1,
        './aliases.generated': __cjsMetaURL$2,
        './parser': __cjsMetaURL$3,
        './likelySubtags.generated': __cjsMetaURL$4,
        './emitter': __cjsMetaURL$5
      }));
    }
  };
});

System.register("chunks:///_virtual/CanonicalizeTimeZoneName.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.CanonicalizeTimeZoneName = void 0;
        /**
         * https://tc39.es/ecma402/#sec-canonicalizetimezonename
         * @param tz
         */

        function CanonicalizeTimeZoneName(tz, _a) {
          var tzData = _a.tzData,
              uppercaseLinks = _a.uppercaseLinks;
          var uppercasedTz = tz.toUpperCase();
          var uppercasedZones = Object.keys(tzData).reduce(function (all, z) {
            all[z.toUpperCase()] = z;
            return all;
          }, {});
          var ianaTimeZone = uppercaseLinks[uppercasedTz] || uppercasedZones[uppercasedTz];

          if (ianaTimeZone === 'Etc/UTC' || ianaTimeZone === 'Etc/GMT') {
            return 'UTC';
          }

          return ianaTimeZone;
        }

        exports.CanonicalizeTimeZoneName = CanonicalizeTimeZoneName; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.CanonicalizeTimeZoneName;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/CanonicalizeTimeZoneName2.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.CanonicalizeTimeZoneName = void 0;
        /**
         * https://tc39.es/ecma402/#sec-canonicalizetimezonename
         * @param tz
         */

        function CanonicalizeTimeZoneName(tz, _a) {
          var tzData = _a.tzData,
              uppercaseLinks = _a.uppercaseLinks;
          var uppercasedTz = tz.toUpperCase();
          var uppercasedZones = Object.keys(tzData).reduce(function (all, z) {
            all[z.toUpperCase()] = z;
            return all;
          }, {});
          var ianaTimeZone = uppercaseLinks[uppercasedTz] || uppercasedZones[uppercasedTz];

          if (ianaTimeZone === 'Etc/UTC' || ianaTimeZone === 'Etc/GMT') {
            return 'UTC';
          }

          return ianaTimeZone;
        }

        exports.CanonicalizeTimeZoneName = CanonicalizeTimeZoneName; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.CanonicalizeTimeZoneName;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/CanonicalizeTimeZoneName3.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.CanonicalizeTimeZoneName = void 0;
        /**
         * https://tc39.es/ecma402/#sec-canonicalizetimezonename
         * @param tz
         */

        function CanonicalizeTimeZoneName(tz, _a) {
          var tzData = _a.tzData,
              uppercaseLinks = _a.uppercaseLinks;
          var uppercasedTz = tz.toUpperCase();
          var uppercasedZones = Object.keys(tzData).reduce(function (all, z) {
            all[z.toUpperCase()] = z;
            return all;
          }, {});
          var ianaTimeZone = uppercaseLinks[uppercasedTz] || uppercasedZones[uppercasedTz];

          if (ianaTimeZone === 'Etc/UTC' || ianaTimeZone === 'Etc/GMT') {
            return 'UTC';
          }

          return ianaTimeZone;
        }

        exports.CanonicalizeTimeZoneName = CanonicalizeTimeZoneName; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.CanonicalizeTimeZoneName;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/CanonicalizeTimeZoneName4.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.CanonicalizeTimeZoneName = void 0;
        /**
         * https://tc39.es/ecma402/#sec-canonicalizetimezonename
         * @param tz
         */

        function CanonicalizeTimeZoneName(tz, _a) {
          var tzData = _a.tzData,
              uppercaseLinks = _a.uppercaseLinks;
          var uppercasedTz = tz.toUpperCase();
          var uppercasedZones = Object.keys(tzData).reduce(function (all, z) {
            all[z.toUpperCase()] = z;
            return all;
          }, {});
          var ianaTimeZone = uppercaseLinks[uppercasedTz] || uppercasedZones[uppercasedTz];

          if (ianaTimeZone === 'Etc/UTC' || ianaTimeZone === 'Etc/GMT') {
            return 'UTC';
          }

          return ianaTimeZone;
        }

        exports.CanonicalizeTimeZoneName = CanonicalizeTimeZoneName; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.CanonicalizeTimeZoneName;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/CanonicalizeTimeZoneName5.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.CanonicalizeTimeZoneName = void 0;
        /**
         * https://tc39.es/ecma402/#sec-canonicalizetimezonename
         * @param tz
         */

        function CanonicalizeTimeZoneName(tz, _a) {
          var tzData = _a.tzData,
              uppercaseLinks = _a.uppercaseLinks;
          var uppercasedTz = tz.toUpperCase();
          var uppercasedZones = Object.keys(tzData).reduce(function (all, z) {
            all[z.toUpperCase()] = z;
            return all;
          }, {});
          var ianaTimeZone = uppercaseLinks[uppercasedTz] || uppercasedZones[uppercasedTz];

          if (ianaTimeZone === 'Etc/UTC' || ianaTimeZone === 'Etc/GMT') {
            return 'UTC';
          }

          return ianaTimeZone;
        }

        exports.CanonicalizeTimeZoneName = CanonicalizeTimeZoneName; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.CanonicalizeTimeZoneName;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/CanonicalizeTimeZoneName6.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.CanonicalizeTimeZoneName = void 0;
        /**
         * https://tc39.es/ecma402/#sec-canonicalizetimezonename
         * @param tz
         */

        function CanonicalizeTimeZoneName(tz, _a) {
          var tzData = _a.tzData,
              uppercaseLinks = _a.uppercaseLinks;
          var uppercasedTz = tz.toUpperCase();
          var uppercasedZones = Object.keys(tzData).reduce(function (all, z) {
            all[z.toUpperCase()] = z;
            return all;
          }, {});
          var ianaTimeZone = uppercaseLinks[uppercasedTz] || uppercasedZones[uppercasedTz];

          if (ianaTimeZone === 'Etc/UTC' || ianaTimeZone === 'Etc/GMT') {
            return 'UTC';
          }

          return ianaTimeZone;
        }

        exports.CanonicalizeTimeZoneName = CanonicalizeTimeZoneName; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.CanonicalizeTimeZoneName;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/CanonicalizeTimeZoneName7.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.CanonicalizeTimeZoneName = void 0;
        /**
         * https://tc39.es/ecma402/#sec-canonicalizetimezonename
         * @param tz
         */

        function CanonicalizeTimeZoneName(tz, _a) {
          var tzData = _a.tzData,
              uppercaseLinks = _a.uppercaseLinks;
          var uppercasedTz = tz.toUpperCase();
          var uppercasedZones = Object.keys(tzData).reduce(function (all, z) {
            all[z.toUpperCase()] = z;
            return all;
          }, {});
          var ianaTimeZone = uppercaseLinks[uppercasedTz] || uppercasedZones[uppercasedTz];

          if (ianaTimeZone === 'Etc/UTC' || ianaTimeZone === 'Etc/GMT') {
            return 'UTC';
          }

          return ianaTimeZone;
        }

        exports.CanonicalizeTimeZoneName = CanonicalizeTimeZoneName; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.CanonicalizeTimeZoneName;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/cjs-loader.mjs", [], function (exports) {
  'use strict';

  return {
    execute: function () {
      class CjsLoader {
        constructor() {
          this._registry = {};
          this._moduleCache = {};
        }
        /**
         * Defines a CommonJS module.
         * @param id Module ID.
         * @param factory The factory.
         * @param resolveMap An object or a function returning object which records the module specifier resolve result.
         * The later is called as "deferred resolve map" and would be invocated right before CommonJS code execution.
         */


        define(id, factory, resolveMap) {
          this._registry[id] = {
            factory,
            resolveMap
          };
        }
        /**
         * Requires a CommonJS module.
         * @param id Module ID.
         * @returns The module's `module.exports`.
         */


        require(id) {
          return this._require(id);
        }

        throwInvalidWrapper(requestTarget, from) {
          throw new Error(`Module '${requestTarget}' imported from '${from}' is expected be an ESM-wrapped CommonJS module but it doesn't.`);
        }

        _require(id, parent) {
          const cachedModule = this._moduleCache[id];

          if (cachedModule) {
            return cachedModule.exports;
          }

          const module = {
            id,
            exports: {}
          };
          this._moduleCache[id] = module;

          this._tryModuleLoad(module, id);

          return module.exports;
        }

        _resolve(specifier, parent) {
          return this._resolveFromInfos(specifier, parent) || this._throwUnresolved(specifier, parent);
        }

        _resolveFromInfos(specifier, parent) {
          var _cjsInfos$parent;

          if (specifier in cjsInfos) {
            return specifier;
          }

          if (!parent) {
            return;
          }

          return ((_cjsInfos$parent = cjsInfos[parent]) == null ? void 0 : _cjsInfos$parent.resolveCache[specifier]) ?? undefined;
        }

        _tryModuleLoad(module, id) {
          let threw = true;

          try {
            this._load(module, id);

            threw = false;
          } finally {
            if (threw) {
              delete this._moduleCache[id];
            }
          }
        }

        _load(module, id) {
          const {
            factory,
            resolveMap
          } = this._loadWrapper(id);

          const vendorRequire = this._createRequire(module);

          const require = resolveMap ? this._createRequireWithResolveMap(typeof resolveMap === 'function' ? resolveMap() : resolveMap, vendorRequire) : vendorRequire;

          factory(module.exports, require, module);
        }

        _loadWrapper(id) {
          if (id in this._registry) {
            return this._registry[id];
          } else {
            return this._loadHostProvidedModules(id);
          }
        }

        _loadHostProvidedModules(id) {
          return {
            factory: (_exports, _require, module) => {
              if (typeof require === 'undefined') {
                throw new Error(`Current environment does not provide a require() for requiring '${id}'.`);
              }

              try {
                module.exports = require(id);
              } catch (err) {
                throw new Error(`Exception thrown when calling host defined require('${id}').`, {
                  cause: err
                });
              }
            }
          };
        }

        _createRequire(module) {
          return specifier => this._require(specifier, module);
        }

        _createRequireWithResolveMap(requireMap, originalRequire) {
          return specifier => {
            const resolved = requireMap[specifier];

            if (resolved) {
              return originalRequire(resolved);
            } else {
              throw new Error('Unresolved specifier ' + specifier);
            }
          };
        }

        _throwUnresolved(specifier, parentUrl) {
          throw new Error(`Unable to resolve ${specifier} from ${parent}.`);
        }

      }

      var loader = exports('default', new CjsLoader());
    }
  };
});

System.register("chunks:///_virtual/classCallCheck.js", [], function (exports) {
  'use strict';

  return {
    execute: function () {
      exports('default', _classCallCheck);

      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
    }
  };
});

System.register("chunks:///_virtual/CoerceOptionsToObject.js", ['./cjs-loader.mjs', './262.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.CoerceOptionsToObject = void 0;

        var _262_1 = require("./262");
        /**
         * https://tc39.es/ecma402/#sec-coerceoptionstoobject
         * @param options
         * @returns
         */


        function CoerceOptionsToObject(options) {
          if (typeof options === 'undefined') {
            return Object.create(null);
          }

          return (0, _262_1.ToObject)(options);
        }

        exports.CoerceOptionsToObject = CoerceOptionsToObject; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.CoerceOptionsToObject;
      }, () => ({
        './262': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/CoerceOptionsToObject2.js", ['./cjs-loader.mjs', './2622.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.CoerceOptionsToObject = void 0;

        var _262_1 = require("./262");
        /**
         * https://tc39.es/ecma402/#sec-coerceoptionstoobject
         * @param options
         * @returns
         */


        function CoerceOptionsToObject(options) {
          if (typeof options === 'undefined') {
            return Object.create(null);
          }

          return (0, _262_1.ToObject)(options);
        }

        exports.CoerceOptionsToObject = CoerceOptionsToObject; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.CoerceOptionsToObject;
      }, () => ({
        './262': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/CoerceOptionsToObject3.js", ['./cjs-loader.mjs', './2623.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.CoerceOptionsToObject = void 0;

        var _262_1 = require("./262");
        /**
         * https://tc39.es/ecma402/#sec-coerceoptionstoobject
         * @param options
         * @returns
         */


        function CoerceOptionsToObject(options) {
          if (typeof options === 'undefined') {
            return Object.create(null);
          }

          return (0, _262_1.ToObject)(options);
        }

        exports.CoerceOptionsToObject = CoerceOptionsToObject; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.CoerceOptionsToObject;
      }, () => ({
        './262': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/CoerceOptionsToObject4.js", ['./cjs-loader.mjs', './2624.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.CoerceOptionsToObject = void 0;

        var _262_1 = require("./262");
        /**
         * https://tc39.es/ecma402/#sec-coerceoptionstoobject
         * @param options
         * @returns
         */


        function CoerceOptionsToObject(options) {
          if (typeof options === 'undefined') {
            return Object.create(null);
          }

          return (0, _262_1.ToObject)(options);
        }

        exports.CoerceOptionsToObject = CoerceOptionsToObject; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.CoerceOptionsToObject;
      }, () => ({
        './262': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/CoerceOptionsToObject5.js", ['./cjs-loader.mjs', './2625.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.CoerceOptionsToObject = void 0;

        var _262_1 = require("./262");
        /**
         * https://tc39.es/ecma402/#sec-coerceoptionstoobject
         * @param options
         * @returns
         */


        function CoerceOptionsToObject(options) {
          if (typeof options === 'undefined') {
            return Object.create(null);
          }

          return (0, _262_1.ToObject)(options);
        }

        exports.CoerceOptionsToObject = CoerceOptionsToObject; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.CoerceOptionsToObject;
      }, () => ({
        './262': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/CoerceOptionsToObject6.js", ['./cjs-loader.mjs', './2626.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.CoerceOptionsToObject = void 0;

        var _262_1 = require("./262");
        /**
         * https://tc39.es/ecma402/#sec-coerceoptionstoobject
         * @param options
         * @returns
         */


        function CoerceOptionsToObject(options) {
          if (typeof options === 'undefined') {
            return Object.create(null);
          }

          return (0, _262_1.ToObject)(options);
        }

        exports.CoerceOptionsToObject = CoerceOptionsToObject; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.CoerceOptionsToObject;
      }, () => ({
        './262': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/CoerceOptionsToObject7.js", ['./cjs-loader.mjs', './2627.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.CoerceOptionsToObject = void 0;

        var _262_1 = require("./262");
        /**
         * https://tc39.es/ecma402/#sec-coerceoptionstoobject
         * @param options
         * @returns
         */


        function CoerceOptionsToObject(options) {
          if (typeof options === 'undefined') {
            return Object.create(null);
          }

          return (0, _262_1.ToObject)(options);
        }

        exports.CoerceOptionsToObject = CoerceOptionsToObject; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.CoerceOptionsToObject;
      }, () => ({
        './262': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/ComputeExponent.js", ['./cjs-loader.mjs', './utils2.js', './ComputeExponentForMagnitude.js', './FormatNumericToString.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ComputeExponent = void 0;

        var utils_1 = require("../utils");

        var ComputeExponentForMagnitude_1 = require("./ComputeExponentForMagnitude");

        var FormatNumericToString_1 = require("./FormatNumericToString");
        /**
         * The abstract operation ComputeExponent computes an exponent (power of ten) by which to scale x
         * according to the number formatting settings. It handles cases such as 999 rounding up to 1000,
         * requiring a different exponent.
         *
         * NOT IN SPEC: it returns [exponent, magnitude].
         */


        function ComputeExponent(numberFormat, x, _a) {
          var getInternalSlots = _a.getInternalSlots;

          if (x === 0) {
            return [0, 0];
          }

          if (x < 0) {
            x = -x;
          }

          var magnitude = (0, utils_1.getMagnitude)(x);
          var exponent = (0, ComputeExponentForMagnitude_1.ComputeExponentForMagnitude)(numberFormat, magnitude, {
            getInternalSlots: getInternalSlots
          }); // Preserve more precision by doing multiplication when exponent is negative.

          x = exponent < 0 ? x * Math.pow(10, -exponent) : x / Math.pow(10, exponent);
          var formatNumberResult = (0, FormatNumericToString_1.FormatNumericToString)(getInternalSlots(numberFormat), x);

          if (formatNumberResult.roundedNumber === 0) {
            return [exponent, magnitude];
          }

          var newMagnitude = (0, utils_1.getMagnitude)(formatNumberResult.roundedNumber);

          if (newMagnitude === magnitude - exponent) {
            return [exponent, magnitude];
          }

          return [(0, ComputeExponentForMagnitude_1.ComputeExponentForMagnitude)(numberFormat, magnitude + 1, {
            getInternalSlots: getInternalSlots
          }), magnitude + 1];
        }

        exports.ComputeExponent = ComputeExponent; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.ComputeExponent;
      }, () => ({
        '../utils': __cjsMetaURL$1,
        './ComputeExponentForMagnitude': __cjsMetaURL$2,
        './FormatNumericToString': __cjsMetaURL$3
      }));
    }
  };
});

System.register("chunks:///_virtual/ComputeExponent2.js", ['./cjs-loader.mjs', './utils3.js', './ComputeExponentForMagnitude2.js', './FormatNumericToString2.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ComputeExponent = void 0;

        var utils_1 = require("../utils");

        var ComputeExponentForMagnitude_1 = require("./ComputeExponentForMagnitude");

        var FormatNumericToString_1 = require("./FormatNumericToString");
        /**
         * The abstract operation ComputeExponent computes an exponent (power of ten) by which to scale x
         * according to the number formatting settings. It handles cases such as 999 rounding up to 1000,
         * requiring a different exponent.
         *
         * NOT IN SPEC: it returns [exponent, magnitude].
         */


        function ComputeExponent(numberFormat, x, _a) {
          var getInternalSlots = _a.getInternalSlots;

          if (x === 0) {
            return [0, 0];
          }

          if (x < 0) {
            x = -x;
          }

          var magnitude = (0, utils_1.getMagnitude)(x);
          var exponent = (0, ComputeExponentForMagnitude_1.ComputeExponentForMagnitude)(numberFormat, magnitude, {
            getInternalSlots: getInternalSlots
          }); // Preserve more precision by doing multiplication when exponent is negative.

          x = exponent < 0 ? x * Math.pow(10, -exponent) : x / Math.pow(10, exponent);
          var formatNumberResult = (0, FormatNumericToString_1.FormatNumericToString)(getInternalSlots(numberFormat), x);

          if (formatNumberResult.roundedNumber === 0) {
            return [exponent, magnitude];
          }

          var newMagnitude = (0, utils_1.getMagnitude)(formatNumberResult.roundedNumber);

          if (newMagnitude === magnitude - exponent) {
            return [exponent, magnitude];
          }

          return [(0, ComputeExponentForMagnitude_1.ComputeExponentForMagnitude)(numberFormat, magnitude + 1, {
            getInternalSlots: getInternalSlots
          }), magnitude + 1];
        }

        exports.ComputeExponent = ComputeExponent; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.ComputeExponent;
      }, () => ({
        '../utils': __cjsMetaURL$1,
        './ComputeExponentForMagnitude': __cjsMetaURL$2,
        './FormatNumericToString': __cjsMetaURL$3
      }));
    }
  };
});

System.register("chunks:///_virtual/ComputeExponent3.js", ['./cjs-loader.mjs', './utils4.js', './ComputeExponentForMagnitude3.js', './FormatNumericToString3.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ComputeExponent = void 0;

        var utils_1 = require("../utils");

        var ComputeExponentForMagnitude_1 = require("./ComputeExponentForMagnitude");

        var FormatNumericToString_1 = require("./FormatNumericToString");
        /**
         * The abstract operation ComputeExponent computes an exponent (power of ten) by which to scale x
         * according to the number formatting settings. It handles cases such as 999 rounding up to 1000,
         * requiring a different exponent.
         *
         * NOT IN SPEC: it returns [exponent, magnitude].
         */


        function ComputeExponent(numberFormat, x, _a) {
          var getInternalSlots = _a.getInternalSlots;

          if (x === 0) {
            return [0, 0];
          }

          if (x < 0) {
            x = -x;
          }

          var magnitude = (0, utils_1.getMagnitude)(x);
          var exponent = (0, ComputeExponentForMagnitude_1.ComputeExponentForMagnitude)(numberFormat, magnitude, {
            getInternalSlots: getInternalSlots
          }); // Preserve more precision by doing multiplication when exponent is negative.

          x = exponent < 0 ? x * Math.pow(10, -exponent) : x / Math.pow(10, exponent);
          var formatNumberResult = (0, FormatNumericToString_1.FormatNumericToString)(getInternalSlots(numberFormat), x);

          if (formatNumberResult.roundedNumber === 0) {
            return [exponent, magnitude];
          }

          var newMagnitude = (0, utils_1.getMagnitude)(formatNumberResult.roundedNumber);

          if (newMagnitude === magnitude - exponent) {
            return [exponent, magnitude];
          }

          return [(0, ComputeExponentForMagnitude_1.ComputeExponentForMagnitude)(numberFormat, magnitude + 1, {
            getInternalSlots: getInternalSlots
          }), magnitude + 1];
        }

        exports.ComputeExponent = ComputeExponent; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.ComputeExponent;
      }, () => ({
        '../utils': __cjsMetaURL$1,
        './ComputeExponentForMagnitude': __cjsMetaURL$2,
        './FormatNumericToString': __cjsMetaURL$3
      }));
    }
  };
});

System.register("chunks:///_virtual/ComputeExponent4.js", ['./cjs-loader.mjs', './utils5.js', './ComputeExponentForMagnitude4.js', './FormatNumericToString4.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ComputeExponent = void 0;

        var utils_1 = require("../utils");

        var ComputeExponentForMagnitude_1 = require("./ComputeExponentForMagnitude");

        var FormatNumericToString_1 = require("./FormatNumericToString");
        /**
         * The abstract operation ComputeExponent computes an exponent (power of ten) by which to scale x
         * according to the number formatting settings. It handles cases such as 999 rounding up to 1000,
         * requiring a different exponent.
         *
         * NOT IN SPEC: it returns [exponent, magnitude].
         */


        function ComputeExponent(numberFormat, x, _a) {
          var getInternalSlots = _a.getInternalSlots;

          if (x === 0) {
            return [0, 0];
          }

          if (x < 0) {
            x = -x;
          }

          var magnitude = (0, utils_1.getMagnitude)(x);
          var exponent = (0, ComputeExponentForMagnitude_1.ComputeExponentForMagnitude)(numberFormat, magnitude, {
            getInternalSlots: getInternalSlots
          }); // Preserve more precision by doing multiplication when exponent is negative.

          x = exponent < 0 ? x * Math.pow(10, -exponent) : x / Math.pow(10, exponent);
          var formatNumberResult = (0, FormatNumericToString_1.FormatNumericToString)(getInternalSlots(numberFormat), x);

          if (formatNumberResult.roundedNumber === 0) {
            return [exponent, magnitude];
          }

          var newMagnitude = (0, utils_1.getMagnitude)(formatNumberResult.roundedNumber);

          if (newMagnitude === magnitude - exponent) {
            return [exponent, magnitude];
          }

          return [(0, ComputeExponentForMagnitude_1.ComputeExponentForMagnitude)(numberFormat, magnitude + 1, {
            getInternalSlots: getInternalSlots
          }), magnitude + 1];
        }

        exports.ComputeExponent = ComputeExponent; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.ComputeExponent;
      }, () => ({
        '../utils': __cjsMetaURL$1,
        './ComputeExponentForMagnitude': __cjsMetaURL$2,
        './FormatNumericToString': __cjsMetaURL$3
      }));
    }
  };
});

System.register("chunks:///_virtual/ComputeExponent5.js", ['./cjs-loader.mjs', './utils6.js', './ComputeExponentForMagnitude5.js', './FormatNumericToString5.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ComputeExponent = void 0;

        var utils_1 = require("../utils");

        var ComputeExponentForMagnitude_1 = require("./ComputeExponentForMagnitude");

        var FormatNumericToString_1 = require("./FormatNumericToString");
        /**
         * The abstract operation ComputeExponent computes an exponent (power of ten) by which to scale x
         * according to the number formatting settings. It handles cases such as 999 rounding up to 1000,
         * requiring a different exponent.
         *
         * NOT IN SPEC: it returns [exponent, magnitude].
         */


        function ComputeExponent(numberFormat, x, _a) {
          var getInternalSlots = _a.getInternalSlots;

          if (x === 0) {
            return [0, 0];
          }

          if (x < 0) {
            x = -x;
          }

          var magnitude = (0, utils_1.getMagnitude)(x);
          var exponent = (0, ComputeExponentForMagnitude_1.ComputeExponentForMagnitude)(numberFormat, magnitude, {
            getInternalSlots: getInternalSlots
          }); // Preserve more precision by doing multiplication when exponent is negative.

          x = exponent < 0 ? x * Math.pow(10, -exponent) : x / Math.pow(10, exponent);
          var formatNumberResult = (0, FormatNumericToString_1.FormatNumericToString)(getInternalSlots(numberFormat), x);

          if (formatNumberResult.roundedNumber === 0) {
            return [exponent, magnitude];
          }

          var newMagnitude = (0, utils_1.getMagnitude)(formatNumberResult.roundedNumber);

          if (newMagnitude === magnitude - exponent) {
            return [exponent, magnitude];
          }

          return [(0, ComputeExponentForMagnitude_1.ComputeExponentForMagnitude)(numberFormat, magnitude + 1, {
            getInternalSlots: getInternalSlots
          }), magnitude + 1];
        }

        exports.ComputeExponent = ComputeExponent; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.ComputeExponent;
      }, () => ({
        '../utils': __cjsMetaURL$1,
        './ComputeExponentForMagnitude': __cjsMetaURL$2,
        './FormatNumericToString': __cjsMetaURL$3
      }));
    }
  };
});

System.register("chunks:///_virtual/ComputeExponent6.js", ['./cjs-loader.mjs', './utils8.js', './ComputeExponentForMagnitude6.js', './FormatNumericToString6.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ComputeExponent = void 0;

        var utils_1 = require("../utils");

        var ComputeExponentForMagnitude_1 = require("./ComputeExponentForMagnitude");

        var FormatNumericToString_1 = require("./FormatNumericToString");
        /**
         * The abstract operation ComputeExponent computes an exponent (power of ten) by which to scale x
         * according to the number formatting settings. It handles cases such as 999 rounding up to 1000,
         * requiring a different exponent.
         *
         * NOT IN SPEC: it returns [exponent, magnitude].
         */


        function ComputeExponent(numberFormat, x, _a) {
          var getInternalSlots = _a.getInternalSlots;

          if (x === 0) {
            return [0, 0];
          }

          if (x < 0) {
            x = -x;
          }

          var magnitude = (0, utils_1.getMagnitude)(x);
          var exponent = (0, ComputeExponentForMagnitude_1.ComputeExponentForMagnitude)(numberFormat, magnitude, {
            getInternalSlots: getInternalSlots
          }); // Preserve more precision by doing multiplication when exponent is negative.

          x = exponent < 0 ? x * Math.pow(10, -exponent) : x / Math.pow(10, exponent);
          var formatNumberResult = (0, FormatNumericToString_1.FormatNumericToString)(getInternalSlots(numberFormat), x);

          if (formatNumberResult.roundedNumber === 0) {
            return [exponent, magnitude];
          }

          var newMagnitude = (0, utils_1.getMagnitude)(formatNumberResult.roundedNumber);

          if (newMagnitude === magnitude - exponent) {
            return [exponent, magnitude];
          }

          return [(0, ComputeExponentForMagnitude_1.ComputeExponentForMagnitude)(numberFormat, magnitude + 1, {
            getInternalSlots: getInternalSlots
          }), magnitude + 1];
        }

        exports.ComputeExponent = ComputeExponent; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.ComputeExponent;
      }, () => ({
        '../utils': __cjsMetaURL$1,
        './ComputeExponentForMagnitude': __cjsMetaURL$2,
        './FormatNumericToString': __cjsMetaURL$3
      }));
    }
  };
});

System.register("chunks:///_virtual/ComputeExponent7.js", ['./cjs-loader.mjs', './utils9.js', './ComputeExponentForMagnitude7.js', './FormatNumericToString7.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ComputeExponent = void 0;

        var utils_1 = require("../utils");

        var ComputeExponentForMagnitude_1 = require("./ComputeExponentForMagnitude");

        var FormatNumericToString_1 = require("./FormatNumericToString");
        /**
         * The abstract operation ComputeExponent computes an exponent (power of ten) by which to scale x
         * according to the number formatting settings. It handles cases such as 999 rounding up to 1000,
         * requiring a different exponent.
         *
         * NOT IN SPEC: it returns [exponent, magnitude].
         */


        function ComputeExponent(numberFormat, x, _a) {
          var getInternalSlots = _a.getInternalSlots;

          if (x === 0) {
            return [0, 0];
          }

          if (x < 0) {
            x = -x;
          }

          var magnitude = (0, utils_1.getMagnitude)(x);
          var exponent = (0, ComputeExponentForMagnitude_1.ComputeExponentForMagnitude)(numberFormat, magnitude, {
            getInternalSlots: getInternalSlots
          }); // Preserve more precision by doing multiplication when exponent is negative.

          x = exponent < 0 ? x * Math.pow(10, -exponent) : x / Math.pow(10, exponent);
          var formatNumberResult = (0, FormatNumericToString_1.FormatNumericToString)(getInternalSlots(numberFormat), x);

          if (formatNumberResult.roundedNumber === 0) {
            return [exponent, magnitude];
          }

          var newMagnitude = (0, utils_1.getMagnitude)(formatNumberResult.roundedNumber);

          if (newMagnitude === magnitude - exponent) {
            return [exponent, magnitude];
          }

          return [(0, ComputeExponentForMagnitude_1.ComputeExponentForMagnitude)(numberFormat, magnitude + 1, {
            getInternalSlots: getInternalSlots
          }), magnitude + 1];
        }

        exports.ComputeExponent = ComputeExponent; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.ComputeExponent;
      }, () => ({
        '../utils': __cjsMetaURL$1,
        './ComputeExponentForMagnitude': __cjsMetaURL$2,
        './FormatNumericToString': __cjsMetaURL$3
      }));
    }
  };
});

System.register("chunks:///_virtual/ComputeExponentForMagnitude.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ComputeExponentForMagnitude = void 0;
        /**
         * The abstract operation ComputeExponentForMagnitude computes an exponent by which to scale a
         * number of the given magnitude (power of ten of the most significant digit) according to the
         * locale and the desired notation (scientific, engineering, or compact).
         */

        function ComputeExponentForMagnitude(numberFormat, magnitude, _a) {
          var getInternalSlots = _a.getInternalSlots;
          var internalSlots = getInternalSlots(numberFormat);
          var notation = internalSlots.notation,
              dataLocaleData = internalSlots.dataLocaleData,
              numberingSystem = internalSlots.numberingSystem;

          switch (notation) {
            case 'standard':
              return 0;

            case 'scientific':
              return magnitude;

            case 'engineering':
              return Math.floor(magnitude / 3) * 3;

            default:
              {
                // Let exponent be an implementation- and locale-dependent (ILD) integer by which to scale a
                // number of the given magnitude in compact notation for the current locale.
                var compactDisplay = internalSlots.compactDisplay,
                    style = internalSlots.style,
                    currencyDisplay = internalSlots.currencyDisplay;
                var thresholdMap = void 0;

                if (style === 'currency' && currencyDisplay !== 'name') {
                  var currency = dataLocaleData.numbers.currency[numberingSystem] || dataLocaleData.numbers.currency[dataLocaleData.numbers.nu[0]];
                  thresholdMap = currency.short;
                } else {
                  var decimal = dataLocaleData.numbers.decimal[numberingSystem] || dataLocaleData.numbers.decimal[dataLocaleData.numbers.nu[0]];
                  thresholdMap = compactDisplay === 'long' ? decimal.long : decimal.short;
                }

                if (!thresholdMap) {
                  return 0;
                }

                var num = String(Math.pow(10, magnitude));
                var thresholds = Object.keys(thresholdMap); // TODO: this can be pre-processed

                if (num < thresholds[0]) {
                  return 0;
                }

                if (num > thresholds[thresholds.length - 1]) {
                  return thresholds[thresholds.length - 1].length - 1;
                }

                var i = thresholds.indexOf(num);

                if (i === -1) {
                  return 0;
                } // See https://unicode.org/reports/tr35/tr35-numbers.html#Compact_Number_Formats
                // Special handling if the pattern is precisely `0`.


                var magnitudeKey = thresholds[i]; // TODO: do we need to handle plural here?

                var compactPattern = thresholdMap[magnitudeKey].other;

                if (compactPattern === '0') {
                  return 0;
                } // Example: in zh-TW, `10000000` maps to `0000萬`. So we need to return 8 - 4 = 4 here.


                return magnitudeKey.length - thresholdMap[magnitudeKey].other.match(/0+/)[0].length;
              }
          }
        }

        exports.ComputeExponentForMagnitude = ComputeExponentForMagnitude; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.ComputeExponentForMagnitude;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/ComputeExponentForMagnitude2.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ComputeExponentForMagnitude = void 0;
        /**
         * The abstract operation ComputeExponentForMagnitude computes an exponent by which to scale a
         * number of the given magnitude (power of ten of the most significant digit) according to the
         * locale and the desired notation (scientific, engineering, or compact).
         */

        function ComputeExponentForMagnitude(numberFormat, magnitude, _a) {
          var getInternalSlots = _a.getInternalSlots;
          var internalSlots = getInternalSlots(numberFormat);
          var notation = internalSlots.notation,
              dataLocaleData = internalSlots.dataLocaleData,
              numberingSystem = internalSlots.numberingSystem;

          switch (notation) {
            case 'standard':
              return 0;

            case 'scientific':
              return magnitude;

            case 'engineering':
              return Math.floor(magnitude / 3) * 3;

            default:
              {
                // Let exponent be an implementation- and locale-dependent (ILD) integer by which to scale a
                // number of the given magnitude in compact notation for the current locale.
                var compactDisplay = internalSlots.compactDisplay,
                    style = internalSlots.style,
                    currencyDisplay = internalSlots.currencyDisplay;
                var thresholdMap = void 0;

                if (style === 'currency' && currencyDisplay !== 'name') {
                  var currency = dataLocaleData.numbers.currency[numberingSystem] || dataLocaleData.numbers.currency[dataLocaleData.numbers.nu[0]];
                  thresholdMap = currency.short;
                } else {
                  var decimal = dataLocaleData.numbers.decimal[numberingSystem] || dataLocaleData.numbers.decimal[dataLocaleData.numbers.nu[0]];
                  thresholdMap = compactDisplay === 'long' ? decimal.long : decimal.short;
                }

                if (!thresholdMap) {
                  return 0;
                }

                var num = String(Math.pow(10, magnitude));
                var thresholds = Object.keys(thresholdMap); // TODO: this can be pre-processed

                if (num < thresholds[0]) {
                  return 0;
                }

                if (num > thresholds[thresholds.length - 1]) {
                  return thresholds[thresholds.length - 1].length - 1;
                }

                var i = thresholds.indexOf(num);

                if (i === -1) {
                  return 0;
                } // See https://unicode.org/reports/tr35/tr35-numbers.html#Compact_Number_Formats
                // Special handling if the pattern is precisely `0`.


                var magnitudeKey = thresholds[i]; // TODO: do we need to handle plural here?

                var compactPattern = thresholdMap[magnitudeKey].other;

                if (compactPattern === '0') {
                  return 0;
                } // Example: in zh-TW, `10000000` maps to `0000萬`. So we need to return 8 - 4 = 4 here.


                return magnitudeKey.length - thresholdMap[magnitudeKey].other.match(/0+/)[0].length;
              }
          }
        }

        exports.ComputeExponentForMagnitude = ComputeExponentForMagnitude; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.ComputeExponentForMagnitude;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/ComputeExponentForMagnitude3.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ComputeExponentForMagnitude = void 0;
        /**
         * The abstract operation ComputeExponentForMagnitude computes an exponent by which to scale a
         * number of the given magnitude (power of ten of the most significant digit) according to the
         * locale and the desired notation (scientific, engineering, or compact).
         */

        function ComputeExponentForMagnitude(numberFormat, magnitude, _a) {
          var getInternalSlots = _a.getInternalSlots;
          var internalSlots = getInternalSlots(numberFormat);
          var notation = internalSlots.notation,
              dataLocaleData = internalSlots.dataLocaleData,
              numberingSystem = internalSlots.numberingSystem;

          switch (notation) {
            case 'standard':
              return 0;

            case 'scientific':
              return magnitude;

            case 'engineering':
              return Math.floor(magnitude / 3) * 3;

            default:
              {
                // Let exponent be an implementation- and locale-dependent (ILD) integer by which to scale a
                // number of the given magnitude in compact notation for the current locale.
                var compactDisplay = internalSlots.compactDisplay,
                    style = internalSlots.style,
                    currencyDisplay = internalSlots.currencyDisplay;
                var thresholdMap = void 0;

                if (style === 'currency' && currencyDisplay !== 'name') {
                  var currency = dataLocaleData.numbers.currency[numberingSystem] || dataLocaleData.numbers.currency[dataLocaleData.numbers.nu[0]];
                  thresholdMap = currency.short;
                } else {
                  var decimal = dataLocaleData.numbers.decimal[numberingSystem] || dataLocaleData.numbers.decimal[dataLocaleData.numbers.nu[0]];
                  thresholdMap = compactDisplay === 'long' ? decimal.long : decimal.short;
                }

                if (!thresholdMap) {
                  return 0;
                }

                var num = String(Math.pow(10, magnitude));
                var thresholds = Object.keys(thresholdMap); // TODO: this can be pre-processed

                if (num < thresholds[0]) {
                  return 0;
                }

                if (num > thresholds[thresholds.length - 1]) {
                  return thresholds[thresholds.length - 1].length - 1;
                }

                var i = thresholds.indexOf(num);

                if (i === -1) {
                  return 0;
                } // See https://unicode.org/reports/tr35/tr35-numbers.html#Compact_Number_Formats
                // Special handling if the pattern is precisely `0`.


                var magnitudeKey = thresholds[i]; // TODO: do we need to handle plural here?

                var compactPattern = thresholdMap[magnitudeKey].other;

                if (compactPattern === '0') {
                  return 0;
                } // Example: in zh-TW, `10000000` maps to `0000萬`. So we need to return 8 - 4 = 4 here.


                return magnitudeKey.length - thresholdMap[magnitudeKey].other.match(/0+/)[0].length;
              }
          }
        }

        exports.ComputeExponentForMagnitude = ComputeExponentForMagnitude; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.ComputeExponentForMagnitude;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/ComputeExponentForMagnitude4.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ComputeExponentForMagnitude = void 0;
        /**
         * The abstract operation ComputeExponentForMagnitude computes an exponent by which to scale a
         * number of the given magnitude (power of ten of the most significant digit) according to the
         * locale and the desired notation (scientific, engineering, or compact).
         */

        function ComputeExponentForMagnitude(numberFormat, magnitude, _a) {
          var getInternalSlots = _a.getInternalSlots;
          var internalSlots = getInternalSlots(numberFormat);
          var notation = internalSlots.notation,
              dataLocaleData = internalSlots.dataLocaleData,
              numberingSystem = internalSlots.numberingSystem;

          switch (notation) {
            case 'standard':
              return 0;

            case 'scientific':
              return magnitude;

            case 'engineering':
              return Math.floor(magnitude / 3) * 3;

            default:
              {
                // Let exponent be an implementation- and locale-dependent (ILD) integer by which to scale a
                // number of the given magnitude in compact notation for the current locale.
                var compactDisplay = internalSlots.compactDisplay,
                    style = internalSlots.style,
                    currencyDisplay = internalSlots.currencyDisplay;
                var thresholdMap = void 0;

                if (style === 'currency' && currencyDisplay !== 'name') {
                  var currency = dataLocaleData.numbers.currency[numberingSystem] || dataLocaleData.numbers.currency[dataLocaleData.numbers.nu[0]];
                  thresholdMap = currency.short;
                } else {
                  var decimal = dataLocaleData.numbers.decimal[numberingSystem] || dataLocaleData.numbers.decimal[dataLocaleData.numbers.nu[0]];
                  thresholdMap = compactDisplay === 'long' ? decimal.long : decimal.short;
                }

                if (!thresholdMap) {
                  return 0;
                }

                var num = String(Math.pow(10, magnitude));
                var thresholds = Object.keys(thresholdMap); // TODO: this can be pre-processed

                if (num < thresholds[0]) {
                  return 0;
                }

                if (num > thresholds[thresholds.length - 1]) {
                  return thresholds[thresholds.length - 1].length - 1;
                }

                var i = thresholds.indexOf(num);

                if (i === -1) {
                  return 0;
                } // See https://unicode.org/reports/tr35/tr35-numbers.html#Compact_Number_Formats
                // Special handling if the pattern is precisely `0`.


                var magnitudeKey = thresholds[i]; // TODO: do we need to handle plural here?

                var compactPattern = thresholdMap[magnitudeKey].other;

                if (compactPattern === '0') {
                  return 0;
                } // Example: in zh-TW, `10000000` maps to `0000萬`. So we need to return 8 - 4 = 4 here.


                return magnitudeKey.length - thresholdMap[magnitudeKey].other.match(/0+/)[0].length;
              }
          }
        }

        exports.ComputeExponentForMagnitude = ComputeExponentForMagnitude; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.ComputeExponentForMagnitude;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/ComputeExponentForMagnitude5.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ComputeExponentForMagnitude = void 0;
        /**
         * The abstract operation ComputeExponentForMagnitude computes an exponent by which to scale a
         * number of the given magnitude (power of ten of the most significant digit) according to the
         * locale and the desired notation (scientific, engineering, or compact).
         */

        function ComputeExponentForMagnitude(numberFormat, magnitude, _a) {
          var getInternalSlots = _a.getInternalSlots;
          var internalSlots = getInternalSlots(numberFormat);
          var notation = internalSlots.notation,
              dataLocaleData = internalSlots.dataLocaleData,
              numberingSystem = internalSlots.numberingSystem;

          switch (notation) {
            case 'standard':
              return 0;

            case 'scientific':
              return magnitude;

            case 'engineering':
              return Math.floor(magnitude / 3) * 3;

            default:
              {
                // Let exponent be an implementation- and locale-dependent (ILD) integer by which to scale a
                // number of the given magnitude in compact notation for the current locale.
                var compactDisplay = internalSlots.compactDisplay,
                    style = internalSlots.style,
                    currencyDisplay = internalSlots.currencyDisplay;
                var thresholdMap = void 0;

                if (style === 'currency' && currencyDisplay !== 'name') {
                  var currency = dataLocaleData.numbers.currency[numberingSystem] || dataLocaleData.numbers.currency[dataLocaleData.numbers.nu[0]];
                  thresholdMap = currency.short;
                } else {
                  var decimal = dataLocaleData.numbers.decimal[numberingSystem] || dataLocaleData.numbers.decimal[dataLocaleData.numbers.nu[0]];
                  thresholdMap = compactDisplay === 'long' ? decimal.long : decimal.short;
                }

                if (!thresholdMap) {
                  return 0;
                }

                var num = String(Math.pow(10, magnitude));
                var thresholds = Object.keys(thresholdMap); // TODO: this can be pre-processed

                if (num < thresholds[0]) {
                  return 0;
                }

                if (num > thresholds[thresholds.length - 1]) {
                  return thresholds[thresholds.length - 1].length - 1;
                }

                var i = thresholds.indexOf(num);

                if (i === -1) {
                  return 0;
                } // See https://unicode.org/reports/tr35/tr35-numbers.html#Compact_Number_Formats
                // Special handling if the pattern is precisely `0`.


                var magnitudeKey = thresholds[i]; // TODO: do we need to handle plural here?

                var compactPattern = thresholdMap[magnitudeKey].other;

                if (compactPattern === '0') {
                  return 0;
                } // Example: in zh-TW, `10000000` maps to `0000萬`. So we need to return 8 - 4 = 4 here.


                return magnitudeKey.length - thresholdMap[magnitudeKey].other.match(/0+/)[0].length;
              }
          }
        }

        exports.ComputeExponentForMagnitude = ComputeExponentForMagnitude; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.ComputeExponentForMagnitude;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/ComputeExponentForMagnitude6.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ComputeExponentForMagnitude = void 0;
        /**
         * The abstract operation ComputeExponentForMagnitude computes an exponent by which to scale a
         * number of the given magnitude (power of ten of the most significant digit) according to the
         * locale and the desired notation (scientific, engineering, or compact).
         */

        function ComputeExponentForMagnitude(numberFormat, magnitude, _a) {
          var getInternalSlots = _a.getInternalSlots;
          var internalSlots = getInternalSlots(numberFormat);
          var notation = internalSlots.notation,
              dataLocaleData = internalSlots.dataLocaleData,
              numberingSystem = internalSlots.numberingSystem;

          switch (notation) {
            case 'standard':
              return 0;

            case 'scientific':
              return magnitude;

            case 'engineering':
              return Math.floor(magnitude / 3) * 3;

            default:
              {
                // Let exponent be an implementation- and locale-dependent (ILD) integer by which to scale a
                // number of the given magnitude in compact notation for the current locale.
                var compactDisplay = internalSlots.compactDisplay,
                    style = internalSlots.style,
                    currencyDisplay = internalSlots.currencyDisplay;
                var thresholdMap = void 0;

                if (style === 'currency' && currencyDisplay !== 'name') {
                  var currency = dataLocaleData.numbers.currency[numberingSystem] || dataLocaleData.numbers.currency[dataLocaleData.numbers.nu[0]];
                  thresholdMap = currency.short;
                } else {
                  var decimal = dataLocaleData.numbers.decimal[numberingSystem] || dataLocaleData.numbers.decimal[dataLocaleData.numbers.nu[0]];
                  thresholdMap = compactDisplay === 'long' ? decimal.long : decimal.short;
                }

                if (!thresholdMap) {
                  return 0;
                }

                var num = String(Math.pow(10, magnitude));
                var thresholds = Object.keys(thresholdMap); // TODO: this can be pre-processed

                if (num < thresholds[0]) {
                  return 0;
                }

                if (num > thresholds[thresholds.length - 1]) {
                  return thresholds[thresholds.length - 1].length - 1;
                }

                var i = thresholds.indexOf(num);

                if (i === -1) {
                  return 0;
                } // See https://unicode.org/reports/tr35/tr35-numbers.html#Compact_Number_Formats
                // Special handling if the pattern is precisely `0`.


                var magnitudeKey = thresholds[i]; // TODO: do we need to handle plural here?

                var compactPattern = thresholdMap[magnitudeKey].other;

                if (compactPattern === '0') {
                  return 0;
                } // Example: in zh-TW, `10000000` maps to `0000萬`. So we need to return 8 - 4 = 4 here.


                return magnitudeKey.length - thresholdMap[magnitudeKey].other.match(/0+/)[0].length;
              }
          }
        }

        exports.ComputeExponentForMagnitude = ComputeExponentForMagnitude; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.ComputeExponentForMagnitude;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/ComputeExponentForMagnitude7.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ComputeExponentForMagnitude = void 0;
        /**
         * The abstract operation ComputeExponentForMagnitude computes an exponent by which to scale a
         * number of the given magnitude (power of ten of the most significant digit) according to the
         * locale and the desired notation (scientific, engineering, or compact).
         */

        function ComputeExponentForMagnitude(numberFormat, magnitude, _a) {
          var getInternalSlots = _a.getInternalSlots;
          var internalSlots = getInternalSlots(numberFormat);
          var notation = internalSlots.notation,
              dataLocaleData = internalSlots.dataLocaleData,
              numberingSystem = internalSlots.numberingSystem;

          switch (notation) {
            case 'standard':
              return 0;

            case 'scientific':
              return magnitude;

            case 'engineering':
              return Math.floor(magnitude / 3) * 3;

            default:
              {
                // Let exponent be an implementation- and locale-dependent (ILD) integer by which to scale a
                // number of the given magnitude in compact notation for the current locale.
                var compactDisplay = internalSlots.compactDisplay,
                    style = internalSlots.style,
                    currencyDisplay = internalSlots.currencyDisplay;
                var thresholdMap = void 0;

                if (style === 'currency' && currencyDisplay !== 'name') {
                  var currency = dataLocaleData.numbers.currency[numberingSystem] || dataLocaleData.numbers.currency[dataLocaleData.numbers.nu[0]];
                  thresholdMap = currency.short;
                } else {
                  var decimal = dataLocaleData.numbers.decimal[numberingSystem] || dataLocaleData.numbers.decimal[dataLocaleData.numbers.nu[0]];
                  thresholdMap = compactDisplay === 'long' ? decimal.long : decimal.short;
                }

                if (!thresholdMap) {
                  return 0;
                }

                var num = String(Math.pow(10, magnitude));
                var thresholds = Object.keys(thresholdMap); // TODO: this can be pre-processed

                if (num < thresholds[0]) {
                  return 0;
                }

                if (num > thresholds[thresholds.length - 1]) {
                  return thresholds[thresholds.length - 1].length - 1;
                }

                var i = thresholds.indexOf(num);

                if (i === -1) {
                  return 0;
                } // See https://unicode.org/reports/tr35/tr35-numbers.html#Compact_Number_Formats
                // Special handling if the pattern is precisely `0`.


                var magnitudeKey = thresholds[i]; // TODO: do we need to handle plural here?

                var compactPattern = thresholdMap[magnitudeKey].other;

                if (compactPattern === '0') {
                  return 0;
                } // Example: in zh-TW, `10000000` maps to `0000萬`. So we need to return 8 - 4 = 4 here.


                return magnitudeKey.length - thresholdMap[magnitudeKey].other.match(/0+/)[0].length;
              }
          }
        }

        exports.ComputeExponentForMagnitude = ComputeExponentForMagnitude; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.ComputeExponentForMagnitude;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/core.js", ['./cjs-loader.mjs', './tslib3.js', './index16.js', './get_internal_slots4.js', './links.js', './packer.js', './FormatDateTime.js', './InitializeDateTimeFormat.js', './utils.js', './FormatDateTimeToParts.js', './FormatDateTimeRangeToParts.js', './FormatDateTimeRange.js', './skeleton.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3, __cjsMetaURL$4, __cjsMetaURL$5, __cjsMetaURL$6, __cjsMetaURL$7, __cjsMetaURL$8, __cjsMetaURL$9, __cjsMetaURL$a, __cjsMetaURL$b, __cjsMetaURL$c;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$4 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$5 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$6 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$7 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$8 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$9 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$a = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$b = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$c = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.DateTimeFormat = void 0;

        var tslib_1 = require("tslib");

        var ecma402_abstract_1 = require("@formatjs/ecma402-abstract");

        var get_internal_slots_1 = (0, tslib_1.__importDefault)(require("./get_internal_slots"));
        var links_1 = (0, tslib_1.__importDefault)(require("./data/links"));

        var packer_1 = require("./packer");

        var FormatDateTime_1 = require("./abstract/FormatDateTime");

        var InitializeDateTimeFormat_1 = require("./abstract/InitializeDateTimeFormat");

        var utils_1 = require("./abstract/utils");

        var FormatDateTimeToParts_1 = require("./abstract/FormatDateTimeToParts");

        var FormatDateTimeRangeToParts_1 = require("./abstract/FormatDateTimeRangeToParts");

        var FormatDateTimeRange_1 = require("./abstract/FormatDateTimeRange");

        var skeleton_1 = require("./abstract/skeleton");

        var UPPERCASED_LINKS = Object.keys(links_1.default).reduce(function (all, l) {
          all[l.toUpperCase()] = links_1.default[l];
          return all;
        }, {});
        var RESOLVED_OPTIONS_KEYS = ['locale', 'calendar', 'numberingSystem', 'dateStyle', 'timeStyle', 'timeZone', 'hourCycle', 'weekday', 'era', 'year', 'month', 'day', 'hour', 'minute', 'second', 'timeZoneName'];
        var formatDescriptor = {
          enumerable: false,
          configurable: true,
          get: function () {
            if (typeof this !== 'object' || !(0, ecma402_abstract_1.OrdinaryHasInstance)(exports.DateTimeFormat, this)) {
              throw TypeError('Intl.DateTimeFormat format property accessor called on incompatible receiver');
            }

            var internalSlots = (0, get_internal_slots_1.default)(this); // eslint-disable-next-line @typescript-eslint/no-this-alias

            var dtf = this;
            var boundFormat = internalSlots.boundFormat;

            if (boundFormat === undefined) {
              // https://tc39.es/proposal-unified-intl-numberformat/section11/numberformat_diff_out.html#sec-number-format-functions
              boundFormat = function (date) {
                var x;

                if (date === undefined) {
                  x = Date.now();
                } else {
                  x = Number(date);
                }

                return (0, FormatDateTime_1.FormatDateTime)(dtf, x, {
                  getInternalSlots: get_internal_slots_1.default,
                  localeData: exports.DateTimeFormat.localeData,
                  tzData: exports.DateTimeFormat.tzData,
                  getDefaultTimeZone: exports.DateTimeFormat.getDefaultTimeZone
                });
              };

              try {
                // https://github.com/tc39/test262/blob/master/test/intl402/NumberFormat/prototype/format/format-function-name.js
                Object.defineProperty(boundFormat, 'name', {
                  configurable: true,
                  enumerable: false,
                  writable: false,
                  value: ''
                });
              } catch (e) {// In older browser (e.g Chrome 36 like polyfill.io)
                // TypeError: Cannot redefine property: name
              }

              internalSlots.boundFormat = boundFormat;
            }

            return boundFormat;
          }
        };

        try {
          // https://github.com/tc39/test262/blob/master/test/intl402/NumberFormat/prototype/format/name.js
          Object.defineProperty(formatDescriptor.get, 'name', {
            configurable: true,
            enumerable: false,
            writable: false,
            value: 'get format'
          });
        } catch (e) {// In older browser (e.g Chrome 36 like polyfill.io)
          // TypeError: Cannot redefine property: name
        }

        exports.DateTimeFormat = function (locales, options) {
          // Cannot use `new.target` bc of IE11 & TS transpiles it to something else
          if (!this || !(0, ecma402_abstract_1.OrdinaryHasInstance)(exports.DateTimeFormat, this)) {
            return new exports.DateTimeFormat(locales, options);
          }

          (0, InitializeDateTimeFormat_1.InitializeDateTimeFormat)(this, locales, options, {
            tzData: exports.DateTimeFormat.tzData,
            uppercaseLinks: UPPERCASED_LINKS,
            availableLocales: exports.DateTimeFormat.availableLocales,
            relevantExtensionKeys: exports.DateTimeFormat.relevantExtensionKeys,
            getDefaultLocale: exports.DateTimeFormat.getDefaultLocale,
            getDefaultTimeZone: exports.DateTimeFormat.getDefaultTimeZone,
            getInternalSlots: get_internal_slots_1.default,
            localeData: exports.DateTimeFormat.localeData
          });
          /** IMPL START */

          var internalSlots = (0, get_internal_slots_1.default)(this);
          var dataLocale = internalSlots.dataLocale;
          var dataLocaleData = exports.DateTimeFormat.localeData[dataLocale];
          (0, ecma402_abstract_1.invariant)(dataLocaleData !== undefined, "Cannot load locale-dependent data for ".concat(dataLocale, "."));
          /** IMPL END */
        }; // Static properties


        (0, ecma402_abstract_1.defineProperty)(exports.DateTimeFormat, 'supportedLocalesOf', {
          value: function supportedLocalesOf(locales, options) {
            return (0, ecma402_abstract_1.SupportedLocales)(exports.DateTimeFormat.availableLocales, (0, ecma402_abstract_1.CanonicalizeLocaleList)(locales), options);
          }
        });
        (0, ecma402_abstract_1.defineProperty)(exports.DateTimeFormat.prototype, 'resolvedOptions', {
          value: function resolvedOptions() {
            if (typeof this !== 'object' || !(0, ecma402_abstract_1.OrdinaryHasInstance)(exports.DateTimeFormat, this)) {
              throw TypeError('Method Intl.DateTimeFormat.prototype.resolvedOptions called on incompatible receiver');
            }

            var internalSlots = (0, get_internal_slots_1.default)(this);
            var ro = {};

            for (var _i = 0, RESOLVED_OPTIONS_KEYS_1 = RESOLVED_OPTIONS_KEYS; _i < RESOLVED_OPTIONS_KEYS_1.length; _i++) {
              var key = RESOLVED_OPTIONS_KEYS_1[_i];
              var value = internalSlots[key];

              if (key === 'hourCycle') {
                var hour12 = value === 'h11' || value === 'h12' ? true : value === 'h23' || value === 'h24' ? false : undefined;

                if (hour12 !== undefined) {
                  ro.hour12 = hour12;
                }
              }

              if (utils_1.DATE_TIME_PROPS.indexOf(key) > -1) {
                if (internalSlots.dateStyle !== undefined || internalSlots.timeStyle !== undefined) {
                  value = undefined;
                }
              }

              if (value !== undefined) {
                ro[key] = value;
              }
            }

            return ro;
          }
        });
        (0, ecma402_abstract_1.defineProperty)(exports.DateTimeFormat.prototype, 'formatToParts', {
          value: function formatToParts(date) {
            if (date === undefined) {
              date = Date.now();
            } else {
              date = (0, ecma402_abstract_1.ToNumber)(date);
            }

            return (0, FormatDateTimeToParts_1.FormatDateTimeToParts)(this, date, {
              getInternalSlots: get_internal_slots_1.default,
              localeData: exports.DateTimeFormat.localeData,
              tzData: exports.DateTimeFormat.tzData,
              getDefaultTimeZone: exports.DateTimeFormat.getDefaultTimeZone
            });
          }
        });
        (0, ecma402_abstract_1.defineProperty)(exports.DateTimeFormat.prototype, 'formatRangeToParts', {
          value: function formatRangeToParts(startDate, endDate) {
            var dtf = this;

            if (typeof dtf !== 'object') {
              throw new TypeError();
            }

            if (startDate === undefined || endDate === undefined) {
              throw new TypeError('startDate/endDate cannot be undefined');
            }

            var x = (0, ecma402_abstract_1.ToNumber)(startDate);
            var y = (0, ecma402_abstract_1.ToNumber)(endDate);
            return (0, FormatDateTimeRangeToParts_1.FormatDateTimeRangeToParts)(dtf, x, y, {
              getInternalSlots: get_internal_slots_1.default,
              localeData: exports.DateTimeFormat.localeData,
              tzData: exports.DateTimeFormat.tzData,
              getDefaultTimeZone: exports.DateTimeFormat.getDefaultTimeZone
            });
          }
        });
        (0, ecma402_abstract_1.defineProperty)(exports.DateTimeFormat.prototype, 'formatRange', {
          value: function formatRange(startDate, endDate) {
            var dtf = this;

            if (typeof dtf !== 'object') {
              throw new TypeError();
            }

            if (startDate === undefined || endDate === undefined) {
              throw new TypeError('startDate/endDate cannot be undefined');
            }

            var x = (0, ecma402_abstract_1.ToNumber)(startDate);
            var y = (0, ecma402_abstract_1.ToNumber)(endDate);
            return (0, FormatDateTimeRange_1.FormatDateTimeRange)(dtf, x, y, {
              getInternalSlots: get_internal_slots_1.default,
              localeData: exports.DateTimeFormat.localeData,
              tzData: exports.DateTimeFormat.tzData,
              getDefaultTimeZone: exports.DateTimeFormat.getDefaultTimeZone
            });
          }
        });
        var DEFAULT_TIMEZONE = 'UTC';

        exports.DateTimeFormat.__setDefaultTimeZone = function (timeZone) {
          if (timeZone !== undefined) {
            timeZone = String(timeZone);

            if (!(0, ecma402_abstract_1.IsValidTimeZoneName)(timeZone, {
              tzData: exports.DateTimeFormat.tzData,
              uppercaseLinks: UPPERCASED_LINKS
            })) {
              throw new RangeError('Invalid timeZoneName');
            }

            timeZone = (0, ecma402_abstract_1.CanonicalizeTimeZoneName)(timeZone, {
              tzData: exports.DateTimeFormat.tzData,
              uppercaseLinks: UPPERCASED_LINKS
            });
          } else {
            timeZone = DEFAULT_TIMEZONE;
          }

          exports.DateTimeFormat.__defaultTimeZone = timeZone;
        };

        exports.DateTimeFormat.relevantExtensionKeys = ['nu', 'ca', 'hc'];
        exports.DateTimeFormat.__defaultTimeZone = DEFAULT_TIMEZONE;

        exports.DateTimeFormat.getDefaultTimeZone = function () {
          return exports.DateTimeFormat.__defaultTimeZone;
        };

        exports.DateTimeFormat.__addLocaleData = function __addLocaleData() {
          var data = [];

          for (var _i = 0; _i < arguments.length; _i++) {
            data[_i] = arguments[_i];
          }

          var _loop_1 = function (d, locale) {
            var dateFormat = d.dateFormat,
                timeFormat = d.timeFormat,
                dateTimeFormat = d.dateTimeFormat,
                formats = d.formats,
                intervalFormats = d.intervalFormats,
                rawData = (0, tslib_1.__rest)(d, ["dateFormat", "timeFormat", "dateTimeFormat", "formats", "intervalFormats"]);
            var processedData = (0, tslib_1.__assign)((0, tslib_1.__assign)({}, rawData), {
              dateFormat: {
                full: (0, skeleton_1.parseDateTimeSkeleton)(dateFormat.full),
                long: (0, skeleton_1.parseDateTimeSkeleton)(dateFormat.long),
                medium: (0, skeleton_1.parseDateTimeSkeleton)(dateFormat.medium),
                short: (0, skeleton_1.parseDateTimeSkeleton)(dateFormat.short)
              },
              timeFormat: {
                full: (0, skeleton_1.parseDateTimeSkeleton)(timeFormat.full),
                long: (0, skeleton_1.parseDateTimeSkeleton)(timeFormat.long),
                medium: (0, skeleton_1.parseDateTimeSkeleton)(timeFormat.medium),
                short: (0, skeleton_1.parseDateTimeSkeleton)(timeFormat.short)
              },
              dateTimeFormat: {
                full: (0, skeleton_1.parseDateTimeSkeleton)(dateTimeFormat.full).pattern,
                long: (0, skeleton_1.parseDateTimeSkeleton)(dateTimeFormat.long).pattern,
                medium: (0, skeleton_1.parseDateTimeSkeleton)(dateTimeFormat.medium).pattern,
                short: (0, skeleton_1.parseDateTimeSkeleton)(dateTimeFormat.short).pattern
              },
              formats: {}
            });

            var _loop_2 = function (calendar) {
              processedData.formats[calendar] = Object.keys(formats[calendar]).map(function (skeleton) {
                return (0, skeleton_1.parseDateTimeSkeleton)(skeleton, formats[calendar][skeleton], intervalFormats[skeleton], intervalFormats.intervalFormatFallback);
              });
            };

            for (var calendar in formats) {
              _loop_2(calendar);
            }

            var minimizedLocale = new Intl.Locale(locale).minimize().toString();
            exports.DateTimeFormat.localeData[locale] = exports.DateTimeFormat.localeData[minimizedLocale] = processedData;
            exports.DateTimeFormat.availableLocales.add(locale);
            exports.DateTimeFormat.availableLocales.add(minimizedLocale);

            if (!exports.DateTimeFormat.__defaultLocale) {
              exports.DateTimeFormat.__defaultLocale = minimizedLocale;
            }
          };

          for (var _a = 0, data_1 = data; _a < data_1.length; _a++) {
            var _b = data_1[_a],
                d = _b.data,
                locale = _b.locale;

            _loop_1(d, locale);
          }
        };

        Object.defineProperty(exports.DateTimeFormat.prototype, 'format', formatDescriptor);
        exports.DateTimeFormat.__defaultLocale = '';
        exports.DateTimeFormat.localeData = {};
        exports.DateTimeFormat.availableLocales = new Set();

        exports.DateTimeFormat.getDefaultLocale = function () {
          return exports.DateTimeFormat.__defaultLocale;
        };

        exports.DateTimeFormat.polyfilled = true;
        exports.DateTimeFormat.tzData = {};

        exports.DateTimeFormat.__addTZData = function (d) {
          exports.DateTimeFormat.tzData = (0, packer_1.unpack)(d);
        };

        try {
          if (typeof Symbol !== 'undefined') {
            Object.defineProperty(exports.DateTimeFormat.prototype, Symbol.toStringTag, {
              value: 'Intl.DateTimeFormat',
              writable: false,
              enumerable: false,
              configurable: true
            });
          }

          Object.defineProperty(exports.DateTimeFormat.prototype.constructor, 'length', {
            value: 1,
            writable: false,
            enumerable: false,
            configurable: true
          });
        } catch (e) {// Meta fix so we're test262-compliant, not important
        } // #endregion ORIGINAL CODE


        module.exports;
        module.exports.__esModule;
        module.exports.DateTimeFormat;
      }, () => ({
        'tslib': __cjsMetaURL$1,
        '@formatjs/ecma402-abstract': __cjsMetaURL$2,
        './get_internal_slots': __cjsMetaURL$3,
        './data/links': __cjsMetaURL$4,
        './packer': __cjsMetaURL$5,
        './abstract/FormatDateTime': __cjsMetaURL$6,
        './abstract/InitializeDateTimeFormat': __cjsMetaURL$7,
        './abstract/utils': __cjsMetaURL$8,
        './abstract/FormatDateTimeToParts': __cjsMetaURL$9,
        './abstract/FormatDateTimeRangeToParts': __cjsMetaURL$a,
        './abstract/FormatDateTimeRange': __cjsMetaURL$b,
        './abstract/skeleton': __cjsMetaURL$c
      }));
    }
  };
});

System.register("chunks:///_virtual/core2.js", ['./cjs-loader.mjs', './tslib4.js', './index17.js', './currency-digits.generated.js', './numbering-systems.generated.js', './get_internal_slots5.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3, __cjsMetaURL$4, __cjsMetaURL$5;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$4 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$5 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.NumberFormat = void 0;

        var tslib_1 = require("tslib");

        var ecma402_abstract_1 = require("@formatjs/ecma402-abstract");

        var currency_digits_generated_1 = require("./currency-digits.generated");

        var numbering_systems_generated_1 = require("./numbering-systems.generated"); // eslint-disable-next-line import/no-cycle


        var get_internal_slots_1 = (0, tslib_1.__importDefault)(require("./get_internal_slots"));
        var RESOLVED_OPTIONS_KEYS = ['locale', 'numberingSystem', 'style', 'currency', 'currencyDisplay', 'currencySign', 'unit', 'unitDisplay', 'minimumIntegerDigits', 'minimumFractionDigits', 'maximumFractionDigits', 'minimumSignificantDigits', 'maximumSignificantDigits', 'useGrouping', 'notation', 'compactDisplay', 'signDisplay'];
        /**
         * https://tc39.es/ecma402/#sec-intl-numberformat-constructor
         */

        exports.NumberFormat = function (locales, options) {
          // Cannot use `new.target` bc of IE11 & TS transpiles it to something else
          if (!this || !(0, ecma402_abstract_1.OrdinaryHasInstance)(exports.NumberFormat, this)) {
            return new exports.NumberFormat(locales, options);
          }

          (0, ecma402_abstract_1.InitializeNumberFormat)(this, locales, options, {
            getInternalSlots: get_internal_slots_1.default,
            localeData: exports.NumberFormat.localeData,
            availableLocales: exports.NumberFormat.availableLocales,
            getDefaultLocale: exports.NumberFormat.getDefaultLocale,
            currencyDigitsData: currency_digits_generated_1.currencyDigitsData,
            numberingSystemNames: numbering_systems_generated_1.numberingSystemNames
          });
          var internalSlots = (0, get_internal_slots_1.default)(this);
          var dataLocale = internalSlots.dataLocale;
          var dataLocaleData = exports.NumberFormat.localeData[dataLocale];
          (0, ecma402_abstract_1.invariant)(dataLocaleData !== undefined, "Cannot load locale-dependent data for ".concat(dataLocale, "."));
          internalSlots.pl = new Intl.PluralRules(dataLocale, {
            minimumFractionDigits: internalSlots.minimumFractionDigits,
            maximumFractionDigits: internalSlots.maximumFractionDigits,
            minimumIntegerDigits: internalSlots.minimumIntegerDigits,
            minimumSignificantDigits: internalSlots.minimumSignificantDigits,
            maximumSignificantDigits: internalSlots.maximumSignificantDigits
          });
          return this;
        };

        function formatToParts(x) {
          return (0, ecma402_abstract_1.FormatNumericToParts)(this, toNumeric(x), {
            getInternalSlots: get_internal_slots_1.default
          });
        }

        try {
          Object.defineProperty(formatToParts, 'name', {
            value: 'formatToParts',
            enumerable: false,
            writable: false,
            configurable: true
          });
        } catch (e) {// In older browser (e.g Chrome 36 like polyfill.io)
          // TypeError: Cannot redefine property: name
        }

        (0, ecma402_abstract_1.defineProperty)(exports.NumberFormat.prototype, 'formatToParts', {
          value: formatToParts
        });
        (0, ecma402_abstract_1.defineProperty)(exports.NumberFormat.prototype, 'resolvedOptions', {
          value: function resolvedOptions() {
            if (typeof this !== 'object' || !(0, ecma402_abstract_1.OrdinaryHasInstance)(exports.NumberFormat, this)) {
              throw TypeError('Method Intl.NumberFormat.prototype.resolvedOptions called on incompatible receiver');
            }

            var internalSlots = (0, get_internal_slots_1.default)(this);
            var ro = {};

            for (var _i = 0, RESOLVED_OPTIONS_KEYS_1 = RESOLVED_OPTIONS_KEYS; _i < RESOLVED_OPTIONS_KEYS_1.length; _i++) {
              var key = RESOLVED_OPTIONS_KEYS_1[_i];
              var value = internalSlots[key];

              if (value !== undefined) {
                ro[key] = value;
              }
            }

            return ro;
          }
        });
        var formatDescriptor = {
          enumerable: false,
          configurable: true,
          get: function () {
            if (typeof this !== 'object' || !(0, ecma402_abstract_1.OrdinaryHasInstance)(exports.NumberFormat, this)) {
              throw TypeError('Intl.NumberFormat format property accessor called on incompatible receiver');
            }

            var internalSlots = (0, get_internal_slots_1.default)(this); // eslint-disable-next-line @typescript-eslint/no-this-alias

            var numberFormat = this;
            var boundFormat = internalSlots.boundFormat;

            if (boundFormat === undefined) {
              // https://tc39.es/proposal-unified-intl-numberformat/section11/numberformat_diff_out.html#sec-number-format-functions
              boundFormat = function (value) {
                // TODO: check bigint
                var x = toNumeric(value);
                return numberFormat.formatToParts(x).map(function (x) {
                  return x.value;
                }).join('');
              };

              try {
                // https://github.com/tc39/test262/blob/master/test/intl402/NumberFormat/prototype/format/format-function-name.js
                Object.defineProperty(boundFormat, 'name', {
                  configurable: true,
                  enumerable: false,
                  writable: false,
                  value: ''
                });
              } catch (e) {// In older browser (e.g Chrome 36 like polyfill.io)
                // TypeError: Cannot redefine property: name
              }

              internalSlots.boundFormat = boundFormat;
            }

            return boundFormat;
          }
        };

        try {
          // https://github.com/tc39/test262/blob/master/test/intl402/NumberFormat/prototype/format/name.js
          Object.defineProperty(formatDescriptor.get, 'name', {
            configurable: true,
            enumerable: false,
            writable: false,
            value: 'get format'
          });
        } catch (e) {// In older browser (e.g Chrome 36 like polyfill.io)
          // TypeError: Cannot redefine property: name
        }

        Object.defineProperty(exports.NumberFormat.prototype, 'format', formatDescriptor); // Static properties

        (0, ecma402_abstract_1.defineProperty)(exports.NumberFormat, 'supportedLocalesOf', {
          value: function supportedLocalesOf(locales, options) {
            return (0, ecma402_abstract_1.SupportedLocales)(exports.NumberFormat.availableLocales, (0, ecma402_abstract_1.CanonicalizeLocaleList)(locales), options);
          }
        });

        exports.NumberFormat.__addLocaleData = function __addLocaleData() {
          var data = [];

          for (var _i = 0; _i < arguments.length; _i++) {
            data[_i] = arguments[_i];
          }

          for (var _a = 0, data_1 = data; _a < data_1.length; _a++) {
            var _b = data_1[_a],
                d = _b.data,
                locale = _b.locale;
            var minimizedLocale = new Intl.Locale(locale).minimize().toString();
            exports.NumberFormat.localeData[locale] = exports.NumberFormat.localeData[minimizedLocale] = d;
            exports.NumberFormat.availableLocales.add(minimizedLocale);
            exports.NumberFormat.availableLocales.add(locale);

            if (!exports.NumberFormat.__defaultLocale) {
              exports.NumberFormat.__defaultLocale = minimizedLocale;
            }
          }
        };

        exports.NumberFormat.__addUnitData = function __addUnitData(locale, unitsData) {
          var _a = exports.NumberFormat.localeData,
              _b = locale,
              existingData = _a[_b];

          if (!existingData) {
            throw new Error("Locale data for \"".concat(locale, "\" has not been loaded in NumberFormat. \nPlease __addLocaleData before adding additional unit data"));
          }

          for (var unit in unitsData.simple) {
            existingData.units.simple[unit] = unitsData.simple[unit];
          }

          for (var unit in unitsData.compound) {
            existingData.units.compound[unit] = unitsData.compound[unit];
          }
        };

        exports.NumberFormat.__defaultLocale = '';
        exports.NumberFormat.localeData = {};
        exports.NumberFormat.availableLocales = new Set();

        exports.NumberFormat.getDefaultLocale = function () {
          return exports.NumberFormat.__defaultLocale;
        };

        exports.NumberFormat.polyfilled = true;

        function toNumeric(val) {
          if (typeof val === 'bigint') {
            return val;
          }

          return (0, ecma402_abstract_1.ToNumber)(val);
        }

        try {
          // IE11 does not have Symbol
          if (typeof Symbol !== 'undefined') {
            Object.defineProperty(exports.NumberFormat.prototype, Symbol.toStringTag, {
              configurable: true,
              enumerable: false,
              writable: false,
              value: 'Intl.NumberFormat'
            });
          } // https://github.com/tc39/test262/blob/master/test/intl402/NumberFormat/length.js


          Object.defineProperty(exports.NumberFormat.prototype.constructor, 'length', {
            configurable: true,
            enumerable: false,
            writable: false,
            value: 0
          }); // https://github.com/tc39/test262/blob/master/test/intl402/NumberFormat/supportedLocalesOf/length.js

          Object.defineProperty(exports.NumberFormat.supportedLocalesOf, 'length', {
            configurable: true,
            enumerable: false,
            writable: false,
            value: 1
          });
          Object.defineProperty(exports.NumberFormat, 'prototype', {
            configurable: false,
            enumerable: false,
            writable: false,
            value: exports.NumberFormat.prototype
          });
        } catch (e) {// Meta fix so we're test262-compliant, not important
        } // #endregion ORIGINAL CODE


        module.exports;
        module.exports.__esModule;
        module.exports.NumberFormat;
      }, () => ({
        'tslib': __cjsMetaURL$1,
        '@formatjs/ecma402-abstract': __cjsMetaURL$2,
        './currency-digits.generated': __cjsMetaURL$3,
        './numbering-systems.generated': __cjsMetaURL$4,
        './get_internal_slots': __cjsMetaURL$5
      }));
    }
  };
});

System.register("chunks:///_virtual/createClass.js", [], function (exports) {
  'use strict';

  return {
    execute: function () {
      exports('default', _createClass);

      function _defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor) descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }

      function _createClass(Constructor, protoProps, staticProps) {
        if (protoProps) _defineProperties(Constructor.prototype, protoProps);
        if (staticProps) _defineProperties(Constructor, staticProps);
        Object.defineProperty(Constructor, "prototype", {
          writable: false
        });
        return Constructor;
      }
    }
  };
});

System.register("chunks:///_virtual/currency-digits.generated.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.currencyDigitsData = void 0;
        exports.currencyDigitsData = {
          "ADP": 0,
          "AFN": 0,
          "ALL": 0,
          "AMD": 2,
          "BHD": 3,
          "BIF": 0,
          "BYN": 2,
          "BYR": 0,
          "CAD": 2,
          "CHF": 2,
          "CLF": 4,
          "CLP": 0,
          "COP": 2,
          "CRC": 2,
          "CZK": 2,
          "DEFAULT": 2,
          "DJF": 0,
          "DKK": 2,
          "ESP": 0,
          "GNF": 0,
          "GYD": 2,
          "HUF": 2,
          "IDR": 2,
          "IQD": 0,
          "IRR": 0,
          "ISK": 0,
          "ITL": 0,
          "JOD": 3,
          "JPY": 0,
          "KMF": 0,
          "KPW": 0,
          "KRW": 0,
          "KWD": 3,
          "LAK": 0,
          "LBP": 0,
          "LUF": 0,
          "LYD": 3,
          "MGA": 0,
          "MGF": 0,
          "MMK": 0,
          "MNT": 2,
          "MRO": 0,
          "MUR": 2,
          "NOK": 2,
          "OMR": 3,
          "PKR": 2,
          "PYG": 0,
          "RSD": 0,
          "RWF": 0,
          "SEK": 2,
          "SLL": 0,
          "SOS": 0,
          "STD": 0,
          "SYP": 0,
          "TMM": 0,
          "TND": 3,
          "TRL": 0,
          "TWD": 2,
          "TZS": 2,
          "UGX": 0,
          "UYI": 0,
          "UYW": 4,
          "UZS": 2,
          "VEF": 2,
          "VND": 0,
          "VUV": 0,
          "XAF": 0,
          "XOF": 0,
          "XPF": 0,
          "YER": 0,
          "ZMK": 0,
          "ZWD": 0
        }; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.currencyDigitsData;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/CurrencyDigits.js", ['./cjs-loader.mjs', './262.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.CurrencyDigits = void 0;

        var _262_1 = require("../262");
        /**
         * https://tc39.es/ecma402/#sec-currencydigits
         */


        function CurrencyDigits(c, _a) {
          var currencyDigitsData = _a.currencyDigitsData;
          return (0, _262_1.HasOwnProperty)(currencyDigitsData, c) ? currencyDigitsData[c] : 2;
        }

        exports.CurrencyDigits = CurrencyDigits; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.CurrencyDigits;
      }, () => ({
        '../262': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/CurrencyDigits2.js", ['./cjs-loader.mjs', './2622.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.CurrencyDigits = void 0;

        var _262_1 = require("../262");
        /**
         * https://tc39.es/ecma402/#sec-currencydigits
         */


        function CurrencyDigits(c, _a) {
          var currencyDigitsData = _a.currencyDigitsData;
          return (0, _262_1.HasOwnProperty)(currencyDigitsData, c) ? currencyDigitsData[c] : 2;
        }

        exports.CurrencyDigits = CurrencyDigits; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.CurrencyDigits;
      }, () => ({
        '../262': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/CurrencyDigits3.js", ['./cjs-loader.mjs', './2623.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.CurrencyDigits = void 0;

        var _262_1 = require("../262");
        /**
         * https://tc39.es/ecma402/#sec-currencydigits
         */


        function CurrencyDigits(c, _a) {
          var currencyDigitsData = _a.currencyDigitsData;
          return (0, _262_1.HasOwnProperty)(currencyDigitsData, c) ? currencyDigitsData[c] : 2;
        }

        exports.CurrencyDigits = CurrencyDigits; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.CurrencyDigits;
      }, () => ({
        '../262': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/CurrencyDigits4.js", ['./cjs-loader.mjs', './2624.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.CurrencyDigits = void 0;

        var _262_1 = require("../262");
        /**
         * https://tc39.es/ecma402/#sec-currencydigits
         */


        function CurrencyDigits(c, _a) {
          var currencyDigitsData = _a.currencyDigitsData;
          return (0, _262_1.HasOwnProperty)(currencyDigitsData, c) ? currencyDigitsData[c] : 2;
        }

        exports.CurrencyDigits = CurrencyDigits; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.CurrencyDigits;
      }, () => ({
        '../262': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/CurrencyDigits5.js", ['./cjs-loader.mjs', './2625.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.CurrencyDigits = void 0;

        var _262_1 = require("../262");
        /**
         * https://tc39.es/ecma402/#sec-currencydigits
         */


        function CurrencyDigits(c, _a) {
          var currencyDigitsData = _a.currencyDigitsData;
          return (0, _262_1.HasOwnProperty)(currencyDigitsData, c) ? currencyDigitsData[c] : 2;
        }

        exports.CurrencyDigits = CurrencyDigits; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.CurrencyDigits;
      }, () => ({
        '../262': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/CurrencyDigits6.js", ['./cjs-loader.mjs', './2626.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.CurrencyDigits = void 0;

        var _262_1 = require("../262");
        /**
         * https://tc39.es/ecma402/#sec-currencydigits
         */


        function CurrencyDigits(c, _a) {
          var currencyDigitsData = _a.currencyDigitsData;
          return (0, _262_1.HasOwnProperty)(currencyDigitsData, c) ? currencyDigitsData[c] : 2;
        }

        exports.CurrencyDigits = CurrencyDigits; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.CurrencyDigits;
      }, () => ({
        '../262': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/CurrencyDigits7.js", ['./cjs-loader.mjs', './2627.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.CurrencyDigits = void 0;

        var _262_1 = require("../262");
        /**
         * https://tc39.es/ecma402/#sec-currencydigits
         */


        function CurrencyDigits(c, _a) {
          var currencyDigitsData = _a.currencyDigitsData;
          return (0, _262_1.HasOwnProperty)(currencyDigitsData, c) ? currencyDigitsData[c] : 2;
        }

        exports.CurrencyDigits = CurrencyDigits; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.CurrencyDigits;
      }, () => ({
        '../262': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/data.js", ['./cjs-loader.mjs', './tslib.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.isMissingLocaleDataError = void 0;

        var tslib_1 = require("tslib");

        var MissingLocaleDataError =
        /** @class */
        function (_super) {
          (0, tslib_1.__extends)(MissingLocaleDataError, _super);

          function MissingLocaleDataError() {
            var _this = _super !== null && _super.apply(this, arguments) || this;

            _this.type = 'MISSING_LOCALE_DATA';
            return _this;
          }

          return MissingLocaleDataError;
        }(Error);

        function isMissingLocaleDataError(e) {
          return e.type === 'MISSING_LOCALE_DATA';
        }

        exports.isMissingLocaleDataError = isMissingLocaleDataError; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.isMissingLocaleDataError;
      }, () => ({
        'tslib': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/data2.js", ['./cjs-loader.mjs', './tslib2.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.isMissingLocaleDataError = void 0;

        var tslib_1 = require("tslib");

        var MissingLocaleDataError =
        /** @class */
        function (_super) {
          (0, tslib_1.__extends)(MissingLocaleDataError, _super);

          function MissingLocaleDataError() {
            var _this = _super !== null && _super.apply(this, arguments) || this;

            _this.type = 'MISSING_LOCALE_DATA';
            return _this;
          }

          return MissingLocaleDataError;
        }(Error);

        function isMissingLocaleDataError(e) {
          return e.type === 'MISSING_LOCALE_DATA';
        }

        exports.isMissingLocaleDataError = isMissingLocaleDataError; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.isMissingLocaleDataError;
      }, () => ({
        'tslib': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/data3.js", ['./cjs-loader.mjs', './tslib6.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.isMissingLocaleDataError = void 0;

        var tslib_1 = require("tslib");

        var MissingLocaleDataError =
        /** @class */
        function (_super) {
          (0, tslib_1.__extends)(MissingLocaleDataError, _super);

          function MissingLocaleDataError() {
            var _this = _super !== null && _super.apply(this, arguments) || this;

            _this.type = 'MISSING_LOCALE_DATA';
            return _this;
          }

          return MissingLocaleDataError;
        }(Error);

        function isMissingLocaleDataError(e) {
          return e.type === 'MISSING_LOCALE_DATA';
        }

        exports.isMissingLocaleDataError = isMissingLocaleDataError; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.isMissingLocaleDataError;
      }, () => ({
        'tslib': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/data4.js", ['./cjs-loader.mjs', './tslib7.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.isMissingLocaleDataError = void 0;

        var tslib_1 = require("tslib");

        var MissingLocaleDataError =
        /** @class */
        function (_super) {
          (0, tslib_1.__extends)(MissingLocaleDataError, _super);

          function MissingLocaleDataError() {
            var _this = _super !== null && _super.apply(this, arguments) || this;

            _this.type = 'MISSING_LOCALE_DATA';
            return _this;
          }

          return MissingLocaleDataError;
        }(Error);

        function isMissingLocaleDataError(e) {
          return e.type === 'MISSING_LOCALE_DATA';
        }

        exports.isMissingLocaleDataError = isMissingLocaleDataError; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.isMissingLocaleDataError;
      }, () => ({
        'tslib': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/data5.js", ['./cjs-loader.mjs', './tslib9.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.isMissingLocaleDataError = void 0;

        var tslib_1 = require("tslib");

        var MissingLocaleDataError =
        /** @class */
        function (_super) {
          (0, tslib_1.__extends)(MissingLocaleDataError, _super);

          function MissingLocaleDataError() {
            var _this = _super !== null && _super.apply(this, arguments) || this;

            _this.type = 'MISSING_LOCALE_DATA';
            return _this;
          }

          return MissingLocaleDataError;
        }(Error);

        function isMissingLocaleDataError(e) {
          return e.type === 'MISSING_LOCALE_DATA';
        }

        exports.isMissingLocaleDataError = isMissingLocaleDataError; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.isMissingLocaleDataError;
      }, () => ({
        'tslib': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/data6.js", ['./cjs-loader.mjs', './tslib3.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.isMissingLocaleDataError = void 0;

        var tslib_1 = require("tslib");

        var MissingLocaleDataError =
        /** @class */
        function (_super) {
          (0, tslib_1.__extends)(MissingLocaleDataError, _super);

          function MissingLocaleDataError() {
            var _this = _super !== null && _super.apply(this, arguments) || this;

            _this.type = 'MISSING_LOCALE_DATA';
            return _this;
          }

          return MissingLocaleDataError;
        }(Error);

        function isMissingLocaleDataError(e) {
          return e.type === 'MISSING_LOCALE_DATA';
        }

        exports.isMissingLocaleDataError = isMissingLocaleDataError; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.isMissingLocaleDataError;
      }, () => ({
        'tslib': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/data7.js", ['./cjs-loader.mjs', './tslib4.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.isMissingLocaleDataError = void 0;

        var tslib_1 = require("tslib");

        var MissingLocaleDataError =
        /** @class */
        function (_super) {
          (0, tslib_1.__extends)(MissingLocaleDataError, _super);

          function MissingLocaleDataError() {
            var _this = _super !== null && _super.apply(this, arguments) || this;

            _this.type = 'MISSING_LOCALE_DATA';
            return _this;
          }

          return MissingLocaleDataError;
        }(Error);

        function isMissingLocaleDataError(e) {
          return e.type === 'MISSING_LOCALE_DATA';
        }

        exports.isMissingLocaleDataError = isMissingLocaleDataError; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.isMissingLocaleDataError;
      }, () => ({
        'tslib': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/date-time.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.RangePatternType = void 0;

        (function (RangePatternType) {
          RangePatternType["startRange"] = "startRange";
          RangePatternType["shared"] = "shared";
          RangePatternType["endRange"] = "endRange";
        })(exports.RangePatternType || (exports.RangePatternType = {})); // #endregion ORIGINAL CODE


        module.exports;
        module.exports.__esModule;
        module.exports.RangePatternType;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/date-time2.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.RangePatternType = void 0;

        (function (RangePatternType) {
          RangePatternType["startRange"] = "startRange";
          RangePatternType["shared"] = "shared";
          RangePatternType["endRange"] = "endRange";
        })(exports.RangePatternType || (exports.RangePatternType = {})); // #endregion ORIGINAL CODE


        module.exports;
        module.exports.__esModule;
        module.exports.RangePatternType;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/date-time3.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.RangePatternType = void 0;

        (function (RangePatternType) {
          RangePatternType["startRange"] = "startRange";
          RangePatternType["shared"] = "shared";
          RangePatternType["endRange"] = "endRange";
        })(exports.RangePatternType || (exports.RangePatternType = {})); // #endregion ORIGINAL CODE


        module.exports;
        module.exports.__esModule;
        module.exports.RangePatternType;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/date-time4.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.RangePatternType = void 0;

        (function (RangePatternType) {
          RangePatternType["startRange"] = "startRange";
          RangePatternType["shared"] = "shared";
          RangePatternType["endRange"] = "endRange";
        })(exports.RangePatternType || (exports.RangePatternType = {})); // #endregion ORIGINAL CODE


        module.exports;
        module.exports.__esModule;
        module.exports.RangePatternType;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/date-time5.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.RangePatternType = void 0;

        (function (RangePatternType) {
          RangePatternType["startRange"] = "startRange";
          RangePatternType["shared"] = "shared";
          RangePatternType["endRange"] = "endRange";
        })(exports.RangePatternType || (exports.RangePatternType = {})); // #endregion ORIGINAL CODE


        module.exports;
        module.exports.__esModule;
        module.exports.RangePatternType;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/date-time6.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.RangePatternType = void 0;

        (function (RangePatternType) {
          RangePatternType["startRange"] = "startRange";
          RangePatternType["shared"] = "shared";
          RangePatternType["endRange"] = "endRange";
        })(exports.RangePatternType || (exports.RangePatternType = {})); // #endregion ORIGINAL CODE


        module.exports;
        module.exports.__esModule;
        module.exports.RangePatternType;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/date-time7.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.RangePatternType = void 0;

        (function (RangePatternType) {
          RangePatternType["startRange"] = "startRange";
          RangePatternType["shared"] = "shared";
          RangePatternType["endRange"] = "endRange";
        })(exports.RangePatternType || (exports.RangePatternType = {})); // #endregion ORIGINAL CODE


        module.exports;
        module.exports.__esModule;
        module.exports.RangePatternType;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/DateTimeStyleFormat.js", ['./cjs-loader.mjs', './index16.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.DateTimeStyleFormat = void 0;

        var ecma402_abstract_1 = require("@formatjs/ecma402-abstract");

        function DateTimeStyleFormat(dateStyle, timeStyle, dataLocaleData) {
          var dateFormat, timeFormat;

          if (timeStyle !== undefined) {
            (0, ecma402_abstract_1.invariant)(timeStyle === 'full' || timeStyle === 'long' || timeStyle === 'medium' || timeStyle === 'short', 'invalid timeStyle');
            timeFormat = dataLocaleData.timeFormat[timeStyle];
          }

          if (dateStyle !== undefined) {
            (0, ecma402_abstract_1.invariant)(dateStyle === 'full' || dateStyle === 'long' || dateStyle === 'medium' || dateStyle === 'short', 'invalid dateStyle');
            dateFormat = dataLocaleData.dateFormat[dateStyle];
          }

          if (dateStyle !== undefined && timeStyle !== undefined) {
            var format = {};

            for (var field in dateFormat) {
              if (field !== 'pattern') {
                // @ts-ignore
                format[field] = dateFormat[field];
              }
            }

            for (var field in timeFormat) {
              if (field !== 'pattern' && field !== 'pattern12') {
                // @ts-ignore
                format[field] = timeFormat[field];
              }
            }

            var connector = dataLocaleData.dateTimeFormat[dateStyle];
            var pattern = connector.replace('{0}', timeFormat.pattern).replace('{1}', dateFormat.pattern);
            format.pattern = pattern;

            if ('pattern12' in timeFormat) {
              var pattern12 = connector.replace('{0}', timeFormat.pattern12).replace('{1}', dateFormat.pattern);
              format.pattern12 = pattern12;
            }

            return format;
          }

          if (timeStyle !== undefined) {
            return timeFormat;
          }

          (0, ecma402_abstract_1.invariant)(dateStyle !== undefined, 'dateStyle should not be undefined');
          return dateFormat;
        }

        exports.DateTimeStyleFormat = DateTimeStyleFormat; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.DateTimeStyleFormat;
      }, () => ({
        '@formatjs/ecma402-abstract': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/DefaultNumberOption.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.DefaultNumberOption = void 0;

        function DefaultNumberOption(val, min, max, fallback) {
          if (val !== undefined) {
            val = Number(val);

            if (isNaN(val) || val < min || val > max) {
              throw new RangeError("".concat(val, " is outside of range [").concat(min, ", ").concat(max, "]"));
            }

            return Math.floor(val);
          }

          return fallback;
        }

        exports.DefaultNumberOption = DefaultNumberOption; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.DefaultNumberOption;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/DefaultNumberOption2.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.DefaultNumberOption = void 0;

        function DefaultNumberOption(val, min, max, fallback) {
          if (val !== undefined) {
            val = Number(val);

            if (isNaN(val) || val < min || val > max) {
              throw new RangeError("".concat(val, " is outside of range [").concat(min, ", ").concat(max, "]"));
            }

            return Math.floor(val);
          }

          return fallback;
        }

        exports.DefaultNumberOption = DefaultNumberOption; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.DefaultNumberOption;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/DefaultNumberOption3.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.DefaultNumberOption = void 0;

        function DefaultNumberOption(val, min, max, fallback) {
          if (val !== undefined) {
            val = Number(val);

            if (isNaN(val) || val < min || val > max) {
              throw new RangeError("".concat(val, " is outside of range [").concat(min, ", ").concat(max, "]"));
            }

            return Math.floor(val);
          }

          return fallback;
        }

        exports.DefaultNumberOption = DefaultNumberOption; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.DefaultNumberOption;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/DefaultNumberOption4.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.DefaultNumberOption = void 0;

        function DefaultNumberOption(val, min, max, fallback) {
          if (val !== undefined) {
            val = Number(val);

            if (isNaN(val) || val < min || val > max) {
              throw new RangeError("".concat(val, " is outside of range [").concat(min, ", ").concat(max, "]"));
            }

            return Math.floor(val);
          }

          return fallback;
        }

        exports.DefaultNumberOption = DefaultNumberOption; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.DefaultNumberOption;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/DefaultNumberOption5.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.DefaultNumberOption = void 0;

        function DefaultNumberOption(val, min, max, fallback) {
          if (val !== undefined) {
            val = Number(val);

            if (isNaN(val) || val < min || val > max) {
              throw new RangeError("".concat(val, " is outside of range [").concat(min, ", ").concat(max, "]"));
            }

            return Math.floor(val);
          }

          return fallback;
        }

        exports.DefaultNumberOption = DefaultNumberOption; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.DefaultNumberOption;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/DefaultNumberOption6.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.DefaultNumberOption = void 0;

        function DefaultNumberOption(val, min, max, fallback) {
          if (val !== undefined) {
            val = Number(val);

            if (isNaN(val) || val < min || val > max) {
              throw new RangeError("".concat(val, " is outside of range [").concat(min, ", ").concat(max, "]"));
            }

            return Math.floor(val);
          }

          return fallback;
        }

        exports.DefaultNumberOption = DefaultNumberOption; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.DefaultNumberOption;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/DefaultNumberOption7.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.DefaultNumberOption = void 0;

        function DefaultNumberOption(val, min, max, fallback) {
          if (val !== undefined) {
            val = Number(val);

            if (isNaN(val) || val < min || val > max) {
              throw new RangeError("".concat(val, " is outside of range [").concat(min, ", ").concat(max, "]"));
            }

            return Math.floor(val);
          }

          return fallback;
        }

        exports.DefaultNumberOption = DefaultNumberOption; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.DefaultNumberOption;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/defineProperty.js", [], function (exports) {
  'use strict';

  return {
    execute: function () {
      exports('default', _defineProperty);

      function _defineProperty(obj, key, value) {
        if (key in obj) {
          Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
          });
        } else {
          obj[key] = value;
        }

        return obj;
      }
    }
  };
});

System.register("chunks:///_virtual/digit-mapping.generated.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.digitMapping = void 0;
        exports.digitMapping = {
          "adlm": ["𞥐", "𞥑", "𞥒", "𞥓", "𞥔", "𞥕", "𞥖", "𞥗", "𞥘", "𞥙"],
          "ahom": ["𑜰", "𑜱", "𑜲", "𑜳", "𑜴", "𑜵", "𑜶", "𑜷", "𑜸", "𑜹"],
          "arab": ["٠", "١", "٢", "٣", "٤", "٥", "٦", "٧", "٨", "٩"],
          "arabext": ["۰", "۱", "۲", "۳", "۴", "۵", "۶", "۷", "۸", "۹"],
          "bali": ["᭐", "᭑", "᭒", "᭓", "᭔", "᭕", "᭖", "᭗", "᭘", "᭙"],
          "beng": ["০", "১", "২", "৩", "৪", "৫", "৬", "৭", "৮", "৯"],
          "bhks": ["𑱐", "𑱑", "𑱒", "𑱓", "𑱔", "𑱕", "𑱖", "𑱗", "𑱘", "𑱙"],
          "brah": ["𑁦", "𑁧", "𑁨", "𑁩", "𑁪", "𑁫", "𑁬", "𑁭", "𑁮", "𑁯"],
          "cakm": ["𑄶", "𑄷", "𑄸", "𑄹", "𑄺", "𑄻", "𑄼", "𑄽", "𑄾", "𑄿"],
          "cham": ["꩐", "꩑", "꩒", "꩓", "꩔", "꩕", "꩖", "꩗", "꩘", "꩙"],
          "deva": ["०", "१", "२", "३", "४", "५", "६", "७", "८", "९"],
          "diak": ["𑥐", "𑥑", "𑥒", "𑥓", "𑥔", "𑥕", "𑥖", "𑥗", "𑥘", "𑥙"],
          "fullwide": ["０", "１", "２", "３", "４", "５", "６", "７", "８", "９"],
          "gong": ["𑶠", "𑶡", "𑶢", "𑶣", "𑶤", "𑶥", "𑶦", "𑶧", "𑶨", "𑶩"],
          "gonm": ["𑵐", "𑵑", "𑵒", "𑵓", "𑵔", "𑵕", "𑵖", "𑵗", "𑵘", "𑵙"],
          "gujr": ["૦", "૧", "૨", "૩", "૪", "૫", "૬", "૭", "૮", "૯"],
          "guru": ["੦", "੧", "੨", "੩", "੪", "੫", "੬", "੭", "੮", "੯"],
          "hanidec": ["〇", "一", "二", "三", "四", "五", "六", "七", "八", "九"],
          "hmng": ["𖭐", "𖭑", "𖭒", "𖭓", "𖭔", "𖭕", "𖭖", "𖭗", "𖭘", "𖭙"],
          "hmnp": ["𞅀", "𞅁", "𞅂", "𞅃", "𞅄", "𞅅", "𞅆", "𞅇", "𞅈", "𞅉"],
          "java": ["꧐", "꧑", "꧒", "꧓", "꧔", "꧕", "꧖", "꧗", "꧘", "꧙"],
          "kali": ["꤀", "꤁", "꤂", "꤃", "꤄", "꤅", "꤆", "꤇", "꤈", "꤉"],
          "khmr": ["០", "១", "២", "៣", "៤", "៥", "៦", "៧", "៨", "៩"],
          "knda": ["೦", "೧", "೨", "೩", "೪", "೫", "೬", "೭", "೮", "೯"],
          "lana": ["᪀", "᪁", "᪂", "᪃", "᪄", "᪅", "᪆", "᪇", "᪈", "᪉"],
          "lanatham": ["᪐", "᪑", "᪒", "᪓", "᪔", "᪕", "᪖", "᪗", "᪘", "᪙"],
          "laoo": ["໐", "໑", "໒", "໓", "໔", "໕", "໖", "໗", "໘", "໙"],
          "lepc": ["᪐", "᪑", "᪒", "᪓", "᪔", "᪕", "᪖", "᪗", "᪘", "᪙"],
          "limb": ["᥆", "᥇", "᥈", "᥉", "᥊", "᥋", "᥌", "᥍", "᥎", "᥏"],
          "mathbold": ["𝟎", "𝟏", "𝟐", "𝟑", "𝟒", "𝟓", "𝟔", "𝟕", "𝟖", "𝟗"],
          "mathdbl": ["𝟘", "𝟙", "𝟚", "𝟛", "𝟜", "𝟝", "𝟞", "𝟟", "𝟠", "𝟡"],
          "mathmono": ["𝟶", "𝟷", "𝟸", "𝟹", "𝟺", "𝟻", "𝟼", "𝟽", "𝟾", "𝟿"],
          "mathsanb": ["𝟬", "𝟭", "𝟮", "𝟯", "𝟰", "𝟱", "𝟲", "𝟳", "𝟴", "𝟵"],
          "mathsans": ["𝟢", "𝟣", "𝟤", "𝟥", "𝟦", "𝟧", "𝟨", "𝟩", "𝟪", "𝟫"],
          "mlym": ["൦", "൧", "൨", "൩", "൪", "൫", "൬", "൭", "൮", "൯"],
          "modi": ["𑙐", "𑙑", "𑙒", "𑙓", "𑙔", "𑙕", "𑙖", "𑙗", "𑙘", "𑙙"],
          "mong": ["᠐", "᠑", "᠒", "᠓", "᠔", "᠕", "᠖", "᠗", "᠘", "᠙"],
          "mroo": ["𖩠", "𖩡", "𖩢", "𖩣", "𖩤", "𖩥", "𖩦", "𖩧", "𖩨", "𖩩"],
          "mtei": ["꯰", "꯱", "꯲", "꯳", "꯴", "꯵", "꯶", "꯷", "꯸", "꯹"],
          "mymr": ["၀", "၁", "၂", "၃", "၄", "၅", "၆", "၇", "၈", "၉"],
          "mymrshan": ["႐", "႑", "႒", "႓", "႔", "႕", "႖", "႗", "႘", "႙"],
          "mymrtlng": ["꧰", "꧱", "꧲", "꧳", "꧴", "꧵", "꧶", "꧷", "꧸", "꧹"],
          "newa": ["𑑐", "𑑑", "𑑒", "𑑓", "𑑔", "𑑕", "𑑖", "𑑗", "𑑘", "𑑙"],
          "nkoo": ["߀", "߁", "߂", "߃", "߄", "߅", "߆", "߇", "߈", "߉"],
          "olck": ["᱐", "᱑", "᱒", "᱓", "᱔", "᱕", "᱖", "᱗", "᱘", "᱙"],
          "orya": ["୦", "୧", "୨", "୩", "୪", "୫", "୬", "୭", "୮", "୯"],
          "osma": ["𐒠", "𐒡", "𐒢", "𐒣", "𐒤", "𐒥", "𐒦", "𐒧", "𐒨", "𐒩"],
          "rohg": ["𐴰", "𐴱", "𐴲", "𐴳", "𐴴", "𐴵", "𐴶", "𐴷", "𐴸", "𐴹"],
          "saur": ["꣐", "꣑", "꣒", "꣓", "꣔", "꣕", "꣖", "꣗", "꣘", "꣙"],
          "segment": ["🯰", "🯱", "🯲", "🯳", "🯴", "🯵", "🯶", "🯷", "🯸", "🯹"],
          "shrd": ["𑇐", "𑇑", "𑇒", "𑇓", "𑇔", "𑇕", "𑇖", "𑇗", "𑇘", "𑇙"],
          "sind": ["𑋰", "𑋱", "𑋲", "𑋳", "𑋴", "𑋵", "𑋶", "𑋷", "𑋸", "𑋹"],
          "sinh": ["෦", "෧", "෨", "෩", "෪", "෫", "෬", "෭", "෮", "෯"],
          "sora": ["𑃰", "𑃱", "𑃲", "𑃳", "𑃴", "𑃵", "𑃶", "𑃷", "𑃸", "𑃹"],
          "sund": ["᮰", "᮱", "᮲", "᮳", "᮴", "᮵", "᮶", "᮷", "᮸", "᮹"],
          "takr": ["𑛀", "𑛁", "𑛂", "𑛃", "𑛄", "𑛅", "𑛆", "𑛇", "𑛈", "𑛉"],
          "talu": ["᧐", "᧑", "᧒", "᧓", "᧔", "᧕", "᧖", "᧗", "᧘", "᧙"],
          "tamldec": ["௦", "௧", "௨", "௩", "௪", "௫", "௬", "௭", "௮", "௯"],
          "telu": ["౦", "౧", "౨", "౩", "౪", "౫", "౬", "౭", "౮", "౯"],
          "thai": ["๐", "๑", "๒", "๓", "๔", "๕", "๖", "๗", "๘", "๙"],
          "tibt": ["༠", "༡", "༢", "༣", "༤", "༥", "༦", "༧", "༨", "༩"],
          "tirh": ["𑓐", "𑓑", "𑓒", "𑓓", "𑓔", "𑓕", "𑓖", "𑓗", "𑓘", "𑓙"],
          "vaii": ["ᘠ", "ᘡ", "ᘢ", "ᘣ", "ᘤ", "ᘥ", "ᘦ", "ᘧ", "ᘨ", "ᘩ"],
          "wara": ["𑣠", "𑣡", "𑣢", "𑣣", "𑣤", "𑣥", "𑣦", "𑣧", "𑣨", "𑣩"],
          "wcho": ["𞋰", "𞋱", "𞋲", "𞋳", "𞋴", "𞋵", "𞋶", "𞋷", "𞋸", "𞋹"]
        }; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.digitMapping;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/digit-mapping.generated2.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.digitMapping = void 0;
        exports.digitMapping = {
          "adlm": ["𞥐", "𞥑", "𞥒", "𞥓", "𞥔", "𞥕", "𞥖", "𞥗", "𞥘", "𞥙"],
          "ahom": ["𑜰", "𑜱", "𑜲", "𑜳", "𑜴", "𑜵", "𑜶", "𑜷", "𑜸", "𑜹"],
          "arab": ["٠", "١", "٢", "٣", "٤", "٥", "٦", "٧", "٨", "٩"],
          "arabext": ["۰", "۱", "۲", "۳", "۴", "۵", "۶", "۷", "۸", "۹"],
          "bali": ["᭐", "᭑", "᭒", "᭓", "᭔", "᭕", "᭖", "᭗", "᭘", "᭙"],
          "beng": ["০", "১", "২", "৩", "৪", "৫", "৬", "৭", "৮", "৯"],
          "bhks": ["𑱐", "𑱑", "𑱒", "𑱓", "𑱔", "𑱕", "𑱖", "𑱗", "𑱘", "𑱙"],
          "brah": ["𑁦", "𑁧", "𑁨", "𑁩", "𑁪", "𑁫", "𑁬", "𑁭", "𑁮", "𑁯"],
          "cakm": ["𑄶", "𑄷", "𑄸", "𑄹", "𑄺", "𑄻", "𑄼", "𑄽", "𑄾", "𑄿"],
          "cham": ["꩐", "꩑", "꩒", "꩓", "꩔", "꩕", "꩖", "꩗", "꩘", "꩙"],
          "deva": ["०", "१", "२", "३", "४", "५", "६", "७", "८", "९"],
          "diak": ["𑥐", "𑥑", "𑥒", "𑥓", "𑥔", "𑥕", "𑥖", "𑥗", "𑥘", "𑥙"],
          "fullwide": ["０", "１", "２", "３", "４", "５", "６", "７", "８", "９"],
          "gong": ["𑶠", "𑶡", "𑶢", "𑶣", "𑶤", "𑶥", "𑶦", "𑶧", "𑶨", "𑶩"],
          "gonm": ["𑵐", "𑵑", "𑵒", "𑵓", "𑵔", "𑵕", "𑵖", "𑵗", "𑵘", "𑵙"],
          "gujr": ["૦", "૧", "૨", "૩", "૪", "૫", "૬", "૭", "૮", "૯"],
          "guru": ["੦", "੧", "੨", "੩", "੪", "੫", "੬", "੭", "੮", "੯"],
          "hanidec": ["〇", "一", "二", "三", "四", "五", "六", "七", "八", "九"],
          "hmng": ["𖭐", "𖭑", "𖭒", "𖭓", "𖭔", "𖭕", "𖭖", "𖭗", "𖭘", "𖭙"],
          "hmnp": ["𞅀", "𞅁", "𞅂", "𞅃", "𞅄", "𞅅", "𞅆", "𞅇", "𞅈", "𞅉"],
          "java": ["꧐", "꧑", "꧒", "꧓", "꧔", "꧕", "꧖", "꧗", "꧘", "꧙"],
          "kali": ["꤀", "꤁", "꤂", "꤃", "꤄", "꤅", "꤆", "꤇", "꤈", "꤉"],
          "khmr": ["០", "១", "២", "៣", "៤", "៥", "៦", "៧", "៨", "៩"],
          "knda": ["೦", "೧", "೨", "೩", "೪", "೫", "೬", "೭", "೮", "೯"],
          "lana": ["᪀", "᪁", "᪂", "᪃", "᪄", "᪅", "᪆", "᪇", "᪈", "᪉"],
          "lanatham": ["᪐", "᪑", "᪒", "᪓", "᪔", "᪕", "᪖", "᪗", "᪘", "᪙"],
          "laoo": ["໐", "໑", "໒", "໓", "໔", "໕", "໖", "໗", "໘", "໙"],
          "lepc": ["᪐", "᪑", "᪒", "᪓", "᪔", "᪕", "᪖", "᪗", "᪘", "᪙"],
          "limb": ["᥆", "᥇", "᥈", "᥉", "᥊", "᥋", "᥌", "᥍", "᥎", "᥏"],
          "mathbold": ["𝟎", "𝟏", "𝟐", "𝟑", "𝟒", "𝟓", "𝟔", "𝟕", "𝟖", "𝟗"],
          "mathdbl": ["𝟘", "𝟙", "𝟚", "𝟛", "𝟜", "𝟝", "𝟞", "𝟟", "𝟠", "𝟡"],
          "mathmono": ["𝟶", "𝟷", "𝟸", "𝟹", "𝟺", "𝟻", "𝟼", "𝟽", "𝟾", "𝟿"],
          "mathsanb": ["𝟬", "𝟭", "𝟮", "𝟯", "𝟰", "𝟱", "𝟲", "𝟳", "𝟴", "𝟵"],
          "mathsans": ["𝟢", "𝟣", "𝟤", "𝟥", "𝟦", "𝟧", "𝟨", "𝟩", "𝟪", "𝟫"],
          "mlym": ["൦", "൧", "൨", "൩", "൪", "൫", "൬", "൭", "൮", "൯"],
          "modi": ["𑙐", "𑙑", "𑙒", "𑙓", "𑙔", "𑙕", "𑙖", "𑙗", "𑙘", "𑙙"],
          "mong": ["᠐", "᠑", "᠒", "᠓", "᠔", "᠕", "᠖", "᠗", "᠘", "᠙"],
          "mroo": ["𖩠", "𖩡", "𖩢", "𖩣", "𖩤", "𖩥", "𖩦", "𖩧", "𖩨", "𖩩"],
          "mtei": ["꯰", "꯱", "꯲", "꯳", "꯴", "꯵", "꯶", "꯷", "꯸", "꯹"],
          "mymr": ["၀", "၁", "၂", "၃", "၄", "၅", "၆", "၇", "၈", "၉"],
          "mymrshan": ["႐", "႑", "႒", "႓", "႔", "႕", "႖", "႗", "႘", "႙"],
          "mymrtlng": ["꧰", "꧱", "꧲", "꧳", "꧴", "꧵", "꧶", "꧷", "꧸", "꧹"],
          "newa": ["𑑐", "𑑑", "𑑒", "𑑓", "𑑔", "𑑕", "𑑖", "𑑗", "𑑘", "𑑙"],
          "nkoo": ["߀", "߁", "߂", "߃", "߄", "߅", "߆", "߇", "߈", "߉"],
          "olck": ["᱐", "᱑", "᱒", "᱓", "᱔", "᱕", "᱖", "᱗", "᱘", "᱙"],
          "orya": ["୦", "୧", "୨", "୩", "୪", "୫", "୬", "୭", "୮", "୯"],
          "osma": ["𐒠", "𐒡", "𐒢", "𐒣", "𐒤", "𐒥", "𐒦", "𐒧", "𐒨", "𐒩"],
          "rohg": ["𐴰", "𐴱", "𐴲", "𐴳", "𐴴", "𐴵", "𐴶", "𐴷", "𐴸", "𐴹"],
          "saur": ["꣐", "꣑", "꣒", "꣓", "꣔", "꣕", "꣖", "꣗", "꣘", "꣙"],
          "segment": ["🯰", "🯱", "🯲", "🯳", "🯴", "🯵", "🯶", "🯷", "🯸", "🯹"],
          "shrd": ["𑇐", "𑇑", "𑇒", "𑇓", "𑇔", "𑇕", "𑇖", "𑇗", "𑇘", "𑇙"],
          "sind": ["𑋰", "𑋱", "𑋲", "𑋳", "𑋴", "𑋵", "𑋶", "𑋷", "𑋸", "𑋹"],
          "sinh": ["෦", "෧", "෨", "෩", "෪", "෫", "෬", "෭", "෮", "෯"],
          "sora": ["𑃰", "𑃱", "𑃲", "𑃳", "𑃴", "𑃵", "𑃶", "𑃷", "𑃸", "𑃹"],
          "sund": ["᮰", "᮱", "᮲", "᮳", "᮴", "᮵", "᮶", "᮷", "᮸", "᮹"],
          "takr": ["𑛀", "𑛁", "𑛂", "𑛃", "𑛄", "𑛅", "𑛆", "𑛇", "𑛈", "𑛉"],
          "talu": ["᧐", "᧑", "᧒", "᧓", "᧔", "᧕", "᧖", "᧗", "᧘", "᧙"],
          "tamldec": ["௦", "௧", "௨", "௩", "௪", "௫", "௬", "௭", "௮", "௯"],
          "telu": ["౦", "౧", "౨", "౩", "౪", "౫", "౬", "౭", "౮", "౯"],
          "thai": ["๐", "๑", "๒", "๓", "๔", "๕", "๖", "๗", "๘", "๙"],
          "tibt": ["༠", "༡", "༢", "༣", "༤", "༥", "༦", "༧", "༨", "༩"],
          "tirh": ["𑓐", "𑓑", "𑓒", "𑓓", "𑓔", "𑓕", "𑓖", "𑓗", "𑓘", "𑓙"],
          "vaii": ["ᘠ", "ᘡ", "ᘢ", "ᘣ", "ᘤ", "ᘥ", "ᘦ", "ᘧ", "ᘨ", "ᘩ"],
          "wara": ["𑣠", "𑣡", "𑣢", "𑣣", "𑣤", "𑣥", "𑣦", "𑣧", "𑣨", "𑣩"],
          "wcho": ["𞋰", "𞋱", "𞋲", "𞋳", "𞋴", "𞋵", "𞋶", "𞋷", "𞋸", "𞋹"]
        }; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.digitMapping;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/digit-mapping.generated3.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.digitMapping = void 0;
        exports.digitMapping = {
          "adlm": ["𞥐", "𞥑", "𞥒", "𞥓", "𞥔", "𞥕", "𞥖", "𞥗", "𞥘", "𞥙"],
          "ahom": ["𑜰", "𑜱", "𑜲", "𑜳", "𑜴", "𑜵", "𑜶", "𑜷", "𑜸", "𑜹"],
          "arab": ["٠", "١", "٢", "٣", "٤", "٥", "٦", "٧", "٨", "٩"],
          "arabext": ["۰", "۱", "۲", "۳", "۴", "۵", "۶", "۷", "۸", "۹"],
          "bali": ["᭐", "᭑", "᭒", "᭓", "᭔", "᭕", "᭖", "᭗", "᭘", "᭙"],
          "beng": ["০", "১", "২", "৩", "৪", "৫", "৬", "৭", "৮", "৯"],
          "bhks": ["𑱐", "𑱑", "𑱒", "𑱓", "𑱔", "𑱕", "𑱖", "𑱗", "𑱘", "𑱙"],
          "brah": ["𑁦", "𑁧", "𑁨", "𑁩", "𑁪", "𑁫", "𑁬", "𑁭", "𑁮", "𑁯"],
          "cakm": ["𑄶", "𑄷", "𑄸", "𑄹", "𑄺", "𑄻", "𑄼", "𑄽", "𑄾", "𑄿"],
          "cham": ["꩐", "꩑", "꩒", "꩓", "꩔", "꩕", "꩖", "꩗", "꩘", "꩙"],
          "deva": ["०", "१", "२", "३", "४", "५", "६", "७", "८", "९"],
          "diak": ["𑥐", "𑥑", "𑥒", "𑥓", "𑥔", "𑥕", "𑥖", "𑥗", "𑥘", "𑥙"],
          "fullwide": ["０", "１", "２", "３", "４", "５", "６", "７", "８", "９"],
          "gong": ["𑶠", "𑶡", "𑶢", "𑶣", "𑶤", "𑶥", "𑶦", "𑶧", "𑶨", "𑶩"],
          "gonm": ["𑵐", "𑵑", "𑵒", "𑵓", "𑵔", "𑵕", "𑵖", "𑵗", "𑵘", "𑵙"],
          "gujr": ["૦", "૧", "૨", "૩", "૪", "૫", "૬", "૭", "૮", "૯"],
          "guru": ["੦", "੧", "੨", "੩", "੪", "੫", "੬", "੭", "੮", "੯"],
          "hanidec": ["〇", "一", "二", "三", "四", "五", "六", "七", "八", "九"],
          "hmng": ["𖭐", "𖭑", "𖭒", "𖭓", "𖭔", "𖭕", "𖭖", "𖭗", "𖭘", "𖭙"],
          "hmnp": ["𞅀", "𞅁", "𞅂", "𞅃", "𞅄", "𞅅", "𞅆", "𞅇", "𞅈", "𞅉"],
          "java": ["꧐", "꧑", "꧒", "꧓", "꧔", "꧕", "꧖", "꧗", "꧘", "꧙"],
          "kali": ["꤀", "꤁", "꤂", "꤃", "꤄", "꤅", "꤆", "꤇", "꤈", "꤉"],
          "khmr": ["០", "១", "២", "៣", "៤", "៥", "៦", "៧", "៨", "៩"],
          "knda": ["೦", "೧", "೨", "೩", "೪", "೫", "೬", "೭", "೮", "೯"],
          "lana": ["᪀", "᪁", "᪂", "᪃", "᪄", "᪅", "᪆", "᪇", "᪈", "᪉"],
          "lanatham": ["᪐", "᪑", "᪒", "᪓", "᪔", "᪕", "᪖", "᪗", "᪘", "᪙"],
          "laoo": ["໐", "໑", "໒", "໓", "໔", "໕", "໖", "໗", "໘", "໙"],
          "lepc": ["᪐", "᪑", "᪒", "᪓", "᪔", "᪕", "᪖", "᪗", "᪘", "᪙"],
          "limb": ["᥆", "᥇", "᥈", "᥉", "᥊", "᥋", "᥌", "᥍", "᥎", "᥏"],
          "mathbold": ["𝟎", "𝟏", "𝟐", "𝟑", "𝟒", "𝟓", "𝟔", "𝟕", "𝟖", "𝟗"],
          "mathdbl": ["𝟘", "𝟙", "𝟚", "𝟛", "𝟜", "𝟝", "𝟞", "𝟟", "𝟠", "𝟡"],
          "mathmono": ["𝟶", "𝟷", "𝟸", "𝟹", "𝟺", "𝟻", "𝟼", "𝟽", "𝟾", "𝟿"],
          "mathsanb": ["𝟬", "𝟭", "𝟮", "𝟯", "𝟰", "𝟱", "𝟲", "𝟳", "𝟴", "𝟵"],
          "mathsans": ["𝟢", "𝟣", "𝟤", "𝟥", "𝟦", "𝟧", "𝟨", "𝟩", "𝟪", "𝟫"],
          "mlym": ["൦", "൧", "൨", "൩", "൪", "൫", "൬", "൭", "൮", "൯"],
          "modi": ["𑙐", "𑙑", "𑙒", "𑙓", "𑙔", "𑙕", "𑙖", "𑙗", "𑙘", "𑙙"],
          "mong": ["᠐", "᠑", "᠒", "᠓", "᠔", "᠕", "᠖", "᠗", "᠘", "᠙"],
          "mroo": ["𖩠", "𖩡", "𖩢", "𖩣", "𖩤", "𖩥", "𖩦", "𖩧", "𖩨", "𖩩"],
          "mtei": ["꯰", "꯱", "꯲", "꯳", "꯴", "꯵", "꯶", "꯷", "꯸", "꯹"],
          "mymr": ["၀", "၁", "၂", "၃", "၄", "၅", "၆", "၇", "၈", "၉"],
          "mymrshan": ["႐", "႑", "႒", "႓", "႔", "႕", "႖", "႗", "႘", "႙"],
          "mymrtlng": ["꧰", "꧱", "꧲", "꧳", "꧴", "꧵", "꧶", "꧷", "꧸", "꧹"],
          "newa": ["𑑐", "𑑑", "𑑒", "𑑓", "𑑔", "𑑕", "𑑖", "𑑗", "𑑘", "𑑙"],
          "nkoo": ["߀", "߁", "߂", "߃", "߄", "߅", "߆", "߇", "߈", "߉"],
          "olck": ["᱐", "᱑", "᱒", "᱓", "᱔", "᱕", "᱖", "᱗", "᱘", "᱙"],
          "orya": ["୦", "୧", "୨", "୩", "୪", "୫", "୬", "୭", "୮", "୯"],
          "osma": ["𐒠", "𐒡", "𐒢", "𐒣", "𐒤", "𐒥", "𐒦", "𐒧", "𐒨", "𐒩"],
          "rohg": ["𐴰", "𐴱", "𐴲", "𐴳", "𐴴", "𐴵", "𐴶", "𐴷", "𐴸", "𐴹"],
          "saur": ["꣐", "꣑", "꣒", "꣓", "꣔", "꣕", "꣖", "꣗", "꣘", "꣙"],
          "segment": ["🯰", "🯱", "🯲", "🯳", "🯴", "🯵", "🯶", "🯷", "🯸", "🯹"],
          "shrd": ["𑇐", "𑇑", "𑇒", "𑇓", "𑇔", "𑇕", "𑇖", "𑇗", "𑇘", "𑇙"],
          "sind": ["𑋰", "𑋱", "𑋲", "𑋳", "𑋴", "𑋵", "𑋶", "𑋷", "𑋸", "𑋹"],
          "sinh": ["෦", "෧", "෨", "෩", "෪", "෫", "෬", "෭", "෮", "෯"],
          "sora": ["𑃰", "𑃱", "𑃲", "𑃳", "𑃴", "𑃵", "𑃶", "𑃷", "𑃸", "𑃹"],
          "sund": ["᮰", "᮱", "᮲", "᮳", "᮴", "᮵", "᮶", "᮷", "᮸", "᮹"],
          "takr": ["𑛀", "𑛁", "𑛂", "𑛃", "𑛄", "𑛅", "𑛆", "𑛇", "𑛈", "𑛉"],
          "talu": ["᧐", "᧑", "᧒", "᧓", "᧔", "᧕", "᧖", "᧗", "᧘", "᧙"],
          "tamldec": ["௦", "௧", "௨", "௩", "௪", "௫", "௬", "௭", "௮", "௯"],
          "telu": ["౦", "౧", "౨", "౩", "౪", "౫", "౬", "౭", "౮", "౯"],
          "thai": ["๐", "๑", "๒", "๓", "๔", "๕", "๖", "๗", "๘", "๙"],
          "tibt": ["༠", "༡", "༢", "༣", "༤", "༥", "༦", "༧", "༨", "༩"],
          "tirh": ["𑓐", "𑓑", "𑓒", "𑓓", "𑓔", "𑓕", "𑓖", "𑓗", "𑓘", "𑓙"],
          "vaii": ["ᘠ", "ᘡ", "ᘢ", "ᘣ", "ᘤ", "ᘥ", "ᘦ", "ᘧ", "ᘨ", "ᘩ"],
          "wara": ["𑣠", "𑣡", "𑣢", "𑣣", "𑣤", "𑣥", "𑣦", "𑣧", "𑣨", "𑣩"],
          "wcho": ["𞋰", "𞋱", "𞋲", "𞋳", "𞋴", "𞋵", "𞋶", "𞋷", "𞋸", "𞋹"]
        }; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.digitMapping;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/digit-mapping.generated4.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.digitMapping = void 0;
        exports.digitMapping = {
          "adlm": ["𞥐", "𞥑", "𞥒", "𞥓", "𞥔", "𞥕", "𞥖", "𞥗", "𞥘", "𞥙"],
          "ahom": ["𑜰", "𑜱", "𑜲", "𑜳", "𑜴", "𑜵", "𑜶", "𑜷", "𑜸", "𑜹"],
          "arab": ["٠", "١", "٢", "٣", "٤", "٥", "٦", "٧", "٨", "٩"],
          "arabext": ["۰", "۱", "۲", "۳", "۴", "۵", "۶", "۷", "۸", "۹"],
          "bali": ["᭐", "᭑", "᭒", "᭓", "᭔", "᭕", "᭖", "᭗", "᭘", "᭙"],
          "beng": ["০", "১", "২", "৩", "৪", "৫", "৬", "৭", "৮", "৯"],
          "bhks": ["𑱐", "𑱑", "𑱒", "𑱓", "𑱔", "𑱕", "𑱖", "𑱗", "𑱘", "𑱙"],
          "brah": ["𑁦", "𑁧", "𑁨", "𑁩", "𑁪", "𑁫", "𑁬", "𑁭", "𑁮", "𑁯"],
          "cakm": ["𑄶", "𑄷", "𑄸", "𑄹", "𑄺", "𑄻", "𑄼", "𑄽", "𑄾", "𑄿"],
          "cham": ["꩐", "꩑", "꩒", "꩓", "꩔", "꩕", "꩖", "꩗", "꩘", "꩙"],
          "deva": ["०", "१", "२", "३", "४", "५", "६", "७", "८", "९"],
          "diak": ["𑥐", "𑥑", "𑥒", "𑥓", "𑥔", "𑥕", "𑥖", "𑥗", "𑥘", "𑥙"],
          "fullwide": ["０", "１", "２", "３", "４", "５", "６", "７", "８", "９"],
          "gong": ["𑶠", "𑶡", "𑶢", "𑶣", "𑶤", "𑶥", "𑶦", "𑶧", "𑶨", "𑶩"],
          "gonm": ["𑵐", "𑵑", "𑵒", "𑵓", "𑵔", "𑵕", "𑵖", "𑵗", "𑵘", "𑵙"],
          "gujr": ["૦", "૧", "૨", "૩", "૪", "૫", "૬", "૭", "૮", "૯"],
          "guru": ["੦", "੧", "੨", "੩", "੪", "੫", "੬", "੭", "੮", "੯"],
          "hanidec": ["〇", "一", "二", "三", "四", "五", "六", "七", "八", "九"],
          "hmng": ["𖭐", "𖭑", "𖭒", "𖭓", "𖭔", "𖭕", "𖭖", "𖭗", "𖭘", "𖭙"],
          "hmnp": ["𞅀", "𞅁", "𞅂", "𞅃", "𞅄", "𞅅", "𞅆", "𞅇", "𞅈", "𞅉"],
          "java": ["꧐", "꧑", "꧒", "꧓", "꧔", "꧕", "꧖", "꧗", "꧘", "꧙"],
          "kali": ["꤀", "꤁", "꤂", "꤃", "꤄", "꤅", "꤆", "꤇", "꤈", "꤉"],
          "khmr": ["០", "១", "២", "៣", "៤", "៥", "៦", "៧", "៨", "៩"],
          "knda": ["೦", "೧", "೨", "೩", "೪", "೫", "೬", "೭", "೮", "೯"],
          "lana": ["᪀", "᪁", "᪂", "᪃", "᪄", "᪅", "᪆", "᪇", "᪈", "᪉"],
          "lanatham": ["᪐", "᪑", "᪒", "᪓", "᪔", "᪕", "᪖", "᪗", "᪘", "᪙"],
          "laoo": ["໐", "໑", "໒", "໓", "໔", "໕", "໖", "໗", "໘", "໙"],
          "lepc": ["᪐", "᪑", "᪒", "᪓", "᪔", "᪕", "᪖", "᪗", "᪘", "᪙"],
          "limb": ["᥆", "᥇", "᥈", "᥉", "᥊", "᥋", "᥌", "᥍", "᥎", "᥏"],
          "mathbold": ["𝟎", "𝟏", "𝟐", "𝟑", "𝟒", "𝟓", "𝟔", "𝟕", "𝟖", "𝟗"],
          "mathdbl": ["𝟘", "𝟙", "𝟚", "𝟛", "𝟜", "𝟝", "𝟞", "𝟟", "𝟠", "𝟡"],
          "mathmono": ["𝟶", "𝟷", "𝟸", "𝟹", "𝟺", "𝟻", "𝟼", "𝟽", "𝟾", "𝟿"],
          "mathsanb": ["𝟬", "𝟭", "𝟮", "𝟯", "𝟰", "𝟱", "𝟲", "𝟳", "𝟴", "𝟵"],
          "mathsans": ["𝟢", "𝟣", "𝟤", "𝟥", "𝟦", "𝟧", "𝟨", "𝟩", "𝟪", "𝟫"],
          "mlym": ["൦", "൧", "൨", "൩", "൪", "൫", "൬", "൭", "൮", "൯"],
          "modi": ["𑙐", "𑙑", "𑙒", "𑙓", "𑙔", "𑙕", "𑙖", "𑙗", "𑙘", "𑙙"],
          "mong": ["᠐", "᠑", "᠒", "᠓", "᠔", "᠕", "᠖", "᠗", "᠘", "᠙"],
          "mroo": ["𖩠", "𖩡", "𖩢", "𖩣", "𖩤", "𖩥", "𖩦", "𖩧", "𖩨", "𖩩"],
          "mtei": ["꯰", "꯱", "꯲", "꯳", "꯴", "꯵", "꯶", "꯷", "꯸", "꯹"],
          "mymr": ["၀", "၁", "၂", "၃", "၄", "၅", "၆", "၇", "၈", "၉"],
          "mymrshan": ["႐", "႑", "႒", "႓", "႔", "႕", "႖", "႗", "႘", "႙"],
          "mymrtlng": ["꧰", "꧱", "꧲", "꧳", "꧴", "꧵", "꧶", "꧷", "꧸", "꧹"],
          "newa": ["𑑐", "𑑑", "𑑒", "𑑓", "𑑔", "𑑕", "𑑖", "𑑗", "𑑘", "𑑙"],
          "nkoo": ["߀", "߁", "߂", "߃", "߄", "߅", "߆", "߇", "߈", "߉"],
          "olck": ["᱐", "᱑", "᱒", "᱓", "᱔", "᱕", "᱖", "᱗", "᱘", "᱙"],
          "orya": ["୦", "୧", "୨", "୩", "୪", "୫", "୬", "୭", "୮", "୯"],
          "osma": ["𐒠", "𐒡", "𐒢", "𐒣", "𐒤", "𐒥", "𐒦", "𐒧", "𐒨", "𐒩"],
          "rohg": ["𐴰", "𐴱", "𐴲", "𐴳", "𐴴", "𐴵", "𐴶", "𐴷", "𐴸", "𐴹"],
          "saur": ["꣐", "꣑", "꣒", "꣓", "꣔", "꣕", "꣖", "꣗", "꣘", "꣙"],
          "segment": ["🯰", "🯱", "🯲", "🯳", "🯴", "🯵", "🯶", "🯷", "🯸", "🯹"],
          "shrd": ["𑇐", "𑇑", "𑇒", "𑇓", "𑇔", "𑇕", "𑇖", "𑇗", "𑇘", "𑇙"],
          "sind": ["𑋰", "𑋱", "𑋲", "𑋳", "𑋴", "𑋵", "𑋶", "𑋷", "𑋸", "𑋹"],
          "sinh": ["෦", "෧", "෨", "෩", "෪", "෫", "෬", "෭", "෮", "෯"],
          "sora": ["𑃰", "𑃱", "𑃲", "𑃳", "𑃴", "𑃵", "𑃶", "𑃷", "𑃸", "𑃹"],
          "sund": ["᮰", "᮱", "᮲", "᮳", "᮴", "᮵", "᮶", "᮷", "᮸", "᮹"],
          "takr": ["𑛀", "𑛁", "𑛂", "𑛃", "𑛄", "𑛅", "𑛆", "𑛇", "𑛈", "𑛉"],
          "talu": ["᧐", "᧑", "᧒", "᧓", "᧔", "᧕", "᧖", "᧗", "᧘", "᧙"],
          "tamldec": ["௦", "௧", "௨", "௩", "௪", "௫", "௬", "௭", "௮", "௯"],
          "telu": ["౦", "౧", "౨", "౩", "౪", "౫", "౬", "౭", "౮", "౯"],
          "thai": ["๐", "๑", "๒", "๓", "๔", "๕", "๖", "๗", "๘", "๙"],
          "tibt": ["༠", "༡", "༢", "༣", "༤", "༥", "༦", "༧", "༨", "༩"],
          "tirh": ["𑓐", "𑓑", "𑓒", "𑓓", "𑓔", "𑓕", "𑓖", "𑓗", "𑓘", "𑓙"],
          "vaii": ["ᘠ", "ᘡ", "ᘢ", "ᘣ", "ᘤ", "ᘥ", "ᘦ", "ᘧ", "ᘨ", "ᘩ"],
          "wara": ["𑣠", "𑣡", "𑣢", "𑣣", "𑣤", "𑣥", "𑣦", "𑣧", "𑣨", "𑣩"],
          "wcho": ["𞋰", "𞋱", "𞋲", "𞋳", "𞋴", "𞋵", "𞋶", "𞋷", "𞋸", "𞋹"]
        }; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.digitMapping;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/digit-mapping.generated5.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.digitMapping = void 0;
        exports.digitMapping = {
          "adlm": ["𞥐", "𞥑", "𞥒", "𞥓", "𞥔", "𞥕", "𞥖", "𞥗", "𞥘", "𞥙"],
          "ahom": ["𑜰", "𑜱", "𑜲", "𑜳", "𑜴", "𑜵", "𑜶", "𑜷", "𑜸", "𑜹"],
          "arab": ["٠", "١", "٢", "٣", "٤", "٥", "٦", "٧", "٨", "٩"],
          "arabext": ["۰", "۱", "۲", "۳", "۴", "۵", "۶", "۷", "۸", "۹"],
          "bali": ["᭐", "᭑", "᭒", "᭓", "᭔", "᭕", "᭖", "᭗", "᭘", "᭙"],
          "beng": ["০", "১", "২", "৩", "৪", "৫", "৬", "৭", "৮", "৯"],
          "bhks": ["𑱐", "𑱑", "𑱒", "𑱓", "𑱔", "𑱕", "𑱖", "𑱗", "𑱘", "𑱙"],
          "brah": ["𑁦", "𑁧", "𑁨", "𑁩", "𑁪", "𑁫", "𑁬", "𑁭", "𑁮", "𑁯"],
          "cakm": ["𑄶", "𑄷", "𑄸", "𑄹", "𑄺", "𑄻", "𑄼", "𑄽", "𑄾", "𑄿"],
          "cham": ["꩐", "꩑", "꩒", "꩓", "꩔", "꩕", "꩖", "꩗", "꩘", "꩙"],
          "deva": ["०", "१", "२", "३", "४", "५", "६", "७", "८", "९"],
          "diak": ["𑥐", "𑥑", "𑥒", "𑥓", "𑥔", "𑥕", "𑥖", "𑥗", "𑥘", "𑥙"],
          "fullwide": ["０", "１", "２", "３", "４", "５", "６", "７", "８", "９"],
          "gong": ["𑶠", "𑶡", "𑶢", "𑶣", "𑶤", "𑶥", "𑶦", "𑶧", "𑶨", "𑶩"],
          "gonm": ["𑵐", "𑵑", "𑵒", "𑵓", "𑵔", "𑵕", "𑵖", "𑵗", "𑵘", "𑵙"],
          "gujr": ["૦", "૧", "૨", "૩", "૪", "૫", "૬", "૭", "૮", "૯"],
          "guru": ["੦", "੧", "੨", "੩", "੪", "੫", "੬", "੭", "੮", "੯"],
          "hanidec": ["〇", "一", "二", "三", "四", "五", "六", "七", "八", "九"],
          "hmng": ["𖭐", "𖭑", "𖭒", "𖭓", "𖭔", "𖭕", "𖭖", "𖭗", "𖭘", "𖭙"],
          "hmnp": ["𞅀", "𞅁", "𞅂", "𞅃", "𞅄", "𞅅", "𞅆", "𞅇", "𞅈", "𞅉"],
          "java": ["꧐", "꧑", "꧒", "꧓", "꧔", "꧕", "꧖", "꧗", "꧘", "꧙"],
          "kali": ["꤀", "꤁", "꤂", "꤃", "꤄", "꤅", "꤆", "꤇", "꤈", "꤉"],
          "khmr": ["០", "១", "២", "៣", "៤", "៥", "៦", "៧", "៨", "៩"],
          "knda": ["೦", "೧", "೨", "೩", "೪", "೫", "೬", "೭", "೮", "೯"],
          "lana": ["᪀", "᪁", "᪂", "᪃", "᪄", "᪅", "᪆", "᪇", "᪈", "᪉"],
          "lanatham": ["᪐", "᪑", "᪒", "᪓", "᪔", "᪕", "᪖", "᪗", "᪘", "᪙"],
          "laoo": ["໐", "໑", "໒", "໓", "໔", "໕", "໖", "໗", "໘", "໙"],
          "lepc": ["᪐", "᪑", "᪒", "᪓", "᪔", "᪕", "᪖", "᪗", "᪘", "᪙"],
          "limb": ["᥆", "᥇", "᥈", "᥉", "᥊", "᥋", "᥌", "᥍", "᥎", "᥏"],
          "mathbold": ["𝟎", "𝟏", "𝟐", "𝟑", "𝟒", "𝟓", "𝟔", "𝟕", "𝟖", "𝟗"],
          "mathdbl": ["𝟘", "𝟙", "𝟚", "𝟛", "𝟜", "𝟝", "𝟞", "𝟟", "𝟠", "𝟡"],
          "mathmono": ["𝟶", "𝟷", "𝟸", "𝟹", "𝟺", "𝟻", "𝟼", "𝟽", "𝟾", "𝟿"],
          "mathsanb": ["𝟬", "𝟭", "𝟮", "𝟯", "𝟰", "𝟱", "𝟲", "𝟳", "𝟴", "𝟵"],
          "mathsans": ["𝟢", "𝟣", "𝟤", "𝟥", "𝟦", "𝟧", "𝟨", "𝟩", "𝟪", "𝟫"],
          "mlym": ["൦", "൧", "൨", "൩", "൪", "൫", "൬", "൭", "൮", "൯"],
          "modi": ["𑙐", "𑙑", "𑙒", "𑙓", "𑙔", "𑙕", "𑙖", "𑙗", "𑙘", "𑙙"],
          "mong": ["᠐", "᠑", "᠒", "᠓", "᠔", "᠕", "᠖", "᠗", "᠘", "᠙"],
          "mroo": ["𖩠", "𖩡", "𖩢", "𖩣", "𖩤", "𖩥", "𖩦", "𖩧", "𖩨", "𖩩"],
          "mtei": ["꯰", "꯱", "꯲", "꯳", "꯴", "꯵", "꯶", "꯷", "꯸", "꯹"],
          "mymr": ["၀", "၁", "၂", "၃", "၄", "၅", "၆", "၇", "၈", "၉"],
          "mymrshan": ["႐", "႑", "႒", "႓", "႔", "႕", "႖", "႗", "႘", "႙"],
          "mymrtlng": ["꧰", "꧱", "꧲", "꧳", "꧴", "꧵", "꧶", "꧷", "꧸", "꧹"],
          "newa": ["𑑐", "𑑑", "𑑒", "𑑓", "𑑔", "𑑕", "𑑖", "𑑗", "𑑘", "𑑙"],
          "nkoo": ["߀", "߁", "߂", "߃", "߄", "߅", "߆", "߇", "߈", "߉"],
          "olck": ["᱐", "᱑", "᱒", "᱓", "᱔", "᱕", "᱖", "᱗", "᱘", "᱙"],
          "orya": ["୦", "୧", "୨", "୩", "୪", "୫", "୬", "୭", "୮", "୯"],
          "osma": ["𐒠", "𐒡", "𐒢", "𐒣", "𐒤", "𐒥", "𐒦", "𐒧", "𐒨", "𐒩"],
          "rohg": ["𐴰", "𐴱", "𐴲", "𐴳", "𐴴", "𐴵", "𐴶", "𐴷", "𐴸", "𐴹"],
          "saur": ["꣐", "꣑", "꣒", "꣓", "꣔", "꣕", "꣖", "꣗", "꣘", "꣙"],
          "segment": ["🯰", "🯱", "🯲", "🯳", "🯴", "🯵", "🯶", "🯷", "🯸", "🯹"],
          "shrd": ["𑇐", "𑇑", "𑇒", "𑇓", "𑇔", "𑇕", "𑇖", "𑇗", "𑇘", "𑇙"],
          "sind": ["𑋰", "𑋱", "𑋲", "𑋳", "𑋴", "𑋵", "𑋶", "𑋷", "𑋸", "𑋹"],
          "sinh": ["෦", "෧", "෨", "෩", "෪", "෫", "෬", "෭", "෮", "෯"],
          "sora": ["𑃰", "𑃱", "𑃲", "𑃳", "𑃴", "𑃵", "𑃶", "𑃷", "𑃸", "𑃹"],
          "sund": ["᮰", "᮱", "᮲", "᮳", "᮴", "᮵", "᮶", "᮷", "᮸", "᮹"],
          "takr": ["𑛀", "𑛁", "𑛂", "𑛃", "𑛄", "𑛅", "𑛆", "𑛇", "𑛈", "𑛉"],
          "talu": ["᧐", "᧑", "᧒", "᧓", "᧔", "᧕", "᧖", "᧗", "᧘", "᧙"],
          "tamldec": ["௦", "௧", "௨", "௩", "௪", "௫", "௬", "௭", "௮", "௯"],
          "telu": ["౦", "౧", "౨", "౩", "౪", "౫", "౬", "౭", "౮", "౯"],
          "thai": ["๐", "๑", "๒", "๓", "๔", "๕", "๖", "๗", "๘", "๙"],
          "tibt": ["༠", "༡", "༢", "༣", "༤", "༥", "༦", "༧", "༨", "༩"],
          "tirh": ["𑓐", "𑓑", "𑓒", "𑓓", "𑓔", "𑓕", "𑓖", "𑓗", "𑓘", "𑓙"],
          "vaii": ["ᘠ", "ᘡ", "ᘢ", "ᘣ", "ᘤ", "ᘥ", "ᘦ", "ᘧ", "ᘨ", "ᘩ"],
          "wara": ["𑣠", "𑣡", "𑣢", "𑣣", "𑣤", "𑣥", "𑣦", "𑣧", "𑣨", "𑣩"],
          "wcho": ["𞋰", "𞋱", "𞋲", "𞋳", "𞋴", "𞋵", "𞋶", "𞋷", "𞋸", "𞋹"]
        }; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.digitMapping;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/digit-mapping.generated6.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.digitMapping = void 0;
        exports.digitMapping = {
          "adlm": ["𞥐", "𞥑", "𞥒", "𞥓", "𞥔", "𞥕", "𞥖", "𞥗", "𞥘", "𞥙"],
          "ahom": ["𑜰", "𑜱", "𑜲", "𑜳", "𑜴", "𑜵", "𑜶", "𑜷", "𑜸", "𑜹"],
          "arab": ["٠", "١", "٢", "٣", "٤", "٥", "٦", "٧", "٨", "٩"],
          "arabext": ["۰", "۱", "۲", "۳", "۴", "۵", "۶", "۷", "۸", "۹"],
          "bali": ["᭐", "᭑", "᭒", "᭓", "᭔", "᭕", "᭖", "᭗", "᭘", "᭙"],
          "beng": ["০", "১", "২", "৩", "৪", "৫", "৬", "৭", "৮", "৯"],
          "bhks": ["𑱐", "𑱑", "𑱒", "𑱓", "𑱔", "𑱕", "𑱖", "𑱗", "𑱘", "𑱙"],
          "brah": ["𑁦", "𑁧", "𑁨", "𑁩", "𑁪", "𑁫", "𑁬", "𑁭", "𑁮", "𑁯"],
          "cakm": ["𑄶", "𑄷", "𑄸", "𑄹", "𑄺", "𑄻", "𑄼", "𑄽", "𑄾", "𑄿"],
          "cham": ["꩐", "꩑", "꩒", "꩓", "꩔", "꩕", "꩖", "꩗", "꩘", "꩙"],
          "deva": ["०", "१", "२", "३", "४", "५", "६", "७", "८", "९"],
          "diak": ["𑥐", "𑥑", "𑥒", "𑥓", "𑥔", "𑥕", "𑥖", "𑥗", "𑥘", "𑥙"],
          "fullwide": ["０", "１", "２", "３", "４", "５", "６", "７", "８", "９"],
          "gong": ["𑶠", "𑶡", "𑶢", "𑶣", "𑶤", "𑶥", "𑶦", "𑶧", "𑶨", "𑶩"],
          "gonm": ["𑵐", "𑵑", "𑵒", "𑵓", "𑵔", "𑵕", "𑵖", "𑵗", "𑵘", "𑵙"],
          "gujr": ["૦", "૧", "૨", "૩", "૪", "૫", "૬", "૭", "૮", "૯"],
          "guru": ["੦", "੧", "੨", "੩", "੪", "੫", "੬", "੭", "੮", "੯"],
          "hanidec": ["〇", "一", "二", "三", "四", "五", "六", "七", "八", "九"],
          "hmng": ["𖭐", "𖭑", "𖭒", "𖭓", "𖭔", "𖭕", "𖭖", "𖭗", "𖭘", "𖭙"],
          "hmnp": ["𞅀", "𞅁", "𞅂", "𞅃", "𞅄", "𞅅", "𞅆", "𞅇", "𞅈", "𞅉"],
          "java": ["꧐", "꧑", "꧒", "꧓", "꧔", "꧕", "꧖", "꧗", "꧘", "꧙"],
          "kali": ["꤀", "꤁", "꤂", "꤃", "꤄", "꤅", "꤆", "꤇", "꤈", "꤉"],
          "khmr": ["០", "១", "២", "៣", "៤", "៥", "៦", "៧", "៨", "៩"],
          "knda": ["೦", "೧", "೨", "೩", "೪", "೫", "೬", "೭", "೮", "೯"],
          "lana": ["᪀", "᪁", "᪂", "᪃", "᪄", "᪅", "᪆", "᪇", "᪈", "᪉"],
          "lanatham": ["᪐", "᪑", "᪒", "᪓", "᪔", "᪕", "᪖", "᪗", "᪘", "᪙"],
          "laoo": ["໐", "໑", "໒", "໓", "໔", "໕", "໖", "໗", "໘", "໙"],
          "lepc": ["᪐", "᪑", "᪒", "᪓", "᪔", "᪕", "᪖", "᪗", "᪘", "᪙"],
          "limb": ["᥆", "᥇", "᥈", "᥉", "᥊", "᥋", "᥌", "᥍", "᥎", "᥏"],
          "mathbold": ["𝟎", "𝟏", "𝟐", "𝟑", "𝟒", "𝟓", "𝟔", "𝟕", "𝟖", "𝟗"],
          "mathdbl": ["𝟘", "𝟙", "𝟚", "𝟛", "𝟜", "𝟝", "𝟞", "𝟟", "𝟠", "𝟡"],
          "mathmono": ["𝟶", "𝟷", "𝟸", "𝟹", "𝟺", "𝟻", "𝟼", "𝟽", "𝟾", "𝟿"],
          "mathsanb": ["𝟬", "𝟭", "𝟮", "𝟯", "𝟰", "𝟱", "𝟲", "𝟳", "𝟴", "𝟵"],
          "mathsans": ["𝟢", "𝟣", "𝟤", "𝟥", "𝟦", "𝟧", "𝟨", "𝟩", "𝟪", "𝟫"],
          "mlym": ["൦", "൧", "൨", "൩", "൪", "൫", "൬", "൭", "൮", "൯"],
          "modi": ["𑙐", "𑙑", "𑙒", "𑙓", "𑙔", "𑙕", "𑙖", "𑙗", "𑙘", "𑙙"],
          "mong": ["᠐", "᠑", "᠒", "᠓", "᠔", "᠕", "᠖", "᠗", "᠘", "᠙"],
          "mroo": ["𖩠", "𖩡", "𖩢", "𖩣", "𖩤", "𖩥", "𖩦", "𖩧", "𖩨", "𖩩"],
          "mtei": ["꯰", "꯱", "꯲", "꯳", "꯴", "꯵", "꯶", "꯷", "꯸", "꯹"],
          "mymr": ["၀", "၁", "၂", "၃", "၄", "၅", "၆", "၇", "၈", "၉"],
          "mymrshan": ["႐", "႑", "႒", "႓", "႔", "႕", "႖", "႗", "႘", "႙"],
          "mymrtlng": ["꧰", "꧱", "꧲", "꧳", "꧴", "꧵", "꧶", "꧷", "꧸", "꧹"],
          "newa": ["𑑐", "𑑑", "𑑒", "𑑓", "𑑔", "𑑕", "𑑖", "𑑗", "𑑘", "𑑙"],
          "nkoo": ["߀", "߁", "߂", "߃", "߄", "߅", "߆", "߇", "߈", "߉"],
          "olck": ["᱐", "᱑", "᱒", "᱓", "᱔", "᱕", "᱖", "᱗", "᱘", "᱙"],
          "orya": ["୦", "୧", "୨", "୩", "୪", "୫", "୬", "୭", "୮", "୯"],
          "osma": ["𐒠", "𐒡", "𐒢", "𐒣", "𐒤", "𐒥", "𐒦", "𐒧", "𐒨", "𐒩"],
          "rohg": ["𐴰", "𐴱", "𐴲", "𐴳", "𐴴", "𐴵", "𐴶", "𐴷", "𐴸", "𐴹"],
          "saur": ["꣐", "꣑", "꣒", "꣓", "꣔", "꣕", "꣖", "꣗", "꣘", "꣙"],
          "segment": ["🯰", "🯱", "🯲", "🯳", "🯴", "🯵", "🯶", "🯷", "🯸", "🯹"],
          "shrd": ["𑇐", "𑇑", "𑇒", "𑇓", "𑇔", "𑇕", "𑇖", "𑇗", "𑇘", "𑇙"],
          "sind": ["𑋰", "𑋱", "𑋲", "𑋳", "𑋴", "𑋵", "𑋶", "𑋷", "𑋸", "𑋹"],
          "sinh": ["෦", "෧", "෨", "෩", "෪", "෫", "෬", "෭", "෮", "෯"],
          "sora": ["𑃰", "𑃱", "𑃲", "𑃳", "𑃴", "𑃵", "𑃶", "𑃷", "𑃸", "𑃹"],
          "sund": ["᮰", "᮱", "᮲", "᮳", "᮴", "᮵", "᮶", "᮷", "᮸", "᮹"],
          "takr": ["𑛀", "𑛁", "𑛂", "𑛃", "𑛄", "𑛅", "𑛆", "𑛇", "𑛈", "𑛉"],
          "talu": ["᧐", "᧑", "᧒", "᧓", "᧔", "᧕", "᧖", "᧗", "᧘", "᧙"],
          "tamldec": ["௦", "௧", "௨", "௩", "௪", "௫", "௬", "௭", "௮", "௯"],
          "telu": ["౦", "౧", "౨", "౩", "౪", "౫", "౬", "౭", "౮", "౯"],
          "thai": ["๐", "๑", "๒", "๓", "๔", "๕", "๖", "๗", "๘", "๙"],
          "tibt": ["༠", "༡", "༢", "༣", "༤", "༥", "༦", "༧", "༨", "༩"],
          "tirh": ["𑓐", "𑓑", "𑓒", "𑓓", "𑓔", "𑓕", "𑓖", "𑓗", "𑓘", "𑓙"],
          "vaii": ["ᘠ", "ᘡ", "ᘢ", "ᘣ", "ᘤ", "ᘥ", "ᘦ", "ᘧ", "ᘨ", "ᘩ"],
          "wara": ["𑣠", "𑣡", "𑣢", "𑣣", "𑣤", "𑣥", "𑣦", "𑣧", "𑣨", "𑣩"],
          "wcho": ["𞋰", "𞋱", "𞋲", "𞋳", "𞋴", "𞋵", "𞋶", "𞋷", "𞋸", "𞋹"]
        }; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.digitMapping;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/digit-mapping.generated7.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.digitMapping = void 0;
        exports.digitMapping = {
          "adlm": ["𞥐", "𞥑", "𞥒", "𞥓", "𞥔", "𞥕", "𞥖", "𞥗", "𞥘", "𞥙"],
          "ahom": ["𑜰", "𑜱", "𑜲", "𑜳", "𑜴", "𑜵", "𑜶", "𑜷", "𑜸", "𑜹"],
          "arab": ["٠", "١", "٢", "٣", "٤", "٥", "٦", "٧", "٨", "٩"],
          "arabext": ["۰", "۱", "۲", "۳", "۴", "۵", "۶", "۷", "۸", "۹"],
          "bali": ["᭐", "᭑", "᭒", "᭓", "᭔", "᭕", "᭖", "᭗", "᭘", "᭙"],
          "beng": ["০", "১", "২", "৩", "৪", "৫", "৬", "৭", "৮", "৯"],
          "bhks": ["𑱐", "𑱑", "𑱒", "𑱓", "𑱔", "𑱕", "𑱖", "𑱗", "𑱘", "𑱙"],
          "brah": ["𑁦", "𑁧", "𑁨", "𑁩", "𑁪", "𑁫", "𑁬", "𑁭", "𑁮", "𑁯"],
          "cakm": ["𑄶", "𑄷", "𑄸", "𑄹", "𑄺", "𑄻", "𑄼", "𑄽", "𑄾", "𑄿"],
          "cham": ["꩐", "꩑", "꩒", "꩓", "꩔", "꩕", "꩖", "꩗", "꩘", "꩙"],
          "deva": ["०", "१", "२", "३", "४", "५", "६", "७", "८", "९"],
          "diak": ["𑥐", "𑥑", "𑥒", "𑥓", "𑥔", "𑥕", "𑥖", "𑥗", "𑥘", "𑥙"],
          "fullwide": ["０", "１", "２", "３", "４", "５", "６", "７", "８", "９"],
          "gong": ["𑶠", "𑶡", "𑶢", "𑶣", "𑶤", "𑶥", "𑶦", "𑶧", "𑶨", "𑶩"],
          "gonm": ["𑵐", "𑵑", "𑵒", "𑵓", "𑵔", "𑵕", "𑵖", "𑵗", "𑵘", "𑵙"],
          "gujr": ["૦", "૧", "૨", "૩", "૪", "૫", "૬", "૭", "૮", "૯"],
          "guru": ["੦", "੧", "੨", "੩", "੪", "੫", "੬", "੭", "੮", "੯"],
          "hanidec": ["〇", "一", "二", "三", "四", "五", "六", "七", "八", "九"],
          "hmng": ["𖭐", "𖭑", "𖭒", "𖭓", "𖭔", "𖭕", "𖭖", "𖭗", "𖭘", "𖭙"],
          "hmnp": ["𞅀", "𞅁", "𞅂", "𞅃", "𞅄", "𞅅", "𞅆", "𞅇", "𞅈", "𞅉"],
          "java": ["꧐", "꧑", "꧒", "꧓", "꧔", "꧕", "꧖", "꧗", "꧘", "꧙"],
          "kali": ["꤀", "꤁", "꤂", "꤃", "꤄", "꤅", "꤆", "꤇", "꤈", "꤉"],
          "khmr": ["០", "១", "២", "៣", "៤", "៥", "៦", "៧", "៨", "៩"],
          "knda": ["೦", "೧", "೨", "೩", "೪", "೫", "೬", "೭", "೮", "೯"],
          "lana": ["᪀", "᪁", "᪂", "᪃", "᪄", "᪅", "᪆", "᪇", "᪈", "᪉"],
          "lanatham": ["᪐", "᪑", "᪒", "᪓", "᪔", "᪕", "᪖", "᪗", "᪘", "᪙"],
          "laoo": ["໐", "໑", "໒", "໓", "໔", "໕", "໖", "໗", "໘", "໙"],
          "lepc": ["᪐", "᪑", "᪒", "᪓", "᪔", "᪕", "᪖", "᪗", "᪘", "᪙"],
          "limb": ["᥆", "᥇", "᥈", "᥉", "᥊", "᥋", "᥌", "᥍", "᥎", "᥏"],
          "mathbold": ["𝟎", "𝟏", "𝟐", "𝟑", "𝟒", "𝟓", "𝟔", "𝟕", "𝟖", "𝟗"],
          "mathdbl": ["𝟘", "𝟙", "𝟚", "𝟛", "𝟜", "𝟝", "𝟞", "𝟟", "𝟠", "𝟡"],
          "mathmono": ["𝟶", "𝟷", "𝟸", "𝟹", "𝟺", "𝟻", "𝟼", "𝟽", "𝟾", "𝟿"],
          "mathsanb": ["𝟬", "𝟭", "𝟮", "𝟯", "𝟰", "𝟱", "𝟲", "𝟳", "𝟴", "𝟵"],
          "mathsans": ["𝟢", "𝟣", "𝟤", "𝟥", "𝟦", "𝟧", "𝟨", "𝟩", "𝟪", "𝟫"],
          "mlym": ["൦", "൧", "൨", "൩", "൪", "൫", "൬", "൭", "൮", "൯"],
          "modi": ["𑙐", "𑙑", "𑙒", "𑙓", "𑙔", "𑙕", "𑙖", "𑙗", "𑙘", "𑙙"],
          "mong": ["᠐", "᠑", "᠒", "᠓", "᠔", "᠕", "᠖", "᠗", "᠘", "᠙"],
          "mroo": ["𖩠", "𖩡", "𖩢", "𖩣", "𖩤", "𖩥", "𖩦", "𖩧", "𖩨", "𖩩"],
          "mtei": ["꯰", "꯱", "꯲", "꯳", "꯴", "꯵", "꯶", "꯷", "꯸", "꯹"],
          "mymr": ["၀", "၁", "၂", "၃", "၄", "၅", "၆", "၇", "၈", "၉"],
          "mymrshan": ["႐", "႑", "႒", "႓", "႔", "႕", "႖", "႗", "႘", "႙"],
          "mymrtlng": ["꧰", "꧱", "꧲", "꧳", "꧴", "꧵", "꧶", "꧷", "꧸", "꧹"],
          "newa": ["𑑐", "𑑑", "𑑒", "𑑓", "𑑔", "𑑕", "𑑖", "𑑗", "𑑘", "𑑙"],
          "nkoo": ["߀", "߁", "߂", "߃", "߄", "߅", "߆", "߇", "߈", "߉"],
          "olck": ["᱐", "᱑", "᱒", "᱓", "᱔", "᱕", "᱖", "᱗", "᱘", "᱙"],
          "orya": ["୦", "୧", "୨", "୩", "୪", "୫", "୬", "୭", "୮", "୯"],
          "osma": ["𐒠", "𐒡", "𐒢", "𐒣", "𐒤", "𐒥", "𐒦", "𐒧", "𐒨", "𐒩"],
          "rohg": ["𐴰", "𐴱", "𐴲", "𐴳", "𐴴", "𐴵", "𐴶", "𐴷", "𐴸", "𐴹"],
          "saur": ["꣐", "꣑", "꣒", "꣓", "꣔", "꣕", "꣖", "꣗", "꣘", "꣙"],
          "segment": ["🯰", "🯱", "🯲", "🯳", "🯴", "🯵", "🯶", "🯷", "🯸", "🯹"],
          "shrd": ["𑇐", "𑇑", "𑇒", "𑇓", "𑇔", "𑇕", "𑇖", "𑇗", "𑇘", "𑇙"],
          "sind": ["𑋰", "𑋱", "𑋲", "𑋳", "𑋴", "𑋵", "𑋶", "𑋷", "𑋸", "𑋹"],
          "sinh": ["෦", "෧", "෨", "෩", "෪", "෫", "෬", "෭", "෮", "෯"],
          "sora": ["𑃰", "𑃱", "𑃲", "𑃳", "𑃴", "𑃵", "𑃶", "𑃷", "𑃸", "𑃹"],
          "sund": ["᮰", "᮱", "᮲", "᮳", "᮴", "᮵", "᮶", "᮷", "᮸", "᮹"],
          "takr": ["𑛀", "𑛁", "𑛂", "𑛃", "𑛄", "𑛅", "𑛆", "𑛇", "𑛈", "𑛉"],
          "talu": ["᧐", "᧑", "᧒", "᧓", "᧔", "᧕", "᧖", "᧗", "᧘", "᧙"],
          "tamldec": ["௦", "௧", "௨", "௩", "௪", "௫", "௬", "௭", "௮", "௯"],
          "telu": ["౦", "౧", "౨", "౩", "౪", "౫", "౬", "౭", "౮", "౯"],
          "thai": ["๐", "๑", "๒", "๓", "๔", "๕", "๖", "๗", "๘", "๙"],
          "tibt": ["༠", "༡", "༢", "༣", "༤", "༥", "༦", "༧", "༨", "༩"],
          "tirh": ["𑓐", "𑓑", "𑓒", "𑓓", "𑓔", "𑓕", "𑓖", "𑓗", "𑓘", "𑓙"],
          "vaii": ["ᘠ", "ᘡ", "ᘢ", "ᘣ", "ᘤ", "ᘥ", "ᘦ", "ᘧ", "ᘨ", "ᘩ"],
          "wara": ["𑣠", "𑣡", "𑣢", "𑣣", "𑣤", "𑣥", "𑣦", "𑣧", "𑣨", "𑣩"],
          "wcho": ["𞋰", "𞋱", "𞋲", "𞋳", "𞋴", "𞋵", "𞋶", "𞋷", "𞋸", "𞋹"]
        }; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.digitMapping;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/displaynames.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        }); // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/displaynames2.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        }); // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/displaynames3.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        }); // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/displaynames4.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        }); // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/displaynames5.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        }); // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/displaynames6.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        }); // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/displaynames7.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        }); // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/emitter.js", ['./cjs-loader.mjs', './tslib5.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.emitUnicodeLocaleId = exports.emitUnicodeLanguageId = void 0;

        var tslib_1 = require("tslib");

        function emitUnicodeLanguageId(lang) {
          if (!lang) {
            return '';
          }

          return (0, tslib_1.__spreadArray)([lang.lang, lang.script, lang.region], lang.variants || [], true).filter(Boolean).join('-');
        }

        exports.emitUnicodeLanguageId = emitUnicodeLanguageId;

        function emitUnicodeLocaleId(_a) {
          var lang = _a.lang,
              extensions = _a.extensions;
          var chunks = [emitUnicodeLanguageId(lang)];

          for (var _i = 0, extensions_1 = extensions; _i < extensions_1.length; _i++) {
            var ext = extensions_1[_i];
            chunks.push(ext.type);

            switch (ext.type) {
              case 'u':
                chunks.push.apply(chunks, (0, tslib_1.__spreadArray)((0, tslib_1.__spreadArray)([], ext.attributes, false), ext.keywords.reduce(function (all, kv) {
                  return all.concat(kv);
                }, []), false));
                break;

              case 't':
                chunks.push.apply(chunks, (0, tslib_1.__spreadArray)([emitUnicodeLanguageId(ext.lang)], ext.fields.reduce(function (all, kv) {
                  return all.concat(kv);
                }, []), false));
                break;

              default:
                chunks.push(ext.value);
                break;
            }
          }

          return chunks.filter(Boolean).join('-');
        }

        exports.emitUnicodeLocaleId = emitUnicodeLocaleId; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.emitUnicodeLocaleId;
        module.exports.emitUnicodeLanguageId;
      }, () => ({
        'tslib': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/env", [], function (exports) {
  'use strict';

  return {
    execute: function () {
      const EDITOR = exports('EDITOR', false);
    }
  };
});

System.register("chunks:///_virtual/format_to_parts.js", ['./cjs-loader.mjs', './ToRawFixed.js', './digit-mapping.generated.js', './regex.generated.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var ToRawFixed_1 = require("./ToRawFixed");

        var digit_mapping_generated_1 = require("./digit-mapping.generated");

        var regex_generated_1 = require("../regex.generated"); // This is from: unicode-12.1.0/General_Category/Symbol/regex.js
        // IE11 does not support unicode flag, otherwise this is just /\p{S}/u.
        // /^\p{S}/u


        var CARET_S_UNICODE_REGEX = new RegExp("^".concat(regex_generated_1.S_UNICODE_REGEX.source)); // /\p{S}$/u

        var S_DOLLAR_UNICODE_REGEX = new RegExp("".concat(regex_generated_1.S_UNICODE_REGEX.source, "$"));
        var CLDR_NUMBER_PATTERN = /[#0](?:[\.,][#0]+)*/g;

        function formatToParts(numberResult, data, pl, options) {
          var sign = numberResult.sign,
              exponent = numberResult.exponent,
              magnitude = numberResult.magnitude;
          var notation = options.notation,
              style = options.style,
              numberingSystem = options.numberingSystem;
          var defaultNumberingSystem = data.numbers.nu[0]; // #region Part 1: partition and interpolate the CLDR number pattern.
          // ----------------------------------------------------------

          var compactNumberPattern = null;

          if (notation === 'compact' && magnitude) {
            compactNumberPattern = getCompactDisplayPattern(numberResult, pl, data, style, options.compactDisplay, options.currencyDisplay, numberingSystem);
          } // This is used multiple times


          var nonNameCurrencyPart;

          if (style === 'currency' && options.currencyDisplay !== 'name') {
            var byCurrencyDisplay = data.currencies[options.currency];

            if (byCurrencyDisplay) {
              switch (options.currencyDisplay) {
                case 'code':
                  nonNameCurrencyPart = options.currency;
                  break;

                case 'symbol':
                  nonNameCurrencyPart = byCurrencyDisplay.symbol;
                  break;

                default:
                  nonNameCurrencyPart = byCurrencyDisplay.narrow;
                  break;
              }
            } else {
              // Fallback for unknown currency
              nonNameCurrencyPart = options.currency;
            }
          }

          var numberPattern;

          if (!compactNumberPattern) {
            // Note: if the style is unit, or is currency and the currency display is name,
            // its unit parts will be interpolated in part 2. So here we can fallback to decimal.
            if (style === 'decimal' || style === 'unit' || style === 'currency' && options.currencyDisplay === 'name') {
              // Shortcut for decimal
              var decimalData = data.numbers.decimal[numberingSystem] || data.numbers.decimal[defaultNumberingSystem];
              numberPattern = getPatternForSign(decimalData.standard, sign);
            } else if (style === 'currency') {
              var currencyData = data.numbers.currency[numberingSystem] || data.numbers.currency[defaultNumberingSystem]; // We replace number pattern part with `0` for easier postprocessing.

              numberPattern = getPatternForSign(currencyData[options.currencySign], sign);
            } else {
              // percent
              var percentPattern = data.numbers.percent[numberingSystem] || data.numbers.percent[defaultNumberingSystem];
              numberPattern = getPatternForSign(percentPattern, sign);
            }
          } else {
            numberPattern = compactNumberPattern;
          } // Extract the decimal number pattern string. It looks like "#,##0,00", which will later be
          // used to infer decimal group sizes.


          var decimalNumberPattern = CLDR_NUMBER_PATTERN.exec(numberPattern)[0]; // Now we start to substitute patterns
          // 1. replace strings like `0` and `#,##0.00` with `{0}`
          // 2. unquote characters (invariant: the quoted characters does not contain the special tokens)

          numberPattern = numberPattern.replace(CLDR_NUMBER_PATTERN, '{0}').replace(/'(.)'/g, '$1'); // Handle currency spacing (both compact and non-compact).

          if (style === 'currency' && options.currencyDisplay !== 'name') {
            var currencyData = data.numbers.currency[numberingSystem] || data.numbers.currency[defaultNumberingSystem]; // See `currencySpacing` substitution rule in TR-35.
            // Here we always assume the currencyMatch is "[:^S:]" and surroundingMatch is "[:digit:]".
            //
            // Example 1: for pattern "#,##0.00¤" with symbol "US$", we replace "¤" with the symbol,
            // but insert an extra non-break space before the symbol, because "[:^S:]" matches "U" in
            // "US$" and "[:digit:]" matches the latn numbering system digits.
            //
            // Example 2: for pattern "¤#,##0.00" with symbol "US$", there is no spacing between symbol
            // and number, because `$` does not match "[:^S:]".
            //
            // Implementation note: here we do the best effort to infer the insertion.
            // We also assume that `beforeInsertBetween` and `afterInsertBetween` will never be `;`.

            var afterCurrency = currencyData.currencySpacing.afterInsertBetween;

            if (afterCurrency && !S_DOLLAR_UNICODE_REGEX.test(nonNameCurrencyPart)) {
              numberPattern = numberPattern.replace('¤{0}', "\u00A4".concat(afterCurrency, "{0}"));
            }

            var beforeCurrency = currencyData.currencySpacing.beforeInsertBetween;

            if (beforeCurrency && !CARET_S_UNICODE_REGEX.test(nonNameCurrencyPart)) {
              numberPattern = numberPattern.replace('{0}¤', "{0}".concat(beforeCurrency, "\u00A4"));
            }
          } // The following tokens are special: `{0}`, `¤`, `%`, `-`, `+`, `{c:...}.


          var numberPatternParts = numberPattern.split(/({c:[^}]+}|\{0\}|[¤%\-\+])/g);
          var numberParts = [];
          var symbols = data.numbers.symbols[numberingSystem] || data.numbers.symbols[defaultNumberingSystem];

          for (var _i = 0, numberPatternParts_1 = numberPatternParts; _i < numberPatternParts_1.length; _i++) {
            var part = numberPatternParts_1[_i];

            if (!part) {
              continue;
            }

            switch (part) {
              case '{0}':
                {
                  // We only need to handle scientific and engineering notation here.
                  numberParts.push.apply(numberParts, paritionNumberIntoParts(symbols, numberResult, notation, exponent, numberingSystem, // If compact number pattern exists, do not insert group separators.
                  !compactNumberPattern && options.useGrouping, decimalNumberPattern));
                  break;
                }

              case '-':
                numberParts.push({
                  type: 'minusSign',
                  value: symbols.minusSign
                });
                break;

              case '+':
                numberParts.push({
                  type: 'plusSign',
                  value: symbols.plusSign
                });
                break;

              case '%':
                numberParts.push({
                  type: 'percentSign',
                  value: symbols.percentSign
                });
                break;

              case '¤':
                // Computed above when handling currency spacing.
                numberParts.push({
                  type: 'currency',
                  value: nonNameCurrencyPart
                });
                break;

              default:
                if (/^\{c:/.test(part)) {
                  numberParts.push({
                    type: 'compact',
                    value: part.substring(3, part.length - 1)
                  });
                } else {
                  // literal
                  numberParts.push({
                    type: 'literal',
                    value: part
                  });
                }

                break;
            }
          } // #endregion
          // #region Part 2: interpolate unit pattern if necessary.
          // ----------------------------------------------


          switch (style) {
            case 'currency':
              {
                // `currencyDisplay: 'name'` has similar pattern handling as units.
                if (options.currencyDisplay === 'name') {
                  var unitPattern = (data.numbers.currency[numberingSystem] || data.numbers.currency[defaultNumberingSystem]).unitPattern; // Select plural

                  var unitName = void 0;
                  var currencyNameData = data.currencies[options.currency];

                  if (currencyNameData) {
                    unitName = selectPlural(pl, numberResult.roundedNumber * Math.pow(10, exponent), currencyNameData.displayName);
                  } else {
                    // Fallback for unknown currency
                    unitName = options.currency;
                  } // Do {0} and {1} substitution


                  var unitPatternParts = unitPattern.split(/(\{[01]\})/g);
                  var result = [];

                  for (var _a = 0, unitPatternParts_1 = unitPatternParts; _a < unitPatternParts_1.length; _a++) {
                    var part = unitPatternParts_1[_a];

                    switch (part) {
                      case '{0}':
                        result.push.apply(result, numberParts);
                        break;

                      case '{1}':
                        result.push({
                          type: 'currency',
                          value: unitName
                        });
                        break;

                      default:
                        if (part) {
                          result.push({
                            type: 'literal',
                            value: part
                          });
                        }

                        break;
                    }
                  }

                  return result;
                } else {
                  return numberParts;
                }
              }

            case 'unit':
              {
                var unit = options.unit,
                    unitDisplay = options.unitDisplay;
                var unitData = data.units.simple[unit];
                var unitPattern = void 0;

                if (unitData) {
                  // Simple unit pattern
                  unitPattern = selectPlural(pl, numberResult.roundedNumber * Math.pow(10, exponent), data.units.simple[unit][unitDisplay]);
                } else {
                  // See: http://unicode.org/reports/tr35/tr35-general.html#perUnitPatterns
                  // If cannot find unit in the simple pattern, it must be "per" compound pattern.
                  // Implementation note: we are not following TR-35 here because we need to format to parts!
                  var _b = unit.split('-per-'),
                      numeratorUnit = _b[0],
                      denominatorUnit = _b[1];

                  unitData = data.units.simple[numeratorUnit];
                  var numeratorUnitPattern = selectPlural(pl, numberResult.roundedNumber * Math.pow(10, exponent), data.units.simple[numeratorUnit][unitDisplay]);
                  var perUnitPattern = data.units.simple[denominatorUnit].perUnit[unitDisplay];

                  if (perUnitPattern) {
                    // perUnitPattern exists, combine it with numeratorUnitPattern
                    unitPattern = perUnitPattern.replace('{0}', numeratorUnitPattern);
                  } else {
                    // get compoundUnit pattern (e.g. "{0} per {1}"), repalce {0} with numerator pattern and {1} with
                    // the denominator pattern in singular form.
                    var perPattern = data.units.compound.per[unitDisplay];
                    var denominatorPattern = selectPlural(pl, 1, data.units.simple[denominatorUnit][unitDisplay]);
                    unitPattern = unitPattern = perPattern.replace('{0}', numeratorUnitPattern).replace('{1}', denominatorPattern.replace('{0}', ''));
                  }
                }

                var result = []; // We need spacing around "{0}" because they are not treated as "unit" parts, but "literal".

                for (var _c = 0, _d = unitPattern.split(/(\s*\{0\}\s*)/); _c < _d.length; _c++) {
                  var part = _d[_c];
                  var interpolateMatch = /^(\s*)\{0\}(\s*)$/.exec(part);

                  if (interpolateMatch) {
                    // Space before "{0}"
                    if (interpolateMatch[1]) {
                      result.push({
                        type: 'literal',
                        value: interpolateMatch[1]
                      });
                    } // "{0}" itself


                    result.push.apply(result, numberParts); // Space after "{0}"

                    if (interpolateMatch[2]) {
                      result.push({
                        type: 'literal',
                        value: interpolateMatch[2]
                      });
                    }
                  } else if (part) {
                    result.push({
                      type: 'unit',
                      value: part
                    });
                  }
                }

                return result;
              }

            default:
              return numberParts;
          } // #endregion

        }

        exports.default = formatToParts; // A subset of https://tc39.es/ecma402/#sec-partitionnotationsubpattern
        // Plus the exponent parts handling.

        function paritionNumberIntoParts(symbols, numberResult, notation, exponent, numberingSystem, useGrouping,
        /**
         * This is the decimal number pattern without signs or symbols.
         * It is used to infer the group size when `useGrouping` is true.
         *
         * A typical value looks like "#,##0.00" (primary group size is 3).
         * Some locales like Hindi has secondary group size of 2 (e.g. "#,##,##0.00").
         */
        decimalNumberPattern) {
          var result = []; // eslint-disable-next-line prefer-const

          var n = numberResult.formattedString,
              x = numberResult.roundedNumber;

          if (isNaN(x)) {
            return [{
              type: 'nan',
              value: n
            }];
          } else if (!isFinite(x)) {
            return [{
              type: 'infinity',
              value: n
            }];
          }

          var digitReplacementTable = digit_mapping_generated_1.digitMapping[numberingSystem];

          if (digitReplacementTable) {
            n = n.replace(/\d/g, function (digit) {
              return digitReplacementTable[+digit] || digit;
            });
          } // TODO: Else use an implementation dependent algorithm to map n to the appropriate
          // representation of n in the given numbering system.


          var decimalSepIndex = n.indexOf('.');
          var integer;
          var fraction;

          if (decimalSepIndex > 0) {
            integer = n.slice(0, decimalSepIndex);
            fraction = n.slice(decimalSepIndex + 1);
          } else {
            integer = n;
          } // #region Grouping integer digits
          // The weird compact and x >= 10000 check is to ensure consistency with Node.js and Chrome.
          // Note that `de` does not have compact form for thousands, but Node.js does not insert grouping separator
          // unless the rounded number is greater than 10000:
          //   NumberFormat('de', {notation: 'compact', compactDisplay: 'short'}).format(1234) //=> "1234"
          //   NumberFormat('de').format(1234) //=> "1.234"


          if (useGrouping && (notation !== 'compact' || x >= 10000)) {
            var groupSepSymbol = symbols.group;
            var groups = []; // > There may be two different grouping sizes: The primary grouping size used for the least
            // > significant integer group, and the secondary grouping size used for more significant groups.
            // > If a pattern contains multiple grouping separators, the interval between the last one and the
            // > end of the integer defines the primary grouping size, and the interval between the last two
            // > defines the secondary grouping size. All others are ignored.

            var integerNumberPattern = decimalNumberPattern.split('.')[0];
            var patternGroups = integerNumberPattern.split(',');
            var primaryGroupingSize = 3;
            var secondaryGroupingSize = 3;

            if (patternGroups.length > 1) {
              primaryGroupingSize = patternGroups[patternGroups.length - 1].length;
            }

            if (patternGroups.length > 2) {
              secondaryGroupingSize = patternGroups[patternGroups.length - 2].length;
            }

            var i = integer.length - primaryGroupingSize;

            if (i > 0) {
              // Slice the least significant integer group
              groups.push(integer.slice(i, i + primaryGroupingSize)); // Then iteratively push the more signicant groups
              // TODO: handle surrogate pairs in some numbering system digits

              for (i -= secondaryGroupingSize; i > 0; i -= secondaryGroupingSize) {
                groups.push(integer.slice(i, i + secondaryGroupingSize));
              }

              groups.push(integer.slice(0, i + secondaryGroupingSize));
            } else {
              groups.push(integer);
            }

            while (groups.length > 0) {
              var integerGroup = groups.pop();
              result.push({
                type: 'integer',
                value: integerGroup
              });

              if (groups.length > 0) {
                result.push({
                  type: 'group',
                  value: groupSepSymbol
                });
              }
            }
          } else {
            result.push({
              type: 'integer',
              value: integer
            });
          } // #endregion


          if (fraction !== undefined) {
            result.push({
              type: 'decimal',
              value: symbols.decimal
            }, {
              type: 'fraction',
              value: fraction
            });
          }

          if ((notation === 'scientific' || notation === 'engineering') && isFinite(x)) {
            result.push({
              type: 'exponentSeparator',
              value: symbols.exponential
            });

            if (exponent < 0) {
              result.push({
                type: 'exponentMinusSign',
                value: symbols.minusSign
              });
              exponent = -exponent;
            }

            var exponentResult = (0, ToRawFixed_1.ToRawFixed)(exponent, 0, 0);
            result.push({
              type: 'exponentInteger',
              value: exponentResult.formattedString
            });
          }

          return result;
        }

        function getPatternForSign(pattern, sign) {
          if (pattern.indexOf(';') < 0) {
            pattern = "".concat(pattern, ";-").concat(pattern);
          }

          var _a = pattern.split(';'),
              zeroPattern = _a[0],
              negativePattern = _a[1];

          switch (sign) {
            case 0:
              return zeroPattern;

            case -1:
              return negativePattern;

            default:
              return negativePattern.indexOf('-') >= 0 ? negativePattern.replace(/-/g, '+') : "+".concat(zeroPattern);
          }
        } // Find the CLDR pattern for compact notation based on the magnitude of data and style.
        //
        // Example return value: "¤ {c:laki}000;¤{c:laki} -0" (`sw` locale):
        // - Notice the `{c:...}` token that wraps the compact literal.
        // - The consecutive zeros are normalized to single zero to match CLDR_NUMBER_PATTERN.
        //
        // Returning null means the compact display pattern cannot be found.


        function getCompactDisplayPattern(numberResult, pl, data, style, compactDisplay, currencyDisplay, numberingSystem) {
          var _a;

          var roundedNumber = numberResult.roundedNumber,
              sign = numberResult.sign,
              magnitude = numberResult.magnitude;
          var magnitudeKey = String(Math.pow(10, magnitude));
          var defaultNumberingSystem = data.numbers.nu[0];
          var pattern;

          if (style === 'currency' && currencyDisplay !== 'name') {
            var byNumberingSystem = data.numbers.currency;
            var currencyData = byNumberingSystem[numberingSystem] || byNumberingSystem[defaultNumberingSystem]; // NOTE: compact notation ignores currencySign!

            var compactPluralRules = (_a = currencyData.short) === null || _a === void 0 ? void 0 : _a[magnitudeKey];

            if (!compactPluralRules) {
              return null;
            }

            pattern = selectPlural(pl, roundedNumber, compactPluralRules);
          } else {
            var byNumberingSystem = data.numbers.decimal;
            var byCompactDisplay = byNumberingSystem[numberingSystem] || byNumberingSystem[defaultNumberingSystem];
            var compactPlaralRule = byCompactDisplay[compactDisplay][magnitudeKey];

            if (!compactPlaralRule) {
              return null;
            }

            pattern = selectPlural(pl, roundedNumber, compactPlaralRule);
          } // See https://unicode.org/reports/tr35/tr35-numbers.html#Compact_Number_Formats
          // > If the value is precisely “0”, either explicit or defaulted, then the normal number format
          // > pattern for that sort of object is supplied.


          if (pattern === '0') {
            return null;
          }

          pattern = getPatternForSign(pattern, sign) // Extract compact literal from the pattern
          .replace(/([^\s;\-\+\d¤]+)/g, '{c:$1}') // We replace one or more zeros with a single zero so it matches `CLDR_NUMBER_PATTERN`.
          .replace(/0+/, '0');
          return pattern;
        }

        function selectPlural(pl, x, rules) {
          return rules[pl.select(x)] || rules.other;
        } // #endregion ORIGINAL CODE


        module.exports;
        module.exports.__esModule;
        module.exports.default;
      }, () => ({
        './ToRawFixed': __cjsMetaURL$1,
        './digit-mapping.generated': __cjsMetaURL$2,
        '../regex.generated': __cjsMetaURL$3
      }));
    }
  };
});

System.register("chunks:///_virtual/format_to_parts2.js", ['./cjs-loader.mjs', './ToRawFixed2.js', './digit-mapping.generated2.js', './regex.generated2.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var ToRawFixed_1 = require("./ToRawFixed");

        var digit_mapping_generated_1 = require("./digit-mapping.generated");

        var regex_generated_1 = require("../regex.generated"); // This is from: unicode-12.1.0/General_Category/Symbol/regex.js
        // IE11 does not support unicode flag, otherwise this is just /\p{S}/u.
        // /^\p{S}/u


        var CARET_S_UNICODE_REGEX = new RegExp("^".concat(regex_generated_1.S_UNICODE_REGEX.source)); // /\p{S}$/u

        var S_DOLLAR_UNICODE_REGEX = new RegExp("".concat(regex_generated_1.S_UNICODE_REGEX.source, "$"));
        var CLDR_NUMBER_PATTERN = /[#0](?:[\.,][#0]+)*/g;

        function formatToParts(numberResult, data, pl, options) {
          var sign = numberResult.sign,
              exponent = numberResult.exponent,
              magnitude = numberResult.magnitude;
          var notation = options.notation,
              style = options.style,
              numberingSystem = options.numberingSystem;
          var defaultNumberingSystem = data.numbers.nu[0]; // #region Part 1: partition and interpolate the CLDR number pattern.
          // ----------------------------------------------------------

          var compactNumberPattern = null;

          if (notation === 'compact' && magnitude) {
            compactNumberPattern = getCompactDisplayPattern(numberResult, pl, data, style, options.compactDisplay, options.currencyDisplay, numberingSystem);
          } // This is used multiple times


          var nonNameCurrencyPart;

          if (style === 'currency' && options.currencyDisplay !== 'name') {
            var byCurrencyDisplay = data.currencies[options.currency];

            if (byCurrencyDisplay) {
              switch (options.currencyDisplay) {
                case 'code':
                  nonNameCurrencyPart = options.currency;
                  break;

                case 'symbol':
                  nonNameCurrencyPart = byCurrencyDisplay.symbol;
                  break;

                default:
                  nonNameCurrencyPart = byCurrencyDisplay.narrow;
                  break;
              }
            } else {
              // Fallback for unknown currency
              nonNameCurrencyPart = options.currency;
            }
          }

          var numberPattern;

          if (!compactNumberPattern) {
            // Note: if the style is unit, or is currency and the currency display is name,
            // its unit parts will be interpolated in part 2. So here we can fallback to decimal.
            if (style === 'decimal' || style === 'unit' || style === 'currency' && options.currencyDisplay === 'name') {
              // Shortcut for decimal
              var decimalData = data.numbers.decimal[numberingSystem] || data.numbers.decimal[defaultNumberingSystem];
              numberPattern = getPatternForSign(decimalData.standard, sign);
            } else if (style === 'currency') {
              var currencyData = data.numbers.currency[numberingSystem] || data.numbers.currency[defaultNumberingSystem]; // We replace number pattern part with `0` for easier postprocessing.

              numberPattern = getPatternForSign(currencyData[options.currencySign], sign);
            } else {
              // percent
              var percentPattern = data.numbers.percent[numberingSystem] || data.numbers.percent[defaultNumberingSystem];
              numberPattern = getPatternForSign(percentPattern, sign);
            }
          } else {
            numberPattern = compactNumberPattern;
          } // Extract the decimal number pattern string. It looks like "#,##0,00", which will later be
          // used to infer decimal group sizes.


          var decimalNumberPattern = CLDR_NUMBER_PATTERN.exec(numberPattern)[0]; // Now we start to substitute patterns
          // 1. replace strings like `0` and `#,##0.00` with `{0}`
          // 2. unquote characters (invariant: the quoted characters does not contain the special tokens)

          numberPattern = numberPattern.replace(CLDR_NUMBER_PATTERN, '{0}').replace(/'(.)'/g, '$1'); // Handle currency spacing (both compact and non-compact).

          if (style === 'currency' && options.currencyDisplay !== 'name') {
            var currencyData = data.numbers.currency[numberingSystem] || data.numbers.currency[defaultNumberingSystem]; // See `currencySpacing` substitution rule in TR-35.
            // Here we always assume the currencyMatch is "[:^S:]" and surroundingMatch is "[:digit:]".
            //
            // Example 1: for pattern "#,##0.00¤" with symbol "US$", we replace "¤" with the symbol,
            // but insert an extra non-break space before the symbol, because "[:^S:]" matches "U" in
            // "US$" and "[:digit:]" matches the latn numbering system digits.
            //
            // Example 2: for pattern "¤#,##0.00" with symbol "US$", there is no spacing between symbol
            // and number, because `$` does not match "[:^S:]".
            //
            // Implementation note: here we do the best effort to infer the insertion.
            // We also assume that `beforeInsertBetween` and `afterInsertBetween` will never be `;`.

            var afterCurrency = currencyData.currencySpacing.afterInsertBetween;

            if (afterCurrency && !S_DOLLAR_UNICODE_REGEX.test(nonNameCurrencyPart)) {
              numberPattern = numberPattern.replace('¤{0}', "\u00A4".concat(afterCurrency, "{0}"));
            }

            var beforeCurrency = currencyData.currencySpacing.beforeInsertBetween;

            if (beforeCurrency && !CARET_S_UNICODE_REGEX.test(nonNameCurrencyPart)) {
              numberPattern = numberPattern.replace('{0}¤', "{0}".concat(beforeCurrency, "\u00A4"));
            }
          } // The following tokens are special: `{0}`, `¤`, `%`, `-`, `+`, `{c:...}.


          var numberPatternParts = numberPattern.split(/({c:[^}]+}|\{0\}|[¤%\-\+])/g);
          var numberParts = [];
          var symbols = data.numbers.symbols[numberingSystem] || data.numbers.symbols[defaultNumberingSystem];

          for (var _i = 0, numberPatternParts_1 = numberPatternParts; _i < numberPatternParts_1.length; _i++) {
            var part = numberPatternParts_1[_i];

            if (!part) {
              continue;
            }

            switch (part) {
              case '{0}':
                {
                  // We only need to handle scientific and engineering notation here.
                  numberParts.push.apply(numberParts, paritionNumberIntoParts(symbols, numberResult, notation, exponent, numberingSystem, // If compact number pattern exists, do not insert group separators.
                  !compactNumberPattern && options.useGrouping, decimalNumberPattern));
                  break;
                }

              case '-':
                numberParts.push({
                  type: 'minusSign',
                  value: symbols.minusSign
                });
                break;

              case '+':
                numberParts.push({
                  type: 'plusSign',
                  value: symbols.plusSign
                });
                break;

              case '%':
                numberParts.push({
                  type: 'percentSign',
                  value: symbols.percentSign
                });
                break;

              case '¤':
                // Computed above when handling currency spacing.
                numberParts.push({
                  type: 'currency',
                  value: nonNameCurrencyPart
                });
                break;

              default:
                if (/^\{c:/.test(part)) {
                  numberParts.push({
                    type: 'compact',
                    value: part.substring(3, part.length - 1)
                  });
                } else {
                  // literal
                  numberParts.push({
                    type: 'literal',
                    value: part
                  });
                }

                break;
            }
          } // #endregion
          // #region Part 2: interpolate unit pattern if necessary.
          // ----------------------------------------------


          switch (style) {
            case 'currency':
              {
                // `currencyDisplay: 'name'` has similar pattern handling as units.
                if (options.currencyDisplay === 'name') {
                  var unitPattern = (data.numbers.currency[numberingSystem] || data.numbers.currency[defaultNumberingSystem]).unitPattern; // Select plural

                  var unitName = void 0;
                  var currencyNameData = data.currencies[options.currency];

                  if (currencyNameData) {
                    unitName = selectPlural(pl, numberResult.roundedNumber * Math.pow(10, exponent), currencyNameData.displayName);
                  } else {
                    // Fallback for unknown currency
                    unitName = options.currency;
                  } // Do {0} and {1} substitution


                  var unitPatternParts = unitPattern.split(/(\{[01]\})/g);
                  var result = [];

                  for (var _a = 0, unitPatternParts_1 = unitPatternParts; _a < unitPatternParts_1.length; _a++) {
                    var part = unitPatternParts_1[_a];

                    switch (part) {
                      case '{0}':
                        result.push.apply(result, numberParts);
                        break;

                      case '{1}':
                        result.push({
                          type: 'currency',
                          value: unitName
                        });
                        break;

                      default:
                        if (part) {
                          result.push({
                            type: 'literal',
                            value: part
                          });
                        }

                        break;
                    }
                  }

                  return result;
                } else {
                  return numberParts;
                }
              }

            case 'unit':
              {
                var unit = options.unit,
                    unitDisplay = options.unitDisplay;
                var unitData = data.units.simple[unit];
                var unitPattern = void 0;

                if (unitData) {
                  // Simple unit pattern
                  unitPattern = selectPlural(pl, numberResult.roundedNumber * Math.pow(10, exponent), data.units.simple[unit][unitDisplay]);
                } else {
                  // See: http://unicode.org/reports/tr35/tr35-general.html#perUnitPatterns
                  // If cannot find unit in the simple pattern, it must be "per" compound pattern.
                  // Implementation note: we are not following TR-35 here because we need to format to parts!
                  var _b = unit.split('-per-'),
                      numeratorUnit = _b[0],
                      denominatorUnit = _b[1];

                  unitData = data.units.simple[numeratorUnit];
                  var numeratorUnitPattern = selectPlural(pl, numberResult.roundedNumber * Math.pow(10, exponent), data.units.simple[numeratorUnit][unitDisplay]);
                  var perUnitPattern = data.units.simple[denominatorUnit].perUnit[unitDisplay];

                  if (perUnitPattern) {
                    // perUnitPattern exists, combine it with numeratorUnitPattern
                    unitPattern = perUnitPattern.replace('{0}', numeratorUnitPattern);
                  } else {
                    // get compoundUnit pattern (e.g. "{0} per {1}"), repalce {0} with numerator pattern and {1} with
                    // the denominator pattern in singular form.
                    var perPattern = data.units.compound.per[unitDisplay];
                    var denominatorPattern = selectPlural(pl, 1, data.units.simple[denominatorUnit][unitDisplay]);
                    unitPattern = unitPattern = perPattern.replace('{0}', numeratorUnitPattern).replace('{1}', denominatorPattern.replace('{0}', ''));
                  }
                }

                var result = []; // We need spacing around "{0}" because they are not treated as "unit" parts, but "literal".

                for (var _c = 0, _d = unitPattern.split(/(\s*\{0\}\s*)/); _c < _d.length; _c++) {
                  var part = _d[_c];
                  var interpolateMatch = /^(\s*)\{0\}(\s*)$/.exec(part);

                  if (interpolateMatch) {
                    // Space before "{0}"
                    if (interpolateMatch[1]) {
                      result.push({
                        type: 'literal',
                        value: interpolateMatch[1]
                      });
                    } // "{0}" itself


                    result.push.apply(result, numberParts); // Space after "{0}"

                    if (interpolateMatch[2]) {
                      result.push({
                        type: 'literal',
                        value: interpolateMatch[2]
                      });
                    }
                  } else if (part) {
                    result.push({
                      type: 'unit',
                      value: part
                    });
                  }
                }

                return result;
              }

            default:
              return numberParts;
          } // #endregion

        }

        exports.default = formatToParts; // A subset of https://tc39.es/ecma402/#sec-partitionnotationsubpattern
        // Plus the exponent parts handling.

        function paritionNumberIntoParts(symbols, numberResult, notation, exponent, numberingSystem, useGrouping,
        /**
         * This is the decimal number pattern without signs or symbols.
         * It is used to infer the group size when `useGrouping` is true.
         *
         * A typical value looks like "#,##0.00" (primary group size is 3).
         * Some locales like Hindi has secondary group size of 2 (e.g. "#,##,##0.00").
         */
        decimalNumberPattern) {
          var result = []; // eslint-disable-next-line prefer-const

          var n = numberResult.formattedString,
              x = numberResult.roundedNumber;

          if (isNaN(x)) {
            return [{
              type: 'nan',
              value: n
            }];
          } else if (!isFinite(x)) {
            return [{
              type: 'infinity',
              value: n
            }];
          }

          var digitReplacementTable = digit_mapping_generated_1.digitMapping[numberingSystem];

          if (digitReplacementTable) {
            n = n.replace(/\d/g, function (digit) {
              return digitReplacementTable[+digit] || digit;
            });
          } // TODO: Else use an implementation dependent algorithm to map n to the appropriate
          // representation of n in the given numbering system.


          var decimalSepIndex = n.indexOf('.');
          var integer;
          var fraction;

          if (decimalSepIndex > 0) {
            integer = n.slice(0, decimalSepIndex);
            fraction = n.slice(decimalSepIndex + 1);
          } else {
            integer = n;
          } // #region Grouping integer digits
          // The weird compact and x >= 10000 check is to ensure consistency with Node.js and Chrome.
          // Note that `de` does not have compact form for thousands, but Node.js does not insert grouping separator
          // unless the rounded number is greater than 10000:
          //   NumberFormat('de', {notation: 'compact', compactDisplay: 'short'}).format(1234) //=> "1234"
          //   NumberFormat('de').format(1234) //=> "1.234"


          if (useGrouping && (notation !== 'compact' || x >= 10000)) {
            var groupSepSymbol = symbols.group;
            var groups = []; // > There may be two different grouping sizes: The primary grouping size used for the least
            // > significant integer group, and the secondary grouping size used for more significant groups.
            // > If a pattern contains multiple grouping separators, the interval between the last one and the
            // > end of the integer defines the primary grouping size, and the interval between the last two
            // > defines the secondary grouping size. All others are ignored.

            var integerNumberPattern = decimalNumberPattern.split('.')[0];
            var patternGroups = integerNumberPattern.split(',');
            var primaryGroupingSize = 3;
            var secondaryGroupingSize = 3;

            if (patternGroups.length > 1) {
              primaryGroupingSize = patternGroups[patternGroups.length - 1].length;
            }

            if (patternGroups.length > 2) {
              secondaryGroupingSize = patternGroups[patternGroups.length - 2].length;
            }

            var i = integer.length - primaryGroupingSize;

            if (i > 0) {
              // Slice the least significant integer group
              groups.push(integer.slice(i, i + primaryGroupingSize)); // Then iteratively push the more signicant groups
              // TODO: handle surrogate pairs in some numbering system digits

              for (i -= secondaryGroupingSize; i > 0; i -= secondaryGroupingSize) {
                groups.push(integer.slice(i, i + secondaryGroupingSize));
              }

              groups.push(integer.slice(0, i + secondaryGroupingSize));
            } else {
              groups.push(integer);
            }

            while (groups.length > 0) {
              var integerGroup = groups.pop();
              result.push({
                type: 'integer',
                value: integerGroup
              });

              if (groups.length > 0) {
                result.push({
                  type: 'group',
                  value: groupSepSymbol
                });
              }
            }
          } else {
            result.push({
              type: 'integer',
              value: integer
            });
          } // #endregion


          if (fraction !== undefined) {
            result.push({
              type: 'decimal',
              value: symbols.decimal
            }, {
              type: 'fraction',
              value: fraction
            });
          }

          if ((notation === 'scientific' || notation === 'engineering') && isFinite(x)) {
            result.push({
              type: 'exponentSeparator',
              value: symbols.exponential
            });

            if (exponent < 0) {
              result.push({
                type: 'exponentMinusSign',
                value: symbols.minusSign
              });
              exponent = -exponent;
            }

            var exponentResult = (0, ToRawFixed_1.ToRawFixed)(exponent, 0, 0);
            result.push({
              type: 'exponentInteger',
              value: exponentResult.formattedString
            });
          }

          return result;
        }

        function getPatternForSign(pattern, sign) {
          if (pattern.indexOf(';') < 0) {
            pattern = "".concat(pattern, ";-").concat(pattern);
          }

          var _a = pattern.split(';'),
              zeroPattern = _a[0],
              negativePattern = _a[1];

          switch (sign) {
            case 0:
              return zeroPattern;

            case -1:
              return negativePattern;

            default:
              return negativePattern.indexOf('-') >= 0 ? negativePattern.replace(/-/g, '+') : "+".concat(zeroPattern);
          }
        } // Find the CLDR pattern for compact notation based on the magnitude of data and style.
        //
        // Example return value: "¤ {c:laki}000;¤{c:laki} -0" (`sw` locale):
        // - Notice the `{c:...}` token that wraps the compact literal.
        // - The consecutive zeros are normalized to single zero to match CLDR_NUMBER_PATTERN.
        //
        // Returning null means the compact display pattern cannot be found.


        function getCompactDisplayPattern(numberResult, pl, data, style, compactDisplay, currencyDisplay, numberingSystem) {
          var _a;

          var roundedNumber = numberResult.roundedNumber,
              sign = numberResult.sign,
              magnitude = numberResult.magnitude;
          var magnitudeKey = String(Math.pow(10, magnitude));
          var defaultNumberingSystem = data.numbers.nu[0];
          var pattern;

          if (style === 'currency' && currencyDisplay !== 'name') {
            var byNumberingSystem = data.numbers.currency;
            var currencyData = byNumberingSystem[numberingSystem] || byNumberingSystem[defaultNumberingSystem]; // NOTE: compact notation ignores currencySign!

            var compactPluralRules = (_a = currencyData.short) === null || _a === void 0 ? void 0 : _a[magnitudeKey];

            if (!compactPluralRules) {
              return null;
            }

            pattern = selectPlural(pl, roundedNumber, compactPluralRules);
          } else {
            var byNumberingSystem = data.numbers.decimal;
            var byCompactDisplay = byNumberingSystem[numberingSystem] || byNumberingSystem[defaultNumberingSystem];
            var compactPlaralRule = byCompactDisplay[compactDisplay][magnitudeKey];

            if (!compactPlaralRule) {
              return null;
            }

            pattern = selectPlural(pl, roundedNumber, compactPlaralRule);
          } // See https://unicode.org/reports/tr35/tr35-numbers.html#Compact_Number_Formats
          // > If the value is precisely “0”, either explicit or defaulted, then the normal number format
          // > pattern for that sort of object is supplied.


          if (pattern === '0') {
            return null;
          }

          pattern = getPatternForSign(pattern, sign) // Extract compact literal from the pattern
          .replace(/([^\s;\-\+\d¤]+)/g, '{c:$1}') // We replace one or more zeros with a single zero so it matches `CLDR_NUMBER_PATTERN`.
          .replace(/0+/, '0');
          return pattern;
        }

        function selectPlural(pl, x, rules) {
          return rules[pl.select(x)] || rules.other;
        } // #endregion ORIGINAL CODE


        module.exports;
        module.exports.__esModule;
        module.exports.default;
      }, () => ({
        './ToRawFixed': __cjsMetaURL$1,
        './digit-mapping.generated': __cjsMetaURL$2,
        '../regex.generated': __cjsMetaURL$3
      }));
    }
  };
});

System.register("chunks:///_virtual/format_to_parts3.js", ['./cjs-loader.mjs', './ToRawFixed3.js', './digit-mapping.generated3.js', './regex.generated3.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var ToRawFixed_1 = require("./ToRawFixed");

        var digit_mapping_generated_1 = require("./digit-mapping.generated");

        var regex_generated_1 = require("../regex.generated"); // This is from: unicode-12.1.0/General_Category/Symbol/regex.js
        // IE11 does not support unicode flag, otherwise this is just /\p{S}/u.
        // /^\p{S}/u


        var CARET_S_UNICODE_REGEX = new RegExp("^".concat(regex_generated_1.S_UNICODE_REGEX.source)); // /\p{S}$/u

        var S_DOLLAR_UNICODE_REGEX = new RegExp("".concat(regex_generated_1.S_UNICODE_REGEX.source, "$"));
        var CLDR_NUMBER_PATTERN = /[#0](?:[\.,][#0]+)*/g;

        function formatToParts(numberResult, data, pl, options) {
          var sign = numberResult.sign,
              exponent = numberResult.exponent,
              magnitude = numberResult.magnitude;
          var notation = options.notation,
              style = options.style,
              numberingSystem = options.numberingSystem;
          var defaultNumberingSystem = data.numbers.nu[0]; // #region Part 1: partition and interpolate the CLDR number pattern.
          // ----------------------------------------------------------

          var compactNumberPattern = null;

          if (notation === 'compact' && magnitude) {
            compactNumberPattern = getCompactDisplayPattern(numberResult, pl, data, style, options.compactDisplay, options.currencyDisplay, numberingSystem);
          } // This is used multiple times


          var nonNameCurrencyPart;

          if (style === 'currency' && options.currencyDisplay !== 'name') {
            var byCurrencyDisplay = data.currencies[options.currency];

            if (byCurrencyDisplay) {
              switch (options.currencyDisplay) {
                case 'code':
                  nonNameCurrencyPart = options.currency;
                  break;

                case 'symbol':
                  nonNameCurrencyPart = byCurrencyDisplay.symbol;
                  break;

                default:
                  nonNameCurrencyPart = byCurrencyDisplay.narrow;
                  break;
              }
            } else {
              // Fallback for unknown currency
              nonNameCurrencyPart = options.currency;
            }
          }

          var numberPattern;

          if (!compactNumberPattern) {
            // Note: if the style is unit, or is currency and the currency display is name,
            // its unit parts will be interpolated in part 2. So here we can fallback to decimal.
            if (style === 'decimal' || style === 'unit' || style === 'currency' && options.currencyDisplay === 'name') {
              // Shortcut for decimal
              var decimalData = data.numbers.decimal[numberingSystem] || data.numbers.decimal[defaultNumberingSystem];
              numberPattern = getPatternForSign(decimalData.standard, sign);
            } else if (style === 'currency') {
              var currencyData = data.numbers.currency[numberingSystem] || data.numbers.currency[defaultNumberingSystem]; // We replace number pattern part with `0` for easier postprocessing.

              numberPattern = getPatternForSign(currencyData[options.currencySign], sign);
            } else {
              // percent
              var percentPattern = data.numbers.percent[numberingSystem] || data.numbers.percent[defaultNumberingSystem];
              numberPattern = getPatternForSign(percentPattern, sign);
            }
          } else {
            numberPattern = compactNumberPattern;
          } // Extract the decimal number pattern string. It looks like "#,##0,00", which will later be
          // used to infer decimal group sizes.


          var decimalNumberPattern = CLDR_NUMBER_PATTERN.exec(numberPattern)[0]; // Now we start to substitute patterns
          // 1. replace strings like `0` and `#,##0.00` with `{0}`
          // 2. unquote characters (invariant: the quoted characters does not contain the special tokens)

          numberPattern = numberPattern.replace(CLDR_NUMBER_PATTERN, '{0}').replace(/'(.)'/g, '$1'); // Handle currency spacing (both compact and non-compact).

          if (style === 'currency' && options.currencyDisplay !== 'name') {
            var currencyData = data.numbers.currency[numberingSystem] || data.numbers.currency[defaultNumberingSystem]; // See `currencySpacing` substitution rule in TR-35.
            // Here we always assume the currencyMatch is "[:^S:]" and surroundingMatch is "[:digit:]".
            //
            // Example 1: for pattern "#,##0.00¤" with symbol "US$", we replace "¤" with the symbol,
            // but insert an extra non-break space before the symbol, because "[:^S:]" matches "U" in
            // "US$" and "[:digit:]" matches the latn numbering system digits.
            //
            // Example 2: for pattern "¤#,##0.00" with symbol "US$", there is no spacing between symbol
            // and number, because `$` does not match "[:^S:]".
            //
            // Implementation note: here we do the best effort to infer the insertion.
            // We also assume that `beforeInsertBetween` and `afterInsertBetween` will never be `;`.

            var afterCurrency = currencyData.currencySpacing.afterInsertBetween;

            if (afterCurrency && !S_DOLLAR_UNICODE_REGEX.test(nonNameCurrencyPart)) {
              numberPattern = numberPattern.replace('¤{0}', "\u00A4".concat(afterCurrency, "{0}"));
            }

            var beforeCurrency = currencyData.currencySpacing.beforeInsertBetween;

            if (beforeCurrency && !CARET_S_UNICODE_REGEX.test(nonNameCurrencyPart)) {
              numberPattern = numberPattern.replace('{0}¤', "{0}".concat(beforeCurrency, "\u00A4"));
            }
          } // The following tokens are special: `{0}`, `¤`, `%`, `-`, `+`, `{c:...}.


          var numberPatternParts = numberPattern.split(/({c:[^}]+}|\{0\}|[¤%\-\+])/g);
          var numberParts = [];
          var symbols = data.numbers.symbols[numberingSystem] || data.numbers.symbols[defaultNumberingSystem];

          for (var _i = 0, numberPatternParts_1 = numberPatternParts; _i < numberPatternParts_1.length; _i++) {
            var part = numberPatternParts_1[_i];

            if (!part) {
              continue;
            }

            switch (part) {
              case '{0}':
                {
                  // We only need to handle scientific and engineering notation here.
                  numberParts.push.apply(numberParts, paritionNumberIntoParts(symbols, numberResult, notation, exponent, numberingSystem, // If compact number pattern exists, do not insert group separators.
                  !compactNumberPattern && options.useGrouping, decimalNumberPattern));
                  break;
                }

              case '-':
                numberParts.push({
                  type: 'minusSign',
                  value: symbols.minusSign
                });
                break;

              case '+':
                numberParts.push({
                  type: 'plusSign',
                  value: symbols.plusSign
                });
                break;

              case '%':
                numberParts.push({
                  type: 'percentSign',
                  value: symbols.percentSign
                });
                break;

              case '¤':
                // Computed above when handling currency spacing.
                numberParts.push({
                  type: 'currency',
                  value: nonNameCurrencyPart
                });
                break;

              default:
                if (/^\{c:/.test(part)) {
                  numberParts.push({
                    type: 'compact',
                    value: part.substring(3, part.length - 1)
                  });
                } else {
                  // literal
                  numberParts.push({
                    type: 'literal',
                    value: part
                  });
                }

                break;
            }
          } // #endregion
          // #region Part 2: interpolate unit pattern if necessary.
          // ----------------------------------------------


          switch (style) {
            case 'currency':
              {
                // `currencyDisplay: 'name'` has similar pattern handling as units.
                if (options.currencyDisplay === 'name') {
                  var unitPattern = (data.numbers.currency[numberingSystem] || data.numbers.currency[defaultNumberingSystem]).unitPattern; // Select plural

                  var unitName = void 0;
                  var currencyNameData = data.currencies[options.currency];

                  if (currencyNameData) {
                    unitName = selectPlural(pl, numberResult.roundedNumber * Math.pow(10, exponent), currencyNameData.displayName);
                  } else {
                    // Fallback for unknown currency
                    unitName = options.currency;
                  } // Do {0} and {1} substitution


                  var unitPatternParts = unitPattern.split(/(\{[01]\})/g);
                  var result = [];

                  for (var _a = 0, unitPatternParts_1 = unitPatternParts; _a < unitPatternParts_1.length; _a++) {
                    var part = unitPatternParts_1[_a];

                    switch (part) {
                      case '{0}':
                        result.push.apply(result, numberParts);
                        break;

                      case '{1}':
                        result.push({
                          type: 'currency',
                          value: unitName
                        });
                        break;

                      default:
                        if (part) {
                          result.push({
                            type: 'literal',
                            value: part
                          });
                        }

                        break;
                    }
                  }

                  return result;
                } else {
                  return numberParts;
                }
              }

            case 'unit':
              {
                var unit = options.unit,
                    unitDisplay = options.unitDisplay;
                var unitData = data.units.simple[unit];
                var unitPattern = void 0;

                if (unitData) {
                  // Simple unit pattern
                  unitPattern = selectPlural(pl, numberResult.roundedNumber * Math.pow(10, exponent), data.units.simple[unit][unitDisplay]);
                } else {
                  // See: http://unicode.org/reports/tr35/tr35-general.html#perUnitPatterns
                  // If cannot find unit in the simple pattern, it must be "per" compound pattern.
                  // Implementation note: we are not following TR-35 here because we need to format to parts!
                  var _b = unit.split('-per-'),
                      numeratorUnit = _b[0],
                      denominatorUnit = _b[1];

                  unitData = data.units.simple[numeratorUnit];
                  var numeratorUnitPattern = selectPlural(pl, numberResult.roundedNumber * Math.pow(10, exponent), data.units.simple[numeratorUnit][unitDisplay]);
                  var perUnitPattern = data.units.simple[denominatorUnit].perUnit[unitDisplay];

                  if (perUnitPattern) {
                    // perUnitPattern exists, combine it with numeratorUnitPattern
                    unitPattern = perUnitPattern.replace('{0}', numeratorUnitPattern);
                  } else {
                    // get compoundUnit pattern (e.g. "{0} per {1}"), repalce {0} with numerator pattern and {1} with
                    // the denominator pattern in singular form.
                    var perPattern = data.units.compound.per[unitDisplay];
                    var denominatorPattern = selectPlural(pl, 1, data.units.simple[denominatorUnit][unitDisplay]);
                    unitPattern = unitPattern = perPattern.replace('{0}', numeratorUnitPattern).replace('{1}', denominatorPattern.replace('{0}', ''));
                  }
                }

                var result = []; // We need spacing around "{0}" because they are not treated as "unit" parts, but "literal".

                for (var _c = 0, _d = unitPattern.split(/(\s*\{0\}\s*)/); _c < _d.length; _c++) {
                  var part = _d[_c];
                  var interpolateMatch = /^(\s*)\{0\}(\s*)$/.exec(part);

                  if (interpolateMatch) {
                    // Space before "{0}"
                    if (interpolateMatch[1]) {
                      result.push({
                        type: 'literal',
                        value: interpolateMatch[1]
                      });
                    } // "{0}" itself


                    result.push.apply(result, numberParts); // Space after "{0}"

                    if (interpolateMatch[2]) {
                      result.push({
                        type: 'literal',
                        value: interpolateMatch[2]
                      });
                    }
                  } else if (part) {
                    result.push({
                      type: 'unit',
                      value: part
                    });
                  }
                }

                return result;
              }

            default:
              return numberParts;
          } // #endregion

        }

        exports.default = formatToParts; // A subset of https://tc39.es/ecma402/#sec-partitionnotationsubpattern
        // Plus the exponent parts handling.

        function paritionNumberIntoParts(symbols, numberResult, notation, exponent, numberingSystem, useGrouping,
        /**
         * This is the decimal number pattern without signs or symbols.
         * It is used to infer the group size when `useGrouping` is true.
         *
         * A typical value looks like "#,##0.00" (primary group size is 3).
         * Some locales like Hindi has secondary group size of 2 (e.g. "#,##,##0.00").
         */
        decimalNumberPattern) {
          var result = []; // eslint-disable-next-line prefer-const

          var n = numberResult.formattedString,
              x = numberResult.roundedNumber;

          if (isNaN(x)) {
            return [{
              type: 'nan',
              value: n
            }];
          } else if (!isFinite(x)) {
            return [{
              type: 'infinity',
              value: n
            }];
          }

          var digitReplacementTable = digit_mapping_generated_1.digitMapping[numberingSystem];

          if (digitReplacementTable) {
            n = n.replace(/\d/g, function (digit) {
              return digitReplacementTable[+digit] || digit;
            });
          } // TODO: Else use an implementation dependent algorithm to map n to the appropriate
          // representation of n in the given numbering system.


          var decimalSepIndex = n.indexOf('.');
          var integer;
          var fraction;

          if (decimalSepIndex > 0) {
            integer = n.slice(0, decimalSepIndex);
            fraction = n.slice(decimalSepIndex + 1);
          } else {
            integer = n;
          } // #region Grouping integer digits
          // The weird compact and x >= 10000 check is to ensure consistency with Node.js and Chrome.
          // Note that `de` does not have compact form for thousands, but Node.js does not insert grouping separator
          // unless the rounded number is greater than 10000:
          //   NumberFormat('de', {notation: 'compact', compactDisplay: 'short'}).format(1234) //=> "1234"
          //   NumberFormat('de').format(1234) //=> "1.234"


          if (useGrouping && (notation !== 'compact' || x >= 10000)) {
            var groupSepSymbol = symbols.group;
            var groups = []; // > There may be two different grouping sizes: The primary grouping size used for the least
            // > significant integer group, and the secondary grouping size used for more significant groups.
            // > If a pattern contains multiple grouping separators, the interval between the last one and the
            // > end of the integer defines the primary grouping size, and the interval between the last two
            // > defines the secondary grouping size. All others are ignored.

            var integerNumberPattern = decimalNumberPattern.split('.')[0];
            var patternGroups = integerNumberPattern.split(',');
            var primaryGroupingSize = 3;
            var secondaryGroupingSize = 3;

            if (patternGroups.length > 1) {
              primaryGroupingSize = patternGroups[patternGroups.length - 1].length;
            }

            if (patternGroups.length > 2) {
              secondaryGroupingSize = patternGroups[patternGroups.length - 2].length;
            }

            var i = integer.length - primaryGroupingSize;

            if (i > 0) {
              // Slice the least significant integer group
              groups.push(integer.slice(i, i + primaryGroupingSize)); // Then iteratively push the more signicant groups
              // TODO: handle surrogate pairs in some numbering system digits

              for (i -= secondaryGroupingSize; i > 0; i -= secondaryGroupingSize) {
                groups.push(integer.slice(i, i + secondaryGroupingSize));
              }

              groups.push(integer.slice(0, i + secondaryGroupingSize));
            } else {
              groups.push(integer);
            }

            while (groups.length > 0) {
              var integerGroup = groups.pop();
              result.push({
                type: 'integer',
                value: integerGroup
              });

              if (groups.length > 0) {
                result.push({
                  type: 'group',
                  value: groupSepSymbol
                });
              }
            }
          } else {
            result.push({
              type: 'integer',
              value: integer
            });
          } // #endregion


          if (fraction !== undefined) {
            result.push({
              type: 'decimal',
              value: symbols.decimal
            }, {
              type: 'fraction',
              value: fraction
            });
          }

          if ((notation === 'scientific' || notation === 'engineering') && isFinite(x)) {
            result.push({
              type: 'exponentSeparator',
              value: symbols.exponential
            });

            if (exponent < 0) {
              result.push({
                type: 'exponentMinusSign',
                value: symbols.minusSign
              });
              exponent = -exponent;
            }

            var exponentResult = (0, ToRawFixed_1.ToRawFixed)(exponent, 0, 0);
            result.push({
              type: 'exponentInteger',
              value: exponentResult.formattedString
            });
          }

          return result;
        }

        function getPatternForSign(pattern, sign) {
          if (pattern.indexOf(';') < 0) {
            pattern = "".concat(pattern, ";-").concat(pattern);
          }

          var _a = pattern.split(';'),
              zeroPattern = _a[0],
              negativePattern = _a[1];

          switch (sign) {
            case 0:
              return zeroPattern;

            case -1:
              return negativePattern;

            default:
              return negativePattern.indexOf('-') >= 0 ? negativePattern.replace(/-/g, '+') : "+".concat(zeroPattern);
          }
        } // Find the CLDR pattern for compact notation based on the magnitude of data and style.
        //
        // Example return value: "¤ {c:laki}000;¤{c:laki} -0" (`sw` locale):
        // - Notice the `{c:...}` token that wraps the compact literal.
        // - The consecutive zeros are normalized to single zero to match CLDR_NUMBER_PATTERN.
        //
        // Returning null means the compact display pattern cannot be found.


        function getCompactDisplayPattern(numberResult, pl, data, style, compactDisplay, currencyDisplay, numberingSystem) {
          var _a;

          var roundedNumber = numberResult.roundedNumber,
              sign = numberResult.sign,
              magnitude = numberResult.magnitude;
          var magnitudeKey = String(Math.pow(10, magnitude));
          var defaultNumberingSystem = data.numbers.nu[0];
          var pattern;

          if (style === 'currency' && currencyDisplay !== 'name') {
            var byNumberingSystem = data.numbers.currency;
            var currencyData = byNumberingSystem[numberingSystem] || byNumberingSystem[defaultNumberingSystem]; // NOTE: compact notation ignores currencySign!

            var compactPluralRules = (_a = currencyData.short) === null || _a === void 0 ? void 0 : _a[magnitudeKey];

            if (!compactPluralRules) {
              return null;
            }

            pattern = selectPlural(pl, roundedNumber, compactPluralRules);
          } else {
            var byNumberingSystem = data.numbers.decimal;
            var byCompactDisplay = byNumberingSystem[numberingSystem] || byNumberingSystem[defaultNumberingSystem];
            var compactPlaralRule = byCompactDisplay[compactDisplay][magnitudeKey];

            if (!compactPlaralRule) {
              return null;
            }

            pattern = selectPlural(pl, roundedNumber, compactPlaralRule);
          } // See https://unicode.org/reports/tr35/tr35-numbers.html#Compact_Number_Formats
          // > If the value is precisely “0”, either explicit or defaulted, then the normal number format
          // > pattern for that sort of object is supplied.


          if (pattern === '0') {
            return null;
          }

          pattern = getPatternForSign(pattern, sign) // Extract compact literal from the pattern
          .replace(/([^\s;\-\+\d¤]+)/g, '{c:$1}') // We replace one or more zeros with a single zero so it matches `CLDR_NUMBER_PATTERN`.
          .replace(/0+/, '0');
          return pattern;
        }

        function selectPlural(pl, x, rules) {
          return rules[pl.select(x)] || rules.other;
        } // #endregion ORIGINAL CODE


        module.exports;
        module.exports.__esModule;
        module.exports.default;
      }, () => ({
        './ToRawFixed': __cjsMetaURL$1,
        './digit-mapping.generated': __cjsMetaURL$2,
        '../regex.generated': __cjsMetaURL$3
      }));
    }
  };
});

System.register("chunks:///_virtual/format_to_parts4.js", ['./cjs-loader.mjs', './ToRawFixed4.js', './digit-mapping.generated4.js', './regex.generated4.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var ToRawFixed_1 = require("./ToRawFixed");

        var digit_mapping_generated_1 = require("./digit-mapping.generated");

        var regex_generated_1 = require("../regex.generated"); // This is from: unicode-12.1.0/General_Category/Symbol/regex.js
        // IE11 does not support unicode flag, otherwise this is just /\p{S}/u.
        // /^\p{S}/u


        var CARET_S_UNICODE_REGEX = new RegExp("^".concat(regex_generated_1.S_UNICODE_REGEX.source)); // /\p{S}$/u

        var S_DOLLAR_UNICODE_REGEX = new RegExp("".concat(regex_generated_1.S_UNICODE_REGEX.source, "$"));
        var CLDR_NUMBER_PATTERN = /[#0](?:[\.,][#0]+)*/g;

        function formatToParts(numberResult, data, pl, options) {
          var sign = numberResult.sign,
              exponent = numberResult.exponent,
              magnitude = numberResult.magnitude;
          var notation = options.notation,
              style = options.style,
              numberingSystem = options.numberingSystem;
          var defaultNumberingSystem = data.numbers.nu[0]; // #region Part 1: partition and interpolate the CLDR number pattern.
          // ----------------------------------------------------------

          var compactNumberPattern = null;

          if (notation === 'compact' && magnitude) {
            compactNumberPattern = getCompactDisplayPattern(numberResult, pl, data, style, options.compactDisplay, options.currencyDisplay, numberingSystem);
          } // This is used multiple times


          var nonNameCurrencyPart;

          if (style === 'currency' && options.currencyDisplay !== 'name') {
            var byCurrencyDisplay = data.currencies[options.currency];

            if (byCurrencyDisplay) {
              switch (options.currencyDisplay) {
                case 'code':
                  nonNameCurrencyPart = options.currency;
                  break;

                case 'symbol':
                  nonNameCurrencyPart = byCurrencyDisplay.symbol;
                  break;

                default:
                  nonNameCurrencyPart = byCurrencyDisplay.narrow;
                  break;
              }
            } else {
              // Fallback for unknown currency
              nonNameCurrencyPart = options.currency;
            }
          }

          var numberPattern;

          if (!compactNumberPattern) {
            // Note: if the style is unit, or is currency and the currency display is name,
            // its unit parts will be interpolated in part 2. So here we can fallback to decimal.
            if (style === 'decimal' || style === 'unit' || style === 'currency' && options.currencyDisplay === 'name') {
              // Shortcut for decimal
              var decimalData = data.numbers.decimal[numberingSystem] || data.numbers.decimal[defaultNumberingSystem];
              numberPattern = getPatternForSign(decimalData.standard, sign);
            } else if (style === 'currency') {
              var currencyData = data.numbers.currency[numberingSystem] || data.numbers.currency[defaultNumberingSystem]; // We replace number pattern part with `0` for easier postprocessing.

              numberPattern = getPatternForSign(currencyData[options.currencySign], sign);
            } else {
              // percent
              var percentPattern = data.numbers.percent[numberingSystem] || data.numbers.percent[defaultNumberingSystem];
              numberPattern = getPatternForSign(percentPattern, sign);
            }
          } else {
            numberPattern = compactNumberPattern;
          } // Extract the decimal number pattern string. It looks like "#,##0,00", which will later be
          // used to infer decimal group sizes.


          var decimalNumberPattern = CLDR_NUMBER_PATTERN.exec(numberPattern)[0]; // Now we start to substitute patterns
          // 1. replace strings like `0` and `#,##0.00` with `{0}`
          // 2. unquote characters (invariant: the quoted characters does not contain the special tokens)

          numberPattern = numberPattern.replace(CLDR_NUMBER_PATTERN, '{0}').replace(/'(.)'/g, '$1'); // Handle currency spacing (both compact and non-compact).

          if (style === 'currency' && options.currencyDisplay !== 'name') {
            var currencyData = data.numbers.currency[numberingSystem] || data.numbers.currency[defaultNumberingSystem]; // See `currencySpacing` substitution rule in TR-35.
            // Here we always assume the currencyMatch is "[:^S:]" and surroundingMatch is "[:digit:]".
            //
            // Example 1: for pattern "#,##0.00¤" with symbol "US$", we replace "¤" with the symbol,
            // but insert an extra non-break space before the symbol, because "[:^S:]" matches "U" in
            // "US$" and "[:digit:]" matches the latn numbering system digits.
            //
            // Example 2: for pattern "¤#,##0.00" with symbol "US$", there is no spacing between symbol
            // and number, because `$` does not match "[:^S:]".
            //
            // Implementation note: here we do the best effort to infer the insertion.
            // We also assume that `beforeInsertBetween` and `afterInsertBetween` will never be `;`.

            var afterCurrency = currencyData.currencySpacing.afterInsertBetween;

            if (afterCurrency && !S_DOLLAR_UNICODE_REGEX.test(nonNameCurrencyPart)) {
              numberPattern = numberPattern.replace('¤{0}', "\u00A4".concat(afterCurrency, "{0}"));
            }

            var beforeCurrency = currencyData.currencySpacing.beforeInsertBetween;

            if (beforeCurrency && !CARET_S_UNICODE_REGEX.test(nonNameCurrencyPart)) {
              numberPattern = numberPattern.replace('{0}¤', "{0}".concat(beforeCurrency, "\u00A4"));
            }
          } // The following tokens are special: `{0}`, `¤`, `%`, `-`, `+`, `{c:...}.


          var numberPatternParts = numberPattern.split(/({c:[^}]+}|\{0\}|[¤%\-\+])/g);
          var numberParts = [];
          var symbols = data.numbers.symbols[numberingSystem] || data.numbers.symbols[defaultNumberingSystem];

          for (var _i = 0, numberPatternParts_1 = numberPatternParts; _i < numberPatternParts_1.length; _i++) {
            var part = numberPatternParts_1[_i];

            if (!part) {
              continue;
            }

            switch (part) {
              case '{0}':
                {
                  // We only need to handle scientific and engineering notation here.
                  numberParts.push.apply(numberParts, paritionNumberIntoParts(symbols, numberResult, notation, exponent, numberingSystem, // If compact number pattern exists, do not insert group separators.
                  !compactNumberPattern && options.useGrouping, decimalNumberPattern));
                  break;
                }

              case '-':
                numberParts.push({
                  type: 'minusSign',
                  value: symbols.minusSign
                });
                break;

              case '+':
                numberParts.push({
                  type: 'plusSign',
                  value: symbols.plusSign
                });
                break;

              case '%':
                numberParts.push({
                  type: 'percentSign',
                  value: symbols.percentSign
                });
                break;

              case '¤':
                // Computed above when handling currency spacing.
                numberParts.push({
                  type: 'currency',
                  value: nonNameCurrencyPart
                });
                break;

              default:
                if (/^\{c:/.test(part)) {
                  numberParts.push({
                    type: 'compact',
                    value: part.substring(3, part.length - 1)
                  });
                } else {
                  // literal
                  numberParts.push({
                    type: 'literal',
                    value: part
                  });
                }

                break;
            }
          } // #endregion
          // #region Part 2: interpolate unit pattern if necessary.
          // ----------------------------------------------


          switch (style) {
            case 'currency':
              {
                // `currencyDisplay: 'name'` has similar pattern handling as units.
                if (options.currencyDisplay === 'name') {
                  var unitPattern = (data.numbers.currency[numberingSystem] || data.numbers.currency[defaultNumberingSystem]).unitPattern; // Select plural

                  var unitName = void 0;
                  var currencyNameData = data.currencies[options.currency];

                  if (currencyNameData) {
                    unitName = selectPlural(pl, numberResult.roundedNumber * Math.pow(10, exponent), currencyNameData.displayName);
                  } else {
                    // Fallback for unknown currency
                    unitName = options.currency;
                  } // Do {0} and {1} substitution


                  var unitPatternParts = unitPattern.split(/(\{[01]\})/g);
                  var result = [];

                  for (var _a = 0, unitPatternParts_1 = unitPatternParts; _a < unitPatternParts_1.length; _a++) {
                    var part = unitPatternParts_1[_a];

                    switch (part) {
                      case '{0}':
                        result.push.apply(result, numberParts);
                        break;

                      case '{1}':
                        result.push({
                          type: 'currency',
                          value: unitName
                        });
                        break;

                      default:
                        if (part) {
                          result.push({
                            type: 'literal',
                            value: part
                          });
                        }

                        break;
                    }
                  }

                  return result;
                } else {
                  return numberParts;
                }
              }

            case 'unit':
              {
                var unit = options.unit,
                    unitDisplay = options.unitDisplay;
                var unitData = data.units.simple[unit];
                var unitPattern = void 0;

                if (unitData) {
                  // Simple unit pattern
                  unitPattern = selectPlural(pl, numberResult.roundedNumber * Math.pow(10, exponent), data.units.simple[unit][unitDisplay]);
                } else {
                  // See: http://unicode.org/reports/tr35/tr35-general.html#perUnitPatterns
                  // If cannot find unit in the simple pattern, it must be "per" compound pattern.
                  // Implementation note: we are not following TR-35 here because we need to format to parts!
                  var _b = unit.split('-per-'),
                      numeratorUnit = _b[0],
                      denominatorUnit = _b[1];

                  unitData = data.units.simple[numeratorUnit];
                  var numeratorUnitPattern = selectPlural(pl, numberResult.roundedNumber * Math.pow(10, exponent), data.units.simple[numeratorUnit][unitDisplay]);
                  var perUnitPattern = data.units.simple[denominatorUnit].perUnit[unitDisplay];

                  if (perUnitPattern) {
                    // perUnitPattern exists, combine it with numeratorUnitPattern
                    unitPattern = perUnitPattern.replace('{0}', numeratorUnitPattern);
                  } else {
                    // get compoundUnit pattern (e.g. "{0} per {1}"), repalce {0} with numerator pattern and {1} with
                    // the denominator pattern in singular form.
                    var perPattern = data.units.compound.per[unitDisplay];
                    var denominatorPattern = selectPlural(pl, 1, data.units.simple[denominatorUnit][unitDisplay]);
                    unitPattern = unitPattern = perPattern.replace('{0}', numeratorUnitPattern).replace('{1}', denominatorPattern.replace('{0}', ''));
                  }
                }

                var result = []; // We need spacing around "{0}" because they are not treated as "unit" parts, but "literal".

                for (var _c = 0, _d = unitPattern.split(/(\s*\{0\}\s*)/); _c < _d.length; _c++) {
                  var part = _d[_c];
                  var interpolateMatch = /^(\s*)\{0\}(\s*)$/.exec(part);

                  if (interpolateMatch) {
                    // Space before "{0}"
                    if (interpolateMatch[1]) {
                      result.push({
                        type: 'literal',
                        value: interpolateMatch[1]
                      });
                    } // "{0}" itself


                    result.push.apply(result, numberParts); // Space after "{0}"

                    if (interpolateMatch[2]) {
                      result.push({
                        type: 'literal',
                        value: interpolateMatch[2]
                      });
                    }
                  } else if (part) {
                    result.push({
                      type: 'unit',
                      value: part
                    });
                  }
                }

                return result;
              }

            default:
              return numberParts;
          } // #endregion

        }

        exports.default = formatToParts; // A subset of https://tc39.es/ecma402/#sec-partitionnotationsubpattern
        // Plus the exponent parts handling.

        function paritionNumberIntoParts(symbols, numberResult, notation, exponent, numberingSystem, useGrouping,
        /**
         * This is the decimal number pattern without signs or symbols.
         * It is used to infer the group size when `useGrouping` is true.
         *
         * A typical value looks like "#,##0.00" (primary group size is 3).
         * Some locales like Hindi has secondary group size of 2 (e.g. "#,##,##0.00").
         */
        decimalNumberPattern) {
          var result = []; // eslint-disable-next-line prefer-const

          var n = numberResult.formattedString,
              x = numberResult.roundedNumber;

          if (isNaN(x)) {
            return [{
              type: 'nan',
              value: n
            }];
          } else if (!isFinite(x)) {
            return [{
              type: 'infinity',
              value: n
            }];
          }

          var digitReplacementTable = digit_mapping_generated_1.digitMapping[numberingSystem];

          if (digitReplacementTable) {
            n = n.replace(/\d/g, function (digit) {
              return digitReplacementTable[+digit] || digit;
            });
          } // TODO: Else use an implementation dependent algorithm to map n to the appropriate
          // representation of n in the given numbering system.


          var decimalSepIndex = n.indexOf('.');
          var integer;
          var fraction;

          if (decimalSepIndex > 0) {
            integer = n.slice(0, decimalSepIndex);
            fraction = n.slice(decimalSepIndex + 1);
          } else {
            integer = n;
          } // #region Grouping integer digits
          // The weird compact and x >= 10000 check is to ensure consistency with Node.js and Chrome.
          // Note that `de` does not have compact form for thousands, but Node.js does not insert grouping separator
          // unless the rounded number is greater than 10000:
          //   NumberFormat('de', {notation: 'compact', compactDisplay: 'short'}).format(1234) //=> "1234"
          //   NumberFormat('de').format(1234) //=> "1.234"


          if (useGrouping && (notation !== 'compact' || x >= 10000)) {
            var groupSepSymbol = symbols.group;
            var groups = []; // > There may be two different grouping sizes: The primary grouping size used for the least
            // > significant integer group, and the secondary grouping size used for more significant groups.
            // > If a pattern contains multiple grouping separators, the interval between the last one and the
            // > end of the integer defines the primary grouping size, and the interval between the last two
            // > defines the secondary grouping size. All others are ignored.

            var integerNumberPattern = decimalNumberPattern.split('.')[0];
            var patternGroups = integerNumberPattern.split(',');
            var primaryGroupingSize = 3;
            var secondaryGroupingSize = 3;

            if (patternGroups.length > 1) {
              primaryGroupingSize = patternGroups[patternGroups.length - 1].length;
            }

            if (patternGroups.length > 2) {
              secondaryGroupingSize = patternGroups[patternGroups.length - 2].length;
            }

            var i = integer.length - primaryGroupingSize;

            if (i > 0) {
              // Slice the least significant integer group
              groups.push(integer.slice(i, i + primaryGroupingSize)); // Then iteratively push the more signicant groups
              // TODO: handle surrogate pairs in some numbering system digits

              for (i -= secondaryGroupingSize; i > 0; i -= secondaryGroupingSize) {
                groups.push(integer.slice(i, i + secondaryGroupingSize));
              }

              groups.push(integer.slice(0, i + secondaryGroupingSize));
            } else {
              groups.push(integer);
            }

            while (groups.length > 0) {
              var integerGroup = groups.pop();
              result.push({
                type: 'integer',
                value: integerGroup
              });

              if (groups.length > 0) {
                result.push({
                  type: 'group',
                  value: groupSepSymbol
                });
              }
            }
          } else {
            result.push({
              type: 'integer',
              value: integer
            });
          } // #endregion


          if (fraction !== undefined) {
            result.push({
              type: 'decimal',
              value: symbols.decimal
            }, {
              type: 'fraction',
              value: fraction
            });
          }

          if ((notation === 'scientific' || notation === 'engineering') && isFinite(x)) {
            result.push({
              type: 'exponentSeparator',
              value: symbols.exponential
            });

            if (exponent < 0) {
              result.push({
                type: 'exponentMinusSign',
                value: symbols.minusSign
              });
              exponent = -exponent;
            }

            var exponentResult = (0, ToRawFixed_1.ToRawFixed)(exponent, 0, 0);
            result.push({
              type: 'exponentInteger',
              value: exponentResult.formattedString
            });
          }

          return result;
        }

        function getPatternForSign(pattern, sign) {
          if (pattern.indexOf(';') < 0) {
            pattern = "".concat(pattern, ";-").concat(pattern);
          }

          var _a = pattern.split(';'),
              zeroPattern = _a[0],
              negativePattern = _a[1];

          switch (sign) {
            case 0:
              return zeroPattern;

            case -1:
              return negativePattern;

            default:
              return negativePattern.indexOf('-') >= 0 ? negativePattern.replace(/-/g, '+') : "+".concat(zeroPattern);
          }
        } // Find the CLDR pattern for compact notation based on the magnitude of data and style.
        //
        // Example return value: "¤ {c:laki}000;¤{c:laki} -0" (`sw` locale):
        // - Notice the `{c:...}` token that wraps the compact literal.
        // - The consecutive zeros are normalized to single zero to match CLDR_NUMBER_PATTERN.
        //
        // Returning null means the compact display pattern cannot be found.


        function getCompactDisplayPattern(numberResult, pl, data, style, compactDisplay, currencyDisplay, numberingSystem) {
          var _a;

          var roundedNumber = numberResult.roundedNumber,
              sign = numberResult.sign,
              magnitude = numberResult.magnitude;
          var magnitudeKey = String(Math.pow(10, magnitude));
          var defaultNumberingSystem = data.numbers.nu[0];
          var pattern;

          if (style === 'currency' && currencyDisplay !== 'name') {
            var byNumberingSystem = data.numbers.currency;
            var currencyData = byNumberingSystem[numberingSystem] || byNumberingSystem[defaultNumberingSystem]; // NOTE: compact notation ignores currencySign!

            var compactPluralRules = (_a = currencyData.short) === null || _a === void 0 ? void 0 : _a[magnitudeKey];

            if (!compactPluralRules) {
              return null;
            }

            pattern = selectPlural(pl, roundedNumber, compactPluralRules);
          } else {
            var byNumberingSystem = data.numbers.decimal;
            var byCompactDisplay = byNumberingSystem[numberingSystem] || byNumberingSystem[defaultNumberingSystem];
            var compactPlaralRule = byCompactDisplay[compactDisplay][magnitudeKey];

            if (!compactPlaralRule) {
              return null;
            }

            pattern = selectPlural(pl, roundedNumber, compactPlaralRule);
          } // See https://unicode.org/reports/tr35/tr35-numbers.html#Compact_Number_Formats
          // > If the value is precisely “0”, either explicit or defaulted, then the normal number format
          // > pattern for that sort of object is supplied.


          if (pattern === '0') {
            return null;
          }

          pattern = getPatternForSign(pattern, sign) // Extract compact literal from the pattern
          .replace(/([^\s;\-\+\d¤]+)/g, '{c:$1}') // We replace one or more zeros with a single zero so it matches `CLDR_NUMBER_PATTERN`.
          .replace(/0+/, '0');
          return pattern;
        }

        function selectPlural(pl, x, rules) {
          return rules[pl.select(x)] || rules.other;
        } // #endregion ORIGINAL CODE


        module.exports;
        module.exports.__esModule;
        module.exports.default;
      }, () => ({
        './ToRawFixed': __cjsMetaURL$1,
        './digit-mapping.generated': __cjsMetaURL$2,
        '../regex.generated': __cjsMetaURL$3
      }));
    }
  };
});

System.register("chunks:///_virtual/format_to_parts5.js", ['./cjs-loader.mjs', './ToRawFixed5.js', './digit-mapping.generated5.js', './regex.generated5.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var ToRawFixed_1 = require("./ToRawFixed");

        var digit_mapping_generated_1 = require("./digit-mapping.generated");

        var regex_generated_1 = require("../regex.generated"); // This is from: unicode-12.1.0/General_Category/Symbol/regex.js
        // IE11 does not support unicode flag, otherwise this is just /\p{S}/u.
        // /^\p{S}/u


        var CARET_S_UNICODE_REGEX = new RegExp("^".concat(regex_generated_1.S_UNICODE_REGEX.source)); // /\p{S}$/u

        var S_DOLLAR_UNICODE_REGEX = new RegExp("".concat(regex_generated_1.S_UNICODE_REGEX.source, "$"));
        var CLDR_NUMBER_PATTERN = /[#0](?:[\.,][#0]+)*/g;

        function formatToParts(numberResult, data, pl, options) {
          var sign = numberResult.sign,
              exponent = numberResult.exponent,
              magnitude = numberResult.magnitude;
          var notation = options.notation,
              style = options.style,
              numberingSystem = options.numberingSystem;
          var defaultNumberingSystem = data.numbers.nu[0]; // #region Part 1: partition and interpolate the CLDR number pattern.
          // ----------------------------------------------------------

          var compactNumberPattern = null;

          if (notation === 'compact' && magnitude) {
            compactNumberPattern = getCompactDisplayPattern(numberResult, pl, data, style, options.compactDisplay, options.currencyDisplay, numberingSystem);
          } // This is used multiple times


          var nonNameCurrencyPart;

          if (style === 'currency' && options.currencyDisplay !== 'name') {
            var byCurrencyDisplay = data.currencies[options.currency];

            if (byCurrencyDisplay) {
              switch (options.currencyDisplay) {
                case 'code':
                  nonNameCurrencyPart = options.currency;
                  break;

                case 'symbol':
                  nonNameCurrencyPart = byCurrencyDisplay.symbol;
                  break;

                default:
                  nonNameCurrencyPart = byCurrencyDisplay.narrow;
                  break;
              }
            } else {
              // Fallback for unknown currency
              nonNameCurrencyPart = options.currency;
            }
          }

          var numberPattern;

          if (!compactNumberPattern) {
            // Note: if the style is unit, or is currency and the currency display is name,
            // its unit parts will be interpolated in part 2. So here we can fallback to decimal.
            if (style === 'decimal' || style === 'unit' || style === 'currency' && options.currencyDisplay === 'name') {
              // Shortcut for decimal
              var decimalData = data.numbers.decimal[numberingSystem] || data.numbers.decimal[defaultNumberingSystem];
              numberPattern = getPatternForSign(decimalData.standard, sign);
            } else if (style === 'currency') {
              var currencyData = data.numbers.currency[numberingSystem] || data.numbers.currency[defaultNumberingSystem]; // We replace number pattern part with `0` for easier postprocessing.

              numberPattern = getPatternForSign(currencyData[options.currencySign], sign);
            } else {
              // percent
              var percentPattern = data.numbers.percent[numberingSystem] || data.numbers.percent[defaultNumberingSystem];
              numberPattern = getPatternForSign(percentPattern, sign);
            }
          } else {
            numberPattern = compactNumberPattern;
          } // Extract the decimal number pattern string. It looks like "#,##0,00", which will later be
          // used to infer decimal group sizes.


          var decimalNumberPattern = CLDR_NUMBER_PATTERN.exec(numberPattern)[0]; // Now we start to substitute patterns
          // 1. replace strings like `0` and `#,##0.00` with `{0}`
          // 2. unquote characters (invariant: the quoted characters does not contain the special tokens)

          numberPattern = numberPattern.replace(CLDR_NUMBER_PATTERN, '{0}').replace(/'(.)'/g, '$1'); // Handle currency spacing (both compact and non-compact).

          if (style === 'currency' && options.currencyDisplay !== 'name') {
            var currencyData = data.numbers.currency[numberingSystem] || data.numbers.currency[defaultNumberingSystem]; // See `currencySpacing` substitution rule in TR-35.
            // Here we always assume the currencyMatch is "[:^S:]" and surroundingMatch is "[:digit:]".
            //
            // Example 1: for pattern "#,##0.00¤" with symbol "US$", we replace "¤" with the symbol,
            // but insert an extra non-break space before the symbol, because "[:^S:]" matches "U" in
            // "US$" and "[:digit:]" matches the latn numbering system digits.
            //
            // Example 2: for pattern "¤#,##0.00" with symbol "US$", there is no spacing between symbol
            // and number, because `$` does not match "[:^S:]".
            //
            // Implementation note: here we do the best effort to infer the insertion.
            // We also assume that `beforeInsertBetween` and `afterInsertBetween` will never be `;`.

            var afterCurrency = currencyData.currencySpacing.afterInsertBetween;

            if (afterCurrency && !S_DOLLAR_UNICODE_REGEX.test(nonNameCurrencyPart)) {
              numberPattern = numberPattern.replace('¤{0}', "\u00A4".concat(afterCurrency, "{0}"));
            }

            var beforeCurrency = currencyData.currencySpacing.beforeInsertBetween;

            if (beforeCurrency && !CARET_S_UNICODE_REGEX.test(nonNameCurrencyPart)) {
              numberPattern = numberPattern.replace('{0}¤', "{0}".concat(beforeCurrency, "\u00A4"));
            }
          } // The following tokens are special: `{0}`, `¤`, `%`, `-`, `+`, `{c:...}.


          var numberPatternParts = numberPattern.split(/({c:[^}]+}|\{0\}|[¤%\-\+])/g);
          var numberParts = [];
          var symbols = data.numbers.symbols[numberingSystem] || data.numbers.symbols[defaultNumberingSystem];

          for (var _i = 0, numberPatternParts_1 = numberPatternParts; _i < numberPatternParts_1.length; _i++) {
            var part = numberPatternParts_1[_i];

            if (!part) {
              continue;
            }

            switch (part) {
              case '{0}':
                {
                  // We only need to handle scientific and engineering notation here.
                  numberParts.push.apply(numberParts, paritionNumberIntoParts(symbols, numberResult, notation, exponent, numberingSystem, // If compact number pattern exists, do not insert group separators.
                  !compactNumberPattern && options.useGrouping, decimalNumberPattern));
                  break;
                }

              case '-':
                numberParts.push({
                  type: 'minusSign',
                  value: symbols.minusSign
                });
                break;

              case '+':
                numberParts.push({
                  type: 'plusSign',
                  value: symbols.plusSign
                });
                break;

              case '%':
                numberParts.push({
                  type: 'percentSign',
                  value: symbols.percentSign
                });
                break;

              case '¤':
                // Computed above when handling currency spacing.
                numberParts.push({
                  type: 'currency',
                  value: nonNameCurrencyPart
                });
                break;

              default:
                if (/^\{c:/.test(part)) {
                  numberParts.push({
                    type: 'compact',
                    value: part.substring(3, part.length - 1)
                  });
                } else {
                  // literal
                  numberParts.push({
                    type: 'literal',
                    value: part
                  });
                }

                break;
            }
          } // #endregion
          // #region Part 2: interpolate unit pattern if necessary.
          // ----------------------------------------------


          switch (style) {
            case 'currency':
              {
                // `currencyDisplay: 'name'` has similar pattern handling as units.
                if (options.currencyDisplay === 'name') {
                  var unitPattern = (data.numbers.currency[numberingSystem] || data.numbers.currency[defaultNumberingSystem]).unitPattern; // Select plural

                  var unitName = void 0;
                  var currencyNameData = data.currencies[options.currency];

                  if (currencyNameData) {
                    unitName = selectPlural(pl, numberResult.roundedNumber * Math.pow(10, exponent), currencyNameData.displayName);
                  } else {
                    // Fallback for unknown currency
                    unitName = options.currency;
                  } // Do {0} and {1} substitution


                  var unitPatternParts = unitPattern.split(/(\{[01]\})/g);
                  var result = [];

                  for (var _a = 0, unitPatternParts_1 = unitPatternParts; _a < unitPatternParts_1.length; _a++) {
                    var part = unitPatternParts_1[_a];

                    switch (part) {
                      case '{0}':
                        result.push.apply(result, numberParts);
                        break;

                      case '{1}':
                        result.push({
                          type: 'currency',
                          value: unitName
                        });
                        break;

                      default:
                        if (part) {
                          result.push({
                            type: 'literal',
                            value: part
                          });
                        }

                        break;
                    }
                  }

                  return result;
                } else {
                  return numberParts;
                }
              }

            case 'unit':
              {
                var unit = options.unit,
                    unitDisplay = options.unitDisplay;
                var unitData = data.units.simple[unit];
                var unitPattern = void 0;

                if (unitData) {
                  // Simple unit pattern
                  unitPattern = selectPlural(pl, numberResult.roundedNumber * Math.pow(10, exponent), data.units.simple[unit][unitDisplay]);
                } else {
                  // See: http://unicode.org/reports/tr35/tr35-general.html#perUnitPatterns
                  // If cannot find unit in the simple pattern, it must be "per" compound pattern.
                  // Implementation note: we are not following TR-35 here because we need to format to parts!
                  var _b = unit.split('-per-'),
                      numeratorUnit = _b[0],
                      denominatorUnit = _b[1];

                  unitData = data.units.simple[numeratorUnit];
                  var numeratorUnitPattern = selectPlural(pl, numberResult.roundedNumber * Math.pow(10, exponent), data.units.simple[numeratorUnit][unitDisplay]);
                  var perUnitPattern = data.units.simple[denominatorUnit].perUnit[unitDisplay];

                  if (perUnitPattern) {
                    // perUnitPattern exists, combine it with numeratorUnitPattern
                    unitPattern = perUnitPattern.replace('{0}', numeratorUnitPattern);
                  } else {
                    // get compoundUnit pattern (e.g. "{0} per {1}"), repalce {0} with numerator pattern and {1} with
                    // the denominator pattern in singular form.
                    var perPattern = data.units.compound.per[unitDisplay];
                    var denominatorPattern = selectPlural(pl, 1, data.units.simple[denominatorUnit][unitDisplay]);
                    unitPattern = unitPattern = perPattern.replace('{0}', numeratorUnitPattern).replace('{1}', denominatorPattern.replace('{0}', ''));
                  }
                }

                var result = []; // We need spacing around "{0}" because they are not treated as "unit" parts, but "literal".

                for (var _c = 0, _d = unitPattern.split(/(\s*\{0\}\s*)/); _c < _d.length; _c++) {
                  var part = _d[_c];
                  var interpolateMatch = /^(\s*)\{0\}(\s*)$/.exec(part);

                  if (interpolateMatch) {
                    // Space before "{0}"
                    if (interpolateMatch[1]) {
                      result.push({
                        type: 'literal',
                        value: interpolateMatch[1]
                      });
                    } // "{0}" itself


                    result.push.apply(result, numberParts); // Space after "{0}"

                    if (interpolateMatch[2]) {
                      result.push({
                        type: 'literal',
                        value: interpolateMatch[2]
                      });
                    }
                  } else if (part) {
                    result.push({
                      type: 'unit',
                      value: part
                    });
                  }
                }

                return result;
              }

            default:
              return numberParts;
          } // #endregion

        }

        exports.default = formatToParts; // A subset of https://tc39.es/ecma402/#sec-partitionnotationsubpattern
        // Plus the exponent parts handling.

        function paritionNumberIntoParts(symbols, numberResult, notation, exponent, numberingSystem, useGrouping,
        /**
         * This is the decimal number pattern without signs or symbols.
         * It is used to infer the group size when `useGrouping` is true.
         *
         * A typical value looks like "#,##0.00" (primary group size is 3).
         * Some locales like Hindi has secondary group size of 2 (e.g. "#,##,##0.00").
         */
        decimalNumberPattern) {
          var result = []; // eslint-disable-next-line prefer-const

          var n = numberResult.formattedString,
              x = numberResult.roundedNumber;

          if (isNaN(x)) {
            return [{
              type: 'nan',
              value: n
            }];
          } else if (!isFinite(x)) {
            return [{
              type: 'infinity',
              value: n
            }];
          }

          var digitReplacementTable = digit_mapping_generated_1.digitMapping[numberingSystem];

          if (digitReplacementTable) {
            n = n.replace(/\d/g, function (digit) {
              return digitReplacementTable[+digit] || digit;
            });
          } // TODO: Else use an implementation dependent algorithm to map n to the appropriate
          // representation of n in the given numbering system.


          var decimalSepIndex = n.indexOf('.');
          var integer;
          var fraction;

          if (decimalSepIndex > 0) {
            integer = n.slice(0, decimalSepIndex);
            fraction = n.slice(decimalSepIndex + 1);
          } else {
            integer = n;
          } // #region Grouping integer digits
          // The weird compact and x >= 10000 check is to ensure consistency with Node.js and Chrome.
          // Note that `de` does not have compact form for thousands, but Node.js does not insert grouping separator
          // unless the rounded number is greater than 10000:
          //   NumberFormat('de', {notation: 'compact', compactDisplay: 'short'}).format(1234) //=> "1234"
          //   NumberFormat('de').format(1234) //=> "1.234"


          if (useGrouping && (notation !== 'compact' || x >= 10000)) {
            var groupSepSymbol = symbols.group;
            var groups = []; // > There may be two different grouping sizes: The primary grouping size used for the least
            // > significant integer group, and the secondary grouping size used for more significant groups.
            // > If a pattern contains multiple grouping separators, the interval between the last one and the
            // > end of the integer defines the primary grouping size, and the interval between the last two
            // > defines the secondary grouping size. All others are ignored.

            var integerNumberPattern = decimalNumberPattern.split('.')[0];
            var patternGroups = integerNumberPattern.split(',');
            var primaryGroupingSize = 3;
            var secondaryGroupingSize = 3;

            if (patternGroups.length > 1) {
              primaryGroupingSize = patternGroups[patternGroups.length - 1].length;
            }

            if (patternGroups.length > 2) {
              secondaryGroupingSize = patternGroups[patternGroups.length - 2].length;
            }

            var i = integer.length - primaryGroupingSize;

            if (i > 0) {
              // Slice the least significant integer group
              groups.push(integer.slice(i, i + primaryGroupingSize)); // Then iteratively push the more signicant groups
              // TODO: handle surrogate pairs in some numbering system digits

              for (i -= secondaryGroupingSize; i > 0; i -= secondaryGroupingSize) {
                groups.push(integer.slice(i, i + secondaryGroupingSize));
              }

              groups.push(integer.slice(0, i + secondaryGroupingSize));
            } else {
              groups.push(integer);
            }

            while (groups.length > 0) {
              var integerGroup = groups.pop();
              result.push({
                type: 'integer',
                value: integerGroup
              });

              if (groups.length > 0) {
                result.push({
                  type: 'group',
                  value: groupSepSymbol
                });
              }
            }
          } else {
            result.push({
              type: 'integer',
              value: integer
            });
          } // #endregion


          if (fraction !== undefined) {
            result.push({
              type: 'decimal',
              value: symbols.decimal
            }, {
              type: 'fraction',
              value: fraction
            });
          }

          if ((notation === 'scientific' || notation === 'engineering') && isFinite(x)) {
            result.push({
              type: 'exponentSeparator',
              value: symbols.exponential
            });

            if (exponent < 0) {
              result.push({
                type: 'exponentMinusSign',
                value: symbols.minusSign
              });
              exponent = -exponent;
            }

            var exponentResult = (0, ToRawFixed_1.ToRawFixed)(exponent, 0, 0);
            result.push({
              type: 'exponentInteger',
              value: exponentResult.formattedString
            });
          }

          return result;
        }

        function getPatternForSign(pattern, sign) {
          if (pattern.indexOf(';') < 0) {
            pattern = "".concat(pattern, ";-").concat(pattern);
          }

          var _a = pattern.split(';'),
              zeroPattern = _a[0],
              negativePattern = _a[1];

          switch (sign) {
            case 0:
              return zeroPattern;

            case -1:
              return negativePattern;

            default:
              return negativePattern.indexOf('-') >= 0 ? negativePattern.replace(/-/g, '+') : "+".concat(zeroPattern);
          }
        } // Find the CLDR pattern for compact notation based on the magnitude of data and style.
        //
        // Example return value: "¤ {c:laki}000;¤{c:laki} -0" (`sw` locale):
        // - Notice the `{c:...}` token that wraps the compact literal.
        // - The consecutive zeros are normalized to single zero to match CLDR_NUMBER_PATTERN.
        //
        // Returning null means the compact display pattern cannot be found.


        function getCompactDisplayPattern(numberResult, pl, data, style, compactDisplay, currencyDisplay, numberingSystem) {
          var _a;

          var roundedNumber = numberResult.roundedNumber,
              sign = numberResult.sign,
              magnitude = numberResult.magnitude;
          var magnitudeKey = String(Math.pow(10, magnitude));
          var defaultNumberingSystem = data.numbers.nu[0];
          var pattern;

          if (style === 'currency' && currencyDisplay !== 'name') {
            var byNumberingSystem = data.numbers.currency;
            var currencyData = byNumberingSystem[numberingSystem] || byNumberingSystem[defaultNumberingSystem]; // NOTE: compact notation ignores currencySign!

            var compactPluralRules = (_a = currencyData.short) === null || _a === void 0 ? void 0 : _a[magnitudeKey];

            if (!compactPluralRules) {
              return null;
            }

            pattern = selectPlural(pl, roundedNumber, compactPluralRules);
          } else {
            var byNumberingSystem = data.numbers.decimal;
            var byCompactDisplay = byNumberingSystem[numberingSystem] || byNumberingSystem[defaultNumberingSystem];
            var compactPlaralRule = byCompactDisplay[compactDisplay][magnitudeKey];

            if (!compactPlaralRule) {
              return null;
            }

            pattern = selectPlural(pl, roundedNumber, compactPlaralRule);
          } // See https://unicode.org/reports/tr35/tr35-numbers.html#Compact_Number_Formats
          // > If the value is precisely “0”, either explicit or defaulted, then the normal number format
          // > pattern for that sort of object is supplied.


          if (pattern === '0') {
            return null;
          }

          pattern = getPatternForSign(pattern, sign) // Extract compact literal from the pattern
          .replace(/([^\s;\-\+\d¤]+)/g, '{c:$1}') // We replace one or more zeros with a single zero so it matches `CLDR_NUMBER_PATTERN`.
          .replace(/0+/, '0');
          return pattern;
        }

        function selectPlural(pl, x, rules) {
          return rules[pl.select(x)] || rules.other;
        } // #endregion ORIGINAL CODE


        module.exports;
        module.exports.__esModule;
        module.exports.default;
      }, () => ({
        './ToRawFixed': __cjsMetaURL$1,
        './digit-mapping.generated': __cjsMetaURL$2,
        '../regex.generated': __cjsMetaURL$3
      }));
    }
  };
});

System.register("chunks:///_virtual/format_to_parts6.js", ['./cjs-loader.mjs', './ToRawFixed6.js', './digit-mapping.generated6.js', './regex.generated6.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var ToRawFixed_1 = require("./ToRawFixed");

        var digit_mapping_generated_1 = require("./digit-mapping.generated");

        var regex_generated_1 = require("../regex.generated"); // This is from: unicode-12.1.0/General_Category/Symbol/regex.js
        // IE11 does not support unicode flag, otherwise this is just /\p{S}/u.
        // /^\p{S}/u


        var CARET_S_UNICODE_REGEX = new RegExp("^".concat(regex_generated_1.S_UNICODE_REGEX.source)); // /\p{S}$/u

        var S_DOLLAR_UNICODE_REGEX = new RegExp("".concat(regex_generated_1.S_UNICODE_REGEX.source, "$"));
        var CLDR_NUMBER_PATTERN = /[#0](?:[\.,][#0]+)*/g;

        function formatToParts(numberResult, data, pl, options) {
          var sign = numberResult.sign,
              exponent = numberResult.exponent,
              magnitude = numberResult.magnitude;
          var notation = options.notation,
              style = options.style,
              numberingSystem = options.numberingSystem;
          var defaultNumberingSystem = data.numbers.nu[0]; // #region Part 1: partition and interpolate the CLDR number pattern.
          // ----------------------------------------------------------

          var compactNumberPattern = null;

          if (notation === 'compact' && magnitude) {
            compactNumberPattern = getCompactDisplayPattern(numberResult, pl, data, style, options.compactDisplay, options.currencyDisplay, numberingSystem);
          } // This is used multiple times


          var nonNameCurrencyPart;

          if (style === 'currency' && options.currencyDisplay !== 'name') {
            var byCurrencyDisplay = data.currencies[options.currency];

            if (byCurrencyDisplay) {
              switch (options.currencyDisplay) {
                case 'code':
                  nonNameCurrencyPart = options.currency;
                  break;

                case 'symbol':
                  nonNameCurrencyPart = byCurrencyDisplay.symbol;
                  break;

                default:
                  nonNameCurrencyPart = byCurrencyDisplay.narrow;
                  break;
              }
            } else {
              // Fallback for unknown currency
              nonNameCurrencyPart = options.currency;
            }
          }

          var numberPattern;

          if (!compactNumberPattern) {
            // Note: if the style is unit, or is currency and the currency display is name,
            // its unit parts will be interpolated in part 2. So here we can fallback to decimal.
            if (style === 'decimal' || style === 'unit' || style === 'currency' && options.currencyDisplay === 'name') {
              // Shortcut for decimal
              var decimalData = data.numbers.decimal[numberingSystem] || data.numbers.decimal[defaultNumberingSystem];
              numberPattern = getPatternForSign(decimalData.standard, sign);
            } else if (style === 'currency') {
              var currencyData = data.numbers.currency[numberingSystem] || data.numbers.currency[defaultNumberingSystem]; // We replace number pattern part with `0` for easier postprocessing.

              numberPattern = getPatternForSign(currencyData[options.currencySign], sign);
            } else {
              // percent
              var percentPattern = data.numbers.percent[numberingSystem] || data.numbers.percent[defaultNumberingSystem];
              numberPattern = getPatternForSign(percentPattern, sign);
            }
          } else {
            numberPattern = compactNumberPattern;
          } // Extract the decimal number pattern string. It looks like "#,##0,00", which will later be
          // used to infer decimal group sizes.


          var decimalNumberPattern = CLDR_NUMBER_PATTERN.exec(numberPattern)[0]; // Now we start to substitute patterns
          // 1. replace strings like `0` and `#,##0.00` with `{0}`
          // 2. unquote characters (invariant: the quoted characters does not contain the special tokens)

          numberPattern = numberPattern.replace(CLDR_NUMBER_PATTERN, '{0}').replace(/'(.)'/g, '$1'); // Handle currency spacing (both compact and non-compact).

          if (style === 'currency' && options.currencyDisplay !== 'name') {
            var currencyData = data.numbers.currency[numberingSystem] || data.numbers.currency[defaultNumberingSystem]; // See `currencySpacing` substitution rule in TR-35.
            // Here we always assume the currencyMatch is "[:^S:]" and surroundingMatch is "[:digit:]".
            //
            // Example 1: for pattern "#,##0.00¤" with symbol "US$", we replace "¤" with the symbol,
            // but insert an extra non-break space before the symbol, because "[:^S:]" matches "U" in
            // "US$" and "[:digit:]" matches the latn numbering system digits.
            //
            // Example 2: for pattern "¤#,##0.00" with symbol "US$", there is no spacing between symbol
            // and number, because `$` does not match "[:^S:]".
            //
            // Implementation note: here we do the best effort to infer the insertion.
            // We also assume that `beforeInsertBetween` and `afterInsertBetween` will never be `;`.

            var afterCurrency = currencyData.currencySpacing.afterInsertBetween;

            if (afterCurrency && !S_DOLLAR_UNICODE_REGEX.test(nonNameCurrencyPart)) {
              numberPattern = numberPattern.replace('¤{0}', "\u00A4".concat(afterCurrency, "{0}"));
            }

            var beforeCurrency = currencyData.currencySpacing.beforeInsertBetween;

            if (beforeCurrency && !CARET_S_UNICODE_REGEX.test(nonNameCurrencyPart)) {
              numberPattern = numberPattern.replace('{0}¤', "{0}".concat(beforeCurrency, "\u00A4"));
            }
          } // The following tokens are special: `{0}`, `¤`, `%`, `-`, `+`, `{c:...}.


          var numberPatternParts = numberPattern.split(/({c:[^}]+}|\{0\}|[¤%\-\+])/g);
          var numberParts = [];
          var symbols = data.numbers.symbols[numberingSystem] || data.numbers.symbols[defaultNumberingSystem];

          for (var _i = 0, numberPatternParts_1 = numberPatternParts; _i < numberPatternParts_1.length; _i++) {
            var part = numberPatternParts_1[_i];

            if (!part) {
              continue;
            }

            switch (part) {
              case '{0}':
                {
                  // We only need to handle scientific and engineering notation here.
                  numberParts.push.apply(numberParts, paritionNumberIntoParts(symbols, numberResult, notation, exponent, numberingSystem, // If compact number pattern exists, do not insert group separators.
                  !compactNumberPattern && options.useGrouping, decimalNumberPattern));
                  break;
                }

              case '-':
                numberParts.push({
                  type: 'minusSign',
                  value: symbols.minusSign
                });
                break;

              case '+':
                numberParts.push({
                  type: 'plusSign',
                  value: symbols.plusSign
                });
                break;

              case '%':
                numberParts.push({
                  type: 'percentSign',
                  value: symbols.percentSign
                });
                break;

              case '¤':
                // Computed above when handling currency spacing.
                numberParts.push({
                  type: 'currency',
                  value: nonNameCurrencyPart
                });
                break;

              default:
                if (/^\{c:/.test(part)) {
                  numberParts.push({
                    type: 'compact',
                    value: part.substring(3, part.length - 1)
                  });
                } else {
                  // literal
                  numberParts.push({
                    type: 'literal',
                    value: part
                  });
                }

                break;
            }
          } // #endregion
          // #region Part 2: interpolate unit pattern if necessary.
          // ----------------------------------------------


          switch (style) {
            case 'currency':
              {
                // `currencyDisplay: 'name'` has similar pattern handling as units.
                if (options.currencyDisplay === 'name') {
                  var unitPattern = (data.numbers.currency[numberingSystem] || data.numbers.currency[defaultNumberingSystem]).unitPattern; // Select plural

                  var unitName = void 0;
                  var currencyNameData = data.currencies[options.currency];

                  if (currencyNameData) {
                    unitName = selectPlural(pl, numberResult.roundedNumber * Math.pow(10, exponent), currencyNameData.displayName);
                  } else {
                    // Fallback for unknown currency
                    unitName = options.currency;
                  } // Do {0} and {1} substitution


                  var unitPatternParts = unitPattern.split(/(\{[01]\})/g);
                  var result = [];

                  for (var _a = 0, unitPatternParts_1 = unitPatternParts; _a < unitPatternParts_1.length; _a++) {
                    var part = unitPatternParts_1[_a];

                    switch (part) {
                      case '{0}':
                        result.push.apply(result, numberParts);
                        break;

                      case '{1}':
                        result.push({
                          type: 'currency',
                          value: unitName
                        });
                        break;

                      default:
                        if (part) {
                          result.push({
                            type: 'literal',
                            value: part
                          });
                        }

                        break;
                    }
                  }

                  return result;
                } else {
                  return numberParts;
                }
              }

            case 'unit':
              {
                var unit = options.unit,
                    unitDisplay = options.unitDisplay;
                var unitData = data.units.simple[unit];
                var unitPattern = void 0;

                if (unitData) {
                  // Simple unit pattern
                  unitPattern = selectPlural(pl, numberResult.roundedNumber * Math.pow(10, exponent), data.units.simple[unit][unitDisplay]);
                } else {
                  // See: http://unicode.org/reports/tr35/tr35-general.html#perUnitPatterns
                  // If cannot find unit in the simple pattern, it must be "per" compound pattern.
                  // Implementation note: we are not following TR-35 here because we need to format to parts!
                  var _b = unit.split('-per-'),
                      numeratorUnit = _b[0],
                      denominatorUnit = _b[1];

                  unitData = data.units.simple[numeratorUnit];
                  var numeratorUnitPattern = selectPlural(pl, numberResult.roundedNumber * Math.pow(10, exponent), data.units.simple[numeratorUnit][unitDisplay]);
                  var perUnitPattern = data.units.simple[denominatorUnit].perUnit[unitDisplay];

                  if (perUnitPattern) {
                    // perUnitPattern exists, combine it with numeratorUnitPattern
                    unitPattern = perUnitPattern.replace('{0}', numeratorUnitPattern);
                  } else {
                    // get compoundUnit pattern (e.g. "{0} per {1}"), repalce {0} with numerator pattern and {1} with
                    // the denominator pattern in singular form.
                    var perPattern = data.units.compound.per[unitDisplay];
                    var denominatorPattern = selectPlural(pl, 1, data.units.simple[denominatorUnit][unitDisplay]);
                    unitPattern = unitPattern = perPattern.replace('{0}', numeratorUnitPattern).replace('{1}', denominatorPattern.replace('{0}', ''));
                  }
                }

                var result = []; // We need spacing around "{0}" because they are not treated as "unit" parts, but "literal".

                for (var _c = 0, _d = unitPattern.split(/(\s*\{0\}\s*)/); _c < _d.length; _c++) {
                  var part = _d[_c];
                  var interpolateMatch = /^(\s*)\{0\}(\s*)$/.exec(part);

                  if (interpolateMatch) {
                    // Space before "{0}"
                    if (interpolateMatch[1]) {
                      result.push({
                        type: 'literal',
                        value: interpolateMatch[1]
                      });
                    } // "{0}" itself


                    result.push.apply(result, numberParts); // Space after "{0}"

                    if (interpolateMatch[2]) {
                      result.push({
                        type: 'literal',
                        value: interpolateMatch[2]
                      });
                    }
                  } else if (part) {
                    result.push({
                      type: 'unit',
                      value: part
                    });
                  }
                }

                return result;
              }

            default:
              return numberParts;
          } // #endregion

        }

        exports.default = formatToParts; // A subset of https://tc39.es/ecma402/#sec-partitionnotationsubpattern
        // Plus the exponent parts handling.

        function paritionNumberIntoParts(symbols, numberResult, notation, exponent, numberingSystem, useGrouping,
        /**
         * This is the decimal number pattern without signs or symbols.
         * It is used to infer the group size when `useGrouping` is true.
         *
         * A typical value looks like "#,##0.00" (primary group size is 3).
         * Some locales like Hindi has secondary group size of 2 (e.g. "#,##,##0.00").
         */
        decimalNumberPattern) {
          var result = []; // eslint-disable-next-line prefer-const

          var n = numberResult.formattedString,
              x = numberResult.roundedNumber;

          if (isNaN(x)) {
            return [{
              type: 'nan',
              value: n
            }];
          } else if (!isFinite(x)) {
            return [{
              type: 'infinity',
              value: n
            }];
          }

          var digitReplacementTable = digit_mapping_generated_1.digitMapping[numberingSystem];

          if (digitReplacementTable) {
            n = n.replace(/\d/g, function (digit) {
              return digitReplacementTable[+digit] || digit;
            });
          } // TODO: Else use an implementation dependent algorithm to map n to the appropriate
          // representation of n in the given numbering system.


          var decimalSepIndex = n.indexOf('.');
          var integer;
          var fraction;

          if (decimalSepIndex > 0) {
            integer = n.slice(0, decimalSepIndex);
            fraction = n.slice(decimalSepIndex + 1);
          } else {
            integer = n;
          } // #region Grouping integer digits
          // The weird compact and x >= 10000 check is to ensure consistency with Node.js and Chrome.
          // Note that `de` does not have compact form for thousands, but Node.js does not insert grouping separator
          // unless the rounded number is greater than 10000:
          //   NumberFormat('de', {notation: 'compact', compactDisplay: 'short'}).format(1234) //=> "1234"
          //   NumberFormat('de').format(1234) //=> "1.234"


          if (useGrouping && (notation !== 'compact' || x >= 10000)) {
            var groupSepSymbol = symbols.group;
            var groups = []; // > There may be two different grouping sizes: The primary grouping size used for the least
            // > significant integer group, and the secondary grouping size used for more significant groups.
            // > If a pattern contains multiple grouping separators, the interval between the last one and the
            // > end of the integer defines the primary grouping size, and the interval between the last two
            // > defines the secondary grouping size. All others are ignored.

            var integerNumberPattern = decimalNumberPattern.split('.')[0];
            var patternGroups = integerNumberPattern.split(',');
            var primaryGroupingSize = 3;
            var secondaryGroupingSize = 3;

            if (patternGroups.length > 1) {
              primaryGroupingSize = patternGroups[patternGroups.length - 1].length;
            }

            if (patternGroups.length > 2) {
              secondaryGroupingSize = patternGroups[patternGroups.length - 2].length;
            }

            var i = integer.length - primaryGroupingSize;

            if (i > 0) {
              // Slice the least significant integer group
              groups.push(integer.slice(i, i + primaryGroupingSize)); // Then iteratively push the more signicant groups
              // TODO: handle surrogate pairs in some numbering system digits

              for (i -= secondaryGroupingSize; i > 0; i -= secondaryGroupingSize) {
                groups.push(integer.slice(i, i + secondaryGroupingSize));
              }

              groups.push(integer.slice(0, i + secondaryGroupingSize));
            } else {
              groups.push(integer);
            }

            while (groups.length > 0) {
              var integerGroup = groups.pop();
              result.push({
                type: 'integer',
                value: integerGroup
              });

              if (groups.length > 0) {
                result.push({
                  type: 'group',
                  value: groupSepSymbol
                });
              }
            }
          } else {
            result.push({
              type: 'integer',
              value: integer
            });
          } // #endregion


          if (fraction !== undefined) {
            result.push({
              type: 'decimal',
              value: symbols.decimal
            }, {
              type: 'fraction',
              value: fraction
            });
          }

          if ((notation === 'scientific' || notation === 'engineering') && isFinite(x)) {
            result.push({
              type: 'exponentSeparator',
              value: symbols.exponential
            });

            if (exponent < 0) {
              result.push({
                type: 'exponentMinusSign',
                value: symbols.minusSign
              });
              exponent = -exponent;
            }

            var exponentResult = (0, ToRawFixed_1.ToRawFixed)(exponent, 0, 0);
            result.push({
              type: 'exponentInteger',
              value: exponentResult.formattedString
            });
          }

          return result;
        }

        function getPatternForSign(pattern, sign) {
          if (pattern.indexOf(';') < 0) {
            pattern = "".concat(pattern, ";-").concat(pattern);
          }

          var _a = pattern.split(';'),
              zeroPattern = _a[0],
              negativePattern = _a[1];

          switch (sign) {
            case 0:
              return zeroPattern;

            case -1:
              return negativePattern;

            default:
              return negativePattern.indexOf('-') >= 0 ? negativePattern.replace(/-/g, '+') : "+".concat(zeroPattern);
          }
        } // Find the CLDR pattern for compact notation based on the magnitude of data and style.
        //
        // Example return value: "¤ {c:laki}000;¤{c:laki} -0" (`sw` locale):
        // - Notice the `{c:...}` token that wraps the compact literal.
        // - The consecutive zeros are normalized to single zero to match CLDR_NUMBER_PATTERN.
        //
        // Returning null means the compact display pattern cannot be found.


        function getCompactDisplayPattern(numberResult, pl, data, style, compactDisplay, currencyDisplay, numberingSystem) {
          var _a;

          var roundedNumber = numberResult.roundedNumber,
              sign = numberResult.sign,
              magnitude = numberResult.magnitude;
          var magnitudeKey = String(Math.pow(10, magnitude));
          var defaultNumberingSystem = data.numbers.nu[0];
          var pattern;

          if (style === 'currency' && currencyDisplay !== 'name') {
            var byNumberingSystem = data.numbers.currency;
            var currencyData = byNumberingSystem[numberingSystem] || byNumberingSystem[defaultNumberingSystem]; // NOTE: compact notation ignores currencySign!

            var compactPluralRules = (_a = currencyData.short) === null || _a === void 0 ? void 0 : _a[magnitudeKey];

            if (!compactPluralRules) {
              return null;
            }

            pattern = selectPlural(pl, roundedNumber, compactPluralRules);
          } else {
            var byNumberingSystem = data.numbers.decimal;
            var byCompactDisplay = byNumberingSystem[numberingSystem] || byNumberingSystem[defaultNumberingSystem];
            var compactPlaralRule = byCompactDisplay[compactDisplay][magnitudeKey];

            if (!compactPlaralRule) {
              return null;
            }

            pattern = selectPlural(pl, roundedNumber, compactPlaralRule);
          } // See https://unicode.org/reports/tr35/tr35-numbers.html#Compact_Number_Formats
          // > If the value is precisely “0”, either explicit or defaulted, then the normal number format
          // > pattern for that sort of object is supplied.


          if (pattern === '0') {
            return null;
          }

          pattern = getPatternForSign(pattern, sign) // Extract compact literal from the pattern
          .replace(/([^\s;\-\+\d¤]+)/g, '{c:$1}') // We replace one or more zeros with a single zero so it matches `CLDR_NUMBER_PATTERN`.
          .replace(/0+/, '0');
          return pattern;
        }

        function selectPlural(pl, x, rules) {
          return rules[pl.select(x)] || rules.other;
        } // #endregion ORIGINAL CODE


        module.exports;
        module.exports.__esModule;
        module.exports.default;
      }, () => ({
        './ToRawFixed': __cjsMetaURL$1,
        './digit-mapping.generated': __cjsMetaURL$2,
        '../regex.generated': __cjsMetaURL$3
      }));
    }
  };
});

System.register("chunks:///_virtual/format_to_parts7.js", ['./cjs-loader.mjs', './ToRawFixed7.js', './digit-mapping.generated7.js', './regex.generated7.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var ToRawFixed_1 = require("./ToRawFixed");

        var digit_mapping_generated_1 = require("./digit-mapping.generated");

        var regex_generated_1 = require("../regex.generated"); // This is from: unicode-12.1.0/General_Category/Symbol/regex.js
        // IE11 does not support unicode flag, otherwise this is just /\p{S}/u.
        // /^\p{S}/u


        var CARET_S_UNICODE_REGEX = new RegExp("^".concat(regex_generated_1.S_UNICODE_REGEX.source)); // /\p{S}$/u

        var S_DOLLAR_UNICODE_REGEX = new RegExp("".concat(regex_generated_1.S_UNICODE_REGEX.source, "$"));
        var CLDR_NUMBER_PATTERN = /[#0](?:[\.,][#0]+)*/g;

        function formatToParts(numberResult, data, pl, options) {
          var sign = numberResult.sign,
              exponent = numberResult.exponent,
              magnitude = numberResult.magnitude;
          var notation = options.notation,
              style = options.style,
              numberingSystem = options.numberingSystem;
          var defaultNumberingSystem = data.numbers.nu[0]; // #region Part 1: partition and interpolate the CLDR number pattern.
          // ----------------------------------------------------------

          var compactNumberPattern = null;

          if (notation === 'compact' && magnitude) {
            compactNumberPattern = getCompactDisplayPattern(numberResult, pl, data, style, options.compactDisplay, options.currencyDisplay, numberingSystem);
          } // This is used multiple times


          var nonNameCurrencyPart;

          if (style === 'currency' && options.currencyDisplay !== 'name') {
            var byCurrencyDisplay = data.currencies[options.currency];

            if (byCurrencyDisplay) {
              switch (options.currencyDisplay) {
                case 'code':
                  nonNameCurrencyPart = options.currency;
                  break;

                case 'symbol':
                  nonNameCurrencyPart = byCurrencyDisplay.symbol;
                  break;

                default:
                  nonNameCurrencyPart = byCurrencyDisplay.narrow;
                  break;
              }
            } else {
              // Fallback for unknown currency
              nonNameCurrencyPart = options.currency;
            }
          }

          var numberPattern;

          if (!compactNumberPattern) {
            // Note: if the style is unit, or is currency and the currency display is name,
            // its unit parts will be interpolated in part 2. So here we can fallback to decimal.
            if (style === 'decimal' || style === 'unit' || style === 'currency' && options.currencyDisplay === 'name') {
              // Shortcut for decimal
              var decimalData = data.numbers.decimal[numberingSystem] || data.numbers.decimal[defaultNumberingSystem];
              numberPattern = getPatternForSign(decimalData.standard, sign);
            } else if (style === 'currency') {
              var currencyData = data.numbers.currency[numberingSystem] || data.numbers.currency[defaultNumberingSystem]; // We replace number pattern part with `0` for easier postprocessing.

              numberPattern = getPatternForSign(currencyData[options.currencySign], sign);
            } else {
              // percent
              var percentPattern = data.numbers.percent[numberingSystem] || data.numbers.percent[defaultNumberingSystem];
              numberPattern = getPatternForSign(percentPattern, sign);
            }
          } else {
            numberPattern = compactNumberPattern;
          } // Extract the decimal number pattern string. It looks like "#,##0,00", which will later be
          // used to infer decimal group sizes.


          var decimalNumberPattern = CLDR_NUMBER_PATTERN.exec(numberPattern)[0]; // Now we start to substitute patterns
          // 1. replace strings like `0` and `#,##0.00` with `{0}`
          // 2. unquote characters (invariant: the quoted characters does not contain the special tokens)

          numberPattern = numberPattern.replace(CLDR_NUMBER_PATTERN, '{0}').replace(/'(.)'/g, '$1'); // Handle currency spacing (both compact and non-compact).

          if (style === 'currency' && options.currencyDisplay !== 'name') {
            var currencyData = data.numbers.currency[numberingSystem] || data.numbers.currency[defaultNumberingSystem]; // See `currencySpacing` substitution rule in TR-35.
            // Here we always assume the currencyMatch is "[:^S:]" and surroundingMatch is "[:digit:]".
            //
            // Example 1: for pattern "#,##0.00¤" with symbol "US$", we replace "¤" with the symbol,
            // but insert an extra non-break space before the symbol, because "[:^S:]" matches "U" in
            // "US$" and "[:digit:]" matches the latn numbering system digits.
            //
            // Example 2: for pattern "¤#,##0.00" with symbol "US$", there is no spacing between symbol
            // and number, because `$` does not match "[:^S:]".
            //
            // Implementation note: here we do the best effort to infer the insertion.
            // We also assume that `beforeInsertBetween` and `afterInsertBetween` will never be `;`.

            var afterCurrency = currencyData.currencySpacing.afterInsertBetween;

            if (afterCurrency && !S_DOLLAR_UNICODE_REGEX.test(nonNameCurrencyPart)) {
              numberPattern = numberPattern.replace('¤{0}', "\u00A4".concat(afterCurrency, "{0}"));
            }

            var beforeCurrency = currencyData.currencySpacing.beforeInsertBetween;

            if (beforeCurrency && !CARET_S_UNICODE_REGEX.test(nonNameCurrencyPart)) {
              numberPattern = numberPattern.replace('{0}¤', "{0}".concat(beforeCurrency, "\u00A4"));
            }
          } // The following tokens are special: `{0}`, `¤`, `%`, `-`, `+`, `{c:...}.


          var numberPatternParts = numberPattern.split(/({c:[^}]+}|\{0\}|[¤%\-\+])/g);
          var numberParts = [];
          var symbols = data.numbers.symbols[numberingSystem] || data.numbers.symbols[defaultNumberingSystem];

          for (var _i = 0, numberPatternParts_1 = numberPatternParts; _i < numberPatternParts_1.length; _i++) {
            var part = numberPatternParts_1[_i];

            if (!part) {
              continue;
            }

            switch (part) {
              case '{0}':
                {
                  // We only need to handle scientific and engineering notation here.
                  numberParts.push.apply(numberParts, paritionNumberIntoParts(symbols, numberResult, notation, exponent, numberingSystem, // If compact number pattern exists, do not insert group separators.
                  !compactNumberPattern && options.useGrouping, decimalNumberPattern));
                  break;
                }

              case '-':
                numberParts.push({
                  type: 'minusSign',
                  value: symbols.minusSign
                });
                break;

              case '+':
                numberParts.push({
                  type: 'plusSign',
                  value: symbols.plusSign
                });
                break;

              case '%':
                numberParts.push({
                  type: 'percentSign',
                  value: symbols.percentSign
                });
                break;

              case '¤':
                // Computed above when handling currency spacing.
                numberParts.push({
                  type: 'currency',
                  value: nonNameCurrencyPart
                });
                break;

              default:
                if (/^\{c:/.test(part)) {
                  numberParts.push({
                    type: 'compact',
                    value: part.substring(3, part.length - 1)
                  });
                } else {
                  // literal
                  numberParts.push({
                    type: 'literal',
                    value: part
                  });
                }

                break;
            }
          } // #endregion
          // #region Part 2: interpolate unit pattern if necessary.
          // ----------------------------------------------


          switch (style) {
            case 'currency':
              {
                // `currencyDisplay: 'name'` has similar pattern handling as units.
                if (options.currencyDisplay === 'name') {
                  var unitPattern = (data.numbers.currency[numberingSystem] || data.numbers.currency[defaultNumberingSystem]).unitPattern; // Select plural

                  var unitName = void 0;
                  var currencyNameData = data.currencies[options.currency];

                  if (currencyNameData) {
                    unitName = selectPlural(pl, numberResult.roundedNumber * Math.pow(10, exponent), currencyNameData.displayName);
                  } else {
                    // Fallback for unknown currency
                    unitName = options.currency;
                  } // Do {0} and {1} substitution


                  var unitPatternParts = unitPattern.split(/(\{[01]\})/g);
                  var result = [];

                  for (var _a = 0, unitPatternParts_1 = unitPatternParts; _a < unitPatternParts_1.length; _a++) {
                    var part = unitPatternParts_1[_a];

                    switch (part) {
                      case '{0}':
                        result.push.apply(result, numberParts);
                        break;

                      case '{1}':
                        result.push({
                          type: 'currency',
                          value: unitName
                        });
                        break;

                      default:
                        if (part) {
                          result.push({
                            type: 'literal',
                            value: part
                          });
                        }

                        break;
                    }
                  }

                  return result;
                } else {
                  return numberParts;
                }
              }

            case 'unit':
              {
                var unit = options.unit,
                    unitDisplay = options.unitDisplay;
                var unitData = data.units.simple[unit];
                var unitPattern = void 0;

                if (unitData) {
                  // Simple unit pattern
                  unitPattern = selectPlural(pl, numberResult.roundedNumber * Math.pow(10, exponent), data.units.simple[unit][unitDisplay]);
                } else {
                  // See: http://unicode.org/reports/tr35/tr35-general.html#perUnitPatterns
                  // If cannot find unit in the simple pattern, it must be "per" compound pattern.
                  // Implementation note: we are not following TR-35 here because we need to format to parts!
                  var _b = unit.split('-per-'),
                      numeratorUnit = _b[0],
                      denominatorUnit = _b[1];

                  unitData = data.units.simple[numeratorUnit];
                  var numeratorUnitPattern = selectPlural(pl, numberResult.roundedNumber * Math.pow(10, exponent), data.units.simple[numeratorUnit][unitDisplay]);
                  var perUnitPattern = data.units.simple[denominatorUnit].perUnit[unitDisplay];

                  if (perUnitPattern) {
                    // perUnitPattern exists, combine it with numeratorUnitPattern
                    unitPattern = perUnitPattern.replace('{0}', numeratorUnitPattern);
                  } else {
                    // get compoundUnit pattern (e.g. "{0} per {1}"), repalce {0} with numerator pattern and {1} with
                    // the denominator pattern in singular form.
                    var perPattern = data.units.compound.per[unitDisplay];
                    var denominatorPattern = selectPlural(pl, 1, data.units.simple[denominatorUnit][unitDisplay]);
                    unitPattern = unitPattern = perPattern.replace('{0}', numeratorUnitPattern).replace('{1}', denominatorPattern.replace('{0}', ''));
                  }
                }

                var result = []; // We need spacing around "{0}" because they are not treated as "unit" parts, but "literal".

                for (var _c = 0, _d = unitPattern.split(/(\s*\{0\}\s*)/); _c < _d.length; _c++) {
                  var part = _d[_c];
                  var interpolateMatch = /^(\s*)\{0\}(\s*)$/.exec(part);

                  if (interpolateMatch) {
                    // Space before "{0}"
                    if (interpolateMatch[1]) {
                      result.push({
                        type: 'literal',
                        value: interpolateMatch[1]
                      });
                    } // "{0}" itself


                    result.push.apply(result, numberParts); // Space after "{0}"

                    if (interpolateMatch[2]) {
                      result.push({
                        type: 'literal',
                        value: interpolateMatch[2]
                      });
                    }
                  } else if (part) {
                    result.push({
                      type: 'unit',
                      value: part
                    });
                  }
                }

                return result;
              }

            default:
              return numberParts;
          } // #endregion

        }

        exports.default = formatToParts; // A subset of https://tc39.es/ecma402/#sec-partitionnotationsubpattern
        // Plus the exponent parts handling.

        function paritionNumberIntoParts(symbols, numberResult, notation, exponent, numberingSystem, useGrouping,
        /**
         * This is the decimal number pattern without signs or symbols.
         * It is used to infer the group size when `useGrouping` is true.
         *
         * A typical value looks like "#,##0.00" (primary group size is 3).
         * Some locales like Hindi has secondary group size of 2 (e.g. "#,##,##0.00").
         */
        decimalNumberPattern) {
          var result = []; // eslint-disable-next-line prefer-const

          var n = numberResult.formattedString,
              x = numberResult.roundedNumber;

          if (isNaN(x)) {
            return [{
              type: 'nan',
              value: n
            }];
          } else if (!isFinite(x)) {
            return [{
              type: 'infinity',
              value: n
            }];
          }

          var digitReplacementTable = digit_mapping_generated_1.digitMapping[numberingSystem];

          if (digitReplacementTable) {
            n = n.replace(/\d/g, function (digit) {
              return digitReplacementTable[+digit] || digit;
            });
          } // TODO: Else use an implementation dependent algorithm to map n to the appropriate
          // representation of n in the given numbering system.


          var decimalSepIndex = n.indexOf('.');
          var integer;
          var fraction;

          if (decimalSepIndex > 0) {
            integer = n.slice(0, decimalSepIndex);
            fraction = n.slice(decimalSepIndex + 1);
          } else {
            integer = n;
          } // #region Grouping integer digits
          // The weird compact and x >= 10000 check is to ensure consistency with Node.js and Chrome.
          // Note that `de` does not have compact form for thousands, but Node.js does not insert grouping separator
          // unless the rounded number is greater than 10000:
          //   NumberFormat('de', {notation: 'compact', compactDisplay: 'short'}).format(1234) //=> "1234"
          //   NumberFormat('de').format(1234) //=> "1.234"


          if (useGrouping && (notation !== 'compact' || x >= 10000)) {
            var groupSepSymbol = symbols.group;
            var groups = []; // > There may be two different grouping sizes: The primary grouping size used for the least
            // > significant integer group, and the secondary grouping size used for more significant groups.
            // > If a pattern contains multiple grouping separators, the interval between the last one and the
            // > end of the integer defines the primary grouping size, and the interval between the last two
            // > defines the secondary grouping size. All others are ignored.

            var integerNumberPattern = decimalNumberPattern.split('.')[0];
            var patternGroups = integerNumberPattern.split(',');
            var primaryGroupingSize = 3;
            var secondaryGroupingSize = 3;

            if (patternGroups.length > 1) {
              primaryGroupingSize = patternGroups[patternGroups.length - 1].length;
            }

            if (patternGroups.length > 2) {
              secondaryGroupingSize = patternGroups[patternGroups.length - 2].length;
            }

            var i = integer.length - primaryGroupingSize;

            if (i > 0) {
              // Slice the least significant integer group
              groups.push(integer.slice(i, i + primaryGroupingSize)); // Then iteratively push the more signicant groups
              // TODO: handle surrogate pairs in some numbering system digits

              for (i -= secondaryGroupingSize; i > 0; i -= secondaryGroupingSize) {
                groups.push(integer.slice(i, i + secondaryGroupingSize));
              }

              groups.push(integer.slice(0, i + secondaryGroupingSize));
            } else {
              groups.push(integer);
            }

            while (groups.length > 0) {
              var integerGroup = groups.pop();
              result.push({
                type: 'integer',
                value: integerGroup
              });

              if (groups.length > 0) {
                result.push({
                  type: 'group',
                  value: groupSepSymbol
                });
              }
            }
          } else {
            result.push({
              type: 'integer',
              value: integer
            });
          } // #endregion


          if (fraction !== undefined) {
            result.push({
              type: 'decimal',
              value: symbols.decimal
            }, {
              type: 'fraction',
              value: fraction
            });
          }

          if ((notation === 'scientific' || notation === 'engineering') && isFinite(x)) {
            result.push({
              type: 'exponentSeparator',
              value: symbols.exponential
            });

            if (exponent < 0) {
              result.push({
                type: 'exponentMinusSign',
                value: symbols.minusSign
              });
              exponent = -exponent;
            }

            var exponentResult = (0, ToRawFixed_1.ToRawFixed)(exponent, 0, 0);
            result.push({
              type: 'exponentInteger',
              value: exponentResult.formattedString
            });
          }

          return result;
        }

        function getPatternForSign(pattern, sign) {
          if (pattern.indexOf(';') < 0) {
            pattern = "".concat(pattern, ";-").concat(pattern);
          }

          var _a = pattern.split(';'),
              zeroPattern = _a[0],
              negativePattern = _a[1];

          switch (sign) {
            case 0:
              return zeroPattern;

            case -1:
              return negativePattern;

            default:
              return negativePattern.indexOf('-') >= 0 ? negativePattern.replace(/-/g, '+') : "+".concat(zeroPattern);
          }
        } // Find the CLDR pattern for compact notation based on the magnitude of data and style.
        //
        // Example return value: "¤ {c:laki}000;¤{c:laki} -0" (`sw` locale):
        // - Notice the `{c:...}` token that wraps the compact literal.
        // - The consecutive zeros are normalized to single zero to match CLDR_NUMBER_PATTERN.
        //
        // Returning null means the compact display pattern cannot be found.


        function getCompactDisplayPattern(numberResult, pl, data, style, compactDisplay, currencyDisplay, numberingSystem) {
          var _a;

          var roundedNumber = numberResult.roundedNumber,
              sign = numberResult.sign,
              magnitude = numberResult.magnitude;
          var magnitudeKey = String(Math.pow(10, magnitude));
          var defaultNumberingSystem = data.numbers.nu[0];
          var pattern;

          if (style === 'currency' && currencyDisplay !== 'name') {
            var byNumberingSystem = data.numbers.currency;
            var currencyData = byNumberingSystem[numberingSystem] || byNumberingSystem[defaultNumberingSystem]; // NOTE: compact notation ignores currencySign!

            var compactPluralRules = (_a = currencyData.short) === null || _a === void 0 ? void 0 : _a[magnitudeKey];

            if (!compactPluralRules) {
              return null;
            }

            pattern = selectPlural(pl, roundedNumber, compactPluralRules);
          } else {
            var byNumberingSystem = data.numbers.decimal;
            var byCompactDisplay = byNumberingSystem[numberingSystem] || byNumberingSystem[defaultNumberingSystem];
            var compactPlaralRule = byCompactDisplay[compactDisplay][magnitudeKey];

            if (!compactPlaralRule) {
              return null;
            }

            pattern = selectPlural(pl, roundedNumber, compactPlaralRule);
          } // See https://unicode.org/reports/tr35/tr35-numbers.html#Compact_Number_Formats
          // > If the value is precisely “0”, either explicit or defaulted, then the normal number format
          // > pattern for that sort of object is supplied.


          if (pattern === '0') {
            return null;
          }

          pattern = getPatternForSign(pattern, sign) // Extract compact literal from the pattern
          .replace(/([^\s;\-\+\d¤]+)/g, '{c:$1}') // We replace one or more zeros with a single zero so it matches `CLDR_NUMBER_PATTERN`.
          .replace(/0+/, '0');
          return pattern;
        }

        function selectPlural(pl, x, rules) {
          return rules[pl.select(x)] || rules.other;
        } // #endregion ORIGINAL CODE


        module.exports;
        module.exports.__esModule;
        module.exports.default;
      }, () => ({
        './ToRawFixed': __cjsMetaURL$1,
        './digit-mapping.generated': __cjsMetaURL$2,
        '../regex.generated': __cjsMetaURL$3
      }));
    }
  };
});

System.register("chunks:///_virtual/FormatDateTime.js", ['./cjs-loader.mjs', './PartitionDateTimePattern.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.FormatDateTime = void 0;

        var PartitionDateTimePattern_1 = require("./PartitionDateTimePattern");
        /**
         * https://tc39.es/ecma402/#sec-formatdatetime
         * @param dtf DateTimeFormat
         * @param x
         */


        function FormatDateTime(dtf, x, implDetails) {
          var parts = (0, PartitionDateTimePattern_1.PartitionDateTimePattern)(dtf, x, implDetails);
          var result = '';

          for (var _i = 0, parts_1 = parts; _i < parts_1.length; _i++) {
            var part = parts_1[_i];
            result += part.value;
          }

          return result;
        }

        exports.FormatDateTime = FormatDateTime; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.FormatDateTime;
      }, () => ({
        './PartitionDateTimePattern': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/FormatDateTimePattern.js", ['./cjs-loader.mjs', './index16.js', './utils.js', './ToLocalTime.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.FormatDateTimePattern = void 0;

        var ecma402_abstract_1 = require("@formatjs/ecma402-abstract");

        var utils_1 = require("./utils");

        var ToLocalTime_1 = require("./ToLocalTime");

        function pad(n) {
          if (n < 10) {
            return "0".concat(n);
          }

          return String(n);
        }

        function offsetToGmtString(gmtFormat, hourFormat, offsetInMs, style) {
          var offsetInMinutes = Math.floor(offsetInMs / 60000);
          var mins = Math.abs(offsetInMinutes) % 60;
          var hours = Math.floor(Math.abs(offsetInMinutes) / 60);

          var _a = hourFormat.split(';'),
              positivePattern = _a[0],
              negativePattern = _a[1];

          var offsetStr = '';
          var pattern = offsetInMs < 0 ? negativePattern : positivePattern;

          if (style === 'long') {
            offsetStr = pattern.replace('HH', pad(hours)).replace('H', String(hours)).replace('mm', pad(mins)).replace('m', String(mins));
          } else if (mins || hours) {
            if (!mins) {
              pattern = pattern.replace(/:?m+/, '');
            }

            offsetStr = pattern.replace(/H+/, String(hours)).replace(/m+/, String(mins));
          }

          return gmtFormat.replace('{0}', offsetStr);
        }
        /**
         * https://tc39.es/ecma402/#sec-partitiondatetimepattern
         * @param dtf
         * @param x
         */


        function FormatDateTimePattern(dtf, patternParts, x, _a) {
          var getInternalSlots = _a.getInternalSlots,
              localeData = _a.localeData,
              getDefaultTimeZone = _a.getDefaultTimeZone,
              tzData = _a.tzData;
          x = (0, ecma402_abstract_1.TimeClip)(x);
          /** IMPL START */

          var internalSlots = getInternalSlots(dtf);
          var dataLocale = internalSlots.dataLocale;
          var dataLocaleData = localeData[dataLocale];
          /** IMPL END */

          var locale = internalSlots.locale;
          var nfOptions = Object.create(null);
          nfOptions.useGrouping = false;
          var nf = new Intl.NumberFormat(locale, nfOptions);
          var nf2Options = Object.create(null);
          nf2Options.minimumIntegerDigits = 2;
          nf2Options.useGrouping = false;
          var nf2 = new Intl.NumberFormat(locale, nf2Options);
          var fractionalSecondDigits = internalSlots.fractionalSecondDigits;
          var nf3;

          if (fractionalSecondDigits !== undefined) {
            var nf3Options = Object.create(null);
            nf3Options.minimumIntegerDigits = fractionalSecondDigits;
            nf3Options.useGrouping = false;
            nf3 = new Intl.NumberFormat(locale, nf3Options);
          }

          var tm = (0, ToLocalTime_1.ToLocalTime)(x, // @ts-ignore
          internalSlots.calendar, internalSlots.timeZone, {
            tzData: tzData
          });
          var result = [];

          for (var _i = 0, patternParts_1 = patternParts; _i < patternParts_1.length; _i++) {
            var patternPart = patternParts_1[_i];
            var p = patternPart.type;

            if (p === 'literal') {
              result.push({
                type: 'literal',
                value: patternPart.value
              });
            } else if (p === 'fractionalSecondDigits') {
              var v = Math.floor(tm.millisecond * Math.pow(10, (fractionalSecondDigits || 0) - 3));
              result.push({
                // @ts-expect-error Spec is not there yet
                type: 'fractionalSecond',
                value: nf3.format(v)
              });
            } else if (p === 'dayPeriod') ;else if (utils_1.DATE_TIME_PROPS.indexOf(p) > -1) {
              var fv = '';
              var f = internalSlots[p]; // @ts-ignore

              var v = tm[p];

              if (p === 'year' && v <= 0) {
                v = 1 - v;
              }

              if (p === 'month') {
                v++;
              }

              var hourCycle = internalSlots.hourCycle;

              if (p === 'hour' && (hourCycle === 'h11' || hourCycle === 'h12')) {
                v = v % 12;

                if (v === 0 && hourCycle === 'h12') {
                  v = 12;
                }
              }

              if (p === 'hour' && hourCycle === 'h24') {
                if (v === 0) {
                  v = 24;
                }
              }

              if (f === 'numeric') {
                fv = nf.format(v);
              } else if (f === '2-digit') {
                fv = nf2.format(v);

                if (fv.length > 2) {
                  fv = fv.slice(fv.length - 2, fv.length);
                }
              } else if (f === 'narrow' || f === 'short' || f === 'long') {
                if (p === 'era') {
                  fv = dataLocaleData[p][f][v];
                } else if (p === 'timeZoneName') {
                  var timeZoneName = dataLocaleData.timeZoneName,
                      gmtFormat = dataLocaleData.gmtFormat,
                      hourFormat = dataLocaleData.hourFormat;
                  var timeZone = internalSlots.timeZone || getDefaultTimeZone();
                  var timeZoneData = timeZoneName[timeZone];

                  if (timeZoneData && timeZoneData[f]) {
                    fv = timeZoneData[f][+tm.inDST];
                  } else {
                    // Fallback to gmtFormat
                    fv = offsetToGmtString(gmtFormat, hourFormat, tm.timeZoneOffset, f);
                  }
                } else if (p === 'month') {
                  fv = dataLocaleData.month[f][v - 1];
                } else {
                  fv = dataLocaleData[p][f][v];
                }
              }

              result.push({
                type: p,
                value: fv
              });
            } else if (p === 'ampm') {
              var v = tm.hour;
              var fv = void 0;

              if (v > 11) {
                fv = dataLocaleData.pm;
              } else {
                fv = dataLocaleData.am;
              }

              result.push({
                type: 'dayPeriod',
                value: fv
              });
            } else if (p === 'relatedYear') {
              var v = tm.relatedYear; // @ts-ignore

              var fv = nf.format(v);
              result.push({
                // @ts-ignore TODO: Fix TS type
                type: 'relatedYear',
                value: fv
              });
            } else if (p === 'yearName') {
              var v = tm.yearName; // @ts-ignore

              var fv = nf.format(v);
              result.push({
                // @ts-ignore TODO: Fix TS type
                type: 'yearName',
                value: fv
              });
            }
          }

          return result;
        }

        exports.FormatDateTimePattern = FormatDateTimePattern; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.FormatDateTimePattern;
      }, () => ({
        '@formatjs/ecma402-abstract': __cjsMetaURL$1,
        './utils': __cjsMetaURL$2,
        './ToLocalTime': __cjsMetaURL$3
      }));
    }
  };
});

System.register("chunks:///_virtual/FormatDateTimeRange.js", ['./cjs-loader.mjs', './PartitionDateTimeRangePattern.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.FormatDateTimeRange = void 0;

        var PartitionDateTimeRangePattern_1 = require("./PartitionDateTimeRangePattern");

        function FormatDateTimeRange(dtf, x, y, implDetails) {
          var parts = (0, PartitionDateTimeRangePattern_1.PartitionDateTimeRangePattern)(dtf, x, y, implDetails);
          var result = '';

          for (var _i = 0, parts_1 = parts; _i < parts_1.length; _i++) {
            var part = parts_1[_i];
            result += part.value;
          }

          return result;
        }

        exports.FormatDateTimeRange = FormatDateTimeRange; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.FormatDateTimeRange;
      }, () => ({
        './PartitionDateTimeRangePattern': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/FormatDateTimeRangeToParts.js", ['./cjs-loader.mjs', './PartitionDateTimeRangePattern.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.FormatDateTimeRangeToParts = void 0;

        var PartitionDateTimeRangePattern_1 = require("./PartitionDateTimeRangePattern");

        function FormatDateTimeRangeToParts(dtf, x, y, implDetails) {
          var parts = (0, PartitionDateTimeRangePattern_1.PartitionDateTimeRangePattern)(dtf, x, y, implDetails);
          var result = new Array(0);

          for (var _i = 0, parts_1 = parts; _i < parts_1.length; _i++) {
            var part = parts_1[_i];
            result.push({
              type: part.type,
              value: part.value,
              source: part.source
            });
          }

          return result;
        }

        exports.FormatDateTimeRangeToParts = FormatDateTimeRangeToParts; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.FormatDateTimeRangeToParts;
      }, () => ({
        './PartitionDateTimeRangePattern': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/FormatDateTimeToParts.js", ['./cjs-loader.mjs', './PartitionDateTimePattern.js', './index16.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.FormatDateTimeToParts = void 0;

        var PartitionDateTimePattern_1 = require("./PartitionDateTimePattern");

        var ecma402_abstract_1 = require("@formatjs/ecma402-abstract");
        /**
         * https://tc39.es/ecma402/#sec-formatdatetimetoparts
         *
         * @param dtf
         * @param x
         * @param implDetails
         */


        function FormatDateTimeToParts(dtf, x, implDetails) {
          var parts = (0, PartitionDateTimePattern_1.PartitionDateTimePattern)(dtf, x, implDetails);
          var result = (0, ecma402_abstract_1.ArrayCreate)(0);

          for (var _i = 0, parts_1 = parts; _i < parts_1.length; _i++) {
            var part = parts_1[_i];
            result.push({
              type: part.type,
              value: part.value
            });
          }

          return result;
        }

        exports.FormatDateTimeToParts = FormatDateTimeToParts; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.FormatDateTimeToParts;
      }, () => ({
        './PartitionDateTimePattern': __cjsMetaURL$1,
        '@formatjs/ecma402-abstract': __cjsMetaURL$2
      }));
    }
  };
});

System.register("chunks:///_virtual/FormatNumericToParts.js", ['./cjs-loader.mjs', './PartitionNumberPattern.js', './262.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.FormatNumericToParts = void 0;

        var PartitionNumberPattern_1 = require("./PartitionNumberPattern");

        var _262_1 = require("../262");

        function FormatNumericToParts(nf, x, implDetails) {
          var parts = (0, PartitionNumberPattern_1.PartitionNumberPattern)(nf, x, implDetails);
          var result = (0, _262_1.ArrayCreate)(0);

          for (var _i = 0, parts_1 = parts; _i < parts_1.length; _i++) {
            var part = parts_1[_i];
            result.push({
              type: part.type,
              value: part.value
            });
          }

          return result;
        }

        exports.FormatNumericToParts = FormatNumericToParts; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.FormatNumericToParts;
      }, () => ({
        './PartitionNumberPattern': __cjsMetaURL$1,
        '../262': __cjsMetaURL$2
      }));
    }
  };
});

System.register("chunks:///_virtual/FormatNumericToParts2.js", ['./cjs-loader.mjs', './PartitionNumberPattern2.js', './2622.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.FormatNumericToParts = void 0;

        var PartitionNumberPattern_1 = require("./PartitionNumberPattern");

        var _262_1 = require("../262");

        function FormatNumericToParts(nf, x, implDetails) {
          var parts = (0, PartitionNumberPattern_1.PartitionNumberPattern)(nf, x, implDetails);
          var result = (0, _262_1.ArrayCreate)(0);

          for (var _i = 0, parts_1 = parts; _i < parts_1.length; _i++) {
            var part = parts_1[_i];
            result.push({
              type: part.type,
              value: part.value
            });
          }

          return result;
        }

        exports.FormatNumericToParts = FormatNumericToParts; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.FormatNumericToParts;
      }, () => ({
        './PartitionNumberPattern': __cjsMetaURL$1,
        '../262': __cjsMetaURL$2
      }));
    }
  };
});

System.register("chunks:///_virtual/FormatNumericToParts3.js", ['./cjs-loader.mjs', './PartitionNumberPattern3.js', './2623.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.FormatNumericToParts = void 0;

        var PartitionNumberPattern_1 = require("./PartitionNumberPattern");

        var _262_1 = require("../262");

        function FormatNumericToParts(nf, x, implDetails) {
          var parts = (0, PartitionNumberPattern_1.PartitionNumberPattern)(nf, x, implDetails);
          var result = (0, _262_1.ArrayCreate)(0);

          for (var _i = 0, parts_1 = parts; _i < parts_1.length; _i++) {
            var part = parts_1[_i];
            result.push({
              type: part.type,
              value: part.value
            });
          }

          return result;
        }

        exports.FormatNumericToParts = FormatNumericToParts; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.FormatNumericToParts;
      }, () => ({
        './PartitionNumberPattern': __cjsMetaURL$1,
        '../262': __cjsMetaURL$2
      }));
    }
  };
});

System.register("chunks:///_virtual/FormatNumericToParts4.js", ['./cjs-loader.mjs', './PartitionNumberPattern4.js', './2624.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.FormatNumericToParts = void 0;

        var PartitionNumberPattern_1 = require("./PartitionNumberPattern");

        var _262_1 = require("../262");

        function FormatNumericToParts(nf, x, implDetails) {
          var parts = (0, PartitionNumberPattern_1.PartitionNumberPattern)(nf, x, implDetails);
          var result = (0, _262_1.ArrayCreate)(0);

          for (var _i = 0, parts_1 = parts; _i < parts_1.length; _i++) {
            var part = parts_1[_i];
            result.push({
              type: part.type,
              value: part.value
            });
          }

          return result;
        }

        exports.FormatNumericToParts = FormatNumericToParts; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.FormatNumericToParts;
      }, () => ({
        './PartitionNumberPattern': __cjsMetaURL$1,
        '../262': __cjsMetaURL$2
      }));
    }
  };
});

System.register("chunks:///_virtual/FormatNumericToParts5.js", ['./cjs-loader.mjs', './PartitionNumberPattern5.js', './2625.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.FormatNumericToParts = void 0;

        var PartitionNumberPattern_1 = require("./PartitionNumberPattern");

        var _262_1 = require("../262");

        function FormatNumericToParts(nf, x, implDetails) {
          var parts = (0, PartitionNumberPattern_1.PartitionNumberPattern)(nf, x, implDetails);
          var result = (0, _262_1.ArrayCreate)(0);

          for (var _i = 0, parts_1 = parts; _i < parts_1.length; _i++) {
            var part = parts_1[_i];
            result.push({
              type: part.type,
              value: part.value
            });
          }

          return result;
        }

        exports.FormatNumericToParts = FormatNumericToParts; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.FormatNumericToParts;
      }, () => ({
        './PartitionNumberPattern': __cjsMetaURL$1,
        '../262': __cjsMetaURL$2
      }));
    }
  };
});

System.register("chunks:///_virtual/FormatNumericToParts6.js", ['./cjs-loader.mjs', './PartitionNumberPattern6.js', './2626.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.FormatNumericToParts = void 0;

        var PartitionNumberPattern_1 = require("./PartitionNumberPattern");

        var _262_1 = require("../262");

        function FormatNumericToParts(nf, x, implDetails) {
          var parts = (0, PartitionNumberPattern_1.PartitionNumberPattern)(nf, x, implDetails);
          var result = (0, _262_1.ArrayCreate)(0);

          for (var _i = 0, parts_1 = parts; _i < parts_1.length; _i++) {
            var part = parts_1[_i];
            result.push({
              type: part.type,
              value: part.value
            });
          }

          return result;
        }

        exports.FormatNumericToParts = FormatNumericToParts; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.FormatNumericToParts;
      }, () => ({
        './PartitionNumberPattern': __cjsMetaURL$1,
        '../262': __cjsMetaURL$2
      }));
    }
  };
});

System.register("chunks:///_virtual/FormatNumericToParts7.js", ['./cjs-loader.mjs', './PartitionNumberPattern7.js', './2627.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.FormatNumericToParts = void 0;

        var PartitionNumberPattern_1 = require("./PartitionNumberPattern");

        var _262_1 = require("../262");

        function FormatNumericToParts(nf, x, implDetails) {
          var parts = (0, PartitionNumberPattern_1.PartitionNumberPattern)(nf, x, implDetails);
          var result = (0, _262_1.ArrayCreate)(0);

          for (var _i = 0, parts_1 = parts; _i < parts_1.length; _i++) {
            var part = parts_1[_i];
            result.push({
              type: part.type,
              value: part.value
            });
          }

          return result;
        }

        exports.FormatNumericToParts = FormatNumericToParts; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.FormatNumericToParts;
      }, () => ({
        './PartitionNumberPattern': __cjsMetaURL$1,
        '../262': __cjsMetaURL$2
      }));
    }
  };
});

System.register("chunks:///_virtual/FormatNumericToString.js", ['./cjs-loader.mjs', './262.js', './ToRawPrecision.js', './utils2.js', './ToRawFixed.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3, __cjsMetaURL$4;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$4 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.FormatNumericToString = void 0;

        var _262_1 = require("../262");

        var ToRawPrecision_1 = require("./ToRawPrecision");

        var utils_1 = require("../utils");

        var ToRawFixed_1 = require("./ToRawFixed");
        /**
         * https://tc39.es/ecma402/#sec-formatnumberstring
         */


        function FormatNumericToString(intlObject, x) {
          var isNegative = x < 0 || (0, _262_1.SameValue)(x, -0);

          if (isNegative) {
            x = -x;
          }

          var result;
          var rourndingType = intlObject.roundingType;

          switch (rourndingType) {
            case 'significantDigits':
              result = (0, ToRawPrecision_1.ToRawPrecision)(x, intlObject.minimumSignificantDigits, intlObject.maximumSignificantDigits);
              break;

            case 'fractionDigits':
              result = (0, ToRawFixed_1.ToRawFixed)(x, intlObject.minimumFractionDigits, intlObject.maximumFractionDigits);
              break;

            default:
              result = (0, ToRawPrecision_1.ToRawPrecision)(x, 1, 2);

              if (result.integerDigitsCount > 1) {
                result = (0, ToRawFixed_1.ToRawFixed)(x, 0, 0);
              }

              break;
          }

          x = result.roundedNumber;
          var string = result.formattedString;
          var int = result.integerDigitsCount;
          var minInteger = intlObject.minimumIntegerDigits;

          if (int < minInteger) {
            var forwardZeros = (0, utils_1.repeat)('0', minInteger - int);
            string = forwardZeros + string;
          }

          if (isNegative) {
            x = -x;
          }

          return {
            roundedNumber: x,
            formattedString: string
          };
        }

        exports.FormatNumericToString = FormatNumericToString; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.FormatNumericToString;
      }, () => ({
        '../262': __cjsMetaURL$1,
        './ToRawPrecision': __cjsMetaURL$2,
        '../utils': __cjsMetaURL$3,
        './ToRawFixed': __cjsMetaURL$4
      }));
    }
  };
});

System.register("chunks:///_virtual/FormatNumericToString2.js", ['./cjs-loader.mjs', './2622.js', './ToRawPrecision2.js', './utils3.js', './ToRawFixed2.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3, __cjsMetaURL$4;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$4 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.FormatNumericToString = void 0;

        var _262_1 = require("../262");

        var ToRawPrecision_1 = require("./ToRawPrecision");

        var utils_1 = require("../utils");

        var ToRawFixed_1 = require("./ToRawFixed");
        /**
         * https://tc39.es/ecma402/#sec-formatnumberstring
         */


        function FormatNumericToString(intlObject, x) {
          var isNegative = x < 0 || (0, _262_1.SameValue)(x, -0);

          if (isNegative) {
            x = -x;
          }

          var result;
          var rourndingType = intlObject.roundingType;

          switch (rourndingType) {
            case 'significantDigits':
              result = (0, ToRawPrecision_1.ToRawPrecision)(x, intlObject.minimumSignificantDigits, intlObject.maximumSignificantDigits);
              break;

            case 'fractionDigits':
              result = (0, ToRawFixed_1.ToRawFixed)(x, intlObject.minimumFractionDigits, intlObject.maximumFractionDigits);
              break;

            default:
              result = (0, ToRawPrecision_1.ToRawPrecision)(x, 1, 2);

              if (result.integerDigitsCount > 1) {
                result = (0, ToRawFixed_1.ToRawFixed)(x, 0, 0);
              }

              break;
          }

          x = result.roundedNumber;
          var string = result.formattedString;
          var int = result.integerDigitsCount;
          var minInteger = intlObject.minimumIntegerDigits;

          if (int < minInteger) {
            var forwardZeros = (0, utils_1.repeat)('0', minInteger - int);
            string = forwardZeros + string;
          }

          if (isNegative) {
            x = -x;
          }

          return {
            roundedNumber: x,
            formattedString: string
          };
        }

        exports.FormatNumericToString = FormatNumericToString; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.FormatNumericToString;
      }, () => ({
        '../262': __cjsMetaURL$1,
        './ToRawPrecision': __cjsMetaURL$2,
        '../utils': __cjsMetaURL$3,
        './ToRawFixed': __cjsMetaURL$4
      }));
    }
  };
});

System.register("chunks:///_virtual/FormatNumericToString3.js", ['./cjs-loader.mjs', './2623.js', './ToRawPrecision3.js', './utils4.js', './ToRawFixed3.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3, __cjsMetaURL$4;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$4 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.FormatNumericToString = void 0;

        var _262_1 = require("../262");

        var ToRawPrecision_1 = require("./ToRawPrecision");

        var utils_1 = require("../utils");

        var ToRawFixed_1 = require("./ToRawFixed");
        /**
         * https://tc39.es/ecma402/#sec-formatnumberstring
         */


        function FormatNumericToString(intlObject, x) {
          var isNegative = x < 0 || (0, _262_1.SameValue)(x, -0);

          if (isNegative) {
            x = -x;
          }

          var result;
          var rourndingType = intlObject.roundingType;

          switch (rourndingType) {
            case 'significantDigits':
              result = (0, ToRawPrecision_1.ToRawPrecision)(x, intlObject.minimumSignificantDigits, intlObject.maximumSignificantDigits);
              break;

            case 'fractionDigits':
              result = (0, ToRawFixed_1.ToRawFixed)(x, intlObject.minimumFractionDigits, intlObject.maximumFractionDigits);
              break;

            default:
              result = (0, ToRawPrecision_1.ToRawPrecision)(x, 1, 2);

              if (result.integerDigitsCount > 1) {
                result = (0, ToRawFixed_1.ToRawFixed)(x, 0, 0);
              }

              break;
          }

          x = result.roundedNumber;
          var string = result.formattedString;
          var int = result.integerDigitsCount;
          var minInteger = intlObject.minimumIntegerDigits;

          if (int < minInteger) {
            var forwardZeros = (0, utils_1.repeat)('0', minInteger - int);
            string = forwardZeros + string;
          }

          if (isNegative) {
            x = -x;
          }

          return {
            roundedNumber: x,
            formattedString: string
          };
        }

        exports.FormatNumericToString = FormatNumericToString; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.FormatNumericToString;
      }, () => ({
        '../262': __cjsMetaURL$1,
        './ToRawPrecision': __cjsMetaURL$2,
        '../utils': __cjsMetaURL$3,
        './ToRawFixed': __cjsMetaURL$4
      }));
    }
  };
});

System.register("chunks:///_virtual/FormatNumericToString4.js", ['./cjs-loader.mjs', './2624.js', './ToRawPrecision4.js', './utils5.js', './ToRawFixed4.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3, __cjsMetaURL$4;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$4 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.FormatNumericToString = void 0;

        var _262_1 = require("../262");

        var ToRawPrecision_1 = require("./ToRawPrecision");

        var utils_1 = require("../utils");

        var ToRawFixed_1 = require("./ToRawFixed");
        /**
         * https://tc39.es/ecma402/#sec-formatnumberstring
         */


        function FormatNumericToString(intlObject, x) {
          var isNegative = x < 0 || (0, _262_1.SameValue)(x, -0);

          if (isNegative) {
            x = -x;
          }

          var result;
          var rourndingType = intlObject.roundingType;

          switch (rourndingType) {
            case 'significantDigits':
              result = (0, ToRawPrecision_1.ToRawPrecision)(x, intlObject.minimumSignificantDigits, intlObject.maximumSignificantDigits);
              break;

            case 'fractionDigits':
              result = (0, ToRawFixed_1.ToRawFixed)(x, intlObject.minimumFractionDigits, intlObject.maximumFractionDigits);
              break;

            default:
              result = (0, ToRawPrecision_1.ToRawPrecision)(x, 1, 2);

              if (result.integerDigitsCount > 1) {
                result = (0, ToRawFixed_1.ToRawFixed)(x, 0, 0);
              }

              break;
          }

          x = result.roundedNumber;
          var string = result.formattedString;
          var int = result.integerDigitsCount;
          var minInteger = intlObject.minimumIntegerDigits;

          if (int < minInteger) {
            var forwardZeros = (0, utils_1.repeat)('0', minInteger - int);
            string = forwardZeros + string;
          }

          if (isNegative) {
            x = -x;
          }

          return {
            roundedNumber: x,
            formattedString: string
          };
        }

        exports.FormatNumericToString = FormatNumericToString; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.FormatNumericToString;
      }, () => ({
        '../262': __cjsMetaURL$1,
        './ToRawPrecision': __cjsMetaURL$2,
        '../utils': __cjsMetaURL$3,
        './ToRawFixed': __cjsMetaURL$4
      }));
    }
  };
});

System.register("chunks:///_virtual/FormatNumericToString5.js", ['./cjs-loader.mjs', './2625.js', './ToRawPrecision5.js', './utils6.js', './ToRawFixed5.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3, __cjsMetaURL$4;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$4 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.FormatNumericToString = void 0;

        var _262_1 = require("../262");

        var ToRawPrecision_1 = require("./ToRawPrecision");

        var utils_1 = require("../utils");

        var ToRawFixed_1 = require("./ToRawFixed");
        /**
         * https://tc39.es/ecma402/#sec-formatnumberstring
         */


        function FormatNumericToString(intlObject, x) {
          var isNegative = x < 0 || (0, _262_1.SameValue)(x, -0);

          if (isNegative) {
            x = -x;
          }

          var result;
          var rourndingType = intlObject.roundingType;

          switch (rourndingType) {
            case 'significantDigits':
              result = (0, ToRawPrecision_1.ToRawPrecision)(x, intlObject.minimumSignificantDigits, intlObject.maximumSignificantDigits);
              break;

            case 'fractionDigits':
              result = (0, ToRawFixed_1.ToRawFixed)(x, intlObject.minimumFractionDigits, intlObject.maximumFractionDigits);
              break;

            default:
              result = (0, ToRawPrecision_1.ToRawPrecision)(x, 1, 2);

              if (result.integerDigitsCount > 1) {
                result = (0, ToRawFixed_1.ToRawFixed)(x, 0, 0);
              }

              break;
          }

          x = result.roundedNumber;
          var string = result.formattedString;
          var int = result.integerDigitsCount;
          var minInteger = intlObject.minimumIntegerDigits;

          if (int < minInteger) {
            var forwardZeros = (0, utils_1.repeat)('0', minInteger - int);
            string = forwardZeros + string;
          }

          if (isNegative) {
            x = -x;
          }

          return {
            roundedNumber: x,
            formattedString: string
          };
        }

        exports.FormatNumericToString = FormatNumericToString; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.FormatNumericToString;
      }, () => ({
        '../262': __cjsMetaURL$1,
        './ToRawPrecision': __cjsMetaURL$2,
        '../utils': __cjsMetaURL$3,
        './ToRawFixed': __cjsMetaURL$4
      }));
    }
  };
});

System.register("chunks:///_virtual/FormatNumericToString6.js", ['./cjs-loader.mjs', './2626.js', './ToRawPrecision6.js', './utils8.js', './ToRawFixed6.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3, __cjsMetaURL$4;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$4 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.FormatNumericToString = void 0;

        var _262_1 = require("../262");

        var ToRawPrecision_1 = require("./ToRawPrecision");

        var utils_1 = require("../utils");

        var ToRawFixed_1 = require("./ToRawFixed");
        /**
         * https://tc39.es/ecma402/#sec-formatnumberstring
         */


        function FormatNumericToString(intlObject, x) {
          var isNegative = x < 0 || (0, _262_1.SameValue)(x, -0);

          if (isNegative) {
            x = -x;
          }

          var result;
          var rourndingType = intlObject.roundingType;

          switch (rourndingType) {
            case 'significantDigits':
              result = (0, ToRawPrecision_1.ToRawPrecision)(x, intlObject.minimumSignificantDigits, intlObject.maximumSignificantDigits);
              break;

            case 'fractionDigits':
              result = (0, ToRawFixed_1.ToRawFixed)(x, intlObject.minimumFractionDigits, intlObject.maximumFractionDigits);
              break;

            default:
              result = (0, ToRawPrecision_1.ToRawPrecision)(x, 1, 2);

              if (result.integerDigitsCount > 1) {
                result = (0, ToRawFixed_1.ToRawFixed)(x, 0, 0);
              }

              break;
          }

          x = result.roundedNumber;
          var string = result.formattedString;
          var int = result.integerDigitsCount;
          var minInteger = intlObject.minimumIntegerDigits;

          if (int < minInteger) {
            var forwardZeros = (0, utils_1.repeat)('0', minInteger - int);
            string = forwardZeros + string;
          }

          if (isNegative) {
            x = -x;
          }

          return {
            roundedNumber: x,
            formattedString: string
          };
        }

        exports.FormatNumericToString = FormatNumericToString; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.FormatNumericToString;
      }, () => ({
        '../262': __cjsMetaURL$1,
        './ToRawPrecision': __cjsMetaURL$2,
        '../utils': __cjsMetaURL$3,
        './ToRawFixed': __cjsMetaURL$4
      }));
    }
  };
});

System.register("chunks:///_virtual/FormatNumericToString7.js", ['./cjs-loader.mjs', './2627.js', './ToRawPrecision7.js', './utils9.js', './ToRawFixed7.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3, __cjsMetaURL$4;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$4 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.FormatNumericToString = void 0;

        var _262_1 = require("../262");

        var ToRawPrecision_1 = require("./ToRawPrecision");

        var utils_1 = require("../utils");

        var ToRawFixed_1 = require("./ToRawFixed");
        /**
         * https://tc39.es/ecma402/#sec-formatnumberstring
         */


        function FormatNumericToString(intlObject, x) {
          var isNegative = x < 0 || (0, _262_1.SameValue)(x, -0);

          if (isNegative) {
            x = -x;
          }

          var result;
          var rourndingType = intlObject.roundingType;

          switch (rourndingType) {
            case 'significantDigits':
              result = (0, ToRawPrecision_1.ToRawPrecision)(x, intlObject.minimumSignificantDigits, intlObject.maximumSignificantDigits);
              break;

            case 'fractionDigits':
              result = (0, ToRawFixed_1.ToRawFixed)(x, intlObject.minimumFractionDigits, intlObject.maximumFractionDigits);
              break;

            default:
              result = (0, ToRawPrecision_1.ToRawPrecision)(x, 1, 2);

              if (result.integerDigitsCount > 1) {
                result = (0, ToRawFixed_1.ToRawFixed)(x, 0, 0);
              }

              break;
          }

          x = result.roundedNumber;
          var string = result.formattedString;
          var int = result.integerDigitsCount;
          var minInteger = intlObject.minimumIntegerDigits;

          if (int < minInteger) {
            var forwardZeros = (0, utils_1.repeat)('0', minInteger - int);
            string = forwardZeros + string;
          }

          if (isNegative) {
            x = -x;
          }

          return {
            roundedNumber: x,
            formattedString: string
          };
        }

        exports.FormatNumericToString = FormatNumericToString; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.FormatNumericToString;
      }, () => ({
        '../262': __cjsMetaURL$1,
        './ToRawPrecision': __cjsMetaURL$2,
        '../utils': __cjsMetaURL$3,
        './ToRawFixed': __cjsMetaURL$4
      }));
    }
  };
});

System.register("chunks:///_virtual/get_internal_slots.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        // eslint-disable-next-line import/no-cycle
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        var internalSlotMap = new WeakMap();

        function getInternalSlots(x) {
          var internalSlots = internalSlotMap.get(x);

          if (!internalSlots) {
            internalSlots = Object.create(null);
            internalSlotMap.set(x, internalSlots);
          }

          return internalSlots;
        }

        exports.default = getInternalSlots; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.default;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/get_internal_slots2.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        var internalSlotMap = new WeakMap();

        function getInternalSlots(x) {
          var internalSlots = internalSlotMap.get(x);

          if (!internalSlots) {
            internalSlots = Object.create(null);
            internalSlotMap.set(x, internalSlots);
          }

          return internalSlots;
        }

        exports.default = getInternalSlots; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.default;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/get_internal_slots3.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        // eslint-disable-next-line import/no-cycle
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        var internalSlotMap = new WeakMap();

        function getInternalSlots(x) {
          var internalSlots = internalSlotMap.get(x);

          if (!internalSlots) {
            internalSlots = Object.create(null);
            internalSlotMap.set(x, internalSlots);
          }

          return internalSlots;
        }

        exports.default = getInternalSlots; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.default;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/get_internal_slots4.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        // eslint-disable-next-line import/no-cycle
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        var internalSlotMap = new WeakMap();

        function getInternalSlots(x) {
          var internalSlots = internalSlotMap.get(x);

          if (!internalSlots) {
            internalSlots = Object.create(null);
            internalSlotMap.set(x, internalSlots);
          }

          return internalSlots;
        }

        exports.default = getInternalSlots; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.default;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/get_internal_slots5.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        var internalSlotMap = new WeakMap();

        function getInternalSlots(x) {
          var internalSlots = internalSlotMap.get(x);

          if (!internalSlots) {
            internalSlots = Object.create(null);
            internalSlotMap.set(x, internalSlots);
          }

          return internalSlots;
        }

        exports.default = getInternalSlots; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.default;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/GetNumberOption.js", ['./cjs-loader.mjs', './DefaultNumberOption.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        /**
         * https://tc39.es/ecma402/#sec-getnumberoption
         * @param options
         * @param property
         * @param min
         * @param max
         * @param fallback
         */
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.GetNumberOption = void 0;

        var DefaultNumberOption_1 = require("./DefaultNumberOption");

        function GetNumberOption(options, property, minimum, maximum, fallback) {
          var val = options[property]; // @ts-expect-error

          return (0, DefaultNumberOption_1.DefaultNumberOption)(val, minimum, maximum, fallback);
        }

        exports.GetNumberOption = GetNumberOption; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.GetNumberOption;
      }, () => ({
        './DefaultNumberOption': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/GetNumberOption2.js", ['./cjs-loader.mjs', './DefaultNumberOption2.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        /**
         * https://tc39.es/ecma402/#sec-getnumberoption
         * @param options
         * @param property
         * @param min
         * @param max
         * @param fallback
         */
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.GetNumberOption = void 0;

        var DefaultNumberOption_1 = require("./DefaultNumberOption");

        function GetNumberOption(options, property, minimum, maximum, fallback) {
          var val = options[property]; // @ts-expect-error

          return (0, DefaultNumberOption_1.DefaultNumberOption)(val, minimum, maximum, fallback);
        }

        exports.GetNumberOption = GetNumberOption; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.GetNumberOption;
      }, () => ({
        './DefaultNumberOption': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/GetNumberOption3.js", ['./cjs-loader.mjs', './DefaultNumberOption3.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        /**
         * https://tc39.es/ecma402/#sec-getnumberoption
         * @param options
         * @param property
         * @param min
         * @param max
         * @param fallback
         */
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.GetNumberOption = void 0;

        var DefaultNumberOption_1 = require("./DefaultNumberOption");

        function GetNumberOption(options, property, minimum, maximum, fallback) {
          var val = options[property]; // @ts-expect-error

          return (0, DefaultNumberOption_1.DefaultNumberOption)(val, minimum, maximum, fallback);
        }

        exports.GetNumberOption = GetNumberOption; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.GetNumberOption;
      }, () => ({
        './DefaultNumberOption': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/GetNumberOption4.js", ['./cjs-loader.mjs', './DefaultNumberOption4.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        /**
         * https://tc39.es/ecma402/#sec-getnumberoption
         * @param options
         * @param property
         * @param min
         * @param max
         * @param fallback
         */
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.GetNumberOption = void 0;

        var DefaultNumberOption_1 = require("./DefaultNumberOption");

        function GetNumberOption(options, property, minimum, maximum, fallback) {
          var val = options[property]; // @ts-expect-error

          return (0, DefaultNumberOption_1.DefaultNumberOption)(val, minimum, maximum, fallback);
        }

        exports.GetNumberOption = GetNumberOption; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.GetNumberOption;
      }, () => ({
        './DefaultNumberOption': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/GetNumberOption5.js", ['./cjs-loader.mjs', './DefaultNumberOption5.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        /**
         * https://tc39.es/ecma402/#sec-getnumberoption
         * @param options
         * @param property
         * @param min
         * @param max
         * @param fallback
         */
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.GetNumberOption = void 0;

        var DefaultNumberOption_1 = require("./DefaultNumberOption");

        function GetNumberOption(options, property, minimum, maximum, fallback) {
          var val = options[property]; // @ts-expect-error

          return (0, DefaultNumberOption_1.DefaultNumberOption)(val, minimum, maximum, fallback);
        }

        exports.GetNumberOption = GetNumberOption; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.GetNumberOption;
      }, () => ({
        './DefaultNumberOption': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/GetNumberOption6.js", ['./cjs-loader.mjs', './DefaultNumberOption6.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        /**
         * https://tc39.es/ecma402/#sec-getnumberoption
         * @param options
         * @param property
         * @param min
         * @param max
         * @param fallback
         */
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.GetNumberOption = void 0;

        var DefaultNumberOption_1 = require("./DefaultNumberOption");

        function GetNumberOption(options, property, minimum, maximum, fallback) {
          var val = options[property]; // @ts-expect-error

          return (0, DefaultNumberOption_1.DefaultNumberOption)(val, minimum, maximum, fallback);
        }

        exports.GetNumberOption = GetNumberOption; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.GetNumberOption;
      }, () => ({
        './DefaultNumberOption': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/GetNumberOption7.js", ['./cjs-loader.mjs', './DefaultNumberOption7.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        /**
         * https://tc39.es/ecma402/#sec-getnumberoption
         * @param options
         * @param property
         * @param min
         * @param max
         * @param fallback
         */
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.GetNumberOption = void 0;

        var DefaultNumberOption_1 = require("./DefaultNumberOption");

        function GetNumberOption(options, property, minimum, maximum, fallback) {
          var val = options[property]; // @ts-expect-error

          return (0, DefaultNumberOption_1.DefaultNumberOption)(val, minimum, maximum, fallback);
        }

        exports.GetNumberOption = GetNumberOption; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.GetNumberOption;
      }, () => ({
        './DefaultNumberOption': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/GetOperands.js", ['./cjs-loader.mjs', './index12.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.GetOperands = void 0;

        var ecma402_abstract_1 = require("@formatjs/ecma402-abstract");
        /**
         * http://ecma-international.org/ecma-402/7.0/index.html#sec-getoperands
         * @param s
         */


        function GetOperands(s) {
          (0, ecma402_abstract_1.invariant)(typeof s === 'string', "GetOperands should have been called with a string");
          var n = (0, ecma402_abstract_1.ToNumber)(s);
          (0, ecma402_abstract_1.invariant)(isFinite(n), 'n should be finite');
          var dp = s.indexOf('.');
          var iv;
          var f;
          var v;
          var fv = '';

          if (dp === -1) {
            iv = n;
            f = 0;
            v = 0;
          } else {
            iv = s.slice(0, dp);
            fv = s.slice(dp, s.length);
            f = (0, ecma402_abstract_1.ToNumber)(fv);
            v = fv.length;
          }

          var i = Math.abs((0, ecma402_abstract_1.ToNumber)(iv));
          var w;
          var t;

          if (f !== 0) {
            var ft = fv.replace(/0+$/, '');
            w = ft.length;
            t = (0, ecma402_abstract_1.ToNumber)(ft);
          } else {
            w = 0;
            t = 0;
          }

          return {
            Number: n,
            IntegerDigits: i,
            NumberOfFractionDigits: v,
            NumberOfFractionDigitsWithoutTrailing: w,
            FractionDigits: f,
            FractionDigitsWithoutTrailing: t
          };
        }

        exports.GetOperands = GetOperands; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.GetOperands;
      }, () => ({
        '@formatjs/ecma402-abstract': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/GetOption.js", ['./cjs-loader.mjs', './262.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.GetOption = void 0;

        var _262_1 = require("./262");
        /**
         * https://tc39.es/ecma402/#sec-getoption
         * @param opts
         * @param prop
         * @param type
         * @param values
         * @param fallback
         */


        function GetOption(opts, prop, type, values, fallback) {
          if (typeof opts !== 'object') {
            throw new TypeError('Options must be an object');
          }

          var value = opts[prop];

          if (value !== undefined) {
            if (type !== 'boolean' && type !== 'string') {
              throw new TypeError('invalid type');
            }

            if (type === 'boolean') {
              value = Boolean(value);
            }

            if (type === 'string') {
              value = (0, _262_1.ToString)(value);
            }

            if (values !== undefined && !values.filter(function (val) {
              return val == value;
            }).length) {
              throw new RangeError("".concat(value, " is not within ").concat(values.join(', ')));
            }

            return value;
          }

          return fallback;
        }

        exports.GetOption = GetOption; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.GetOption;
      }, () => ({
        './262': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/GetOption2.js", ['./cjs-loader.mjs', './2622.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.GetOption = void 0;

        var _262_1 = require("./262");
        /**
         * https://tc39.es/ecma402/#sec-getoption
         * @param opts
         * @param prop
         * @param type
         * @param values
         * @param fallback
         */


        function GetOption(opts, prop, type, values, fallback) {
          if (typeof opts !== 'object') {
            throw new TypeError('Options must be an object');
          }

          var value = opts[prop];

          if (value !== undefined) {
            if (type !== 'boolean' && type !== 'string') {
              throw new TypeError('invalid type');
            }

            if (type === 'boolean') {
              value = Boolean(value);
            }

            if (type === 'string') {
              value = (0, _262_1.ToString)(value);
            }

            if (values !== undefined && !values.filter(function (val) {
              return val == value;
            }).length) {
              throw new RangeError("".concat(value, " is not within ").concat(values.join(', ')));
            }

            return value;
          }

          return fallback;
        }

        exports.GetOption = GetOption; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.GetOption;
      }, () => ({
        './262': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/GetOption3.js", ['./cjs-loader.mjs', './2623.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.GetOption = void 0;

        var _262_1 = require("./262");
        /**
         * https://tc39.es/ecma402/#sec-getoption
         * @param opts
         * @param prop
         * @param type
         * @param values
         * @param fallback
         */


        function GetOption(opts, prop, type, values, fallback) {
          if (typeof opts !== 'object') {
            throw new TypeError('Options must be an object');
          }

          var value = opts[prop];

          if (value !== undefined) {
            if (type !== 'boolean' && type !== 'string') {
              throw new TypeError('invalid type');
            }

            if (type === 'boolean') {
              value = Boolean(value);
            }

            if (type === 'string') {
              value = (0, _262_1.ToString)(value);
            }

            if (values !== undefined && !values.filter(function (val) {
              return val == value;
            }).length) {
              throw new RangeError("".concat(value, " is not within ").concat(values.join(', ')));
            }

            return value;
          }

          return fallback;
        }

        exports.GetOption = GetOption; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.GetOption;
      }, () => ({
        './262': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/GetOption4.js", ['./cjs-loader.mjs', './2624.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.GetOption = void 0;

        var _262_1 = require("./262");
        /**
         * https://tc39.es/ecma402/#sec-getoption
         * @param opts
         * @param prop
         * @param type
         * @param values
         * @param fallback
         */


        function GetOption(opts, prop, type, values, fallback) {
          if (typeof opts !== 'object') {
            throw new TypeError('Options must be an object');
          }

          var value = opts[prop];

          if (value !== undefined) {
            if (type !== 'boolean' && type !== 'string') {
              throw new TypeError('invalid type');
            }

            if (type === 'boolean') {
              value = Boolean(value);
            }

            if (type === 'string') {
              value = (0, _262_1.ToString)(value);
            }

            if (values !== undefined && !values.filter(function (val) {
              return val == value;
            }).length) {
              throw new RangeError("".concat(value, " is not within ").concat(values.join(', ')));
            }

            return value;
          }

          return fallback;
        }

        exports.GetOption = GetOption; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.GetOption;
      }, () => ({
        './262': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/GetOption5.js", ['./cjs-loader.mjs', './2625.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.GetOption = void 0;

        var _262_1 = require("./262");
        /**
         * https://tc39.es/ecma402/#sec-getoption
         * @param opts
         * @param prop
         * @param type
         * @param values
         * @param fallback
         */


        function GetOption(opts, prop, type, values, fallback) {
          if (typeof opts !== 'object') {
            throw new TypeError('Options must be an object');
          }

          var value = opts[prop];

          if (value !== undefined) {
            if (type !== 'boolean' && type !== 'string') {
              throw new TypeError('invalid type');
            }

            if (type === 'boolean') {
              value = Boolean(value);
            }

            if (type === 'string') {
              value = (0, _262_1.ToString)(value);
            }

            if (values !== undefined && !values.filter(function (val) {
              return val == value;
            }).length) {
              throw new RangeError("".concat(value, " is not within ").concat(values.join(', ')));
            }

            return value;
          }

          return fallback;
        }

        exports.GetOption = GetOption; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.GetOption;
      }, () => ({
        './262': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/GetOption6.js", ['./cjs-loader.mjs', './2626.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.GetOption = void 0;

        var _262_1 = require("./262");
        /**
         * https://tc39.es/ecma402/#sec-getoption
         * @param opts
         * @param prop
         * @param type
         * @param values
         * @param fallback
         */


        function GetOption(opts, prop, type, values, fallback) {
          if (typeof opts !== 'object') {
            throw new TypeError('Options must be an object');
          }

          var value = opts[prop];

          if (value !== undefined) {
            if (type !== 'boolean' && type !== 'string') {
              throw new TypeError('invalid type');
            }

            if (type === 'boolean') {
              value = Boolean(value);
            }

            if (type === 'string') {
              value = (0, _262_1.ToString)(value);
            }

            if (values !== undefined && !values.filter(function (val) {
              return val == value;
            }).length) {
              throw new RangeError("".concat(value, " is not within ").concat(values.join(', ')));
            }

            return value;
          }

          return fallback;
        }

        exports.GetOption = GetOption; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.GetOption;
      }, () => ({
        './262': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/GetOption7.js", ['./cjs-loader.mjs', './2627.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.GetOption = void 0;

        var _262_1 = require("./262");
        /**
         * https://tc39.es/ecma402/#sec-getoption
         * @param opts
         * @param prop
         * @param type
         * @param values
         * @param fallback
         */


        function GetOption(opts, prop, type, values, fallback) {
          if (typeof opts !== 'object') {
            throw new TypeError('Options must be an object');
          }

          var value = opts[prop];

          if (value !== undefined) {
            if (type !== 'boolean' && type !== 'string') {
              throw new TypeError('invalid type');
            }

            if (type === 'boolean') {
              value = Boolean(value);
            }

            if (type === 'string') {
              value = (0, _262_1.ToString)(value);
            }

            if (values !== undefined && !values.filter(function (val) {
              return val == value;
            }).length) {
              throw new RangeError("".concat(value, " is not within ").concat(values.join(', ')));
            }

            return value;
          }

          return fallback;
        }

        exports.GetOption = GetOption; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.GetOption;
      }, () => ({
        './262': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/GetOptionsObject.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.GetOptionsObject = void 0;
        /**
         * https://tc39.es/ecma402/#sec-getoptionsobject
         * @param options
         * @returns
         */

        function GetOptionsObject(options) {
          if (typeof options === 'undefined') {
            return Object.create(null);
          }

          if (typeof options === 'object') {
            return options;
          }

          throw new TypeError('Options must be an object');
        }

        exports.GetOptionsObject = GetOptionsObject; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.GetOptionsObject;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/GetOptionsObject2.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.GetOptionsObject = void 0;
        /**
         * https://tc39.es/ecma402/#sec-getoptionsobject
         * @param options
         * @returns
         */

        function GetOptionsObject(options) {
          if (typeof options === 'undefined') {
            return Object.create(null);
          }

          if (typeof options === 'object') {
            return options;
          }

          throw new TypeError('Options must be an object');
        }

        exports.GetOptionsObject = GetOptionsObject; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.GetOptionsObject;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/GetOptionsObject3.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.GetOptionsObject = void 0;
        /**
         * https://tc39.es/ecma402/#sec-getoptionsobject
         * @param options
         * @returns
         */

        function GetOptionsObject(options) {
          if (typeof options === 'undefined') {
            return Object.create(null);
          }

          if (typeof options === 'object') {
            return options;
          }

          throw new TypeError('Options must be an object');
        }

        exports.GetOptionsObject = GetOptionsObject; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.GetOptionsObject;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/GetOptionsObject4.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.GetOptionsObject = void 0;
        /**
         * https://tc39.es/ecma402/#sec-getoptionsobject
         * @param options
         * @returns
         */

        function GetOptionsObject(options) {
          if (typeof options === 'undefined') {
            return Object.create(null);
          }

          if (typeof options === 'object') {
            return options;
          }

          throw new TypeError('Options must be an object');
        }

        exports.GetOptionsObject = GetOptionsObject; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.GetOptionsObject;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/GetOptionsObject5.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.GetOptionsObject = void 0;
        /**
         * https://tc39.es/ecma402/#sec-getoptionsobject
         * @param options
         * @returns
         */

        function GetOptionsObject(options) {
          if (typeof options === 'undefined') {
            return Object.create(null);
          }

          if (typeof options === 'object') {
            return options;
          }

          throw new TypeError('Options must be an object');
        }

        exports.GetOptionsObject = GetOptionsObject; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.GetOptionsObject;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/GetOptionsObject6.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.GetOptionsObject = void 0;
        /**
         * https://tc39.es/ecma402/#sec-getoptionsobject
         * @param options
         * @returns
         */

        function GetOptionsObject(options) {
          if (typeof options === 'undefined') {
            return Object.create(null);
          }

          if (typeof options === 'object') {
            return options;
          }

          throw new TypeError('Options must be an object');
        }

        exports.GetOptionsObject = GetOptionsObject; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.GetOptionsObject;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/GetOptionsObject7.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.GetOptionsObject = void 0;
        /**
         * https://tc39.es/ecma402/#sec-getoptionsobject
         * @param options
         * @returns
         */

        function GetOptionsObject(options) {
          if (typeof options === 'undefined') {
            return Object.create(null);
          }

          if (typeof options === 'object') {
            return options;
          }

          throw new TypeError('Options must be an object');
        }

        exports.GetOptionsObject = GetOptionsObject; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.GetOptionsObject;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/getPrototypeOf.js", [], function (exports) {
  'use strict';

  return {
    execute: function () {
      exports('default', _getPrototypeOf);

      function _getPrototypeOf(o) {
        _getPrototypeOf = exports('default', Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {
          return o.__proto__ || Object.getPrototypeOf(o);
        });
        return _getPrototypeOf(o);
      }
    }
  };
});

System.register("chunks:///_virtual/i18next.js", ['./typeof.js', './classCallCheck.js', './createClass.js', './assertThisInitialized.js', './inherits.js', './possibleConstructorReturn.js', './getPrototypeOf.js', './defineProperty.js', './toArray.js'], function (exports) {
  'use strict';

  var _typeof, _classCallCheck, _createClass, _assertThisInitialized, _inherits, _possibleConstructorReturn, _getPrototypeOf, _defineProperty, _toArray;

  return {
    setters: [function (module) {
      _typeof = module.default;
    }, function (module) {
      _classCallCheck = module.default;
    }, function (module) {
      _createClass = module.default;
    }, function (module) {
      _assertThisInitialized = module.default;
    }, function (module) {
      _inherits = module.default;
    }, function (module) {
      _possibleConstructorReturn = module.default;
    }, function (module) {
      _getPrototypeOf = module.default;
    }, function (module) {
      _defineProperty = module.default;
    }, function (module) {
      _toArray = module.default;
    }],
    execute: function () {
      function ownKeys(object, enumerableOnly) {
        var keys = Object.keys(object);

        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);

          if (enumerableOnly) {
            symbols = symbols.filter(function (sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
          }

          keys.push.apply(keys, symbols);
        }

        return keys;
      }

      function _objectSpread(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i] != null ? arguments[i] : {};

          if (i % 2) {
            ownKeys(Object(source), true).forEach(function (key) {
              _defineProperty(target, key, source[key]);
            });
          } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
          } else {
            ownKeys(Object(source)).forEach(function (key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
        }

        return target;
      }

      var consoleLogger = {
        type: 'logger',
        log: function log(args) {
          this.output('log', args);
        },
        warn: function warn(args) {
          this.output('warn', args);
        },
        error: function error(args) {
          this.output('error', args);
        },
        output: function output(type, args) {
          if (console && console[type]) console[type].apply(console, args);
        }
      };

      var Logger = function () {
        function Logger(concreteLogger) {
          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

          _classCallCheck(this, Logger);

          this.init(concreteLogger, options);
        }

        _createClass(Logger, [{
          key: "init",
          value: function init(concreteLogger) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            this.prefix = options.prefix || 'i18next:';
            this.logger = concreteLogger || consoleLogger;
            this.options = options;
            this.debug = options.debug;
          }
        }, {
          key: "setDebug",
          value: function setDebug(bool) {
            this.debug = bool;
          }
        }, {
          key: "log",
          value: function log() {
            for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
              args[_key] = arguments[_key];
            }

            return this.forward(args, 'log', '', true);
          }
        }, {
          key: "warn",
          value: function warn() {
            for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
              args[_key2] = arguments[_key2];
            }

            return this.forward(args, 'warn', '', true);
          }
        }, {
          key: "error",
          value: function error() {
            for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
              args[_key3] = arguments[_key3];
            }

            return this.forward(args, 'error', '');
          }
        }, {
          key: "deprecate",
          value: function deprecate() {
            for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
              args[_key4] = arguments[_key4];
            }

            return this.forward(args, 'warn', 'WARNING DEPRECATED: ', true);
          }
        }, {
          key: "forward",
          value: function forward(args, lvl, prefix, debugOnly) {
            if (debugOnly && !this.debug) return null;
            if (typeof args[0] === 'string') args[0] = "".concat(prefix).concat(this.prefix, " ").concat(args[0]);
            return this.logger[lvl](args);
          }
        }, {
          key: "create",
          value: function create(moduleName) {
            return new Logger(this.logger, _objectSpread(_objectSpread({}, {
              prefix: "".concat(this.prefix, ":").concat(moduleName, ":")
            }), this.options));
          }
        }]);

        return Logger;
      }();

      var baseLogger = new Logger();

      var EventEmitter = function () {
        function EventEmitter() {
          _classCallCheck(this, EventEmitter);

          this.observers = {};
        }

        _createClass(EventEmitter, [{
          key: "on",
          value: function on(events, listener) {
            var _this = this;

            events.split(' ').forEach(function (event) {
              _this.observers[event] = _this.observers[event] || [];

              _this.observers[event].push(listener);
            });
            return this;
          }
        }, {
          key: "off",
          value: function off(event, listener) {
            if (!this.observers[event]) return;

            if (!listener) {
              delete this.observers[event];
              return;
            }

            this.observers[event] = this.observers[event].filter(function (l) {
              return l !== listener;
            });
          }
        }, {
          key: "emit",
          value: function emit(event) {
            for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
              args[_key - 1] = arguments[_key];
            }

            if (this.observers[event]) {
              var cloned = [].concat(this.observers[event]);
              cloned.forEach(function (observer) {
                observer.apply(void 0, args);
              });
            }

            if (this.observers['*']) {
              var _cloned = [].concat(this.observers['*']);

              _cloned.forEach(function (observer) {
                observer.apply(observer, [event].concat(args));
              });
            }
          }
        }]);

        return EventEmitter;
      }();

      function defer() {
        var res;
        var rej;
        var promise = new Promise(function (resolve, reject) {
          res = resolve;
          rej = reject;
        });
        promise.resolve = res;
        promise.reject = rej;
        return promise;
      }

      function makeString(object) {
        if (object == null) return '';
        return '' + object;
      }

      function copy(a, s, t) {
        a.forEach(function (m) {
          if (s[m]) t[m] = s[m];
        });
      }

      function getLastOfPath(object, path, Empty) {
        function cleanKey(key) {
          return key && key.indexOf('###') > -1 ? key.replace(/###/g, '.') : key;
        }

        function canNotTraverseDeeper() {
          return !object || typeof object === 'string';
        }

        var stack = typeof path !== 'string' ? [].concat(path) : path.split('.');

        while (stack.length > 1) {
          if (canNotTraverseDeeper()) return {};
          var key = cleanKey(stack.shift());
          if (!object[key] && Empty) object[key] = new Empty();

          if (Object.prototype.hasOwnProperty.call(object, key)) {
            object = object[key];
          } else {
            object = {};
          }
        }

        if (canNotTraverseDeeper()) return {};
        return {
          obj: object,
          k: cleanKey(stack.shift())
        };
      }

      function setPath(object, path, newValue) {
        var _getLastOfPath = getLastOfPath(object, path, Object),
            obj = _getLastOfPath.obj,
            k = _getLastOfPath.k;

        obj[k] = newValue;
      }

      function pushPath(object, path, newValue, concat) {
        var _getLastOfPath2 = getLastOfPath(object, path, Object),
            obj = _getLastOfPath2.obj,
            k = _getLastOfPath2.k;

        obj[k] = obj[k] || [];
        if (concat) obj[k] = obj[k].concat(newValue);
        if (!concat) obj[k].push(newValue);
      }

      function getPath(object, path) {
        var _getLastOfPath3 = getLastOfPath(object, path),
            obj = _getLastOfPath3.obj,
            k = _getLastOfPath3.k;

        if (!obj) return undefined;
        return obj[k];
      }

      function getPathWithDefaults(data, defaultData, key) {
        var value = getPath(data, key);

        if (value !== undefined) {
          return value;
        }

        return getPath(defaultData, key);
      }

      function deepExtend(target, source, overwrite) {
        for (var prop in source) {
          if (prop !== '__proto__' && prop !== 'constructor') {
            if (prop in target) {
              if (typeof target[prop] === 'string' || target[prop] instanceof String || typeof source[prop] === 'string' || source[prop] instanceof String) {
                if (overwrite) target[prop] = source[prop];
              } else {
                deepExtend(target[prop], source[prop], overwrite);
              }
            } else {
              target[prop] = source[prop];
            }
          }
        }

        return target;
      }

      function regexEscape(str) {
        return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&');
      }

      var _entityMap = {
        '&': '&amp;',
        '<': '&lt;',
        '>': '&gt;',
        '"': '&quot;',
        "'": '&#39;',
        '/': '&#x2F;'
      };

      function escape(data) {
        if (typeof data === 'string') {
          return data.replace(/[&<>"'\/]/g, function (s) {
            return _entityMap[s];
          });
        }

        return data;
      }

      var isIE10 = typeof window !== 'undefined' && window.navigator && typeof window.navigator.userAgentData === 'undefined' && window.navigator.userAgent && window.navigator.userAgent.indexOf('MSIE') > -1;
      var chars = [' ', ',', '?', '!', ';'];

      function looksLikeObjectPath(key, nsSeparator, keySeparator) {
        nsSeparator = nsSeparator || '';
        keySeparator = keySeparator || '';
        var possibleChars = chars.filter(function (c) {
          return nsSeparator.indexOf(c) < 0 && keySeparator.indexOf(c) < 0;
        });
        if (possibleChars.length === 0) return true;
        var r = new RegExp("(".concat(possibleChars.map(function (c) {
          return c === '?' ? '\\?' : c;
        }).join('|'), ")"));
        var matched = !r.test(key);

        if (!matched) {
          var ki = key.indexOf(keySeparator);

          if (ki > 0 && !r.test(key.substring(0, ki))) {
            matched = true;
          }
        }

        return matched;
      }

      function ownKeys$1(object, enumerableOnly) {
        var keys = Object.keys(object);

        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);

          if (enumerableOnly) {
            symbols = symbols.filter(function (sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
          }

          keys.push.apply(keys, symbols);
        }

        return keys;
      }

      function _objectSpread$1(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i] != null ? arguments[i] : {};

          if (i % 2) {
            ownKeys$1(Object(source), true).forEach(function (key) {
              _defineProperty(target, key, source[key]);
            });
          } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
          } else {
            ownKeys$1(Object(source)).forEach(function (key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
        }

        return target;
      }

      function _createSuper(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct();

        return function _createSuperInternal() {
          var Super = _getPrototypeOf(Derived),
              result;

          if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;

            result = Reflect.construct(Super, arguments, NewTarget);
          } else {
            result = Super.apply(this, arguments);
          }

          return _possibleConstructorReturn(this, result);
        };
      }

      function _isNativeReflectConstruct() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;

        try {
          Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
          return true;
        } catch (e) {
          return false;
        }
      }

      function deepFind(obj, path) {
        var keySeparator = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '.';
        if (!obj) return undefined;
        if (obj[path]) return obj[path];
        var paths = path.split(keySeparator);
        var current = obj;

        for (var i = 0; i < paths.length; ++i) {
          if (!current) return undefined;

          if (typeof current[paths[i]] === 'string' && i + 1 < paths.length) {
            return undefined;
          }

          if (current[paths[i]] === undefined) {
            var j = 2;
            var p = paths.slice(i, i + j).join(keySeparator);
            var mix = current[p];

            while (mix === undefined && paths.length > i + j) {
              j++;
              p = paths.slice(i, i + j).join(keySeparator);
              mix = current[p];
            }

            if (mix === undefined) return undefined;
            if (mix === null) return null;

            if (path.endsWith(p)) {
              if (typeof mix === 'string') return mix;
              if (p && typeof mix[p] === 'string') return mix[p];
            }

            var joinedPath = paths.slice(i + j).join(keySeparator);
            if (joinedPath) return deepFind(mix, joinedPath, keySeparator);
            return undefined;
          }

          current = current[paths[i]];
        }

        return current;
      }

      var ResourceStore = function (_EventEmitter) {
        _inherits(ResourceStore, _EventEmitter);

        var _super = _createSuper(ResourceStore);

        function ResourceStore(data) {
          var _this;

          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
            ns: ['translation'],
            defaultNS: 'translation'
          };

          _classCallCheck(this, ResourceStore);

          _this = _super.call(this);

          if (isIE10) {
            EventEmitter.call(_assertThisInitialized(_this));
          }

          _this.data = data || {};
          _this.options = options;

          if (_this.options.keySeparator === undefined) {
            _this.options.keySeparator = '.';
          }

          if (_this.options.ignoreJSONStructure === undefined) {
            _this.options.ignoreJSONStructure = true;
          }

          return _this;
        }

        _createClass(ResourceStore, [{
          key: "addNamespaces",
          value: function addNamespaces(ns) {
            if (this.options.ns.indexOf(ns) < 0) {
              this.options.ns.push(ns);
            }
          }
        }, {
          key: "removeNamespaces",
          value: function removeNamespaces(ns) {
            var index = this.options.ns.indexOf(ns);

            if (index > -1) {
              this.options.ns.splice(index, 1);
            }
          }
        }, {
          key: "getResource",
          value: function getResource(lng, ns, key) {
            var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;
            var ignoreJSONStructure = options.ignoreJSONStructure !== undefined ? options.ignoreJSONStructure : this.options.ignoreJSONStructure;
            var path = [lng, ns];
            if (key && typeof key !== 'string') path = path.concat(key);
            if (key && typeof key === 'string') path = path.concat(keySeparator ? key.split(keySeparator) : key);

            if (lng.indexOf('.') > -1) {
              path = lng.split('.');
            }

            var result = getPath(this.data, path);
            if (result || !ignoreJSONStructure || typeof key !== 'string') return result;
            return deepFind(this.data && this.data[lng] && this.data[lng][ns], key, keySeparator);
          }
        }, {
          key: "addResource",
          value: function addResource(lng, ns, key, value) {
            var options = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {
              silent: false
            };
            var keySeparator = this.options.keySeparator;
            if (keySeparator === undefined) keySeparator = '.';
            var path = [lng, ns];
            if (key) path = path.concat(keySeparator ? key.split(keySeparator) : key);

            if (lng.indexOf('.') > -1) {
              path = lng.split('.');
              value = ns;
              ns = path[1];
            }

            this.addNamespaces(ns);
            setPath(this.data, path, value);
            if (!options.silent) this.emit('added', lng, ns, key, value);
          }
        }, {
          key: "addResources",
          value: function addResources(lng, ns, resources) {
            var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {
              silent: false
            };

            for (var m in resources) {
              if (typeof resources[m] === 'string' || Object.prototype.toString.apply(resources[m]) === '[object Array]') this.addResource(lng, ns, m, resources[m], {
                silent: true
              });
            }

            if (!options.silent) this.emit('added', lng, ns, resources);
          }
        }, {
          key: "addResourceBundle",
          value: function addResourceBundle(lng, ns, resources, deep, overwrite) {
            var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {
              silent: false
            };
            var path = [lng, ns];

            if (lng.indexOf('.') > -1) {
              path = lng.split('.');
              deep = resources;
              resources = ns;
              ns = path[1];
            }

            this.addNamespaces(ns);
            var pack = getPath(this.data, path) || {};

            if (deep) {
              deepExtend(pack, resources, overwrite);
            } else {
              pack = _objectSpread$1(_objectSpread$1({}, pack), resources);
            }

            setPath(this.data, path, pack);
            if (!options.silent) this.emit('added', lng, ns, resources);
          }
        }, {
          key: "removeResourceBundle",
          value: function removeResourceBundle(lng, ns) {
            if (this.hasResourceBundle(lng, ns)) {
              delete this.data[lng][ns];
            }

            this.removeNamespaces(ns);
            this.emit('removed', lng, ns);
          }
        }, {
          key: "hasResourceBundle",
          value: function hasResourceBundle(lng, ns) {
            return this.getResource(lng, ns) !== undefined;
          }
        }, {
          key: "getResourceBundle",
          value: function getResourceBundle(lng, ns) {
            if (!ns) ns = this.options.defaultNS;
            if (this.options.compatibilityAPI === 'v1') return _objectSpread$1(_objectSpread$1({}, {}), this.getResource(lng, ns));
            return this.getResource(lng, ns);
          }
        }, {
          key: "getDataByLanguage",
          value: function getDataByLanguage(lng) {
            return this.data[lng];
          }
        }, {
          key: "hasLanguageSomeTranslations",
          value: function hasLanguageSomeTranslations(lng) {
            var data = this.getDataByLanguage(lng);
            var n = data && Object.keys(data) || [];
            return !!n.find(function (v) {
              return data[v] && Object.keys(data[v]).length > 0;
            });
          }
        }, {
          key: "toJSON",
          value: function toJSON() {
            return this.data;
          }
        }]);

        return ResourceStore;
      }(EventEmitter);

      var postProcessor = {
        processors: {},
        addPostProcessor: function addPostProcessor(module) {
          this.processors[module.name] = module;
        },
        handle: function handle(processors, value, key, options, translator) {
          var _this = this;

          processors.forEach(function (processor) {
            if (_this.processors[processor]) value = _this.processors[processor].process(value, key, options, translator);
          });
          return value;
        }
      };

      function ownKeys$2(object, enumerableOnly) {
        var keys = Object.keys(object);

        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);

          if (enumerableOnly) {
            symbols = symbols.filter(function (sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
          }

          keys.push.apply(keys, symbols);
        }

        return keys;
      }

      function _objectSpread$2(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i] != null ? arguments[i] : {};

          if (i % 2) {
            ownKeys$2(Object(source), true).forEach(function (key) {
              _defineProperty(target, key, source[key]);
            });
          } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
          } else {
            ownKeys$2(Object(source)).forEach(function (key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
        }

        return target;
      }

      function _createSuper$1(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct$1();

        return function _createSuperInternal() {
          var Super = _getPrototypeOf(Derived),
              result;

          if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;

            result = Reflect.construct(Super, arguments, NewTarget);
          } else {
            result = Super.apply(this, arguments);
          }

          return _possibleConstructorReturn(this, result);
        };
      }

      function _isNativeReflectConstruct$1() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;

        try {
          Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
          return true;
        } catch (e) {
          return false;
        }
      }

      var checkedLoadedFor = {};

      var Translator = function (_EventEmitter) {
        _inherits(Translator, _EventEmitter);

        var _super = _createSuper$1(Translator);

        function Translator(services) {
          var _this;

          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

          _classCallCheck(this, Translator);

          _this = _super.call(this);

          if (isIE10) {
            EventEmitter.call(_assertThisInitialized(_this));
          }

          copy(['resourceStore', 'languageUtils', 'pluralResolver', 'interpolator', 'backendConnector', 'i18nFormat', 'utils'], services, _assertThisInitialized(_this));
          _this.options = options;

          if (_this.options.keySeparator === undefined) {
            _this.options.keySeparator = '.';
          }

          _this.logger = baseLogger.create('translator');
          return _this;
        }

        _createClass(Translator, [{
          key: "changeLanguage",
          value: function changeLanguage(lng) {
            if (lng) this.language = lng;
          }
        }, {
          key: "exists",
          value: function exists(key) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
              interpolation: {}
            };

            if (key === undefined || key === null) {
              return false;
            }

            var resolved = this.resolve(key, options);
            return resolved && resolved.res !== undefined;
          }
        }, {
          key: "extractFromKey",
          value: function extractFromKey(key, options) {
            var nsSeparator = options.nsSeparator !== undefined ? options.nsSeparator : this.options.nsSeparator;
            if (nsSeparator === undefined) nsSeparator = ':';
            var keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;
            var namespaces = options.ns || this.options.defaultNS || [];
            var wouldCheckForNsInKey = nsSeparator && key.indexOf(nsSeparator) > -1;
            var seemsNaturalLanguage = !this.options.userDefinedKeySeparator && !options.keySeparator && !this.options.userDefinedNsSeparator && !options.nsSeparator && !looksLikeObjectPath(key, nsSeparator, keySeparator);

            if (wouldCheckForNsInKey && !seemsNaturalLanguage) {
              var m = key.match(this.interpolator.nestingRegexp);

              if (m && m.length > 0) {
                return {
                  key: key,
                  namespaces: namespaces
                };
              }

              var parts = key.split(nsSeparator);
              if (nsSeparator !== keySeparator || nsSeparator === keySeparator && this.options.ns.indexOf(parts[0]) > -1) namespaces = parts.shift();
              key = parts.join(keySeparator);
            }

            if (typeof namespaces === 'string') namespaces = [namespaces];
            return {
              key: key,
              namespaces: namespaces
            };
          }
        }, {
          key: "translate",
          value: function translate(keys, options, lastKey) {
            var _this2 = this;

            if (_typeof(options) !== 'object' && this.options.overloadTranslationOptionHandler) {
              options = this.options.overloadTranslationOptionHandler(arguments);
            }

            if (!options) options = {};
            if (keys === undefined || keys === null) return '';
            if (!Array.isArray(keys)) keys = [String(keys)];
            var returnDetails = options.returnDetails !== undefined ? options.returnDetails : this.options.returnDetails;
            var keySeparator = options.keySeparator !== undefined ? options.keySeparator : this.options.keySeparator;

            var _this$extractFromKey = this.extractFromKey(keys[keys.length - 1], options),
                key = _this$extractFromKey.key,
                namespaces = _this$extractFromKey.namespaces;

            var namespace = namespaces[namespaces.length - 1];
            var lng = options.lng || this.language;
            var appendNamespaceToCIMode = options.appendNamespaceToCIMode || this.options.appendNamespaceToCIMode;

            if (lng && lng.toLowerCase() === 'cimode') {
              if (appendNamespaceToCIMode) {
                var nsSeparator = options.nsSeparator || this.options.nsSeparator;

                if (returnDetails) {
                  resolved.res = "".concat(namespace).concat(nsSeparator).concat(key);
                  return resolved;
                }

                return "".concat(namespace).concat(nsSeparator).concat(key);
              }

              if (returnDetails) {
                resolved.res = key;
                return resolved;
              }

              return key;
            }

            var resolved = this.resolve(keys, options);
            var res = resolved && resolved.res;
            var resUsedKey = resolved && resolved.usedKey || key;
            var resExactUsedKey = resolved && resolved.exactUsedKey || key;
            var resType = Object.prototype.toString.apply(res);
            var noObject = ['[object Number]', '[object Function]', '[object RegExp]'];
            var joinArrays = options.joinArrays !== undefined ? options.joinArrays : this.options.joinArrays;
            var handleAsObjectInI18nFormat = !this.i18nFormat || this.i18nFormat.handleAsObject;
            var handleAsObject = typeof res !== 'string' && typeof res !== 'boolean' && typeof res !== 'number';

            if (handleAsObjectInI18nFormat && res && handleAsObject && noObject.indexOf(resType) < 0 && !(typeof joinArrays === 'string' && resType === '[object Array]')) {
              if (!options.returnObjects && !this.options.returnObjects) {
                if (!this.options.returnedObjectHandler) {
                  this.logger.warn('accessing an object - but returnObjects options is not enabled!');
                }

                var r = this.options.returnedObjectHandler ? this.options.returnedObjectHandler(resUsedKey, res, _objectSpread$2(_objectSpread$2({}, options), {}, {
                  ns: namespaces
                })) : "key '".concat(key, " (").concat(this.language, ")' returned an object instead of string.");

                if (returnDetails) {
                  resolved.res = r;
                  return resolved;
                }

                return r;
              }

              if (keySeparator) {
                var resTypeIsArray = resType === '[object Array]';
                var copy = resTypeIsArray ? [] : {};
                var newKeyToUse = resTypeIsArray ? resExactUsedKey : resUsedKey;

                for (var m in res) {
                  if (Object.prototype.hasOwnProperty.call(res, m)) {
                    var deepKey = "".concat(newKeyToUse).concat(keySeparator).concat(m);
                    copy[m] = this.translate(deepKey, _objectSpread$2(_objectSpread$2({}, options), {
                      joinArrays: false,
                      ns: namespaces
                    }));
                    if (copy[m] === deepKey) copy[m] = res[m];
                  }
                }

                res = copy;
              }
            } else if (handleAsObjectInI18nFormat && typeof joinArrays === 'string' && resType === '[object Array]') {
              res = res.join(joinArrays);
              if (res) res = this.extendTranslation(res, keys, options, lastKey);
            } else {
              var usedDefault = false;
              var usedKey = false;
              var needsPluralHandling = options.count !== undefined && typeof options.count !== 'string';
              var hasDefaultValue = Translator.hasDefaultValue(options);
              var defaultValueSuffix = needsPluralHandling ? this.pluralResolver.getSuffix(lng, options.count, options) : '';
              var defaultValue = options["defaultValue".concat(defaultValueSuffix)] || options.defaultValue;

              if (!this.isValidLookup(res) && hasDefaultValue) {
                usedDefault = true;
                res = defaultValue;
              }

              if (!this.isValidLookup(res)) {
                usedKey = true;
                res = key;
              }

              var missingKeyNoValueFallbackToKey = options.missingKeyNoValueFallbackToKey || this.options.missingKeyNoValueFallbackToKey;
              var resForMissing = missingKeyNoValueFallbackToKey && usedKey ? undefined : res;
              var updateMissing = hasDefaultValue && defaultValue !== res && this.options.updateMissing;

              if (usedKey || usedDefault || updateMissing) {
                this.logger.log(updateMissing ? 'updateKey' : 'missingKey', lng, namespace, key, updateMissing ? defaultValue : res);

                if (keySeparator) {
                  var fk = this.resolve(key, _objectSpread$2(_objectSpread$2({}, options), {}, {
                    keySeparator: false
                  }));
                  if (fk && fk.res) this.logger.warn('Seems the loaded translations were in flat JSON format instead of nested. Either set keySeparator: false on init or make sure your translations are published in nested format.');
                }

                var lngs = [];
                var fallbackLngs = this.languageUtils.getFallbackCodes(this.options.fallbackLng, options.lng || this.language);

                if (this.options.saveMissingTo === 'fallback' && fallbackLngs && fallbackLngs[0]) {
                  for (var i = 0; i < fallbackLngs.length; i++) {
                    lngs.push(fallbackLngs[i]);
                  }
                } else if (this.options.saveMissingTo === 'all') {
                  lngs = this.languageUtils.toResolveHierarchy(options.lng || this.language);
                } else {
                  lngs.push(options.lng || this.language);
                }

                var send = function send(l, k, specificDefaultValue) {
                  var defaultForMissing = hasDefaultValue && specificDefaultValue !== res ? specificDefaultValue : resForMissing;

                  if (_this2.options.missingKeyHandler) {
                    _this2.options.missingKeyHandler(l, namespace, k, defaultForMissing, updateMissing, options);
                  } else if (_this2.backendConnector && _this2.backendConnector.saveMissing) {
                    _this2.backendConnector.saveMissing(l, namespace, k, defaultForMissing, updateMissing, options);
                  }

                  _this2.emit('missingKey', l, namespace, k, res);
                };

                if (this.options.saveMissing) {
                  if (this.options.saveMissingPlurals && needsPluralHandling) {
                    lngs.forEach(function (language) {
                      _this2.pluralResolver.getSuffixes(language, options).forEach(function (suffix) {
                        send([language], key + suffix, options["defaultValue".concat(suffix)] || defaultValue);
                      });
                    });
                  } else {
                    send(lngs, key, defaultValue);
                  }
                }
              }

              res = this.extendTranslation(res, keys, options, resolved, lastKey);
              if (usedKey && res === key && this.options.appendNamespaceToMissingKey) res = "".concat(namespace, ":").concat(key);

              if ((usedKey || usedDefault) && this.options.parseMissingKeyHandler) {
                if (this.options.compatibilityAPI !== 'v1') {
                  res = this.options.parseMissingKeyHandler(this.options.appendNamespaceToMissingKey ? "".concat(namespace, ":").concat(key) : key, usedDefault ? res : undefined);
                } else {
                  res = this.options.parseMissingKeyHandler(res);
                }
              }
            }

            if (returnDetails) {
              resolved.res = res;
              return resolved;
            }

            return res;
          }
        }, {
          key: "extendTranslation",
          value: function extendTranslation(res, key, options, resolved, lastKey) {
            var _this3 = this;

            if (this.i18nFormat && this.i18nFormat.parse) {
              res = this.i18nFormat.parse(res, _objectSpread$2(_objectSpread$2({}, this.options.interpolation.defaultVariables), options), resolved.usedLng, resolved.usedNS, resolved.usedKey, {
                resolved: resolved
              });
            } else if (!options.skipInterpolation) {
              if (options.interpolation) this.interpolator.init(_objectSpread$2(_objectSpread$2({}, options), {
                interpolation: _objectSpread$2(_objectSpread$2({}, this.options.interpolation), options.interpolation)
              }));
              var skipOnVariables = typeof res === 'string' && (options && options.interpolation && options.interpolation.skipOnVariables !== undefined ? options.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables);
              var nestBef;

              if (skipOnVariables) {
                var nb = res.match(this.interpolator.nestingRegexp);
                nestBef = nb && nb.length;
              }

              var data = options.replace && typeof options.replace !== 'string' ? options.replace : options;
              if (this.options.interpolation.defaultVariables) data = _objectSpread$2(_objectSpread$2({}, this.options.interpolation.defaultVariables), data);
              res = this.interpolator.interpolate(res, data, options.lng || this.language, options);

              if (skipOnVariables) {
                var na = res.match(this.interpolator.nestingRegexp);
                var nestAft = na && na.length;
                if (nestBef < nestAft) options.nest = false;
              }

              if (options.nest !== false) res = this.interpolator.nest(res, function () {
                for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                  args[_key] = arguments[_key];
                }

                if (lastKey && lastKey[0] === args[0] && !options.context) {
                  _this3.logger.warn("It seems you are nesting recursively key: ".concat(args[0], " in key: ").concat(key[0]));

                  return null;
                }

                return _this3.translate.apply(_this3, args.concat([key]));
              }, options);
              if (options.interpolation) this.interpolator.reset();
            }

            var postProcess = options.postProcess || this.options.postProcess;
            var postProcessorNames = typeof postProcess === 'string' ? [postProcess] : postProcess;

            if (res !== undefined && res !== null && postProcessorNames && postProcessorNames.length && options.applyPostProcessor !== false) {
              res = postProcessor.handle(postProcessorNames, res, key, this.options && this.options.postProcessPassResolved ? _objectSpread$2({
                i18nResolved: resolved
              }, options) : options, this);
            }

            return res;
          }
        }, {
          key: "resolve",
          value: function resolve(keys) {
            var _this4 = this;

            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            var found;
            var usedKey;
            var exactUsedKey;
            var usedLng;
            var usedNS;
            if (typeof keys === 'string') keys = [keys];
            keys.forEach(function (k) {
              if (_this4.isValidLookup(found)) return;

              var extracted = _this4.extractFromKey(k, options);

              var key = extracted.key;
              usedKey = key;
              var namespaces = extracted.namespaces;
              if (_this4.options.fallbackNS) namespaces = namespaces.concat(_this4.options.fallbackNS);
              var needsPluralHandling = options.count !== undefined && typeof options.count !== 'string';

              var needsZeroSuffixLookup = needsPluralHandling && !options.ordinal && options.count === 0 && _this4.pluralResolver.shouldUseIntlApi();

              var needsContextHandling = options.context !== undefined && (typeof options.context === 'string' || typeof options.context === 'number') && options.context !== '';
              var codes = options.lngs ? options.lngs : _this4.languageUtils.toResolveHierarchy(options.lng || _this4.language, options.fallbackLng);
              namespaces.forEach(function (ns) {
                if (_this4.isValidLookup(found)) return;
                usedNS = ns;

                if (!checkedLoadedFor["".concat(codes[0], "-").concat(ns)] && _this4.utils && _this4.utils.hasLoadedNamespace && !_this4.utils.hasLoadedNamespace(usedNS)) {
                  checkedLoadedFor["".concat(codes[0], "-").concat(ns)] = true;

                  _this4.logger.warn("key \"".concat(usedKey, "\" for languages \"").concat(codes.join(', '), "\" won't get resolved as namespace \"").concat(usedNS, "\" was not yet loaded"), 'This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!');
                }

                codes.forEach(function (code) {
                  if (_this4.isValidLookup(found)) return;
                  usedLng = code;
                  var finalKeys = [key];

                  if (_this4.i18nFormat && _this4.i18nFormat.addLookupKeys) {
                    _this4.i18nFormat.addLookupKeys(finalKeys, key, code, ns, options);
                  } else {
                    var pluralSuffix;
                    if (needsPluralHandling) pluralSuffix = _this4.pluralResolver.getSuffix(code, options.count, options);
                    var zeroSuffix = "".concat(_this4.options.pluralSeparator, "zero");

                    if (needsPluralHandling) {
                      finalKeys.push(key + pluralSuffix);

                      if (needsZeroSuffixLookup) {
                        finalKeys.push(key + zeroSuffix);
                      }
                    }

                    if (needsContextHandling) {
                      var contextKey = "".concat(key).concat(_this4.options.contextSeparator).concat(options.context);
                      finalKeys.push(contextKey);

                      if (needsPluralHandling) {
                        finalKeys.push(contextKey + pluralSuffix);

                        if (needsZeroSuffixLookup) {
                          finalKeys.push(contextKey + zeroSuffix);
                        }
                      }
                    }
                  }

                  var possibleKey;

                  while (possibleKey = finalKeys.pop()) {
                    if (!_this4.isValidLookup(found)) {
                      exactUsedKey = possibleKey;
                      found = _this4.getResource(code, ns, possibleKey, options);
                    }
                  }
                });
              });
            });
            return {
              res: found,
              usedKey: usedKey,
              exactUsedKey: exactUsedKey,
              usedLng: usedLng,
              usedNS: usedNS
            };
          }
        }, {
          key: "isValidLookup",
          value: function isValidLookup(res) {
            return res !== undefined && !(!this.options.returnNull && res === null) && !(!this.options.returnEmptyString && res === '');
          }
        }, {
          key: "getResource",
          value: function getResource(code, ns, key) {
            var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            if (this.i18nFormat && this.i18nFormat.getResource) return this.i18nFormat.getResource(code, ns, key, options);
            return this.resourceStore.getResource(code, ns, key, options);
          }
        }], [{
          key: "hasDefaultValue",
          value: function hasDefaultValue(options) {
            var prefix = 'defaultValue';

            for (var option in options) {
              if (Object.prototype.hasOwnProperty.call(options, option) && prefix === option.substring(0, prefix.length) && undefined !== options[option]) {
                return true;
              }
            }

            return false;
          }
        }]);

        return Translator;
      }(EventEmitter);

      function capitalize(string) {
        return string.charAt(0).toUpperCase() + string.slice(1);
      }

      var LanguageUtil = function () {
        function LanguageUtil(options) {
          _classCallCheck(this, LanguageUtil);

          this.options = options;
          this.supportedLngs = this.options.supportedLngs || false;
          this.logger = baseLogger.create('languageUtils');
        }

        _createClass(LanguageUtil, [{
          key: "getScriptPartFromCode",
          value: function getScriptPartFromCode(code) {
            if (!code || code.indexOf('-') < 0) return null;
            var p = code.split('-');
            if (p.length === 2) return null;
            p.pop();
            if (p[p.length - 1].toLowerCase() === 'x') return null;
            return this.formatLanguageCode(p.join('-'));
          }
        }, {
          key: "getLanguagePartFromCode",
          value: function getLanguagePartFromCode(code) {
            if (!code || code.indexOf('-') < 0) return code;
            var p = code.split('-');
            return this.formatLanguageCode(p[0]);
          }
        }, {
          key: "formatLanguageCode",
          value: function formatLanguageCode(code) {
            if (typeof code === 'string' && code.indexOf('-') > -1) {
              var specialCases = ['hans', 'hant', 'latn', 'cyrl', 'cans', 'mong', 'arab'];
              var p = code.split('-');

              if (this.options.lowerCaseLng) {
                p = p.map(function (part) {
                  return part.toLowerCase();
                });
              } else if (p.length === 2) {
                p[0] = p[0].toLowerCase();
                p[1] = p[1].toUpperCase();
                if (specialCases.indexOf(p[1].toLowerCase()) > -1) p[1] = capitalize(p[1].toLowerCase());
              } else if (p.length === 3) {
                p[0] = p[0].toLowerCase();
                if (p[1].length === 2) p[1] = p[1].toUpperCase();
                if (p[0] !== 'sgn' && p[2].length === 2) p[2] = p[2].toUpperCase();
                if (specialCases.indexOf(p[1].toLowerCase()) > -1) p[1] = capitalize(p[1].toLowerCase());
                if (specialCases.indexOf(p[2].toLowerCase()) > -1) p[2] = capitalize(p[2].toLowerCase());
              }

              return p.join('-');
            }

            return this.options.cleanCode || this.options.lowerCaseLng ? code.toLowerCase() : code;
          }
        }, {
          key: "isSupportedCode",
          value: function isSupportedCode(code) {
            if (this.options.load === 'languageOnly' || this.options.nonExplicitSupportedLngs) {
              code = this.getLanguagePartFromCode(code);
            }

            return !this.supportedLngs || !this.supportedLngs.length || this.supportedLngs.indexOf(code) > -1;
          }
        }, {
          key: "getBestMatchFromCodes",
          value: function getBestMatchFromCodes(codes) {
            var _this = this;

            if (!codes) return null;
            var found;
            codes.forEach(function (code) {
              if (found) return;

              var cleanedLng = _this.formatLanguageCode(code);

              if (!_this.options.supportedLngs || _this.isSupportedCode(cleanedLng)) found = cleanedLng;
            });

            if (!found && this.options.supportedLngs) {
              codes.forEach(function (code) {
                if (found) return;

                var lngOnly = _this.getLanguagePartFromCode(code);

                if (_this.isSupportedCode(lngOnly)) return found = lngOnly;
                found = _this.options.supportedLngs.find(function (supportedLng) {
                  if (supportedLng.indexOf(lngOnly) === 0) return supportedLng;
                });
              });
            }

            if (!found) found = this.getFallbackCodes(this.options.fallbackLng)[0];
            return found;
          }
        }, {
          key: "getFallbackCodes",
          value: function getFallbackCodes(fallbacks, code) {
            if (!fallbacks) return [];
            if (typeof fallbacks === 'function') fallbacks = fallbacks(code);
            if (typeof fallbacks === 'string') fallbacks = [fallbacks];
            if (Object.prototype.toString.apply(fallbacks) === '[object Array]') return fallbacks;
            if (!code) return fallbacks["default"] || [];
            var found = fallbacks[code];
            if (!found) found = fallbacks[this.getScriptPartFromCode(code)];
            if (!found) found = fallbacks[this.formatLanguageCode(code)];
            if (!found) found = fallbacks[this.getLanguagePartFromCode(code)];
            if (!found) found = fallbacks["default"];
            return found || [];
          }
        }, {
          key: "toResolveHierarchy",
          value: function toResolveHierarchy(code, fallbackCode) {
            var _this2 = this;

            var fallbackCodes = this.getFallbackCodes(fallbackCode || this.options.fallbackLng || [], code);
            var codes = [];

            var addCode = function addCode(c) {
              if (!c) return;

              if (_this2.isSupportedCode(c)) {
                codes.push(c);
              } else {
                _this2.logger.warn("rejecting language code not found in supportedLngs: ".concat(c));
              }
            };

            if (typeof code === 'string' && code.indexOf('-') > -1) {
              if (this.options.load !== 'languageOnly') addCode(this.formatLanguageCode(code));
              if (this.options.load !== 'languageOnly' && this.options.load !== 'currentOnly') addCode(this.getScriptPartFromCode(code));
              if (this.options.load !== 'currentOnly') addCode(this.getLanguagePartFromCode(code));
            } else if (typeof code === 'string') {
              addCode(this.formatLanguageCode(code));
            }

            fallbackCodes.forEach(function (fc) {
              if (codes.indexOf(fc) < 0) addCode(_this2.formatLanguageCode(fc));
            });
            return codes;
          }
        }]);

        return LanguageUtil;
      }();

      var sets = [{
        lngs: ['ach', 'ak', 'am', 'arn', 'br', 'fil', 'gun', 'ln', 'mfe', 'mg', 'mi', 'oc', 'pt', 'pt-BR', 'tg', 'tl', 'ti', 'tr', 'uz', 'wa'],
        nr: [1, 2],
        fc: 1
      }, {
        lngs: ['af', 'an', 'ast', 'az', 'bg', 'bn', 'ca', 'da', 'de', 'dev', 'el', 'en', 'eo', 'es', 'et', 'eu', 'fi', 'fo', 'fur', 'fy', 'gl', 'gu', 'ha', 'hi', 'hu', 'hy', 'ia', 'it', 'kk', 'kn', 'ku', 'lb', 'mai', 'ml', 'mn', 'mr', 'nah', 'nap', 'nb', 'ne', 'nl', 'nn', 'no', 'nso', 'pa', 'pap', 'pms', 'ps', 'pt-PT', 'rm', 'sco', 'se', 'si', 'so', 'son', 'sq', 'sv', 'sw', 'ta', 'te', 'tk', 'ur', 'yo'],
        nr: [1, 2],
        fc: 2
      }, {
        lngs: ['ay', 'bo', 'cgg', 'fa', 'ht', 'id', 'ja', 'jbo', 'ka', 'km', 'ko', 'ky', 'lo', 'ms', 'sah', 'su', 'th', 'tt', 'ug', 'vi', 'wo', 'zh'],
        nr: [1],
        fc: 3
      }, {
        lngs: ['be', 'bs', 'cnr', 'dz', 'hr', 'ru', 'sr', 'uk'],
        nr: [1, 2, 5],
        fc: 4
      }, {
        lngs: ['ar'],
        nr: [0, 1, 2, 3, 11, 100],
        fc: 5
      }, {
        lngs: ['cs', 'sk'],
        nr: [1, 2, 5],
        fc: 6
      }, {
        lngs: ['csb', 'pl'],
        nr: [1, 2, 5],
        fc: 7
      }, {
        lngs: ['cy'],
        nr: [1, 2, 3, 8],
        fc: 8
      }, {
        lngs: ['fr'],
        nr: [1, 2],
        fc: 9
      }, {
        lngs: ['ga'],
        nr: [1, 2, 3, 7, 11],
        fc: 10
      }, {
        lngs: ['gd'],
        nr: [1, 2, 3, 20],
        fc: 11
      }, {
        lngs: ['is'],
        nr: [1, 2],
        fc: 12
      }, {
        lngs: ['jv'],
        nr: [0, 1],
        fc: 13
      }, {
        lngs: ['kw'],
        nr: [1, 2, 3, 4],
        fc: 14
      }, {
        lngs: ['lt'],
        nr: [1, 2, 10],
        fc: 15
      }, {
        lngs: ['lv'],
        nr: [1, 2, 0],
        fc: 16
      }, {
        lngs: ['mk'],
        nr: [1, 2],
        fc: 17
      }, {
        lngs: ['mnk'],
        nr: [0, 1, 2],
        fc: 18
      }, {
        lngs: ['mt'],
        nr: [1, 2, 11, 20],
        fc: 19
      }, {
        lngs: ['or'],
        nr: [2, 1],
        fc: 2
      }, {
        lngs: ['ro'],
        nr: [1, 2, 20],
        fc: 20
      }, {
        lngs: ['sl'],
        nr: [5, 1, 2, 3],
        fc: 21
      }, {
        lngs: ['he', 'iw'],
        nr: [1, 2, 20, 21],
        fc: 22
      }];
      var _rulesPluralsTypes = {
        1: function _(n) {
          return Number(n > 1);
        },
        2: function _(n) {
          return Number(n != 1);
        },
        3: function _(n) {
          return 0;
        },
        4: function _(n) {
          return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
        },
        5: function _(n) {
          return Number(n == 0 ? 0 : n == 1 ? 1 : n == 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5);
        },
        6: function _(n) {
          return Number(n == 1 ? 0 : n >= 2 && n <= 4 ? 1 : 2);
        },
        7: function _(n) {
          return Number(n == 1 ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
        },
        8: function _(n) {
          return Number(n == 1 ? 0 : n == 2 ? 1 : n != 8 && n != 11 ? 2 : 3);
        },
        9: function _(n) {
          return Number(n >= 2);
        },
        10: function _(n) {
          return Number(n == 1 ? 0 : n == 2 ? 1 : n < 7 ? 2 : n < 11 ? 3 : 4);
        },
        11: function _(n) {
          return Number(n == 1 || n == 11 ? 0 : n == 2 || n == 12 ? 1 : n > 2 && n < 20 ? 2 : 3);
        },
        12: function _(n) {
          return Number(n % 10 != 1 || n % 100 == 11);
        },
        13: function _(n) {
          return Number(n !== 0);
        },
        14: function _(n) {
          return Number(n == 1 ? 0 : n == 2 ? 1 : n == 3 ? 2 : 3);
        },
        15: function _(n) {
          return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n % 10 >= 2 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2);
        },
        16: function _(n) {
          return Number(n % 10 == 1 && n % 100 != 11 ? 0 : n !== 0 ? 1 : 2);
        },
        17: function _(n) {
          return Number(n == 1 || n % 10 == 1 && n % 100 != 11 ? 0 : 1);
        },
        18: function _(n) {
          return Number(n == 0 ? 0 : n == 1 ? 1 : 2);
        },
        19: function _(n) {
          return Number(n == 1 ? 0 : n == 0 || n % 100 > 1 && n % 100 < 11 ? 1 : n % 100 > 10 && n % 100 < 20 ? 2 : 3);
        },
        20: function _(n) {
          return Number(n == 1 ? 0 : n == 0 || n % 100 > 0 && n % 100 < 20 ? 1 : 2);
        },
        21: function _(n) {
          return Number(n % 100 == 1 ? 1 : n % 100 == 2 ? 2 : n % 100 == 3 || n % 100 == 4 ? 3 : 0);
        },
        22: function _(n) {
          return Number(n == 1 ? 0 : n == 2 ? 1 : (n < 0 || n > 10) && n % 10 == 0 ? 2 : 3);
        }
      };
      var deprecatedJsonVersions = ['v1', 'v2', 'v3'];
      var suffixesOrder = {
        zero: 0,
        one: 1,
        two: 2,
        few: 3,
        many: 4,
        other: 5
      };

      function createRules() {
        var rules = {};
        sets.forEach(function (set) {
          set.lngs.forEach(function (l) {
            rules[l] = {
              numbers: set.nr,
              plurals: _rulesPluralsTypes[set.fc]
            };
          });
        });
        return rules;
      }

      var PluralResolver = function () {
        function PluralResolver(languageUtils) {
          var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

          _classCallCheck(this, PluralResolver);

          this.languageUtils = languageUtils;
          this.options = options;
          this.logger = baseLogger.create('pluralResolver');

          if ((!this.options.compatibilityJSON || this.options.compatibilityJSON === 'v4') && (typeof Intl === 'undefined' || !Intl.PluralRules)) {
            this.options.compatibilityJSON = 'v3';
            this.logger.error('Your environment seems not to be Intl API compatible, use an Intl.PluralRules polyfill. Will fallback to the compatibilityJSON v3 format handling.');
          }

          this.rules = createRules();
        }

        _createClass(PluralResolver, [{
          key: "addRule",
          value: function addRule(lng, obj) {
            this.rules[lng] = obj;
          }
        }, {
          key: "getRule",
          value: function getRule(code) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            if (this.shouldUseIntlApi()) {
              try {
                return new Intl.PluralRules(code, {
                  type: options.ordinal ? 'ordinal' : 'cardinal'
                });
              } catch (_unused) {
                return;
              }
            }

            return this.rules[code] || this.rules[this.languageUtils.getLanguagePartFromCode(code)];
          }
        }, {
          key: "needsPlural",
          value: function needsPlural(code) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            var rule = this.getRule(code, options);

            if (this.shouldUseIntlApi()) {
              return rule && rule.resolvedOptions().pluralCategories.length > 1;
            }

            return rule && rule.numbers.length > 1;
          }
        }, {
          key: "getPluralFormsOfKey",
          value: function getPluralFormsOfKey(code, key) {
            var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
            return this.getSuffixes(code, options).map(function (suffix) {
              return "".concat(key).concat(suffix);
            });
          }
        }, {
          key: "getSuffixes",
          value: function getSuffixes(code) {
            var _this = this;

            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            var rule = this.getRule(code, options);

            if (!rule) {
              return [];
            }

            if (this.shouldUseIntlApi()) {
              return rule.resolvedOptions().pluralCategories.sort(function (pluralCategory1, pluralCategory2) {
                return suffixesOrder[pluralCategory1] - suffixesOrder[pluralCategory2];
              }).map(function (pluralCategory) {
                return "".concat(_this.options.prepend).concat(pluralCategory);
              });
            }

            return rule.numbers.map(function (number) {
              return _this.getSuffix(code, number, options);
            });
          }
        }, {
          key: "getSuffix",
          value: function getSuffix(code, count) {
            var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
            var rule = this.getRule(code, options);

            if (rule) {
              if (this.shouldUseIntlApi()) {
                return "".concat(this.options.prepend).concat(rule.select(count));
              }

              return this.getSuffixRetroCompatible(rule, count);
            }

            this.logger.warn("no plural rule found for: ".concat(code));
            return '';
          }
        }, {
          key: "getSuffixRetroCompatible",
          value: function getSuffixRetroCompatible(rule, count) {
            var _this2 = this;

            var idx = rule.noAbs ? rule.plurals(count) : rule.plurals(Math.abs(count));
            var suffix = rule.numbers[idx];

            if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {
              if (suffix === 2) {
                suffix = 'plural';
              } else if (suffix === 1) {
                suffix = '';
              }
            }

            var returnSuffix = function returnSuffix() {
              return _this2.options.prepend && suffix.toString() ? _this2.options.prepend + suffix.toString() : suffix.toString();
            };

            if (this.options.compatibilityJSON === 'v1') {
              if (suffix === 1) return '';
              if (typeof suffix === 'number') return "_plural_".concat(suffix.toString());
              return returnSuffix();
            } else if (this.options.compatibilityJSON === 'v2') {
              return returnSuffix();
            } else if (this.options.simplifyPluralSuffix && rule.numbers.length === 2 && rule.numbers[0] === 1) {
              return returnSuffix();
            }

            return this.options.prepend && idx.toString() ? this.options.prepend + idx.toString() : idx.toString();
          }
        }, {
          key: "shouldUseIntlApi",
          value: function shouldUseIntlApi() {
            return !deprecatedJsonVersions.includes(this.options.compatibilityJSON);
          }
        }]);

        return PluralResolver;
      }();

      function ownKeys$3(object, enumerableOnly) {
        var keys = Object.keys(object);

        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);

          if (enumerableOnly) {
            symbols = symbols.filter(function (sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
          }

          keys.push.apply(keys, symbols);
        }

        return keys;
      }

      function _objectSpread$3(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i] != null ? arguments[i] : {};

          if (i % 2) {
            ownKeys$3(Object(source), true).forEach(function (key) {
              _defineProperty(target, key, source[key]);
            });
          } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
          } else {
            ownKeys$3(Object(source)).forEach(function (key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
        }

        return target;
      }

      var Interpolator = function () {
        function Interpolator() {
          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

          _classCallCheck(this, Interpolator);

          this.logger = baseLogger.create('interpolator');
          this.options = options;

          this.format = options.interpolation && options.interpolation.format || function (value) {
            return value;
          };

          this.init(options);
        }

        _createClass(Interpolator, [{
          key: "init",
          value: function init() {
            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            if (!options.interpolation) options.interpolation = {
              escapeValue: true
            };
            var iOpts = options.interpolation;
            this.escape = iOpts.escape !== undefined ? iOpts.escape : escape;
            this.escapeValue = iOpts.escapeValue !== undefined ? iOpts.escapeValue : true;
            this.useRawValueToEscape = iOpts.useRawValueToEscape !== undefined ? iOpts.useRawValueToEscape : false;
            this.prefix = iOpts.prefix ? regexEscape(iOpts.prefix) : iOpts.prefixEscaped || '{{';
            this.suffix = iOpts.suffix ? regexEscape(iOpts.suffix) : iOpts.suffixEscaped || '}}';
            this.formatSeparator = iOpts.formatSeparator ? iOpts.formatSeparator : iOpts.formatSeparator || ',';
            this.unescapePrefix = iOpts.unescapeSuffix ? '' : iOpts.unescapePrefix || '-';
            this.unescapeSuffix = this.unescapePrefix ? '' : iOpts.unescapeSuffix || '';
            this.nestingPrefix = iOpts.nestingPrefix ? regexEscape(iOpts.nestingPrefix) : iOpts.nestingPrefixEscaped || regexEscape('$t(');
            this.nestingSuffix = iOpts.nestingSuffix ? regexEscape(iOpts.nestingSuffix) : iOpts.nestingSuffixEscaped || regexEscape(')');
            this.nestingOptionsSeparator = iOpts.nestingOptionsSeparator ? iOpts.nestingOptionsSeparator : iOpts.nestingOptionsSeparator || ',';
            this.maxReplaces = iOpts.maxReplaces ? iOpts.maxReplaces : 1000;
            this.alwaysFormat = iOpts.alwaysFormat !== undefined ? iOpts.alwaysFormat : false;
            this.resetRegExp();
          }
        }, {
          key: "reset",
          value: function reset() {
            if (this.options) this.init(this.options);
          }
        }, {
          key: "resetRegExp",
          value: function resetRegExp() {
            var regexpStr = "".concat(this.prefix, "(.+?)").concat(this.suffix);
            this.regexp = new RegExp(regexpStr, 'g');
            var regexpUnescapeStr = "".concat(this.prefix).concat(this.unescapePrefix, "(.+?)").concat(this.unescapeSuffix).concat(this.suffix);
            this.regexpUnescape = new RegExp(regexpUnescapeStr, 'g');
            var nestingRegexpStr = "".concat(this.nestingPrefix, "(.+?)").concat(this.nestingSuffix);
            this.nestingRegexp = new RegExp(nestingRegexpStr, 'g');
          }
        }, {
          key: "interpolate",
          value: function interpolate(str, data, lng, options) {
            var _this = this;

            var match;
            var value;
            var replaces;
            var defaultData = this.options && this.options.interpolation && this.options.interpolation.defaultVariables || {};

            function regexSafe(val) {
              return val.replace(/\$/g, '$$$$');
            }

            var handleFormat = function handleFormat(key) {
              if (key.indexOf(_this.formatSeparator) < 0) {
                var path = getPathWithDefaults(data, defaultData, key);
                return _this.alwaysFormat ? _this.format(path, undefined, lng, _objectSpread$3(_objectSpread$3(_objectSpread$3({}, options), data), {}, {
                  interpolationkey: key
                })) : path;
              }

              var p = key.split(_this.formatSeparator);
              var k = p.shift().trim();
              var f = p.join(_this.formatSeparator).trim();
              return _this.format(getPathWithDefaults(data, defaultData, k), f, lng, _objectSpread$3(_objectSpread$3(_objectSpread$3({}, options), data), {}, {
                interpolationkey: k
              }));
            };

            this.resetRegExp();
            var missingInterpolationHandler = options && options.missingInterpolationHandler || this.options.missingInterpolationHandler;
            var skipOnVariables = options && options.interpolation && options.interpolation.skipOnVariables !== undefined ? options.interpolation.skipOnVariables : this.options.interpolation.skipOnVariables;
            var todos = [{
              regex: this.regexpUnescape,
              safeValue: function safeValue(val) {
                return regexSafe(val);
              }
            }, {
              regex: this.regexp,
              safeValue: function safeValue(val) {
                return _this.escapeValue ? regexSafe(_this.escape(val)) : regexSafe(val);
              }
            }];
            todos.forEach(function (todo) {
              replaces = 0;

              while (match = todo.regex.exec(str)) {
                var matchedVar = match[1].trim();
                value = handleFormat(matchedVar);

                if (value === undefined) {
                  if (typeof missingInterpolationHandler === 'function') {
                    var temp = missingInterpolationHandler(str, match, options);
                    value = typeof temp === 'string' ? temp : '';
                  } else if (options && options.hasOwnProperty(matchedVar)) {
                    value = '';
                  } else if (skipOnVariables) {
                    value = match[0];
                    continue;
                  } else {
                    _this.logger.warn("missed to pass in variable ".concat(matchedVar, " for interpolating ").concat(str));

                    value = '';
                  }
                } else if (typeof value !== 'string' && !_this.useRawValueToEscape) {
                  value = makeString(value);
                }

                var safeValue = todo.safeValue(value);
                str = str.replace(match[0], safeValue);

                if (skipOnVariables) {
                  todo.regex.lastIndex += value.length;
                  todo.regex.lastIndex -= match[0].length;
                } else {
                  todo.regex.lastIndex = 0;
                }

                replaces++;

                if (replaces >= _this.maxReplaces) {
                  break;
                }
              }
            });
            return str;
          }
        }, {
          key: "nest",
          value: function nest(str, fc) {
            var _this2 = this;

            var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
            var match;
            var value;

            var clonedOptions = _objectSpread$3({}, options);

            clonedOptions.applyPostProcessor = false;
            delete clonedOptions.defaultValue;

            function handleHasOptions(key, inheritedOptions) {
              var sep = this.nestingOptionsSeparator;
              if (key.indexOf(sep) < 0) return key;
              var c = key.split(new RegExp("".concat(sep, "[ ]*{")));
              var optionsString = "{".concat(c[1]);
              key = c[0];
              optionsString = this.interpolate(optionsString, clonedOptions);
              optionsString = optionsString.replace(/'/g, '"');

              try {
                clonedOptions = JSON.parse(optionsString);
                if (inheritedOptions) clonedOptions = _objectSpread$3(_objectSpread$3({}, inheritedOptions), clonedOptions);
              } catch (e) {
                this.logger.warn("failed parsing options string in nesting for key ".concat(key), e);
                return "".concat(key).concat(sep).concat(optionsString);
              }

              delete clonedOptions.defaultValue;
              return key;
            }

            while (match = this.nestingRegexp.exec(str)) {
              var formatters = [];
              var doReduce = false;

              if (match[0].indexOf(this.formatSeparator) !== -1 && !/{.*}/.test(match[1])) {
                var r = match[1].split(this.formatSeparator).map(function (elem) {
                  return elem.trim();
                });
                match[1] = r.shift();
                formatters = r;
                doReduce = true;
              }

              value = fc(handleHasOptions.call(this, match[1].trim(), clonedOptions), clonedOptions);
              if (value && match[0] === str && typeof value !== 'string') return value;
              if (typeof value !== 'string') value = makeString(value);

              if (!value) {
                this.logger.warn("missed to resolve ".concat(match[1], " for nesting ").concat(str));
                value = '';
              }

              if (doReduce) {
                value = formatters.reduce(function (v, f) {
                  return _this2.format(v, f, options.lng, _objectSpread$3(_objectSpread$3({}, options), {}, {
                    interpolationkey: match[1].trim()
                  }));
                }, value.trim());
              }

              str = str.replace(match[0], value);
              this.regexp.lastIndex = 0;
            }

            return str;
          }
        }]);

        return Interpolator;
      }();

      function ownKeys$4(object, enumerableOnly) {
        var keys = Object.keys(object);

        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);

          if (enumerableOnly) {
            symbols = symbols.filter(function (sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
          }

          keys.push.apply(keys, symbols);
        }

        return keys;
      }

      function _objectSpread$4(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i] != null ? arguments[i] : {};

          if (i % 2) {
            ownKeys$4(Object(source), true).forEach(function (key) {
              _defineProperty(target, key, source[key]);
            });
          } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
          } else {
            ownKeys$4(Object(source)).forEach(function (key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
        }

        return target;
      }

      function parseFormatStr(formatStr) {
        var formatName = formatStr.toLowerCase().trim();
        var formatOptions = {};

        if (formatStr.indexOf('(') > -1) {
          var p = formatStr.split('(');
          formatName = p[0].toLowerCase().trim();
          var optStr = p[1].substring(0, p[1].length - 1);

          if (formatName === 'currency' && optStr.indexOf(':') < 0) {
            if (!formatOptions.currency) formatOptions.currency = optStr.trim();
          } else if (formatName === 'relativetime' && optStr.indexOf(':') < 0) {
            if (!formatOptions.range) formatOptions.range = optStr.trim();
          } else {
            var opts = optStr.split(';');
            opts.forEach(function (opt) {
              if (!opt) return;

              var _opt$split = opt.split(':'),
                  _opt$split2 = _toArray(_opt$split),
                  key = _opt$split2[0],
                  rest = _opt$split2.slice(1);

              var val = rest.join(':').trim().replace(/^'+|'+$/g, '');
              if (!formatOptions[key.trim()]) formatOptions[key.trim()] = val;
              if (val === 'false') formatOptions[key.trim()] = false;
              if (val === 'true') formatOptions[key.trim()] = true;
              if (!isNaN(val)) formatOptions[key.trim()] = parseInt(val, 10);
            });
          }
        }

        return {
          formatName: formatName,
          formatOptions: formatOptions
        };
      }

      var Formatter = function () {
        function Formatter() {
          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

          _classCallCheck(this, Formatter);

          this.logger = baseLogger.create('formatter');
          this.options = options;
          this.formats = {
            number: function number(val, lng, options) {
              return new Intl.NumberFormat(lng, options).format(val);
            },
            currency: function currency(val, lng, options) {
              return new Intl.NumberFormat(lng, _objectSpread$4(_objectSpread$4({}, options), {}, {
                style: 'currency'
              })).format(val);
            },
            datetime: function datetime(val, lng, options) {
              return new Intl.DateTimeFormat(lng, _objectSpread$4({}, options)).format(val);
            },
            relativetime: function relativetime(val, lng, options) {
              return new Intl.RelativeTimeFormat(lng, _objectSpread$4({}, options)).format(val, options.range || 'day');
            },
            list: function list(val, lng, options) {
              return new Intl.ListFormat(lng, _objectSpread$4({}, options)).format(val);
            }
          };
          this.init(options);
        }

        _createClass(Formatter, [{
          key: "init",
          value: function init(services) {
            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
              interpolation: {}
            };
            var iOpts = options.interpolation;
            this.formatSeparator = iOpts.formatSeparator ? iOpts.formatSeparator : iOpts.formatSeparator || ',';
          }
        }, {
          key: "add",
          value: function add(name, fc) {
            this.formats[name.toLowerCase().trim()] = fc;
          }
        }, {
          key: "format",
          value: function format(value, _format, lng, options) {
            var _this = this;

            var formats = _format.split(this.formatSeparator);

            var result = formats.reduce(function (mem, f) {
              var _parseFormatStr = parseFormatStr(f),
                  formatName = _parseFormatStr.formatName,
                  formatOptions = _parseFormatStr.formatOptions;

              if (_this.formats[formatName]) {
                var formatted = mem;

                try {
                  var valOptions = options && options.formatParams && options.formatParams[options.interpolationkey] || {};
                  var l = valOptions.locale || valOptions.lng || options.locale || options.lng || lng;
                  formatted = _this.formats[formatName](mem, l, _objectSpread$4(_objectSpread$4(_objectSpread$4({}, formatOptions), options), valOptions));
                } catch (error) {
                  _this.logger.warn(error);
                }

                return formatted;
              } else {
                _this.logger.warn("there was no format function for ".concat(formatName));
              }

              return mem;
            }, value);
            return result;
          }
        }]);

        return Formatter;
      }();

      function ownKeys$5(object, enumerableOnly) {
        var keys = Object.keys(object);

        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);

          if (enumerableOnly) {
            symbols = symbols.filter(function (sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
          }

          keys.push.apply(keys, symbols);
        }

        return keys;
      }

      function _objectSpread$5(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i] != null ? arguments[i] : {};

          if (i % 2) {
            ownKeys$5(Object(source), true).forEach(function (key) {
              _defineProperty(target, key, source[key]);
            });
          } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
          } else {
            ownKeys$5(Object(source)).forEach(function (key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
        }

        return target;
      }

      function _createSuper$2(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct$2();

        return function _createSuperInternal() {
          var Super = _getPrototypeOf(Derived),
              result;

          if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;

            result = Reflect.construct(Super, arguments, NewTarget);
          } else {
            result = Super.apply(this, arguments);
          }

          return _possibleConstructorReturn(this, result);
        };
      }

      function _isNativeReflectConstruct$2() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;

        try {
          Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
          return true;
        } catch (e) {
          return false;
        }
      }

      function removePending(q, name) {
        if (q.pending[name] !== undefined) {
          delete q.pending[name];
          q.pendingCount--;
        }
      }

      var Connector = function (_EventEmitter) {
        _inherits(Connector, _EventEmitter);

        var _super = _createSuper$2(Connector);

        function Connector(backend, store, services) {
          var _this;

          var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

          _classCallCheck(this, Connector);

          _this = _super.call(this);

          if (isIE10) {
            EventEmitter.call(_assertThisInitialized(_this));
          }

          _this.backend = backend;
          _this.store = store;
          _this.services = services;
          _this.languageUtils = services.languageUtils;
          _this.options = options;
          _this.logger = baseLogger.create('backendConnector');
          _this.waitingReads = [];
          _this.maxParallelReads = options.maxParallelReads || 10;
          _this.readingCalls = 0;
          _this.state = {};
          _this.queue = [];

          if (_this.backend && _this.backend.init) {
            _this.backend.init(services, options.backend, options);
          }

          return _this;
        }

        _createClass(Connector, [{
          key: "queueLoad",
          value: function queueLoad(languages, namespaces, options, callback) {
            var _this2 = this;

            var toLoad = {};
            var pending = {};
            var toLoadLanguages = {};
            var toLoadNamespaces = {};
            languages.forEach(function (lng) {
              var hasAllNamespaces = true;
              namespaces.forEach(function (ns) {
                var name = "".concat(lng, "|").concat(ns);

                if (!options.reload && _this2.store.hasResourceBundle(lng, ns)) {
                  _this2.state[name] = 2;
                } else if (_this2.state[name] < 0) ;else if (_this2.state[name] === 1) {
                  if (pending[name] === undefined) pending[name] = true;
                } else {
                  _this2.state[name] = 1;
                  hasAllNamespaces = false;
                  if (pending[name] === undefined) pending[name] = true;
                  if (toLoad[name] === undefined) toLoad[name] = true;
                  if (toLoadNamespaces[ns] === undefined) toLoadNamespaces[ns] = true;
                }
              });
              if (!hasAllNamespaces) toLoadLanguages[lng] = true;
            });

            if (Object.keys(toLoad).length || Object.keys(pending).length) {
              this.queue.push({
                pending: pending,
                pendingCount: Object.keys(pending).length,
                loaded: {},
                errors: [],
                callback: callback
              });
            }

            return {
              toLoad: Object.keys(toLoad),
              pending: Object.keys(pending),
              toLoadLanguages: Object.keys(toLoadLanguages),
              toLoadNamespaces: Object.keys(toLoadNamespaces)
            };
          }
        }, {
          key: "loaded",
          value: function loaded(name, err, data) {
            var s = name.split('|');
            var lng = s[0];
            var ns = s[1];
            if (err) this.emit('failedLoading', lng, ns, err);

            if (data) {
              this.store.addResourceBundle(lng, ns, data);
            }

            this.state[name] = err ? -1 : 2;
            var loaded = {};
            this.queue.forEach(function (q) {
              pushPath(q.loaded, [lng], ns);
              removePending(q, name);
              if (err) q.errors.push(err);

              if (q.pendingCount === 0 && !q.done) {
                Object.keys(q.loaded).forEach(function (l) {
                  if (!loaded[l]) loaded[l] = {};
                  var loadedKeys = q.loaded[l];

                  if (loadedKeys.length) {
                    loadedKeys.forEach(function (ns) {
                      if (loaded[l][ns] === undefined) loaded[l][ns] = true;
                    });
                  }
                });
                q.done = true;

                if (q.errors.length) {
                  q.callback(q.errors);
                } else {
                  q.callback();
                }
              }
            });
            this.emit('loaded', loaded);
            this.queue = this.queue.filter(function (q) {
              return !q.done;
            });
          }
        }, {
          key: "read",
          value: function read(lng, ns, fcName) {
            var _this3 = this;

            var tried = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
            var wait = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 350;
            var callback = arguments.length > 5 ? arguments[5] : undefined;
            if (!lng.length) return callback(null, {});

            if (this.readingCalls >= this.maxParallelReads) {
              this.waitingReads.push({
                lng: lng,
                ns: ns,
                fcName: fcName,
                tried: tried,
                wait: wait,
                callback: callback
              });
              return;
            }

            this.readingCalls++;
            return this.backend[fcName](lng, ns, function (err, data) {
              if (err && data && tried < 5) {
                setTimeout(function () {
                  _this3.read.call(_this3, lng, ns, fcName, tried + 1, wait * 2, callback);
                }, wait);
                return;
              }

              _this3.readingCalls--;

              if (_this3.waitingReads.length > 0) {
                var next = _this3.waitingReads.shift();

                _this3.read(next.lng, next.ns, next.fcName, next.tried, next.wait, next.callback);
              }

              callback(err, data);
            });
          }
        }, {
          key: "prepareLoading",
          value: function prepareLoading(languages, namespaces) {
            var _this4 = this;

            var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
            var callback = arguments.length > 3 ? arguments[3] : undefined;

            if (!this.backend) {
              this.logger.warn('No backend was added via i18next.use. Will not load resources.');
              return callback && callback();
            }

            if (typeof languages === 'string') languages = this.languageUtils.toResolveHierarchy(languages);
            if (typeof namespaces === 'string') namespaces = [namespaces];
            var toLoad = this.queueLoad(languages, namespaces, options, callback);

            if (!toLoad.toLoad.length) {
              if (!toLoad.pending.length) callback();
              return null;
            }

            toLoad.toLoad.forEach(function (name) {
              _this4.loadOne(name);
            });
          }
        }, {
          key: "load",
          value: function load(languages, namespaces, callback) {
            this.prepareLoading(languages, namespaces, {}, callback);
          }
        }, {
          key: "reload",
          value: function reload(languages, namespaces, callback) {
            this.prepareLoading(languages, namespaces, {
              reload: true
            }, callback);
          }
        }, {
          key: "loadOne",
          value: function loadOne(name) {
            var _this5 = this;

            var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
            var s = name.split('|');
            var lng = s[0];
            var ns = s[1];
            this.read(lng, ns, 'read', undefined, undefined, function (err, data) {
              if (err) _this5.logger.warn("".concat(prefix, "loading namespace ").concat(ns, " for language ").concat(lng, " failed"), err);
              if (!err && data) _this5.logger.log("".concat(prefix, "loaded namespace ").concat(ns, " for language ").concat(lng), data);

              _this5.loaded(name, err, data);
            });
          }
        }, {
          key: "saveMissing",
          value: function saveMissing(languages, namespace, key, fallbackValue, isUpdate) {
            var options = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};

            if (this.services.utils && this.services.utils.hasLoadedNamespace && !this.services.utils.hasLoadedNamespace(namespace)) {
              this.logger.warn("did not save key \"".concat(key, "\" as the namespace \"").concat(namespace, "\" was not yet loaded"), 'This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!');
              return;
            }

            if (key === undefined || key === null || key === '') return;

            if (this.backend && this.backend.create) {
              this.backend.create(languages, namespace, key, fallbackValue, null, _objectSpread$5(_objectSpread$5({}, options), {}, {
                isUpdate: isUpdate
              }));
            }

            if (!languages || !languages[0]) return;
            this.store.addResource(languages[0], namespace, key, fallbackValue);
          }
        }]);

        return Connector;
      }(EventEmitter);

      function get() {
        return {
          debug: false,
          initImmediate: true,
          ns: ['translation'],
          defaultNS: ['translation'],
          fallbackLng: ['dev'],
          fallbackNS: false,
          supportedLngs: false,
          nonExplicitSupportedLngs: false,
          load: 'all',
          preload: false,
          simplifyPluralSuffix: true,
          keySeparator: '.',
          nsSeparator: ':',
          pluralSeparator: '_',
          contextSeparator: '_',
          partialBundledLanguages: false,
          saveMissing: false,
          updateMissing: false,
          saveMissingTo: 'fallback',
          saveMissingPlurals: true,
          missingKeyHandler: false,
          missingInterpolationHandler: false,
          postProcess: false,
          postProcessPassResolved: false,
          returnNull: true,
          returnEmptyString: true,
          returnObjects: false,
          joinArrays: false,
          returnedObjectHandler: false,
          parseMissingKeyHandler: false,
          appendNamespaceToMissingKey: false,
          appendNamespaceToCIMode: false,
          overloadTranslationOptionHandler: function handle(args) {
            var ret = {};
            if (_typeof(args[1]) === 'object') ret = args[1];
            if (typeof args[1] === 'string') ret.defaultValue = args[1];
            if (typeof args[2] === 'string') ret.tDescription = args[2];

            if (_typeof(args[2]) === 'object' || _typeof(args[3]) === 'object') {
              var options = args[3] || args[2];
              Object.keys(options).forEach(function (key) {
                ret[key] = options[key];
              });
            }

            return ret;
          },
          interpolation: {
            escapeValue: true,
            format: function format(value, _format, lng, options) {
              return value;
            },
            prefix: '{{',
            suffix: '}}',
            formatSeparator: ',',
            unescapePrefix: '-',
            nestingPrefix: '$t(',
            nestingSuffix: ')',
            nestingOptionsSeparator: ',',
            maxReplaces: 1000,
            skipOnVariables: true
          }
        };
      }

      function transformOptions(options) {
        if (typeof options.ns === 'string') options.ns = [options.ns];
        if (typeof options.fallbackLng === 'string') options.fallbackLng = [options.fallbackLng];
        if (typeof options.fallbackNS === 'string') options.fallbackNS = [options.fallbackNS];

        if (options.supportedLngs && options.supportedLngs.indexOf('cimode') < 0) {
          options.supportedLngs = options.supportedLngs.concat(['cimode']);
        }

        return options;
      }

      function ownKeys$6(object, enumerableOnly) {
        var keys = Object.keys(object);

        if (Object.getOwnPropertySymbols) {
          var symbols = Object.getOwnPropertySymbols(object);

          if (enumerableOnly) {
            symbols = symbols.filter(function (sym) {
              return Object.getOwnPropertyDescriptor(object, sym).enumerable;
            });
          }

          keys.push.apply(keys, symbols);
        }

        return keys;
      }

      function _objectSpread$6(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i] != null ? arguments[i] : {};

          if (i % 2) {
            ownKeys$6(Object(source), true).forEach(function (key) {
              _defineProperty(target, key, source[key]);
            });
          } else if (Object.getOwnPropertyDescriptors) {
            Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
          } else {
            ownKeys$6(Object(source)).forEach(function (key) {
              Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
            });
          }
        }

        return target;
      }

      function _createSuper$3(Derived) {
        var hasNativeReflectConstruct = _isNativeReflectConstruct$3();

        return function _createSuperInternal() {
          var Super = _getPrototypeOf(Derived),
              result;

          if (hasNativeReflectConstruct) {
            var NewTarget = _getPrototypeOf(this).constructor;

            result = Reflect.construct(Super, arguments, NewTarget);
          } else {
            result = Super.apply(this, arguments);
          }

          return _possibleConstructorReturn(this, result);
        };
      }

      function _isNativeReflectConstruct$3() {
        if (typeof Reflect === "undefined" || !Reflect.construct) return false;
        if (Reflect.construct.sham) return false;
        if (typeof Proxy === "function") return true;

        try {
          Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
          return true;
        } catch (e) {
          return false;
        }
      }

      function noop() {}

      function bindMemberFunctions(inst) {
        var mems = Object.getOwnPropertyNames(Object.getPrototypeOf(inst));
        mems.forEach(function (mem) {
          if (typeof inst[mem] === 'function') {
            inst[mem] = inst[mem].bind(inst);
          }
        });
      }

      var I18n = function (_EventEmitter) {
        _inherits(I18n, _EventEmitter);

        var _super = _createSuper$3(I18n);

        function I18n() {
          var _this;

          var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
          var callback = arguments.length > 1 ? arguments[1] : undefined;

          _classCallCheck(this, I18n);

          _this = _super.call(this);

          if (isIE10) {
            EventEmitter.call(_assertThisInitialized(_this));
          }

          _this.options = transformOptions(options);
          _this.services = {};
          _this.logger = baseLogger;
          _this.modules = {
            external: []
          };
          bindMemberFunctions(_assertThisInitialized(_this));

          if (callback && !_this.isInitialized && !options.isClone) {
            if (!_this.options.initImmediate) {
              _this.init(options, callback);

              return _possibleConstructorReturn(_this, _assertThisInitialized(_this));
            }

            setTimeout(function () {
              _this.init(options, callback);
            }, 0);
          }

          return _this;
        }

        _createClass(I18n, [{
          key: "init",
          value: function init() {
            var _this2 = this;

            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            var callback = arguments.length > 1 ? arguments[1] : undefined;

            if (typeof options === 'function') {
              callback = options;
              options = {};
            }

            if (!options.defaultNS && options.ns) {
              if (typeof options.ns === 'string') {
                options.defaultNS = options.ns;
              } else if (options.ns.indexOf('translation') < 0) {
                options.defaultNS = options.ns[0];
              }
            }

            var defOpts = get();
            this.options = _objectSpread$6(_objectSpread$6(_objectSpread$6({}, defOpts), this.options), transformOptions(options));

            if (this.options.compatibilityAPI !== 'v1') {
              this.options.interpolation = _objectSpread$6(_objectSpread$6({}, defOpts.interpolation), this.options.interpolation);
            }

            if (options.keySeparator !== undefined) {
              this.options.userDefinedKeySeparator = options.keySeparator;
            }

            if (options.nsSeparator !== undefined) {
              this.options.userDefinedNsSeparator = options.nsSeparator;
            }

            function createClassOnDemand(ClassOrObject) {
              if (!ClassOrObject) return null;
              if (typeof ClassOrObject === 'function') return new ClassOrObject();
              return ClassOrObject;
            }

            if (!this.options.isClone) {
              if (this.modules.logger) {
                baseLogger.init(createClassOnDemand(this.modules.logger), this.options);
              } else {
                baseLogger.init(null, this.options);
              }

              var formatter;

              if (this.modules.formatter) {
                formatter = this.modules.formatter;
              } else if (typeof Intl !== 'undefined') {
                formatter = Formatter;
              }

              var lu = new LanguageUtil(this.options);
              this.store = new ResourceStore(this.options.resources, this.options);
              var s = this.services;
              s.logger = baseLogger;
              s.resourceStore = this.store;
              s.languageUtils = lu;
              s.pluralResolver = new PluralResolver(lu, {
                prepend: this.options.pluralSeparator,
                compatibilityJSON: this.options.compatibilityJSON,
                simplifyPluralSuffix: this.options.simplifyPluralSuffix
              });

              if (formatter && (!this.options.interpolation.format || this.options.interpolation.format === defOpts.interpolation.format)) {
                s.formatter = createClassOnDemand(formatter);
                s.formatter.init(s, this.options);
                this.options.interpolation.format = s.formatter.format.bind(s.formatter);
              }

              s.interpolator = new Interpolator(this.options);
              s.utils = {
                hasLoadedNamespace: this.hasLoadedNamespace.bind(this)
              };
              s.backendConnector = new Connector(createClassOnDemand(this.modules.backend), s.resourceStore, s, this.options);
              s.backendConnector.on('*', function (event) {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }

                _this2.emit.apply(_this2, [event].concat(args));
              });

              if (this.modules.languageDetector) {
                s.languageDetector = createClassOnDemand(this.modules.languageDetector);
                s.languageDetector.init(s, this.options.detection, this.options);
              }

              if (this.modules.i18nFormat) {
                s.i18nFormat = createClassOnDemand(this.modules.i18nFormat);
                if (s.i18nFormat.init) s.i18nFormat.init(this);
              }

              this.translator = new Translator(this.services, this.options);
              this.translator.on('*', function (event) {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }

                _this2.emit.apply(_this2, [event].concat(args));
              });
              this.modules.external.forEach(function (m) {
                if (m.init) m.init(_this2);
              });
            }

            this.format = this.options.interpolation.format;
            if (!callback) callback = noop;

            if (this.options.fallbackLng && !this.services.languageDetector && !this.options.lng) {
              var codes = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
              if (codes.length > 0 && codes[0] !== 'dev') this.options.lng = codes[0];
            }

            if (!this.services.languageDetector && !this.options.lng) {
              this.logger.warn('init: no languageDetector is used and no lng is defined');
            }

            var storeApi = ['getResource', 'hasResourceBundle', 'getResourceBundle', 'getDataByLanguage'];
            storeApi.forEach(function (fcName) {
              _this2[fcName] = function () {
                var _this2$store;

                return (_this2$store = _this2.store)[fcName].apply(_this2$store, arguments);
              };
            });
            var storeApiChained = ['addResource', 'addResources', 'addResourceBundle', 'removeResourceBundle'];
            storeApiChained.forEach(function (fcName) {
              _this2[fcName] = function () {
                var _this2$store2;

                (_this2$store2 = _this2.store)[fcName].apply(_this2$store2, arguments);

                return _this2;
              };
            });
            var deferred = defer();

            var load = function load() {
              var finish = function finish(err, t) {
                if (_this2.isInitialized && !_this2.initializedStoreOnce) _this2.logger.warn('init: i18next is already initialized. You should call init just once!');
                _this2.isInitialized = true;
                if (!_this2.options.isClone) _this2.logger.log('initialized', _this2.options);

                _this2.emit('initialized', _this2.options);

                deferred.resolve(t);
                callback(err, t);
              };

              if (_this2.languages && _this2.options.compatibilityAPI !== 'v1' && !_this2.isInitialized) return finish(null, _this2.t.bind(_this2));

              _this2.changeLanguage(_this2.options.lng, finish);
            };

            if (this.options.resources || !this.options.initImmediate) {
              load();
            } else {
              setTimeout(load, 0);
            }

            return deferred;
          }
        }, {
          key: "loadResources",
          value: function loadResources(language) {
            var _this3 = this;

            var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;
            var usedCallback = callback;
            var usedLng = typeof language === 'string' ? language : this.language;
            if (typeof language === 'function') usedCallback = language;

            if (!this.options.resources || this.options.partialBundledLanguages) {
              if (usedLng && usedLng.toLowerCase() === 'cimode') return usedCallback();
              var toLoad = [];

              var append = function append(lng) {
                if (!lng) return;

                var lngs = _this3.services.languageUtils.toResolveHierarchy(lng);

                lngs.forEach(function (l) {
                  if (toLoad.indexOf(l) < 0) toLoad.push(l);
                });
              };

              if (!usedLng) {
                var fallbacks = this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);
                fallbacks.forEach(function (l) {
                  return append(l);
                });
              } else {
                append(usedLng);
              }

              if (this.options.preload) {
                this.options.preload.forEach(function (l) {
                  return append(l);
                });
              }

              this.services.backendConnector.load(toLoad, this.options.ns, function (e) {
                if (!e && !_this3.resolvedLanguage && _this3.language) _this3.setResolvedLanguage(_this3.language);
                usedCallback(e);
              });
            } else {
              usedCallback(null);
            }
          }
        }, {
          key: "reloadResources",
          value: function reloadResources(lngs, ns, callback) {
            var deferred = defer();
            if (!lngs) lngs = this.languages;
            if (!ns) ns = this.options.ns;
            if (!callback) callback = noop;
            this.services.backendConnector.reload(lngs, ns, function (err) {
              deferred.resolve();
              callback(err);
            });
            return deferred;
          }
        }, {
          key: "use",
          value: function use(module) {
            if (!module) throw new Error('You are passing an undefined module! Please check the object you are passing to i18next.use()');
            if (!module.type) throw new Error('You are passing a wrong module! Please check the object you are passing to i18next.use()');

            if (module.type === 'backend') {
              this.modules.backend = module;
            }

            if (module.type === 'logger' || module.log && module.warn && module.error) {
              this.modules.logger = module;
            }

            if (module.type === 'languageDetector') {
              this.modules.languageDetector = module;
            }

            if (module.type === 'i18nFormat') {
              this.modules.i18nFormat = module;
            }

            if (module.type === 'postProcessor') {
              postProcessor.addPostProcessor(module);
            }

            if (module.type === 'formatter') {
              this.modules.formatter = module;
            }

            if (module.type === '3rdParty') {
              this.modules.external.push(module);
            }

            return this;
          }
        }, {
          key: "setResolvedLanguage",
          value: function setResolvedLanguage(l) {
            if (!l || !this.languages) return;
            if (['cimode', 'dev'].indexOf(l) > -1) return;

            for (var li = 0; li < this.languages.length; li++) {
              var lngInLngs = this.languages[li];
              if (['cimode', 'dev'].indexOf(lngInLngs) > -1) continue;

              if (this.store.hasLanguageSomeTranslations(lngInLngs)) {
                this.resolvedLanguage = lngInLngs;
                break;
              }
            }
          }
        }, {
          key: "changeLanguage",
          value: function changeLanguage(lng, callback) {
            var _this4 = this;

            this.isLanguageChangingTo = lng;
            var deferred = defer();
            this.emit('languageChanging', lng);

            var setLngProps = function setLngProps(l) {
              _this4.language = l;
              _this4.languages = _this4.services.languageUtils.toResolveHierarchy(l);
              _this4.resolvedLanguage = undefined;

              _this4.setResolvedLanguage(l);
            };

            var done = function done(err, l) {
              if (l) {
                setLngProps(l);

                _this4.translator.changeLanguage(l);

                _this4.isLanguageChangingTo = undefined;

                _this4.emit('languageChanged', l);

                _this4.logger.log('languageChanged', l);
              } else {
                _this4.isLanguageChangingTo = undefined;
              }

              deferred.resolve(function () {
                return _this4.t.apply(_this4, arguments);
              });
              if (callback) callback(err, function () {
                return _this4.t.apply(_this4, arguments);
              });
            };

            var setLng = function setLng(lngs) {
              if (!lng && !lngs && _this4.services.languageDetector) lngs = [];
              var l = typeof lngs === 'string' ? lngs : _this4.services.languageUtils.getBestMatchFromCodes(lngs);

              if (l) {
                if (!_this4.language) {
                  setLngProps(l);
                }

                if (!_this4.translator.language) _this4.translator.changeLanguage(l);
                if (_this4.services.languageDetector) _this4.services.languageDetector.cacheUserLanguage(l);
              }

              _this4.loadResources(l, function (err) {
                done(err, l);
              });
            };

            if (!lng && this.services.languageDetector && !this.services.languageDetector.async) {
              setLng(this.services.languageDetector.detect());
            } else if (!lng && this.services.languageDetector && this.services.languageDetector.async) {
              this.services.languageDetector.detect(setLng);
            } else {
              setLng(lng);
            }

            return deferred;
          }
        }, {
          key: "getFixedT",
          value: function getFixedT(lng, ns, keyPrefix) {
            var _this5 = this;

            var fixedT = function fixedT(key, opts) {
              var options;

              if (_typeof(opts) !== 'object') {
                for (var _len3 = arguments.length, rest = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {
                  rest[_key3 - 2] = arguments[_key3];
                }

                options = _this5.options.overloadTranslationOptionHandler([key, opts].concat(rest));
              } else {
                options = _objectSpread$6({}, opts);
              }

              options.lng = options.lng || fixedT.lng;
              options.lngs = options.lngs || fixedT.lngs;
              options.ns = options.ns || fixedT.ns;
              var keySeparator = _this5.options.keySeparator || '.';
              var resultKey = keyPrefix ? "".concat(keyPrefix).concat(keySeparator).concat(key) : key;
              return _this5.t(resultKey, options);
            };

            if (typeof lng === 'string') {
              fixedT.lng = lng;
            } else {
              fixedT.lngs = lng;
            }

            fixedT.ns = ns;
            fixedT.keyPrefix = keyPrefix;
            return fixedT;
          }
        }, {
          key: "t",
          value: function t() {
            var _this$translator;

            return this.translator && (_this$translator = this.translator).translate.apply(_this$translator, arguments);
          }
        }, {
          key: "exists",
          value: function exists() {
            var _this$translator2;

            return this.translator && (_this$translator2 = this.translator).exists.apply(_this$translator2, arguments);
          }
        }, {
          key: "setDefaultNamespace",
          value: function setDefaultNamespace(ns) {
            this.options.defaultNS = ns;
          }
        }, {
          key: "hasLoadedNamespace",
          value: function hasLoadedNamespace(ns) {
            var _this6 = this;

            var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

            if (!this.isInitialized) {
              this.logger.warn('hasLoadedNamespace: i18next was not initialized', this.languages);
              return false;
            }

            if (!this.languages || !this.languages.length) {
              this.logger.warn('hasLoadedNamespace: i18n.languages were undefined or empty', this.languages);
              return false;
            }

            var lng = this.resolvedLanguage || this.languages[0];
            var fallbackLng = this.options ? this.options.fallbackLng : false;
            var lastLng = this.languages[this.languages.length - 1];
            if (lng.toLowerCase() === 'cimode') return true;

            var loadNotPending = function loadNotPending(l, n) {
              var loadState = _this6.services.backendConnector.state["".concat(l, "|").concat(n)];

              return loadState === -1 || loadState === 2;
            };

            if (options.precheck) {
              var preResult = options.precheck(this, loadNotPending);
              if (preResult !== undefined) return preResult;
            }

            if (this.hasResourceBundle(lng, ns)) return true;
            if (!this.services.backendConnector.backend || this.options.resources && !this.options.partialBundledLanguages) return true;
            if (loadNotPending(lng, ns) && (!fallbackLng || loadNotPending(lastLng, ns))) return true;
            return false;
          }
        }, {
          key: "loadNamespaces",
          value: function loadNamespaces(ns, callback) {
            var _this7 = this;

            var deferred = defer();

            if (!this.options.ns) {
              callback && callback();
              return Promise.resolve();
            }

            if (typeof ns === 'string') ns = [ns];
            ns.forEach(function (n) {
              if (_this7.options.ns.indexOf(n) < 0) _this7.options.ns.push(n);
            });
            this.loadResources(function (err) {
              deferred.resolve();
              if (callback) callback(err);
            });
            return deferred;
          }
        }, {
          key: "loadLanguages",
          value: function loadLanguages(lngs, callback) {
            var deferred = defer();
            if (typeof lngs === 'string') lngs = [lngs];
            var preloaded = this.options.preload || [];
            var newLngs = lngs.filter(function (lng) {
              return preloaded.indexOf(lng) < 0;
            });

            if (!newLngs.length) {
              if (callback) callback();
              return Promise.resolve();
            }

            this.options.preload = preloaded.concat(newLngs);
            this.loadResources(function (err) {
              deferred.resolve();
              if (callback) callback(err);
            });
            return deferred;
          }
        }, {
          key: "dir",
          value: function dir(lng) {
            if (!lng) lng = this.resolvedLanguage || (this.languages && this.languages.length > 0 ? this.languages[0] : this.language);
            if (!lng) return 'rtl';
            var rtlLngs = ['ar', 'shu', 'sqr', 'ssh', 'xaa', 'yhd', 'yud', 'aao', 'abh', 'abv', 'acm', 'acq', 'acw', 'acx', 'acy', 'adf', 'ads', 'aeb', 'aec', 'afb', 'ajp', 'apc', 'apd', 'arb', 'arq', 'ars', 'ary', 'arz', 'auz', 'avl', 'ayh', 'ayl', 'ayn', 'ayp', 'bbz', 'pga', 'he', 'iw', 'ps', 'pbt', 'pbu', 'pst', 'prp', 'prd', 'ug', 'ur', 'ydd', 'yds', 'yih', 'ji', 'yi', 'hbo', 'men', 'xmn', 'fa', 'jpr', 'peo', 'pes', 'prs', 'dv', 'sam', 'ckb'];
            return rtlLngs.indexOf(this.services.languageUtils.getLanguagePartFromCode(lng)) > -1 || lng.toLowerCase().indexOf('-arab') > 1 ? 'rtl' : 'ltr';
          }
        }, {
          key: "cloneInstance",
          value: function cloneInstance() {
            var _this8 = this;

            var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
            var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;

            var mergedOptions = _objectSpread$6(_objectSpread$6(_objectSpread$6({}, this.options), options), {
              isClone: true
            });

            var clone = new I18n(mergedOptions);
            var membersToCopy = ['store', 'services', 'language'];
            membersToCopy.forEach(function (m) {
              clone[m] = _this8[m];
            });
            clone.services = _objectSpread$6({}, this.services);
            clone.services.utils = {
              hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)
            };
            clone.translator = new Translator(clone.services, clone.options);
            clone.translator.on('*', function (event) {
              for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
                args[_key4 - 1] = arguments[_key4];
              }

              clone.emit.apply(clone, [event].concat(args));
            });
            clone.init(mergedOptions, callback);
            clone.translator.options = clone.options;
            clone.translator.backendConnector.services.utils = {
              hasLoadedNamespace: clone.hasLoadedNamespace.bind(clone)
            };
            return clone;
          }
        }, {
          key: "toJSON",
          value: function toJSON() {
            return {
              options: this.options,
              store: this.store,
              language: this.language,
              languages: this.languages,
              resolvedLanguage: this.resolvedLanguage
            };
          }
        }]);

        return I18n;
      }(EventEmitter);

      _defineProperty(I18n, "createInstance", function () {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var callback = arguments.length > 1 ? arguments[1] : undefined;
        return new I18n(options, callback);
      });

      var instance = exports('default', I18n.createInstance());
      instance.createInstance = I18n.createInstance;
      var createInstance = exports('createInstance', instance.createInstance);
      var init = exports('init', instance.init);
      var loadResources = exports('loadResources', instance.loadResources);
      var reloadResources = exports('reloadResources', instance.reloadResources);
      var use = exports('use', instance.use);
      var changeLanguage = exports('changeLanguage', instance.changeLanguage);
      var getFixedT = exports('getFixedT', instance.getFixedT);
      var t = exports('t', instance.t);
      var exists = exports('exists', instance.exists);
      var setDefaultNamespace = exports('setDefaultNamespace', instance.setDefaultNamespace);
      var hasLoadedNamespace = exports('hasLoadedNamespace', instance.hasLoadedNamespace);
      var loadNamespaces = exports('loadNamespaces', instance.loadNamespaces);
      var loadLanguages = exports('loadLanguages', instance.loadLanguages);
    }
  };
});

System.register("chunks:///_virtual/index.js", ['./cjs-loader.mjs', './tslib.js', './index10.js', './CanonicalCodeForDisplayNames.js', './index9.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3, __cjsMetaURL$4;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$4 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.DisplayNames = void 0;

        var tslib_1 = require("tslib");

        var ecma402_abstract_1 = require("@formatjs/ecma402-abstract");

        var CanonicalCodeForDisplayNames_1 = require("./abstract/CanonicalCodeForDisplayNames");

        var intl_localematcher_1 = require("@formatjs/intl-localematcher");

        var DisplayNames =
        /** @class */
        function () {
          function DisplayNames(locales, options) {
            var _newTarget = this.constructor;

            if (_newTarget === undefined) {
              throw TypeError("Constructor Intl.DisplayNames requires 'new'");
            }

            var requestedLocales = (0, ecma402_abstract_1.CanonicalizeLocaleList)(locales);
            options = (0, ecma402_abstract_1.GetOptionsObject)(options);
            var opt = Object.create(null);
            var localeData = DisplayNames.localeData;
            var matcher = (0, ecma402_abstract_1.GetOption)(options, 'localeMatcher', 'string', ['lookup', 'best fit'], 'best fit');
            opt.localeMatcher = matcher;
            var r = (0, intl_localematcher_1.ResolveLocale)(DisplayNames.availableLocales, requestedLocales, opt, [], // there is no relevantExtensionKeys
            DisplayNames.localeData, DisplayNames.getDefaultLocale);
            var style = (0, ecma402_abstract_1.GetOption)(options, 'style', 'string', ['narrow', 'short', 'long'], 'long');
            setSlot(this, 'style', style);
            var type = (0, ecma402_abstract_1.GetOption)(options, 'type', 'string', ['language', 'currency', 'region', 'script'], undefined);

            if (type === undefined) {
              throw TypeError("Intl.DisplayNames constructor requires \"type\" option");
            }

            setSlot(this, 'type', type);
            var fallback = (0, ecma402_abstract_1.GetOption)(options, 'fallback', 'string', ['code', 'none'], 'code');
            setSlot(this, 'fallback', fallback);
            setSlot(this, 'locale', r.locale);
            var dataLocale = r.dataLocale;
            var dataLocaleData = localeData[dataLocale];
            (0, ecma402_abstract_1.invariant)(!!dataLocaleData, "Missing locale data for ".concat(dataLocale));
            setSlot(this, 'localeData', dataLocaleData);
            (0, ecma402_abstract_1.invariant)(dataLocaleData !== undefined, "locale data for ".concat(r.locale, " does not exist."));
            var types = dataLocaleData.types;
            (0, ecma402_abstract_1.invariant)(typeof types === 'object' && types != null, 'invalid types data');
            var typeFields = types[type];
            (0, ecma402_abstract_1.invariant)(typeof typeFields === 'object' && typeFields != null, 'invalid typeFields data');
            var styleFields = typeFields[style];
            (0, ecma402_abstract_1.invariant)(typeof styleFields === 'object' && styleFields != null, 'invalid styleFields data');
            setSlot(this, 'fields', styleFields);
          }

          DisplayNames.supportedLocalesOf = function (locales, options) {
            return (0, ecma402_abstract_1.SupportedLocales)(DisplayNames.availableLocales, (0, ecma402_abstract_1.CanonicalizeLocaleList)(locales), options);
          };

          DisplayNames.__addLocaleData = function () {
            var data = [];

            for (var _i = 0; _i < arguments.length; _i++) {
              data[_i] = arguments[_i];
            }

            for (var _a = 0, data_1 = data; _a < data_1.length; _a++) {
              var _b = data_1[_a],
                  d = _b.data,
                  locale = _b.locale;
              var minimizedLocale = new Intl.Locale(locale).minimize().toString();
              DisplayNames.localeData[locale] = DisplayNames.localeData[minimizedLocale] = d;
              DisplayNames.availableLocales.add(minimizedLocale);
              DisplayNames.availableLocales.add(locale);

              if (!DisplayNames.__defaultLocale) {
                DisplayNames.__defaultLocale = minimizedLocale;
              }
            }
          };

          DisplayNames.prototype.of = function (code) {
            checkReceiver(this, 'of');
            var type = getSlot(this, 'type');
            var codeAsString = (0, ecma402_abstract_1.ToString)(code);

            if (!isValidCodeForDisplayNames(type, codeAsString)) {
              throw RangeError('invalid code for Intl.DisplayNames.prototype.of');
            }

            var _a = (0, ecma402_abstract_1.getMultiInternalSlots)(__INTERNAL_SLOT_MAP__, this, 'localeData', 'style', 'fallback'),
                localeData = _a.localeData,
                style = _a.style,
                fallback = _a.fallback; // Canonicalize the case.


            var canonicalCode = (0, CanonicalCodeForDisplayNames_1.CanonicalCodeForDisplayNames)(type, codeAsString); // This is only used to store extracted language region.

            var regionSubTag;

            if (type === 'language') {
              var regionMatch = /-([a-z]{2}|\d{3})\b/i.exec(canonicalCode);

              if (regionMatch) {
                // Remove region subtag
                canonicalCode = canonicalCode.substring(0, regionMatch.index) + canonicalCode.substring(regionMatch.index + regionMatch[0].length);
                regionSubTag = regionMatch[1];
              }
            }

            var typesData = localeData.types[type]; // If the style of choice does not exist, fallback to "long".

            var name = typesData[style][canonicalCode] || typesData.long[canonicalCode];

            if (name !== undefined) {
              // If there is a region subtag in the language id, use locale pattern to interpolate the region
              if (regionSubTag) {
                // Retrieve region display names
                var regionsData = localeData.types.region;
                var regionDisplayName = regionsData[style][regionSubTag] || regionsData.long[regionSubTag];

                if (regionDisplayName || fallback === 'code') {
                  // Interpolate into locale-specific pattern.
                  var pattern = localeData.patterns.locale;
                  return pattern.replace('{0}', name).replace('{1}', regionDisplayName || regionSubTag);
                }
              } else {
                return name;
              }
            }

            if (fallback === 'code') {
              return codeAsString;
            }
          };

          DisplayNames.prototype.resolvedOptions = function () {
            checkReceiver(this, 'resolvedOptions');
            return (0, tslib_1.__assign)({}, (0, ecma402_abstract_1.getMultiInternalSlots)(__INTERNAL_SLOT_MAP__, this, 'locale', 'style', 'type', 'fallback'));
          };

          DisplayNames.getDefaultLocale = function () {
            return DisplayNames.__defaultLocale;
          };

          DisplayNames.localeData = {};
          DisplayNames.availableLocales = new Set();
          DisplayNames.__defaultLocale = '';
          DisplayNames.polyfilled = true;
          return DisplayNames;
        }();

        exports.DisplayNames = DisplayNames; // https://tc39.es/proposal-intl-displaynames/#sec-isvalidcodefordisplaynames

        function isValidCodeForDisplayNames(type, code) {
          switch (type) {
            case 'language':
              // subset of unicode_language_id
              // languageCode ["-" scriptCode] ["-" regionCode] *("-" variant)
              // where:
              // - languageCode is either a two letters ISO 639-1 language code or a three letters ISO 639-2 language code.
              // - scriptCode is should be an ISO-15924 four letters script code
              // - regionCode is either an ISO-3166 two letters region code, or a three digits UN M49 Geographic Regions.
              return /^[a-z]{2,3}(-[a-z]{4})?(-([a-z]{2}|\d{3}))?(-([a-z\d]{5,8}|\d[a-z\d]{3}))*$/i.test(code);

            case 'region':
              // unicode_region_subtag
              return /^([a-z]{2}|\d{3})$/i.test(code);

            case 'script':
              // unicode_script_subtag
              return /^[a-z]{4}$/i.test(code);

            case 'currency':
              return (0, ecma402_abstract_1.IsWellFormedCurrencyCode)(code);
          }
        }

        try {
          // IE11 does not have Symbol
          if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {
            Object.defineProperty(DisplayNames.prototype, Symbol.toStringTag, {
              value: 'Intl.DisplayNames',
              configurable: true,
              enumerable: false,
              writable: false
            });
          }

          Object.defineProperty(DisplayNames, 'length', {
            value: 2,
            writable: false,
            enumerable: false,
            configurable: true
          });
        } catch (e) {// Make test 262 compliant
        }

        var __INTERNAL_SLOT_MAP__ = new WeakMap();

        function getSlot(instance, key) {
          return (0, ecma402_abstract_1.getInternalSlot)(__INTERNAL_SLOT_MAP__, instance, key);
        }

        function setSlot(instance, key, value) {
          (0, ecma402_abstract_1.setInternalSlot)(__INTERNAL_SLOT_MAP__, instance, key, value);
        }

        function checkReceiver(receiver, methodName) {
          if (!(receiver instanceof DisplayNames)) {
            throw TypeError("Method Intl.DisplayNames.prototype.".concat(methodName, " called on incompatible receiver"));
          }
        } // #endregion ORIGINAL CODE


        module.exports;
        module.exports.__esModule;
        module.exports.DisplayNames;
      }, () => ({
        'tslib': __cjsMetaURL$1,
        '@formatjs/ecma402-abstract': __cjsMetaURL$2,
        './abstract/CanonicalCodeForDisplayNames': __cjsMetaURL$3,
        '@formatjs/intl-localematcher': __cjsMetaURL$4
      }));
    }
  };
});

System.register("chunks:///_virtual/index.mjs_cjs=&original=.js", ['./index.js', './cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var __cjsMetaURL, loader;

  return {
    setters: [function (module) {
      __cjsMetaURL = module.__cjsMetaURL;
      exports('__cjsMetaURL', module.__cjsMetaURL);
    }, function (module) {
      loader = module.default;
    }],
    execute: function () {
      // I am the facade module who provides access to the CommonJS module './index.js'~
      if (!__cjsMetaURL) {
        loader.throwInvalidWrapper('./index.js', module.meta.url);
      }

      loader.require(__cjsMetaURL);
    }
  };
});

System.register("chunks:///_virtual/index.mjs_cjs=&original=2.js", ['./index2.js', './cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var __cjsMetaURL, loader;

  return {
    setters: [function (module) {
      __cjsMetaURL = module.__cjsMetaURL;
      exports('__cjsMetaURL', module.__cjsMetaURL);
    }, function (module) {
      loader = module.default;
    }],
    execute: function () {
      // I am the facade module who provides access to the CommonJS module './index.js'~
      if (!__cjsMetaURL) {
        loader.throwInvalidWrapper('./index.js', module.meta.url);
      }

      loader.require(__cjsMetaURL);
    }
  };
});

System.register("chunks:///_virtual/index.mjs_cjs=&original=3.js", ['./index3.js', './cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var __cjsMetaURL, loader;

  return {
    setters: [function (module) {
      __cjsMetaURL = module.__cjsMetaURL;
      exports('__cjsMetaURL', module.__cjsMetaURL);
    }, function (module) {
      loader = module.default;
    }],
    execute: function () {
      // I am the facade module who provides access to the CommonJS module './index.js'~
      if (!__cjsMetaURL) {
        loader.throwInvalidWrapper('./index.js', module.meta.url);
      }

      loader.require(__cjsMetaURL);
    }
  };
});

System.register("chunks:///_virtual/index.mjs_cjs=&original=4.js", ['./index4.js', './cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var __cjsMetaURL, loader;

  return {
    setters: [function (module) {
      __cjsMetaURL = module.__cjsMetaURL;
      exports('__cjsMetaURL', module.__cjsMetaURL);
    }, function (module) {
      loader = module.default;
    }],
    execute: function () {
      // I am the facade module who provides access to the CommonJS module './index.js'~
      if (!__cjsMetaURL) {
        loader.throwInvalidWrapper('./index.js', module.meta.url);
      }

      loader.require(__cjsMetaURL);
    }
  };
});

System.register("chunks:///_virtual/index.mjs_cjs=&original=5.js", ['./index5.js', './cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var __cjsMetaURL, loader;

  return {
    setters: [function (module) {
      __cjsMetaURL = module.__cjsMetaURL;
      exports('__cjsMetaURL', module.__cjsMetaURL);
    }, function (module) {
      loader = module.default;
    }],
    execute: function () {
      // I am the facade module who provides access to the CommonJS module './index.js'~
      if (!__cjsMetaURL) {
        loader.throwInvalidWrapper('./index.js', module.meta.url);
      }

      loader.require(__cjsMetaURL);
    }
  };
});

System.register("chunks:///_virtual/index.mjs_cjs=&original=6.js", ['./index6.js', './cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var __cjsMetaURL, loader;

  return {
    setters: [function (module) {
      __cjsMetaURL = module.__cjsMetaURL;
      exports('__cjsMetaURL', module.__cjsMetaURL);
    }, function (module) {
      loader = module.default;
    }],
    execute: function () {
      // I am the facade module who provides access to the CommonJS module './index.js'~
      if (!__cjsMetaURL) {
        loader.throwInvalidWrapper('./index.js', module.meta.url);
      }

      loader.require(__cjsMetaURL);
    }
  };
});

System.register("chunks:///_virtual/index.mjs_cjs=&original=7.js", ['./index7.js', './cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var __cjsMetaURL, loader;

  return {
    setters: [function (module) {
      __cjsMetaURL = module.__cjsMetaURL;
      exports('__cjsMetaURL', module.__cjsMetaURL);
    }, function (module) {
      loader = module.default;
    }],
    execute: function () {
      // I am the facade module who provides access to the CommonJS module './index.js'~
      if (!__cjsMetaURL) {
        loader.throwInvalidWrapper('./index.js', module.meta.url);
      }

      loader.require(__cjsMetaURL);
    }
  };
});

System.register("chunks:///_virtual/index.mjs_cjs=&original=8.js", ['./index8.js', './cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var __cjsMetaURL, loader;

  return {
    setters: [function (module) {
      __cjsMetaURL = module.__cjsMetaURL;
      exports('__cjsMetaURL', module.__cjsMetaURL);
    }, function (module) {
      loader = module.default;
    }],
    execute: function () {
      // I am the facade module who provides access to the CommonJS module './index.js'~
      if (!__cjsMetaURL) {
        loader.throwInvalidWrapper('./index.js', module.meta.url);
      }

      loader.require(__cjsMetaURL);
    }
  };
});

System.register("chunks:///_virtual/index10.js", ['./cjs-loader.mjs', './tslib.js', './CanonicalizeLocaleList.js', './CanonicalizeTimeZoneName.js', './CoerceOptionsToObject.js', './GetNumberOption.js', './GetOption.js', './GetOptionsObject.js', './IsSanctionedSimpleUnitIdentifier.js', './IsValidTimeZoneName.js', './IsWellFormedCurrencyCode.js', './IsWellFormedUnitIdentifier.js', './ComputeExponent.js', './ComputeExponentForMagnitude.js', './CurrencyDigits.js', './FormatNumericToParts.js', './FormatNumericToString.js', './InitializeNumberFormat.js', './PartitionNumberPattern.js', './SetNumberFormatDigitOptions.js', './SetNumberFormatUnitOptions.js', './ToRawFixed.js', './ToRawPrecision.js', './format_to_parts.js', './PartitionPattern.js', './SupportedLocales.js', './utils2.js', './data.js', './relative-time.js', './date-time.js', './list.js', './plural-rules.js', './number.js', './displaynames.js', './262.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3, __cjsMetaURL$4, __cjsMetaURL$5, __cjsMetaURL$6, __cjsMetaURL$7, __cjsMetaURL$8, __cjsMetaURL$9, __cjsMetaURL$a, __cjsMetaURL$b, __cjsMetaURL$c, __cjsMetaURL$d, __cjsMetaURL$e, __cjsMetaURL$f, __cjsMetaURL$g, __cjsMetaURL$h, __cjsMetaURL$i, __cjsMetaURL$j, __cjsMetaURL$k, __cjsMetaURL$l, __cjsMetaURL$m, __cjsMetaURL$n, __cjsMetaURL$o, __cjsMetaURL$p, __cjsMetaURL$q, __cjsMetaURL$r, __cjsMetaURL$s, __cjsMetaURL$t, __cjsMetaURL$u, __cjsMetaURL$v, __cjsMetaURL$w, __cjsMetaURL$x, __cjsMetaURL$y;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$4 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$5 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$6 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$7 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$8 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$9 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$a = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$b = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$c = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$d = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$e = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$f = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$g = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$h = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$i = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$j = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$k = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$l = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$m = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$n = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$o = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$p = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$q = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$r = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$s = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$t = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$u = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$v = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$w = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$x = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$y = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.invariant = exports.isMissingLocaleDataError = exports.defineProperty = exports.getMagnitude = exports.setMultiInternalSlots = exports.setInternalSlot = exports.isLiteralPart = exports.getMultiInternalSlots = exports.getInternalSlot = exports._formatToParts = void 0;

        var tslib_1 = require("tslib");

        (0, tslib_1.__exportStar)(require("./CanonicalizeLocaleList"), exports);
        (0, tslib_1.__exportStar)(require("./CanonicalizeTimeZoneName"), exports);
        (0, tslib_1.__exportStar)(require("./CoerceOptionsToObject"), exports);
        (0, tslib_1.__exportStar)(require("./GetNumberOption"), exports);
        (0, tslib_1.__exportStar)(require("./GetOption"), exports);
        (0, tslib_1.__exportStar)(require("./GetOptionsObject"), exports);
        (0, tslib_1.__exportStar)(require("./IsSanctionedSimpleUnitIdentifier"), exports);
        (0, tslib_1.__exportStar)(require("./IsValidTimeZoneName"), exports);
        (0, tslib_1.__exportStar)(require("./IsWellFormedCurrencyCode"), exports);
        (0, tslib_1.__exportStar)(require("./IsWellFormedUnitIdentifier"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/ComputeExponent"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/ComputeExponentForMagnitude"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/CurrencyDigits"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/FormatNumericToParts"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/FormatNumericToString"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/InitializeNumberFormat"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/PartitionNumberPattern"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/SetNumberFormatDigitOptions"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/SetNumberFormatUnitOptions"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/ToRawFixed"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/ToRawPrecision"), exports);

        var format_to_parts_1 = require("./NumberFormat/format_to_parts");

        Object.defineProperty(exports, "_formatToParts", {
          enumerable: true,
          get: function () {
            return (0, tslib_1.__importDefault)(format_to_parts_1).default;
          }
        });
        (0, tslib_1.__exportStar)(require("./PartitionPattern"), exports);
        (0, tslib_1.__exportStar)(require("./SupportedLocales"), exports);

        var utils_1 = require("./utils");

        Object.defineProperty(exports, "getInternalSlot", {
          enumerable: true,
          get: function () {
            return utils_1.getInternalSlot;
          }
        });
        Object.defineProperty(exports, "getMultiInternalSlots", {
          enumerable: true,
          get: function () {
            return utils_1.getMultiInternalSlots;
          }
        });
        Object.defineProperty(exports, "isLiteralPart", {
          enumerable: true,
          get: function () {
            return utils_1.isLiteralPart;
          }
        });
        Object.defineProperty(exports, "setInternalSlot", {
          enumerable: true,
          get: function () {
            return utils_1.setInternalSlot;
          }
        });
        Object.defineProperty(exports, "setMultiInternalSlots", {
          enumerable: true,
          get: function () {
            return utils_1.setMultiInternalSlots;
          }
        });
        Object.defineProperty(exports, "getMagnitude", {
          enumerable: true,
          get: function () {
            return utils_1.getMagnitude;
          }
        });
        Object.defineProperty(exports, "defineProperty", {
          enumerable: true,
          get: function () {
            return utils_1.defineProperty;
          }
        });

        var data_1 = require("./data");

        Object.defineProperty(exports, "isMissingLocaleDataError", {
          enumerable: true,
          get: function () {
            return data_1.isMissingLocaleDataError;
          }
        });
        (0, tslib_1.__exportStar)(require("./types/relative-time"), exports);
        (0, tslib_1.__exportStar)(require("./types/date-time"), exports);
        (0, tslib_1.__exportStar)(require("./types/list"), exports);
        (0, tslib_1.__exportStar)(require("./types/plural-rules"), exports);
        (0, tslib_1.__exportStar)(require("./types/number"), exports);
        (0, tslib_1.__exportStar)(require("./types/displaynames"), exports);

        var utils_2 = require("./utils");

        Object.defineProperty(exports, "invariant", {
          enumerable: true,
          get: function () {
            return utils_2.invariant;
          }
        });
        (0, tslib_1.__exportStar)(require("./262"), exports); // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.invariant;
        module.exports.isMissingLocaleDataError;
        module.exports.defineProperty;
        module.exports.getMagnitude;
        module.exports.setMultiInternalSlots;
        module.exports.setInternalSlot;
        module.exports.isLiteralPart;
        module.exports.getMultiInternalSlots;
        module.exports.getInternalSlot;
      }, () => ({
        'tslib': __cjsMetaURL$1,
        './CanonicalizeLocaleList': __cjsMetaURL$2,
        './CanonicalizeTimeZoneName': __cjsMetaURL$3,
        './CoerceOptionsToObject': __cjsMetaURL$4,
        './GetNumberOption': __cjsMetaURL$5,
        './GetOption': __cjsMetaURL$6,
        './GetOptionsObject': __cjsMetaURL$7,
        './IsSanctionedSimpleUnitIdentifier': __cjsMetaURL$8,
        './IsValidTimeZoneName': __cjsMetaURL$9,
        './IsWellFormedCurrencyCode': __cjsMetaURL$a,
        './IsWellFormedUnitIdentifier': __cjsMetaURL$b,
        './NumberFormat/ComputeExponent': __cjsMetaURL$c,
        './NumberFormat/ComputeExponentForMagnitude': __cjsMetaURL$d,
        './NumberFormat/CurrencyDigits': __cjsMetaURL$e,
        './NumberFormat/FormatNumericToParts': __cjsMetaURL$f,
        './NumberFormat/FormatNumericToString': __cjsMetaURL$g,
        './NumberFormat/InitializeNumberFormat': __cjsMetaURL$h,
        './NumberFormat/PartitionNumberPattern': __cjsMetaURL$i,
        './NumberFormat/SetNumberFormatDigitOptions': __cjsMetaURL$j,
        './NumberFormat/SetNumberFormatUnitOptions': __cjsMetaURL$k,
        './NumberFormat/ToRawFixed': __cjsMetaURL$l,
        './NumberFormat/ToRawPrecision': __cjsMetaURL$m,
        './NumberFormat/format_to_parts': __cjsMetaURL$n,
        './PartitionPattern': __cjsMetaURL$o,
        './SupportedLocales': __cjsMetaURL$p,
        './utils': __cjsMetaURL$q,
        './data': __cjsMetaURL$r,
        './types/relative-time': __cjsMetaURL$s,
        './types/date-time': __cjsMetaURL$t,
        './types/list': __cjsMetaURL$u,
        './types/plural-rules': __cjsMetaURL$v,
        './types/number': __cjsMetaURL$w,
        './types/displaynames': __cjsMetaURL$x,
        './utils': __cjsMetaURL$q,
        './262': __cjsMetaURL$y
      }));
    }
  };
});

System.register("chunks:///_virtual/index11.js", ['./cjs-loader.mjs', './tslib2.js', './CanonicalizeLocaleList2.js', './CanonicalizeTimeZoneName2.js', './CoerceOptionsToObject2.js', './GetNumberOption2.js', './GetOption2.js', './GetOptionsObject2.js', './IsSanctionedSimpleUnitIdentifier2.js', './IsValidTimeZoneName2.js', './IsWellFormedCurrencyCode2.js', './IsWellFormedUnitIdentifier2.js', './ComputeExponent2.js', './ComputeExponentForMagnitude2.js', './CurrencyDigits2.js', './FormatNumericToParts2.js', './FormatNumericToString2.js', './InitializeNumberFormat2.js', './PartitionNumberPattern2.js', './SetNumberFormatDigitOptions2.js', './SetNumberFormatUnitOptions2.js', './ToRawFixed2.js', './ToRawPrecision2.js', './format_to_parts2.js', './PartitionPattern2.js', './SupportedLocales2.js', './utils3.js', './data2.js', './relative-time2.js', './date-time2.js', './list2.js', './plural-rules2.js', './number2.js', './displaynames2.js', './2622.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3, __cjsMetaURL$4, __cjsMetaURL$5, __cjsMetaURL$6, __cjsMetaURL$7, __cjsMetaURL$8, __cjsMetaURL$9, __cjsMetaURL$a, __cjsMetaURL$b, __cjsMetaURL$c, __cjsMetaURL$d, __cjsMetaURL$e, __cjsMetaURL$f, __cjsMetaURL$g, __cjsMetaURL$h, __cjsMetaURL$i, __cjsMetaURL$j, __cjsMetaURL$k, __cjsMetaURL$l, __cjsMetaURL$m, __cjsMetaURL$n, __cjsMetaURL$o, __cjsMetaURL$p, __cjsMetaURL$q, __cjsMetaURL$r, __cjsMetaURL$s, __cjsMetaURL$t, __cjsMetaURL$u, __cjsMetaURL$v, __cjsMetaURL$w, __cjsMetaURL$x, __cjsMetaURL$y;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$4 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$5 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$6 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$7 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$8 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$9 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$a = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$b = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$c = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$d = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$e = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$f = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$g = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$h = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$i = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$j = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$k = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$l = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$m = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$n = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$o = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$p = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$q = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$r = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$s = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$t = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$u = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$v = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$w = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$x = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$y = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.invariant = exports.isMissingLocaleDataError = exports.defineProperty = exports.getMagnitude = exports.setMultiInternalSlots = exports.setInternalSlot = exports.isLiteralPart = exports.getMultiInternalSlots = exports.getInternalSlot = exports._formatToParts = void 0;

        var tslib_1 = require("tslib");

        (0, tslib_1.__exportStar)(require("./CanonicalizeLocaleList"), exports);
        (0, tslib_1.__exportStar)(require("./CanonicalizeTimeZoneName"), exports);
        (0, tslib_1.__exportStar)(require("./CoerceOptionsToObject"), exports);
        (0, tslib_1.__exportStar)(require("./GetNumberOption"), exports);
        (0, tslib_1.__exportStar)(require("./GetOption"), exports);
        (0, tslib_1.__exportStar)(require("./GetOptionsObject"), exports);
        (0, tslib_1.__exportStar)(require("./IsSanctionedSimpleUnitIdentifier"), exports);
        (0, tslib_1.__exportStar)(require("./IsValidTimeZoneName"), exports);
        (0, tslib_1.__exportStar)(require("./IsWellFormedCurrencyCode"), exports);
        (0, tslib_1.__exportStar)(require("./IsWellFormedUnitIdentifier"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/ComputeExponent"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/ComputeExponentForMagnitude"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/CurrencyDigits"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/FormatNumericToParts"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/FormatNumericToString"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/InitializeNumberFormat"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/PartitionNumberPattern"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/SetNumberFormatDigitOptions"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/SetNumberFormatUnitOptions"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/ToRawFixed"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/ToRawPrecision"), exports);

        var format_to_parts_1 = require("./NumberFormat/format_to_parts");

        Object.defineProperty(exports, "_formatToParts", {
          enumerable: true,
          get: function () {
            return (0, tslib_1.__importDefault)(format_to_parts_1).default;
          }
        });
        (0, tslib_1.__exportStar)(require("./PartitionPattern"), exports);
        (0, tslib_1.__exportStar)(require("./SupportedLocales"), exports);

        var utils_1 = require("./utils");

        Object.defineProperty(exports, "getInternalSlot", {
          enumerable: true,
          get: function () {
            return utils_1.getInternalSlot;
          }
        });
        Object.defineProperty(exports, "getMultiInternalSlots", {
          enumerable: true,
          get: function () {
            return utils_1.getMultiInternalSlots;
          }
        });
        Object.defineProperty(exports, "isLiteralPart", {
          enumerable: true,
          get: function () {
            return utils_1.isLiteralPart;
          }
        });
        Object.defineProperty(exports, "setInternalSlot", {
          enumerable: true,
          get: function () {
            return utils_1.setInternalSlot;
          }
        });
        Object.defineProperty(exports, "setMultiInternalSlots", {
          enumerable: true,
          get: function () {
            return utils_1.setMultiInternalSlots;
          }
        });
        Object.defineProperty(exports, "getMagnitude", {
          enumerable: true,
          get: function () {
            return utils_1.getMagnitude;
          }
        });
        Object.defineProperty(exports, "defineProperty", {
          enumerable: true,
          get: function () {
            return utils_1.defineProperty;
          }
        });

        var data_1 = require("./data");

        Object.defineProperty(exports, "isMissingLocaleDataError", {
          enumerable: true,
          get: function () {
            return data_1.isMissingLocaleDataError;
          }
        });
        (0, tslib_1.__exportStar)(require("./types/relative-time"), exports);
        (0, tslib_1.__exportStar)(require("./types/date-time"), exports);
        (0, tslib_1.__exportStar)(require("./types/list"), exports);
        (0, tslib_1.__exportStar)(require("./types/plural-rules"), exports);
        (0, tslib_1.__exportStar)(require("./types/number"), exports);
        (0, tslib_1.__exportStar)(require("./types/displaynames"), exports);

        var utils_2 = require("./utils");

        Object.defineProperty(exports, "invariant", {
          enumerable: true,
          get: function () {
            return utils_2.invariant;
          }
        });
        (0, tslib_1.__exportStar)(require("./262"), exports); // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.invariant;
        module.exports.isMissingLocaleDataError;
        module.exports.defineProperty;
        module.exports.getMagnitude;
        module.exports.setMultiInternalSlots;
        module.exports.setInternalSlot;
        module.exports.isLiteralPart;
        module.exports.getMultiInternalSlots;
        module.exports.getInternalSlot;
      }, () => ({
        'tslib': __cjsMetaURL$1,
        './CanonicalizeLocaleList': __cjsMetaURL$2,
        './CanonicalizeTimeZoneName': __cjsMetaURL$3,
        './CoerceOptionsToObject': __cjsMetaURL$4,
        './GetNumberOption': __cjsMetaURL$5,
        './GetOption': __cjsMetaURL$6,
        './GetOptionsObject': __cjsMetaURL$7,
        './IsSanctionedSimpleUnitIdentifier': __cjsMetaURL$8,
        './IsValidTimeZoneName': __cjsMetaURL$9,
        './IsWellFormedCurrencyCode': __cjsMetaURL$a,
        './IsWellFormedUnitIdentifier': __cjsMetaURL$b,
        './NumberFormat/ComputeExponent': __cjsMetaURL$c,
        './NumberFormat/ComputeExponentForMagnitude': __cjsMetaURL$d,
        './NumberFormat/CurrencyDigits': __cjsMetaURL$e,
        './NumberFormat/FormatNumericToParts': __cjsMetaURL$f,
        './NumberFormat/FormatNumericToString': __cjsMetaURL$g,
        './NumberFormat/InitializeNumberFormat': __cjsMetaURL$h,
        './NumberFormat/PartitionNumberPattern': __cjsMetaURL$i,
        './NumberFormat/SetNumberFormatDigitOptions': __cjsMetaURL$j,
        './NumberFormat/SetNumberFormatUnitOptions': __cjsMetaURL$k,
        './NumberFormat/ToRawFixed': __cjsMetaURL$l,
        './NumberFormat/ToRawPrecision': __cjsMetaURL$m,
        './NumberFormat/format_to_parts': __cjsMetaURL$n,
        './PartitionPattern': __cjsMetaURL$o,
        './SupportedLocales': __cjsMetaURL$p,
        './utils': __cjsMetaURL$q,
        './data': __cjsMetaURL$r,
        './types/relative-time': __cjsMetaURL$s,
        './types/date-time': __cjsMetaURL$t,
        './types/list': __cjsMetaURL$u,
        './types/plural-rules': __cjsMetaURL$v,
        './types/number': __cjsMetaURL$w,
        './types/displaynames': __cjsMetaURL$x,
        './utils': __cjsMetaURL$q,
        './262': __cjsMetaURL$y
      }));
    }
  };
});

System.register("chunks:///_virtual/index12.js", ['./cjs-loader.mjs', './tslib6.js', './CanonicalizeLocaleList3.js', './CanonicalizeTimeZoneName3.js', './CoerceOptionsToObject3.js', './GetNumberOption3.js', './GetOption3.js', './GetOptionsObject3.js', './IsSanctionedSimpleUnitIdentifier3.js', './IsValidTimeZoneName3.js', './IsWellFormedCurrencyCode3.js', './IsWellFormedUnitIdentifier3.js', './ComputeExponent3.js', './ComputeExponentForMagnitude3.js', './CurrencyDigits3.js', './FormatNumericToParts3.js', './FormatNumericToString3.js', './InitializeNumberFormat3.js', './PartitionNumberPattern3.js', './SetNumberFormatDigitOptions3.js', './SetNumberFormatUnitOptions3.js', './ToRawFixed3.js', './ToRawPrecision3.js', './format_to_parts3.js', './PartitionPattern3.js', './SupportedLocales3.js', './utils4.js', './data3.js', './relative-time3.js', './date-time3.js', './list3.js', './plural-rules3.js', './number3.js', './displaynames3.js', './2623.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3, __cjsMetaURL$4, __cjsMetaURL$5, __cjsMetaURL$6, __cjsMetaURL$7, __cjsMetaURL$8, __cjsMetaURL$9, __cjsMetaURL$a, __cjsMetaURL$b, __cjsMetaURL$c, __cjsMetaURL$d, __cjsMetaURL$e, __cjsMetaURL$f, __cjsMetaURL$g, __cjsMetaURL$h, __cjsMetaURL$i, __cjsMetaURL$j, __cjsMetaURL$k, __cjsMetaURL$l, __cjsMetaURL$m, __cjsMetaURL$n, __cjsMetaURL$o, __cjsMetaURL$p, __cjsMetaURL$q, __cjsMetaURL$r, __cjsMetaURL$s, __cjsMetaURL$t, __cjsMetaURL$u, __cjsMetaURL$v, __cjsMetaURL$w, __cjsMetaURL$x, __cjsMetaURL$y;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$4 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$5 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$6 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$7 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$8 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$9 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$a = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$b = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$c = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$d = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$e = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$f = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$g = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$h = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$i = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$j = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$k = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$l = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$m = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$n = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$o = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$p = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$q = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$r = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$s = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$t = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$u = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$v = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$w = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$x = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$y = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.invariant = exports.isMissingLocaleDataError = exports.defineProperty = exports.getMagnitude = exports.setMultiInternalSlots = exports.setInternalSlot = exports.isLiteralPart = exports.getMultiInternalSlots = exports.getInternalSlot = exports._formatToParts = void 0;

        var tslib_1 = require("tslib");

        (0, tslib_1.__exportStar)(require("./CanonicalizeLocaleList"), exports);
        (0, tslib_1.__exportStar)(require("./CanonicalizeTimeZoneName"), exports);
        (0, tslib_1.__exportStar)(require("./CoerceOptionsToObject"), exports);
        (0, tslib_1.__exportStar)(require("./GetNumberOption"), exports);
        (0, tslib_1.__exportStar)(require("./GetOption"), exports);
        (0, tslib_1.__exportStar)(require("./GetOptionsObject"), exports);
        (0, tslib_1.__exportStar)(require("./IsSanctionedSimpleUnitIdentifier"), exports);
        (0, tslib_1.__exportStar)(require("./IsValidTimeZoneName"), exports);
        (0, tslib_1.__exportStar)(require("./IsWellFormedCurrencyCode"), exports);
        (0, tslib_1.__exportStar)(require("./IsWellFormedUnitIdentifier"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/ComputeExponent"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/ComputeExponentForMagnitude"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/CurrencyDigits"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/FormatNumericToParts"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/FormatNumericToString"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/InitializeNumberFormat"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/PartitionNumberPattern"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/SetNumberFormatDigitOptions"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/SetNumberFormatUnitOptions"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/ToRawFixed"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/ToRawPrecision"), exports);

        var format_to_parts_1 = require("./NumberFormat/format_to_parts");

        Object.defineProperty(exports, "_formatToParts", {
          enumerable: true,
          get: function () {
            return (0, tslib_1.__importDefault)(format_to_parts_1).default;
          }
        });
        (0, tslib_1.__exportStar)(require("./PartitionPattern"), exports);
        (0, tslib_1.__exportStar)(require("./SupportedLocales"), exports);

        var utils_1 = require("./utils");

        Object.defineProperty(exports, "getInternalSlot", {
          enumerable: true,
          get: function () {
            return utils_1.getInternalSlot;
          }
        });
        Object.defineProperty(exports, "getMultiInternalSlots", {
          enumerable: true,
          get: function () {
            return utils_1.getMultiInternalSlots;
          }
        });
        Object.defineProperty(exports, "isLiteralPart", {
          enumerable: true,
          get: function () {
            return utils_1.isLiteralPart;
          }
        });
        Object.defineProperty(exports, "setInternalSlot", {
          enumerable: true,
          get: function () {
            return utils_1.setInternalSlot;
          }
        });
        Object.defineProperty(exports, "setMultiInternalSlots", {
          enumerable: true,
          get: function () {
            return utils_1.setMultiInternalSlots;
          }
        });
        Object.defineProperty(exports, "getMagnitude", {
          enumerable: true,
          get: function () {
            return utils_1.getMagnitude;
          }
        });
        Object.defineProperty(exports, "defineProperty", {
          enumerable: true,
          get: function () {
            return utils_1.defineProperty;
          }
        });

        var data_1 = require("./data");

        Object.defineProperty(exports, "isMissingLocaleDataError", {
          enumerable: true,
          get: function () {
            return data_1.isMissingLocaleDataError;
          }
        });
        (0, tslib_1.__exportStar)(require("./types/relative-time"), exports);
        (0, tslib_1.__exportStar)(require("./types/date-time"), exports);
        (0, tslib_1.__exportStar)(require("./types/list"), exports);
        (0, tslib_1.__exportStar)(require("./types/plural-rules"), exports);
        (0, tslib_1.__exportStar)(require("./types/number"), exports);
        (0, tslib_1.__exportStar)(require("./types/displaynames"), exports);

        var utils_2 = require("./utils");

        Object.defineProperty(exports, "invariant", {
          enumerable: true,
          get: function () {
            return utils_2.invariant;
          }
        });
        (0, tslib_1.__exportStar)(require("./262"), exports); // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.invariant;
        module.exports.isMissingLocaleDataError;
        module.exports.defineProperty;
        module.exports.getMagnitude;
        module.exports.setMultiInternalSlots;
        module.exports.setInternalSlot;
        module.exports.isLiteralPart;
        module.exports.getMultiInternalSlots;
        module.exports.getInternalSlot;
      }, () => ({
        'tslib': __cjsMetaURL$1,
        './CanonicalizeLocaleList': __cjsMetaURL$2,
        './CanonicalizeTimeZoneName': __cjsMetaURL$3,
        './CoerceOptionsToObject': __cjsMetaURL$4,
        './GetNumberOption': __cjsMetaURL$5,
        './GetOption': __cjsMetaURL$6,
        './GetOptionsObject': __cjsMetaURL$7,
        './IsSanctionedSimpleUnitIdentifier': __cjsMetaURL$8,
        './IsValidTimeZoneName': __cjsMetaURL$9,
        './IsWellFormedCurrencyCode': __cjsMetaURL$a,
        './IsWellFormedUnitIdentifier': __cjsMetaURL$b,
        './NumberFormat/ComputeExponent': __cjsMetaURL$c,
        './NumberFormat/ComputeExponentForMagnitude': __cjsMetaURL$d,
        './NumberFormat/CurrencyDigits': __cjsMetaURL$e,
        './NumberFormat/FormatNumericToParts': __cjsMetaURL$f,
        './NumberFormat/FormatNumericToString': __cjsMetaURL$g,
        './NumberFormat/InitializeNumberFormat': __cjsMetaURL$h,
        './NumberFormat/PartitionNumberPattern': __cjsMetaURL$i,
        './NumberFormat/SetNumberFormatDigitOptions': __cjsMetaURL$j,
        './NumberFormat/SetNumberFormatUnitOptions': __cjsMetaURL$k,
        './NumberFormat/ToRawFixed': __cjsMetaURL$l,
        './NumberFormat/ToRawPrecision': __cjsMetaURL$m,
        './NumberFormat/format_to_parts': __cjsMetaURL$n,
        './PartitionPattern': __cjsMetaURL$o,
        './SupportedLocales': __cjsMetaURL$p,
        './utils': __cjsMetaURL$q,
        './data': __cjsMetaURL$r,
        './types/relative-time': __cjsMetaURL$s,
        './types/date-time': __cjsMetaURL$t,
        './types/list': __cjsMetaURL$u,
        './types/plural-rules': __cjsMetaURL$v,
        './types/number': __cjsMetaURL$w,
        './types/displaynames': __cjsMetaURL$x,
        './utils': __cjsMetaURL$q,
        './262': __cjsMetaURL$y
      }));
    }
  };
});

System.register("chunks:///_virtual/index13.js", ['./cjs-loader.mjs', './tslib7.js', './CanonicalizeLocaleList5.js', './CanonicalizeTimeZoneName4.js', './CoerceOptionsToObject4.js', './GetNumberOption4.js', './GetOption4.js', './GetOptionsObject4.js', './IsSanctionedSimpleUnitIdentifier4.js', './IsValidTimeZoneName4.js', './IsWellFormedCurrencyCode4.js', './IsWellFormedUnitIdentifier4.js', './ComputeExponent4.js', './ComputeExponentForMagnitude4.js', './CurrencyDigits4.js', './FormatNumericToParts4.js', './FormatNumericToString4.js', './InitializeNumberFormat4.js', './PartitionNumberPattern4.js', './SetNumberFormatDigitOptions4.js', './SetNumberFormatUnitOptions4.js', './ToRawFixed4.js', './ToRawPrecision4.js', './format_to_parts4.js', './PartitionPattern4.js', './SupportedLocales4.js', './utils5.js', './data4.js', './relative-time4.js', './date-time4.js', './list4.js', './plural-rules4.js', './number4.js', './displaynames4.js', './2624.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3, __cjsMetaURL$4, __cjsMetaURL$5, __cjsMetaURL$6, __cjsMetaURL$7, __cjsMetaURL$8, __cjsMetaURL$9, __cjsMetaURL$a, __cjsMetaURL$b, __cjsMetaURL$c, __cjsMetaURL$d, __cjsMetaURL$e, __cjsMetaURL$f, __cjsMetaURL$g, __cjsMetaURL$h, __cjsMetaURL$i, __cjsMetaURL$j, __cjsMetaURL$k, __cjsMetaURL$l, __cjsMetaURL$m, __cjsMetaURL$n, __cjsMetaURL$o, __cjsMetaURL$p, __cjsMetaURL$q, __cjsMetaURL$r, __cjsMetaURL$s, __cjsMetaURL$t, __cjsMetaURL$u, __cjsMetaURL$v, __cjsMetaURL$w, __cjsMetaURL$x, __cjsMetaURL$y;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$4 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$5 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$6 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$7 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$8 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$9 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$a = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$b = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$c = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$d = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$e = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$f = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$g = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$h = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$i = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$j = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$k = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$l = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$m = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$n = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$o = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$p = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$q = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$r = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$s = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$t = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$u = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$v = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$w = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$x = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$y = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.invariant = exports.isMissingLocaleDataError = exports.defineProperty = exports.getMagnitude = exports.setMultiInternalSlots = exports.setInternalSlot = exports.isLiteralPart = exports.getMultiInternalSlots = exports.getInternalSlot = exports._formatToParts = void 0;

        var tslib_1 = require("tslib");

        (0, tslib_1.__exportStar)(require("./CanonicalizeLocaleList"), exports);
        (0, tslib_1.__exportStar)(require("./CanonicalizeTimeZoneName"), exports);
        (0, tslib_1.__exportStar)(require("./CoerceOptionsToObject"), exports);
        (0, tslib_1.__exportStar)(require("./GetNumberOption"), exports);
        (0, tslib_1.__exportStar)(require("./GetOption"), exports);
        (0, tslib_1.__exportStar)(require("./GetOptionsObject"), exports);
        (0, tslib_1.__exportStar)(require("./IsSanctionedSimpleUnitIdentifier"), exports);
        (0, tslib_1.__exportStar)(require("./IsValidTimeZoneName"), exports);
        (0, tslib_1.__exportStar)(require("./IsWellFormedCurrencyCode"), exports);
        (0, tslib_1.__exportStar)(require("./IsWellFormedUnitIdentifier"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/ComputeExponent"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/ComputeExponentForMagnitude"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/CurrencyDigits"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/FormatNumericToParts"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/FormatNumericToString"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/InitializeNumberFormat"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/PartitionNumberPattern"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/SetNumberFormatDigitOptions"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/SetNumberFormatUnitOptions"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/ToRawFixed"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/ToRawPrecision"), exports);

        var format_to_parts_1 = require("./NumberFormat/format_to_parts");

        Object.defineProperty(exports, "_formatToParts", {
          enumerable: true,
          get: function () {
            return (0, tslib_1.__importDefault)(format_to_parts_1).default;
          }
        });
        (0, tslib_1.__exportStar)(require("./PartitionPattern"), exports);
        (0, tslib_1.__exportStar)(require("./SupportedLocales"), exports);

        var utils_1 = require("./utils");

        Object.defineProperty(exports, "getInternalSlot", {
          enumerable: true,
          get: function () {
            return utils_1.getInternalSlot;
          }
        });
        Object.defineProperty(exports, "getMultiInternalSlots", {
          enumerable: true,
          get: function () {
            return utils_1.getMultiInternalSlots;
          }
        });
        Object.defineProperty(exports, "isLiteralPart", {
          enumerable: true,
          get: function () {
            return utils_1.isLiteralPart;
          }
        });
        Object.defineProperty(exports, "setInternalSlot", {
          enumerable: true,
          get: function () {
            return utils_1.setInternalSlot;
          }
        });
        Object.defineProperty(exports, "setMultiInternalSlots", {
          enumerable: true,
          get: function () {
            return utils_1.setMultiInternalSlots;
          }
        });
        Object.defineProperty(exports, "getMagnitude", {
          enumerable: true,
          get: function () {
            return utils_1.getMagnitude;
          }
        });
        Object.defineProperty(exports, "defineProperty", {
          enumerable: true,
          get: function () {
            return utils_1.defineProperty;
          }
        });

        var data_1 = require("./data");

        Object.defineProperty(exports, "isMissingLocaleDataError", {
          enumerable: true,
          get: function () {
            return data_1.isMissingLocaleDataError;
          }
        });
        (0, tslib_1.__exportStar)(require("./types/relative-time"), exports);
        (0, tslib_1.__exportStar)(require("./types/date-time"), exports);
        (0, tslib_1.__exportStar)(require("./types/list"), exports);
        (0, tslib_1.__exportStar)(require("./types/plural-rules"), exports);
        (0, tslib_1.__exportStar)(require("./types/number"), exports);
        (0, tslib_1.__exportStar)(require("./types/displaynames"), exports);

        var utils_2 = require("./utils");

        Object.defineProperty(exports, "invariant", {
          enumerable: true,
          get: function () {
            return utils_2.invariant;
          }
        });
        (0, tslib_1.__exportStar)(require("./262"), exports); // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.invariant;
        module.exports.isMissingLocaleDataError;
        module.exports.defineProperty;
        module.exports.getMagnitude;
        module.exports.setMultiInternalSlots;
        module.exports.setInternalSlot;
        module.exports.isLiteralPart;
        module.exports.getMultiInternalSlots;
        module.exports.getInternalSlot;
      }, () => ({
        'tslib': __cjsMetaURL$1,
        './CanonicalizeLocaleList': __cjsMetaURL$2,
        './CanonicalizeTimeZoneName': __cjsMetaURL$3,
        './CoerceOptionsToObject': __cjsMetaURL$4,
        './GetNumberOption': __cjsMetaURL$5,
        './GetOption': __cjsMetaURL$6,
        './GetOptionsObject': __cjsMetaURL$7,
        './IsSanctionedSimpleUnitIdentifier': __cjsMetaURL$8,
        './IsValidTimeZoneName': __cjsMetaURL$9,
        './IsWellFormedCurrencyCode': __cjsMetaURL$a,
        './IsWellFormedUnitIdentifier': __cjsMetaURL$b,
        './NumberFormat/ComputeExponent': __cjsMetaURL$c,
        './NumberFormat/ComputeExponentForMagnitude': __cjsMetaURL$d,
        './NumberFormat/CurrencyDigits': __cjsMetaURL$e,
        './NumberFormat/FormatNumericToParts': __cjsMetaURL$f,
        './NumberFormat/FormatNumericToString': __cjsMetaURL$g,
        './NumberFormat/InitializeNumberFormat': __cjsMetaURL$h,
        './NumberFormat/PartitionNumberPattern': __cjsMetaURL$i,
        './NumberFormat/SetNumberFormatDigitOptions': __cjsMetaURL$j,
        './NumberFormat/SetNumberFormatUnitOptions': __cjsMetaURL$k,
        './NumberFormat/ToRawFixed': __cjsMetaURL$l,
        './NumberFormat/ToRawPrecision': __cjsMetaURL$m,
        './NumberFormat/format_to_parts': __cjsMetaURL$n,
        './PartitionPattern': __cjsMetaURL$o,
        './SupportedLocales': __cjsMetaURL$p,
        './utils': __cjsMetaURL$q,
        './data': __cjsMetaURL$r,
        './types/relative-time': __cjsMetaURL$s,
        './types/date-time': __cjsMetaURL$t,
        './types/list': __cjsMetaURL$u,
        './types/plural-rules': __cjsMetaURL$v,
        './types/number': __cjsMetaURL$w,
        './types/displaynames': __cjsMetaURL$x,
        './utils': __cjsMetaURL$q,
        './262': __cjsMetaURL$y
      }));
    }
  };
});

System.register("chunks:///_virtual/index14.js", ['./cjs-loader.mjs', './tslib9.js', './CanonicalizeLocaleList6.js', './CanonicalizeTimeZoneName5.js', './CoerceOptionsToObject5.js', './GetNumberOption5.js', './GetOption5.js', './GetOptionsObject5.js', './IsSanctionedSimpleUnitIdentifier5.js', './IsValidTimeZoneName5.js', './IsWellFormedCurrencyCode5.js', './IsWellFormedUnitIdentifier5.js', './ComputeExponent5.js', './ComputeExponentForMagnitude5.js', './CurrencyDigits5.js', './FormatNumericToParts5.js', './FormatNumericToString5.js', './InitializeNumberFormat5.js', './PartitionNumberPattern5.js', './SetNumberFormatDigitOptions5.js', './SetNumberFormatUnitOptions5.js', './ToRawFixed5.js', './ToRawPrecision5.js', './format_to_parts5.js', './PartitionPattern5.js', './SupportedLocales5.js', './utils6.js', './data5.js', './relative-time5.js', './date-time5.js', './list5.js', './plural-rules5.js', './number5.js', './displaynames5.js', './2625.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3, __cjsMetaURL$4, __cjsMetaURL$5, __cjsMetaURL$6, __cjsMetaURL$7, __cjsMetaURL$8, __cjsMetaURL$9, __cjsMetaURL$a, __cjsMetaURL$b, __cjsMetaURL$c, __cjsMetaURL$d, __cjsMetaURL$e, __cjsMetaURL$f, __cjsMetaURL$g, __cjsMetaURL$h, __cjsMetaURL$i, __cjsMetaURL$j, __cjsMetaURL$k, __cjsMetaURL$l, __cjsMetaURL$m, __cjsMetaURL$n, __cjsMetaURL$o, __cjsMetaURL$p, __cjsMetaURL$q, __cjsMetaURL$r, __cjsMetaURL$s, __cjsMetaURL$t, __cjsMetaURL$u, __cjsMetaURL$v, __cjsMetaURL$w, __cjsMetaURL$x, __cjsMetaURL$y;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$4 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$5 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$6 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$7 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$8 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$9 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$a = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$b = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$c = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$d = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$e = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$f = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$g = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$h = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$i = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$j = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$k = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$l = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$m = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$n = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$o = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$p = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$q = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$r = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$s = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$t = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$u = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$v = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$w = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$x = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$y = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.invariant = exports.isMissingLocaleDataError = exports.defineProperty = exports.getMagnitude = exports.setMultiInternalSlots = exports.setInternalSlot = exports.isLiteralPart = exports.getMultiInternalSlots = exports.getInternalSlot = exports._formatToParts = void 0;

        var tslib_1 = require("tslib");

        (0, tslib_1.__exportStar)(require("./CanonicalizeLocaleList"), exports);
        (0, tslib_1.__exportStar)(require("./CanonicalizeTimeZoneName"), exports);
        (0, tslib_1.__exportStar)(require("./CoerceOptionsToObject"), exports);
        (0, tslib_1.__exportStar)(require("./GetNumberOption"), exports);
        (0, tslib_1.__exportStar)(require("./GetOption"), exports);
        (0, tslib_1.__exportStar)(require("./GetOptionsObject"), exports);
        (0, tslib_1.__exportStar)(require("./IsSanctionedSimpleUnitIdentifier"), exports);
        (0, tslib_1.__exportStar)(require("./IsValidTimeZoneName"), exports);
        (0, tslib_1.__exportStar)(require("./IsWellFormedCurrencyCode"), exports);
        (0, tslib_1.__exportStar)(require("./IsWellFormedUnitIdentifier"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/ComputeExponent"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/ComputeExponentForMagnitude"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/CurrencyDigits"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/FormatNumericToParts"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/FormatNumericToString"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/InitializeNumberFormat"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/PartitionNumberPattern"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/SetNumberFormatDigitOptions"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/SetNumberFormatUnitOptions"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/ToRawFixed"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/ToRawPrecision"), exports);

        var format_to_parts_1 = require("./NumberFormat/format_to_parts");

        Object.defineProperty(exports, "_formatToParts", {
          enumerable: true,
          get: function () {
            return (0, tslib_1.__importDefault)(format_to_parts_1).default;
          }
        });
        (0, tslib_1.__exportStar)(require("./PartitionPattern"), exports);
        (0, tslib_1.__exportStar)(require("./SupportedLocales"), exports);

        var utils_1 = require("./utils");

        Object.defineProperty(exports, "getInternalSlot", {
          enumerable: true,
          get: function () {
            return utils_1.getInternalSlot;
          }
        });
        Object.defineProperty(exports, "getMultiInternalSlots", {
          enumerable: true,
          get: function () {
            return utils_1.getMultiInternalSlots;
          }
        });
        Object.defineProperty(exports, "isLiteralPart", {
          enumerable: true,
          get: function () {
            return utils_1.isLiteralPart;
          }
        });
        Object.defineProperty(exports, "setInternalSlot", {
          enumerable: true,
          get: function () {
            return utils_1.setInternalSlot;
          }
        });
        Object.defineProperty(exports, "setMultiInternalSlots", {
          enumerable: true,
          get: function () {
            return utils_1.setMultiInternalSlots;
          }
        });
        Object.defineProperty(exports, "getMagnitude", {
          enumerable: true,
          get: function () {
            return utils_1.getMagnitude;
          }
        });
        Object.defineProperty(exports, "defineProperty", {
          enumerable: true,
          get: function () {
            return utils_1.defineProperty;
          }
        });

        var data_1 = require("./data");

        Object.defineProperty(exports, "isMissingLocaleDataError", {
          enumerable: true,
          get: function () {
            return data_1.isMissingLocaleDataError;
          }
        });
        (0, tslib_1.__exportStar)(require("./types/relative-time"), exports);
        (0, tslib_1.__exportStar)(require("./types/date-time"), exports);
        (0, tslib_1.__exportStar)(require("./types/list"), exports);
        (0, tslib_1.__exportStar)(require("./types/plural-rules"), exports);
        (0, tslib_1.__exportStar)(require("./types/number"), exports);
        (0, tslib_1.__exportStar)(require("./types/displaynames"), exports);

        var utils_2 = require("./utils");

        Object.defineProperty(exports, "invariant", {
          enumerable: true,
          get: function () {
            return utils_2.invariant;
          }
        });
        (0, tslib_1.__exportStar)(require("./262"), exports); // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.invariant;
        module.exports.isMissingLocaleDataError;
        module.exports.defineProperty;
        module.exports.getMagnitude;
        module.exports.setMultiInternalSlots;
        module.exports.setInternalSlot;
        module.exports.isLiteralPart;
        module.exports.getMultiInternalSlots;
        module.exports.getInternalSlot;
      }, () => ({
        'tslib': __cjsMetaURL$1,
        './CanonicalizeLocaleList': __cjsMetaURL$2,
        './CanonicalizeTimeZoneName': __cjsMetaURL$3,
        './CoerceOptionsToObject': __cjsMetaURL$4,
        './GetNumberOption': __cjsMetaURL$5,
        './GetOption': __cjsMetaURL$6,
        './GetOptionsObject': __cjsMetaURL$7,
        './IsSanctionedSimpleUnitIdentifier': __cjsMetaURL$8,
        './IsValidTimeZoneName': __cjsMetaURL$9,
        './IsWellFormedCurrencyCode': __cjsMetaURL$a,
        './IsWellFormedUnitIdentifier': __cjsMetaURL$b,
        './NumberFormat/ComputeExponent': __cjsMetaURL$c,
        './NumberFormat/ComputeExponentForMagnitude': __cjsMetaURL$d,
        './NumberFormat/CurrencyDigits': __cjsMetaURL$e,
        './NumberFormat/FormatNumericToParts': __cjsMetaURL$f,
        './NumberFormat/FormatNumericToString': __cjsMetaURL$g,
        './NumberFormat/InitializeNumberFormat': __cjsMetaURL$h,
        './NumberFormat/PartitionNumberPattern': __cjsMetaURL$i,
        './NumberFormat/SetNumberFormatDigitOptions': __cjsMetaURL$j,
        './NumberFormat/SetNumberFormatUnitOptions': __cjsMetaURL$k,
        './NumberFormat/ToRawFixed': __cjsMetaURL$l,
        './NumberFormat/ToRawPrecision': __cjsMetaURL$m,
        './NumberFormat/format_to_parts': __cjsMetaURL$n,
        './PartitionPattern': __cjsMetaURL$o,
        './SupportedLocales': __cjsMetaURL$p,
        './utils': __cjsMetaURL$q,
        './data': __cjsMetaURL$r,
        './types/relative-time': __cjsMetaURL$s,
        './types/date-time': __cjsMetaURL$t,
        './types/list': __cjsMetaURL$u,
        './types/plural-rules': __cjsMetaURL$v,
        './types/number': __cjsMetaURL$w,
        './types/displaynames': __cjsMetaURL$x,
        './utils': __cjsMetaURL$q,
        './262': __cjsMetaURL$y
      }));
    }
  };
});

System.register("chunks:///_virtual/index15.js", ['./cjs-loader.mjs', './CanonicalizeLocaleList7.js', './ResolveLocale2.js', './LookupSupportedLocales2.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ResolveLocale = exports.LookupSupportedLocales = exports.match = void 0;

        var CanonicalizeLocaleList_1 = require("./abstract/CanonicalizeLocaleList");

        var ResolveLocale_1 = require("./abstract/ResolveLocale");

        function match(requestedLocales, availableLocales, defaultLocale, opts) {
          var locales = availableLocales.reduce(function (all, l) {
            all.add(l);
            return all;
          }, new Set());
          return (0, ResolveLocale_1.ResolveLocale)(locales, (0, CanonicalizeLocaleList_1.CanonicalizeLocaleList)(requestedLocales), {
            localeMatcher: (opts === null || opts === void 0 ? void 0 : opts.algorithm) || 'best fit'
          }, [], {}, function () {
            return defaultLocale;
          }).locale;
        }

        exports.match = match;

        var LookupSupportedLocales_1 = require("./abstract/LookupSupportedLocales");

        Object.defineProperty(exports, "LookupSupportedLocales", {
          enumerable: true,
          get: function () {
            return LookupSupportedLocales_1.LookupSupportedLocales;
          }
        });

        var ResolveLocale_2 = require("./abstract/ResolveLocale");

        Object.defineProperty(exports, "ResolveLocale", {
          enumerable: true,
          get: function () {
            return ResolveLocale_2.ResolveLocale;
          }
        }); // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.ResolveLocale;
        module.exports.LookupSupportedLocales;
        module.exports.match;
      }, () => ({
        './abstract/CanonicalizeLocaleList': __cjsMetaURL$1,
        './abstract/ResolveLocale': __cjsMetaURL$2,
        './abstract/LookupSupportedLocales': __cjsMetaURL$3,
        './abstract/ResolveLocale': __cjsMetaURL$2
      }));
    }
  };
});

System.register("chunks:///_virtual/index16.js", ['./cjs-loader.mjs', './tslib3.js', './CanonicalizeLocaleList8.js', './CanonicalizeTimeZoneName6.js', './CoerceOptionsToObject6.js', './GetNumberOption6.js', './GetOption6.js', './GetOptionsObject6.js', './IsSanctionedSimpleUnitIdentifier6.js', './IsValidTimeZoneName6.js', './IsWellFormedCurrencyCode6.js', './IsWellFormedUnitIdentifier6.js', './ComputeExponent6.js', './ComputeExponentForMagnitude6.js', './CurrencyDigits6.js', './FormatNumericToParts6.js', './FormatNumericToString6.js', './InitializeNumberFormat6.js', './PartitionNumberPattern6.js', './SetNumberFormatDigitOptions6.js', './SetNumberFormatUnitOptions6.js', './ToRawFixed6.js', './ToRawPrecision6.js', './format_to_parts6.js', './PartitionPattern6.js', './SupportedLocales6.js', './utils8.js', './data6.js', './relative-time6.js', './date-time6.js', './list6.js', './plural-rules6.js', './number6.js', './displaynames6.js', './2626.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3, __cjsMetaURL$4, __cjsMetaURL$5, __cjsMetaURL$6, __cjsMetaURL$7, __cjsMetaURL$8, __cjsMetaURL$9, __cjsMetaURL$a, __cjsMetaURL$b, __cjsMetaURL$c, __cjsMetaURL$d, __cjsMetaURL$e, __cjsMetaURL$f, __cjsMetaURL$g, __cjsMetaURL$h, __cjsMetaURL$i, __cjsMetaURL$j, __cjsMetaURL$k, __cjsMetaURL$l, __cjsMetaURL$m, __cjsMetaURL$n, __cjsMetaURL$o, __cjsMetaURL$p, __cjsMetaURL$q, __cjsMetaURL$r, __cjsMetaURL$s, __cjsMetaURL$t, __cjsMetaURL$u, __cjsMetaURL$v, __cjsMetaURL$w, __cjsMetaURL$x, __cjsMetaURL$y;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$4 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$5 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$6 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$7 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$8 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$9 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$a = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$b = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$c = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$d = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$e = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$f = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$g = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$h = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$i = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$j = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$k = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$l = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$m = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$n = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$o = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$p = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$q = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$r = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$s = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$t = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$u = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$v = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$w = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$x = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$y = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.invariant = exports.isMissingLocaleDataError = exports.defineProperty = exports.getMagnitude = exports.setMultiInternalSlots = exports.setInternalSlot = exports.isLiteralPart = exports.getMultiInternalSlots = exports.getInternalSlot = exports._formatToParts = void 0;

        var tslib_1 = require("tslib");

        (0, tslib_1.__exportStar)(require("./CanonicalizeLocaleList"), exports);
        (0, tslib_1.__exportStar)(require("./CanonicalizeTimeZoneName"), exports);
        (0, tslib_1.__exportStar)(require("./CoerceOptionsToObject"), exports);
        (0, tslib_1.__exportStar)(require("./GetNumberOption"), exports);
        (0, tslib_1.__exportStar)(require("./GetOption"), exports);
        (0, tslib_1.__exportStar)(require("./GetOptionsObject"), exports);
        (0, tslib_1.__exportStar)(require("./IsSanctionedSimpleUnitIdentifier"), exports);
        (0, tslib_1.__exportStar)(require("./IsValidTimeZoneName"), exports);
        (0, tslib_1.__exportStar)(require("./IsWellFormedCurrencyCode"), exports);
        (0, tslib_1.__exportStar)(require("./IsWellFormedUnitIdentifier"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/ComputeExponent"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/ComputeExponentForMagnitude"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/CurrencyDigits"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/FormatNumericToParts"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/FormatNumericToString"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/InitializeNumberFormat"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/PartitionNumberPattern"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/SetNumberFormatDigitOptions"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/SetNumberFormatUnitOptions"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/ToRawFixed"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/ToRawPrecision"), exports);

        var format_to_parts_1 = require("./NumberFormat/format_to_parts");

        Object.defineProperty(exports, "_formatToParts", {
          enumerable: true,
          get: function () {
            return (0, tslib_1.__importDefault)(format_to_parts_1).default;
          }
        });
        (0, tslib_1.__exportStar)(require("./PartitionPattern"), exports);
        (0, tslib_1.__exportStar)(require("./SupportedLocales"), exports);

        var utils_1 = require("./utils");

        Object.defineProperty(exports, "getInternalSlot", {
          enumerable: true,
          get: function () {
            return utils_1.getInternalSlot;
          }
        });
        Object.defineProperty(exports, "getMultiInternalSlots", {
          enumerable: true,
          get: function () {
            return utils_1.getMultiInternalSlots;
          }
        });
        Object.defineProperty(exports, "isLiteralPart", {
          enumerable: true,
          get: function () {
            return utils_1.isLiteralPart;
          }
        });
        Object.defineProperty(exports, "setInternalSlot", {
          enumerable: true,
          get: function () {
            return utils_1.setInternalSlot;
          }
        });
        Object.defineProperty(exports, "setMultiInternalSlots", {
          enumerable: true,
          get: function () {
            return utils_1.setMultiInternalSlots;
          }
        });
        Object.defineProperty(exports, "getMagnitude", {
          enumerable: true,
          get: function () {
            return utils_1.getMagnitude;
          }
        });
        Object.defineProperty(exports, "defineProperty", {
          enumerable: true,
          get: function () {
            return utils_1.defineProperty;
          }
        });

        var data_1 = require("./data");

        Object.defineProperty(exports, "isMissingLocaleDataError", {
          enumerable: true,
          get: function () {
            return data_1.isMissingLocaleDataError;
          }
        });
        (0, tslib_1.__exportStar)(require("./types/relative-time"), exports);
        (0, tslib_1.__exportStar)(require("./types/date-time"), exports);
        (0, tslib_1.__exportStar)(require("./types/list"), exports);
        (0, tslib_1.__exportStar)(require("./types/plural-rules"), exports);
        (0, tslib_1.__exportStar)(require("./types/number"), exports);
        (0, tslib_1.__exportStar)(require("./types/displaynames"), exports);

        var utils_2 = require("./utils");

        Object.defineProperty(exports, "invariant", {
          enumerable: true,
          get: function () {
            return utils_2.invariant;
          }
        });
        (0, tslib_1.__exportStar)(require("./262"), exports); // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.invariant;
        module.exports.isMissingLocaleDataError;
        module.exports.defineProperty;
        module.exports.getMagnitude;
        module.exports.setMultiInternalSlots;
        module.exports.setInternalSlot;
        module.exports.isLiteralPart;
        module.exports.getMultiInternalSlots;
        module.exports.getInternalSlot;
      }, () => ({
        'tslib': __cjsMetaURL$1,
        './CanonicalizeLocaleList': __cjsMetaURL$2,
        './CanonicalizeTimeZoneName': __cjsMetaURL$3,
        './CoerceOptionsToObject': __cjsMetaURL$4,
        './GetNumberOption': __cjsMetaURL$5,
        './GetOption': __cjsMetaURL$6,
        './GetOptionsObject': __cjsMetaURL$7,
        './IsSanctionedSimpleUnitIdentifier': __cjsMetaURL$8,
        './IsValidTimeZoneName': __cjsMetaURL$9,
        './IsWellFormedCurrencyCode': __cjsMetaURL$a,
        './IsWellFormedUnitIdentifier': __cjsMetaURL$b,
        './NumberFormat/ComputeExponent': __cjsMetaURL$c,
        './NumberFormat/ComputeExponentForMagnitude': __cjsMetaURL$d,
        './NumberFormat/CurrencyDigits': __cjsMetaURL$e,
        './NumberFormat/FormatNumericToParts': __cjsMetaURL$f,
        './NumberFormat/FormatNumericToString': __cjsMetaURL$g,
        './NumberFormat/InitializeNumberFormat': __cjsMetaURL$h,
        './NumberFormat/PartitionNumberPattern': __cjsMetaURL$i,
        './NumberFormat/SetNumberFormatDigitOptions': __cjsMetaURL$j,
        './NumberFormat/SetNumberFormatUnitOptions': __cjsMetaURL$k,
        './NumberFormat/ToRawFixed': __cjsMetaURL$l,
        './NumberFormat/ToRawPrecision': __cjsMetaURL$m,
        './NumberFormat/format_to_parts': __cjsMetaURL$n,
        './PartitionPattern': __cjsMetaURL$o,
        './SupportedLocales': __cjsMetaURL$p,
        './utils': __cjsMetaURL$q,
        './data': __cjsMetaURL$r,
        './types/relative-time': __cjsMetaURL$s,
        './types/date-time': __cjsMetaURL$t,
        './types/list': __cjsMetaURL$u,
        './types/plural-rules': __cjsMetaURL$v,
        './types/number': __cjsMetaURL$w,
        './types/displaynames': __cjsMetaURL$x,
        './utils': __cjsMetaURL$q,
        './262': __cjsMetaURL$y
      }));
    }
  };
});

System.register("chunks:///_virtual/index17.js", ['./cjs-loader.mjs', './tslib4.js', './CanonicalizeLocaleList9.js', './CanonicalizeTimeZoneName7.js', './CoerceOptionsToObject7.js', './GetNumberOption7.js', './GetOption7.js', './GetOptionsObject7.js', './IsSanctionedSimpleUnitIdentifier7.js', './IsValidTimeZoneName7.js', './IsWellFormedCurrencyCode7.js', './IsWellFormedUnitIdentifier7.js', './ComputeExponent7.js', './ComputeExponentForMagnitude7.js', './CurrencyDigits7.js', './FormatNumericToParts7.js', './FormatNumericToString7.js', './InitializeNumberFormat7.js', './PartitionNumberPattern7.js', './SetNumberFormatDigitOptions7.js', './SetNumberFormatUnitOptions7.js', './ToRawFixed7.js', './ToRawPrecision7.js', './format_to_parts7.js', './PartitionPattern7.js', './SupportedLocales7.js', './utils9.js', './data7.js', './relative-time7.js', './date-time7.js', './list7.js', './plural-rules7.js', './number7.js', './displaynames7.js', './2627.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3, __cjsMetaURL$4, __cjsMetaURL$5, __cjsMetaURL$6, __cjsMetaURL$7, __cjsMetaURL$8, __cjsMetaURL$9, __cjsMetaURL$a, __cjsMetaURL$b, __cjsMetaURL$c, __cjsMetaURL$d, __cjsMetaURL$e, __cjsMetaURL$f, __cjsMetaURL$g, __cjsMetaURL$h, __cjsMetaURL$i, __cjsMetaURL$j, __cjsMetaURL$k, __cjsMetaURL$l, __cjsMetaURL$m, __cjsMetaURL$n, __cjsMetaURL$o, __cjsMetaURL$p, __cjsMetaURL$q, __cjsMetaURL$r, __cjsMetaURL$s, __cjsMetaURL$t, __cjsMetaURL$u, __cjsMetaURL$v, __cjsMetaURL$w, __cjsMetaURL$x, __cjsMetaURL$y;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$4 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$5 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$6 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$7 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$8 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$9 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$a = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$b = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$c = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$d = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$e = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$f = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$g = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$h = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$i = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$j = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$k = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$l = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$m = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$n = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$o = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$p = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$q = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$r = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$s = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$t = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$u = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$v = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$w = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$x = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$y = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.invariant = exports.isMissingLocaleDataError = exports.defineProperty = exports.getMagnitude = exports.setMultiInternalSlots = exports.setInternalSlot = exports.isLiteralPart = exports.getMultiInternalSlots = exports.getInternalSlot = exports._formatToParts = void 0;

        var tslib_1 = require("tslib");

        (0, tslib_1.__exportStar)(require("./CanonicalizeLocaleList"), exports);
        (0, tslib_1.__exportStar)(require("./CanonicalizeTimeZoneName"), exports);
        (0, tslib_1.__exportStar)(require("./CoerceOptionsToObject"), exports);
        (0, tslib_1.__exportStar)(require("./GetNumberOption"), exports);
        (0, tslib_1.__exportStar)(require("./GetOption"), exports);
        (0, tslib_1.__exportStar)(require("./GetOptionsObject"), exports);
        (0, tslib_1.__exportStar)(require("./IsSanctionedSimpleUnitIdentifier"), exports);
        (0, tslib_1.__exportStar)(require("./IsValidTimeZoneName"), exports);
        (0, tslib_1.__exportStar)(require("./IsWellFormedCurrencyCode"), exports);
        (0, tslib_1.__exportStar)(require("./IsWellFormedUnitIdentifier"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/ComputeExponent"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/ComputeExponentForMagnitude"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/CurrencyDigits"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/FormatNumericToParts"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/FormatNumericToString"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/InitializeNumberFormat"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/PartitionNumberPattern"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/SetNumberFormatDigitOptions"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/SetNumberFormatUnitOptions"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/ToRawFixed"), exports);
        (0, tslib_1.__exportStar)(require("./NumberFormat/ToRawPrecision"), exports);

        var format_to_parts_1 = require("./NumberFormat/format_to_parts");

        Object.defineProperty(exports, "_formatToParts", {
          enumerable: true,
          get: function () {
            return (0, tslib_1.__importDefault)(format_to_parts_1).default;
          }
        });
        (0, tslib_1.__exportStar)(require("./PartitionPattern"), exports);
        (0, tslib_1.__exportStar)(require("./SupportedLocales"), exports);

        var utils_1 = require("./utils");

        Object.defineProperty(exports, "getInternalSlot", {
          enumerable: true,
          get: function () {
            return utils_1.getInternalSlot;
          }
        });
        Object.defineProperty(exports, "getMultiInternalSlots", {
          enumerable: true,
          get: function () {
            return utils_1.getMultiInternalSlots;
          }
        });
        Object.defineProperty(exports, "isLiteralPart", {
          enumerable: true,
          get: function () {
            return utils_1.isLiteralPart;
          }
        });
        Object.defineProperty(exports, "setInternalSlot", {
          enumerable: true,
          get: function () {
            return utils_1.setInternalSlot;
          }
        });
        Object.defineProperty(exports, "setMultiInternalSlots", {
          enumerable: true,
          get: function () {
            return utils_1.setMultiInternalSlots;
          }
        });
        Object.defineProperty(exports, "getMagnitude", {
          enumerable: true,
          get: function () {
            return utils_1.getMagnitude;
          }
        });
        Object.defineProperty(exports, "defineProperty", {
          enumerable: true,
          get: function () {
            return utils_1.defineProperty;
          }
        });

        var data_1 = require("./data");

        Object.defineProperty(exports, "isMissingLocaleDataError", {
          enumerable: true,
          get: function () {
            return data_1.isMissingLocaleDataError;
          }
        });
        (0, tslib_1.__exportStar)(require("./types/relative-time"), exports);
        (0, tslib_1.__exportStar)(require("./types/date-time"), exports);
        (0, tslib_1.__exportStar)(require("./types/list"), exports);
        (0, tslib_1.__exportStar)(require("./types/plural-rules"), exports);
        (0, tslib_1.__exportStar)(require("./types/number"), exports);
        (0, tslib_1.__exportStar)(require("./types/displaynames"), exports);

        var utils_2 = require("./utils");

        Object.defineProperty(exports, "invariant", {
          enumerable: true,
          get: function () {
            return utils_2.invariant;
          }
        });
        (0, tslib_1.__exportStar)(require("./262"), exports); // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.invariant;
        module.exports.isMissingLocaleDataError;
        module.exports.defineProperty;
        module.exports.getMagnitude;
        module.exports.setMultiInternalSlots;
        module.exports.setInternalSlot;
        module.exports.isLiteralPart;
        module.exports.getMultiInternalSlots;
        module.exports.getInternalSlot;
      }, () => ({
        'tslib': __cjsMetaURL$1,
        './CanonicalizeLocaleList': __cjsMetaURL$2,
        './CanonicalizeTimeZoneName': __cjsMetaURL$3,
        './CoerceOptionsToObject': __cjsMetaURL$4,
        './GetNumberOption': __cjsMetaURL$5,
        './GetOption': __cjsMetaURL$6,
        './GetOptionsObject': __cjsMetaURL$7,
        './IsSanctionedSimpleUnitIdentifier': __cjsMetaURL$8,
        './IsValidTimeZoneName': __cjsMetaURL$9,
        './IsWellFormedCurrencyCode': __cjsMetaURL$a,
        './IsWellFormedUnitIdentifier': __cjsMetaURL$b,
        './NumberFormat/ComputeExponent': __cjsMetaURL$c,
        './NumberFormat/ComputeExponentForMagnitude': __cjsMetaURL$d,
        './NumberFormat/CurrencyDigits': __cjsMetaURL$e,
        './NumberFormat/FormatNumericToParts': __cjsMetaURL$f,
        './NumberFormat/FormatNumericToString': __cjsMetaURL$g,
        './NumberFormat/InitializeNumberFormat': __cjsMetaURL$h,
        './NumberFormat/PartitionNumberPattern': __cjsMetaURL$i,
        './NumberFormat/SetNumberFormatDigitOptions': __cjsMetaURL$j,
        './NumberFormat/SetNumberFormatUnitOptions': __cjsMetaURL$k,
        './NumberFormat/ToRawFixed': __cjsMetaURL$l,
        './NumberFormat/ToRawPrecision': __cjsMetaURL$m,
        './NumberFormat/format_to_parts': __cjsMetaURL$n,
        './PartitionPattern': __cjsMetaURL$o,
        './SupportedLocales': __cjsMetaURL$p,
        './utils': __cjsMetaURL$q,
        './data': __cjsMetaURL$r,
        './types/relative-time': __cjsMetaURL$s,
        './types/date-time': __cjsMetaURL$t,
        './types/list': __cjsMetaURL$u,
        './types/plural-rules': __cjsMetaURL$v,
        './types/number': __cjsMetaURL$w,
        './types/displaynames': __cjsMetaURL$x,
        './utils': __cjsMetaURL$q,
        './262': __cjsMetaURL$y
      }));
    }
  };
});

System.register("chunks:///_virtual/index18.js", ['./cjs-loader.mjs', './CanonicalizeLocaleList10.js', './ResolveLocale3.js', './LookupSupportedLocales3.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ResolveLocale = exports.LookupSupportedLocales = exports.match = void 0;

        var CanonicalizeLocaleList_1 = require("./abstract/CanonicalizeLocaleList");

        var ResolveLocale_1 = require("./abstract/ResolveLocale");

        function match(requestedLocales, availableLocales, defaultLocale, opts) {
          var locales = availableLocales.reduce(function (all, l) {
            all.add(l);
            return all;
          }, new Set());
          return (0, ResolveLocale_1.ResolveLocale)(locales, (0, CanonicalizeLocaleList_1.CanonicalizeLocaleList)(requestedLocales), {
            localeMatcher: (opts === null || opts === void 0 ? void 0 : opts.algorithm) || 'best fit'
          }, [], {}, function () {
            return defaultLocale;
          }).locale;
        }

        exports.match = match;

        var LookupSupportedLocales_1 = require("./abstract/LookupSupportedLocales");

        Object.defineProperty(exports, "LookupSupportedLocales", {
          enumerable: true,
          get: function () {
            return LookupSupportedLocales_1.LookupSupportedLocales;
          }
        });

        var ResolveLocale_2 = require("./abstract/ResolveLocale");

        Object.defineProperty(exports, "ResolveLocale", {
          enumerable: true,
          get: function () {
            return ResolveLocale_2.ResolveLocale;
          }
        }); // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.ResolveLocale;
        module.exports.LookupSupportedLocales;
        module.exports.match;
      }, () => ({
        './abstract/CanonicalizeLocaleList': __cjsMetaURL$1,
        './abstract/ResolveLocale': __cjsMetaURL$2,
        './abstract/LookupSupportedLocales': __cjsMetaURL$3,
        './abstract/ResolveLocale': __cjsMetaURL$2
      }));
    }
  };
});

System.register("chunks:///_virtual/index19.js", ['./cjs-loader.mjs', './CanonicalizeLocaleList11.js', './ResolveLocale4.js', './LookupSupportedLocales4.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ResolveLocale = exports.LookupSupportedLocales = exports.match = void 0;

        var CanonicalizeLocaleList_1 = require("./abstract/CanonicalizeLocaleList");

        var ResolveLocale_1 = require("./abstract/ResolveLocale");

        function match(requestedLocales, availableLocales, defaultLocale, opts) {
          var locales = availableLocales.reduce(function (all, l) {
            all.add(l);
            return all;
          }, new Set());
          return (0, ResolveLocale_1.ResolveLocale)(locales, (0, CanonicalizeLocaleList_1.CanonicalizeLocaleList)(requestedLocales), {
            localeMatcher: (opts === null || opts === void 0 ? void 0 : opts.algorithm) || 'best fit'
          }, [], {}, function () {
            return defaultLocale;
          }).locale;
        }

        exports.match = match;

        var LookupSupportedLocales_1 = require("./abstract/LookupSupportedLocales");

        Object.defineProperty(exports, "LookupSupportedLocales", {
          enumerable: true,
          get: function () {
            return LookupSupportedLocales_1.LookupSupportedLocales;
          }
        });

        var ResolveLocale_2 = require("./abstract/ResolveLocale");

        Object.defineProperty(exports, "ResolveLocale", {
          enumerable: true,
          get: function () {
            return ResolveLocale_2.ResolveLocale;
          }
        }); // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.ResolveLocale;
        module.exports.LookupSupportedLocales;
        module.exports.match;
      }, () => ({
        './abstract/CanonicalizeLocaleList': __cjsMetaURL$1,
        './abstract/ResolveLocale': __cjsMetaURL$2,
        './abstract/LookupSupportedLocales': __cjsMetaURL$3,
        './abstract/ResolveLocale': __cjsMetaURL$2
      }));
    }
  };
});

System.register("chunks:///_virtual/index2.js", ['./cjs-loader.mjs', './tslib3.js', './core.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var tslib_1 = require("tslib");

        (0, tslib_1.__exportStar)(require("./src/core"), exports); // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
      }, () => ({
        'tslib': __cjsMetaURL$1,
        './src/core': __cjsMetaURL$2
      }));
    }
  };
});

System.register("chunks:///_virtual/index20.js", ['./cjs-loader.mjs', './CanonicalizeLocaleList12.js', './ResolveLocale5.js', './LookupSupportedLocales5.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ResolveLocale = exports.LookupSupportedLocales = exports.match = void 0;

        var CanonicalizeLocaleList_1 = require("./abstract/CanonicalizeLocaleList");

        var ResolveLocale_1 = require("./abstract/ResolveLocale");

        function match(requestedLocales, availableLocales, defaultLocale, opts) {
          var locales = availableLocales.reduce(function (all, l) {
            all.add(l);
            return all;
          }, new Set());
          return (0, ResolveLocale_1.ResolveLocale)(locales, (0, CanonicalizeLocaleList_1.CanonicalizeLocaleList)(requestedLocales), {
            localeMatcher: (opts === null || opts === void 0 ? void 0 : opts.algorithm) || 'best fit'
          }, [], {}, function () {
            return defaultLocale;
          }).locale;
        }

        exports.match = match;

        var LookupSupportedLocales_1 = require("./abstract/LookupSupportedLocales");

        Object.defineProperty(exports, "LookupSupportedLocales", {
          enumerable: true,
          get: function () {
            return LookupSupportedLocales_1.LookupSupportedLocales;
          }
        });

        var ResolveLocale_2 = require("./abstract/ResolveLocale");

        Object.defineProperty(exports, "ResolveLocale", {
          enumerable: true,
          get: function () {
            return ResolveLocale_2.ResolveLocale;
          }
        }); // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.ResolveLocale;
        module.exports.LookupSupportedLocales;
        module.exports.match;
      }, () => ({
        './abstract/CanonicalizeLocaleList': __cjsMetaURL$1,
        './abstract/ResolveLocale': __cjsMetaURL$2,
        './abstract/LookupSupportedLocales': __cjsMetaURL$3,
        './abstract/ResolveLocale': __cjsMetaURL$2
      }));
    }
  };
});

System.register("chunks:///_virtual/index21.js", ['./cjs-loader.mjs', './CanonicalizeLocaleList13.js', './ResolveLocale6.js', './LookupSupportedLocales6.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ResolveLocale = exports.LookupSupportedLocales = exports.match = void 0;

        var CanonicalizeLocaleList_1 = require("./abstract/CanonicalizeLocaleList");

        var ResolveLocale_1 = require("./abstract/ResolveLocale");

        function match(requestedLocales, availableLocales, defaultLocale, opts) {
          var locales = availableLocales.reduce(function (all, l) {
            all.add(l);
            return all;
          }, new Set());
          return (0, ResolveLocale_1.ResolveLocale)(locales, (0, CanonicalizeLocaleList_1.CanonicalizeLocaleList)(requestedLocales), {
            localeMatcher: (opts === null || opts === void 0 ? void 0 : opts.algorithm) || 'best fit'
          }, [], {}, function () {
            return defaultLocale;
          }).locale;
        }

        exports.match = match;

        var LookupSupportedLocales_1 = require("./abstract/LookupSupportedLocales");

        Object.defineProperty(exports, "LookupSupportedLocales", {
          enumerable: true,
          get: function () {
            return LookupSupportedLocales_1.LookupSupportedLocales;
          }
        });

        var ResolveLocale_2 = require("./abstract/ResolveLocale");

        Object.defineProperty(exports, "ResolveLocale", {
          enumerable: true,
          get: function () {
            return ResolveLocale_2.ResolveLocale;
          }
        }); // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.ResolveLocale;
        module.exports.LookupSupportedLocales;
        module.exports.match;
      }, () => ({
        './abstract/CanonicalizeLocaleList': __cjsMetaURL$1,
        './abstract/ResolveLocale': __cjsMetaURL$2,
        './abstract/LookupSupportedLocales': __cjsMetaURL$3,
        './abstract/ResolveLocale': __cjsMetaURL$2
      }));
    }
  };
});

System.register("chunks:///_virtual/index22.js", ['./cjs-loader.mjs', './CanonicalizeLocaleList14.js', './ResolveLocale7.js', './LookupSupportedLocales7.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ResolveLocale = exports.LookupSupportedLocales = exports.match = void 0;

        var CanonicalizeLocaleList_1 = require("./abstract/CanonicalizeLocaleList");

        var ResolveLocale_1 = require("./abstract/ResolveLocale");

        function match(requestedLocales, availableLocales, defaultLocale, opts) {
          var locales = availableLocales.reduce(function (all, l) {
            all.add(l);
            return all;
          }, new Set());
          return (0, ResolveLocale_1.ResolveLocale)(locales, (0, CanonicalizeLocaleList_1.CanonicalizeLocaleList)(requestedLocales), {
            localeMatcher: (opts === null || opts === void 0 ? void 0 : opts.algorithm) || 'best fit'
          }, [], {}, function () {
            return defaultLocale;
          }).locale;
        }

        exports.match = match;

        var LookupSupportedLocales_1 = require("./abstract/LookupSupportedLocales");

        Object.defineProperty(exports, "LookupSupportedLocales", {
          enumerable: true,
          get: function () {
            return LookupSupportedLocales_1.LookupSupportedLocales;
          }
        });

        var ResolveLocale_2 = require("./abstract/ResolveLocale");

        Object.defineProperty(exports, "ResolveLocale", {
          enumerable: true,
          get: function () {
            return ResolveLocale_2.ResolveLocale;
          }
        }); // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.ResolveLocale;
        module.exports.LookupSupportedLocales;
        module.exports.match;
      }, () => ({
        './abstract/CanonicalizeLocaleList': __cjsMetaURL$1,
        './abstract/ResolveLocale': __cjsMetaURL$2,
        './abstract/LookupSupportedLocales': __cjsMetaURL$3,
        './abstract/ResolveLocale': __cjsMetaURL$2
      }));
    }
  };
});

System.register("chunks:///_virtual/index3.js", ['./cjs-loader.mjs', './tslib2.js', './index11.js', './index6.js', './get_internal_slots.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3, __cjsMetaURL$4;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$4 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.Locale = void 0;

        var tslib_1 = require("tslib");

        var ecma402_abstract_1 = require("@formatjs/ecma402-abstract");

        var intl_getcanonicallocales_1 = require("@formatjs/intl-getcanonicallocales");

        var get_internal_slots_1 = (0, tslib_1.__importDefault)(require("./get_internal_slots"));
        var RELEVANT_EXTENSION_KEYS = ['ca', 'co', 'hc', 'kf', 'kn', 'nu'];
        var UNICODE_TYPE_REGEX = /^[a-z0-9]{3,8}(-[a-z0-9]{3,8})*$/i;

        function applyOptionsToTag(tag, options) {
          (0, ecma402_abstract_1.invariant)(typeof tag === 'string', 'language tag must be a string');
          (0, ecma402_abstract_1.invariant)((0, intl_getcanonicallocales_1.isStructurallyValidLanguageTag)(tag), 'malformed language tag', RangeError);
          var language = (0, ecma402_abstract_1.GetOption)(options, 'language', 'string', undefined, undefined);

          if (language !== undefined) {
            (0, ecma402_abstract_1.invariant)((0, intl_getcanonicallocales_1.isUnicodeLanguageSubtag)(language), 'Malformed unicode_language_subtag', RangeError);
          }

          var script = (0, ecma402_abstract_1.GetOption)(options, 'script', 'string', undefined, undefined);

          if (script !== undefined) {
            (0, ecma402_abstract_1.invariant)((0, intl_getcanonicallocales_1.isUnicodeScriptSubtag)(script), 'Malformed unicode_script_subtag', RangeError);
          }

          var region = (0, ecma402_abstract_1.GetOption)(options, 'region', 'string', undefined, undefined);

          if (region !== undefined) {
            (0, ecma402_abstract_1.invariant)((0, intl_getcanonicallocales_1.isUnicodeRegionSubtag)(region), 'Malformed unicode_region_subtag', RangeError);
          }

          var languageId = (0, intl_getcanonicallocales_1.parseUnicodeLanguageId)(tag);

          if (language !== undefined) {
            languageId.lang = language;
          }

          if (script !== undefined) {
            languageId.script = script;
          }

          if (region !== undefined) {
            languageId.region = region;
          }

          return Intl.getCanonicalLocales((0, intl_getcanonicallocales_1.emitUnicodeLocaleId)((0, tslib_1.__assign)((0, tslib_1.__assign)({}, (0, intl_getcanonicallocales_1.parseUnicodeLocaleId)(tag)), {
            lang: languageId
          })))[0];
        }

        function applyUnicodeExtensionToTag(tag, options, relevantExtensionKeys) {
          var unicodeExtension;
          var keywords = [];
          var ast = (0, intl_getcanonicallocales_1.parseUnicodeLocaleId)(tag);

          for (var _i = 0, _a = ast.extensions; _i < _a.length; _i++) {
            var ext = _a[_i];

            if (ext.type === 'u') {
              unicodeExtension = ext;
              if (Array.isArray(ext.keywords)) keywords = ext.keywords;
            }
          }

          var result = Object.create(null);

          for (var _b = 0, relevantExtensionKeys_1 = relevantExtensionKeys; _b < relevantExtensionKeys_1.length; _b++) {
            var key = relevantExtensionKeys_1[_b];
            var value = void 0,
                entry = void 0;

            for (var _c = 0, keywords_1 = keywords; _c < keywords_1.length; _c++) {
              var keyword = keywords_1[_c];

              if (keyword[0] === key) {
                entry = keyword;
                value = entry[1];
              }
            }

            (0, ecma402_abstract_1.invariant)(key in options, "".concat(key, " must be in options"));
            var optionsValue = options[key];

            if (optionsValue !== undefined) {
              (0, ecma402_abstract_1.invariant)(typeof optionsValue === 'string', "Value for ".concat(key, " must be a string"));
              value = optionsValue;

              if (entry) {
                entry[1] = value;
              } else {
                keywords.push([key, value]);
              }
            }

            result[key] = value;
          }

          if (!unicodeExtension) {
            if (keywords.length) {
              ast.extensions.push({
                type: 'u',
                keywords: keywords,
                attributes: []
              });
            }
          } else {
            unicodeExtension.keywords = keywords;
          }

          result.locale = Intl.getCanonicalLocales((0, intl_getcanonicallocales_1.emitUnicodeLocaleId)(ast))[0];
          return result;
        }

        function mergeUnicodeLanguageId(lang, script, region, variants, replacement) {
          if (variants === void 0) {
            variants = [];
          }

          if (!replacement) {
            return {
              lang: lang || 'und',
              script: script,
              region: region,
              variants: variants
            };
          }

          return {
            lang: !lang || lang === 'und' ? replacement.lang : lang,
            script: script || replacement.script,
            region: region || replacement.region,
            variants: (0, tslib_1.__spreadArray)((0, tslib_1.__spreadArray)([], variants, true), replacement.variants, true)
          };
        }

        function addLikelySubtags(tag) {
          var ast = (0, intl_getcanonicallocales_1.parseUnicodeLocaleId)(tag);
          var unicodeLangId = ast.lang;
          var lang = unicodeLangId.lang,
              script = unicodeLangId.script,
              region = unicodeLangId.region,
              variants = unicodeLangId.variants;

          if (script && region) {
            var match_1 = intl_getcanonicallocales_1.likelySubtags[(0, intl_getcanonicallocales_1.emitUnicodeLanguageId)({
              lang: lang,
              script: script,
              region: region,
              variants: []
            })];

            if (match_1) {
              var parts_1 = (0, intl_getcanonicallocales_1.parseUnicodeLanguageId)(match_1);
              ast.lang = mergeUnicodeLanguageId(undefined, undefined, undefined, variants, parts_1);
              return (0, intl_getcanonicallocales_1.emitUnicodeLocaleId)(ast);
            }
          }

          if (script) {
            var match_2 = intl_getcanonicallocales_1.likelySubtags[(0, intl_getcanonicallocales_1.emitUnicodeLanguageId)({
              lang: lang,
              script: script,
              variants: []
            })];

            if (match_2) {
              var parts_2 = (0, intl_getcanonicallocales_1.parseUnicodeLanguageId)(match_2);
              ast.lang = mergeUnicodeLanguageId(undefined, undefined, region, variants, parts_2);
              return (0, intl_getcanonicallocales_1.emitUnicodeLocaleId)(ast);
            }
          }

          if (region) {
            var match_3 = intl_getcanonicallocales_1.likelySubtags[(0, intl_getcanonicallocales_1.emitUnicodeLanguageId)({
              lang: lang,
              region: region,
              variants: []
            })];

            if (match_3) {
              var parts_3 = (0, intl_getcanonicallocales_1.parseUnicodeLanguageId)(match_3);
              ast.lang = mergeUnicodeLanguageId(undefined, script, undefined, variants, parts_3);
              return (0, intl_getcanonicallocales_1.emitUnicodeLocaleId)(ast);
            }
          }

          var match = intl_getcanonicallocales_1.likelySubtags[lang] || intl_getcanonicallocales_1.likelySubtags[(0, intl_getcanonicallocales_1.emitUnicodeLanguageId)({
            lang: 'und',
            script: script,
            variants: []
          })];

          if (!match) {
            throw new Error("No match for addLikelySubtags");
          }

          var parts = (0, intl_getcanonicallocales_1.parseUnicodeLanguageId)(match);
          ast.lang = mergeUnicodeLanguageId(undefined, script, region, variants, parts);
          return (0, intl_getcanonicallocales_1.emitUnicodeLocaleId)(ast);
        }
        /**
         * From: https://github.com/unicode-org/icu/blob/4231ca5be053a22a1be24eb891817458c97db709/icu4j/main/classes/core/src/com/ibm/icu/util/ULocale.java#L2395
         * @param tag
         */


        function removeLikelySubtags(tag) {
          var maxLocale = addLikelySubtags(tag);

          if (!maxLocale) {
            return tag;
          }

          maxLocale = (0, intl_getcanonicallocales_1.emitUnicodeLanguageId)((0, tslib_1.__assign)((0, tslib_1.__assign)({}, (0, intl_getcanonicallocales_1.parseUnicodeLanguageId)(maxLocale)), {
            variants: []
          }));
          var ast = (0, intl_getcanonicallocales_1.parseUnicodeLocaleId)(tag);
          var _a = ast.lang,
              lang = _a.lang,
              script = _a.script,
              region = _a.region,
              variants = _a.variants;
          var trial = addLikelySubtags((0, intl_getcanonicallocales_1.emitUnicodeLanguageId)({
            lang: lang,
            variants: []
          }));

          if (trial === maxLocale) {
            return (0, intl_getcanonicallocales_1.emitUnicodeLocaleId)((0, tslib_1.__assign)((0, tslib_1.__assign)({}, ast), {
              lang: mergeUnicodeLanguageId(lang, undefined, undefined, variants)
            }));
          }

          if (region) {
            var trial_1 = addLikelySubtags((0, intl_getcanonicallocales_1.emitUnicodeLanguageId)({
              lang: lang,
              region: region,
              variants: []
            }));

            if (trial_1 === maxLocale) {
              return (0, intl_getcanonicallocales_1.emitUnicodeLocaleId)((0, tslib_1.__assign)((0, tslib_1.__assign)({}, ast), {
                lang: mergeUnicodeLanguageId(lang, undefined, region, variants)
              }));
            }
          }

          if (script) {
            var trial_2 = addLikelySubtags((0, intl_getcanonicallocales_1.emitUnicodeLanguageId)({
              lang: lang,
              script: script,
              variants: []
            }));

            if (trial_2 === maxLocale) {
              return (0, intl_getcanonicallocales_1.emitUnicodeLocaleId)((0, tslib_1.__assign)((0, tslib_1.__assign)({}, ast), {
                lang: mergeUnicodeLanguageId(lang, script, undefined, variants)
              }));
            }
          }

          return tag;
        }

        var Locale =
        /** @class */
        function () {
          function Locale(tag, opts) {
            // test262/test/intl402/RelativeTimeFormat/constructor/constructor/newtarget-undefined.js
            // Cannot use `new.target` bc of IE11 & TS transpiles it to something else
            var newTarget = this && this instanceof Locale ? this.constructor : void 0;

            if (!newTarget) {
              throw new TypeError("Intl.Locale must be called with 'new'");
            }

            var relevantExtensionKeys = Locale.relevantExtensionKeys;
            if (relevantExtensionKeys.indexOf('kf') > -1) ;
            if (relevantExtensionKeys.indexOf('kn') > -1) ;

            if (tag === undefined) {
              throw new TypeError("First argument to Intl.Locale constructor can't be empty or missing");
            }

            if (typeof tag !== 'string' && typeof tag !== 'object') {
              throw new TypeError('tag must be a string or object');
            }

            var internalSlots;

            if (typeof tag === 'object' && (internalSlots = (0, get_internal_slots_1.default)(tag)) && internalSlots.initializedLocale) {
              tag = internalSlots.locale;
            } else {
              tag = tag.toString();
            }

            internalSlots = (0, get_internal_slots_1.default)(this);
            var options = (0, ecma402_abstract_1.CoerceOptionsToObject)(opts);
            tag = applyOptionsToTag(tag, options);
            var opt = Object.create(null);
            var calendar = (0, ecma402_abstract_1.GetOption)(options, 'calendar', 'string', undefined, undefined);

            if (calendar !== undefined) {
              if (!UNICODE_TYPE_REGEX.test(calendar)) {
                throw new RangeError('invalid calendar');
              }
            }

            opt.ca = calendar;
            var collation = (0, ecma402_abstract_1.GetOption)(options, 'collation', 'string', undefined, undefined);

            if (collation !== undefined) {
              if (!UNICODE_TYPE_REGEX.test(collation)) {
                throw new RangeError('invalid collation');
              }
            }

            opt.co = collation;
            var hc = (0, ecma402_abstract_1.GetOption)(options, 'hourCycle', 'string', ['h11', 'h12', 'h23', 'h24'], undefined);
            opt.hc = hc;
            var kf = (0, ecma402_abstract_1.GetOption)(options, 'caseFirst', 'string', ['upper', 'lower', 'false'], undefined);
            opt.kf = kf;

            var _kn = (0, ecma402_abstract_1.GetOption)(options, 'numeric', 'boolean', undefined, undefined);

            var kn;

            if (_kn !== undefined) {
              kn = String(_kn);
            }

            opt.kn = kn;
            var numberingSystem = (0, ecma402_abstract_1.GetOption)(options, 'numberingSystem', 'string', undefined, undefined);

            if (numberingSystem !== undefined) {
              if (!UNICODE_TYPE_REGEX.test(numberingSystem)) {
                throw new RangeError('Invalid numberingSystem');
              }
            }

            opt.nu = numberingSystem;
            var r = applyUnicodeExtensionToTag(tag, opt, relevantExtensionKeys);
            internalSlots.locale = r.locale;
            internalSlots.calendar = r.ca;
            internalSlots.collation = r.co;
            internalSlots.hourCycle = r.hc;

            if (relevantExtensionKeys.indexOf('kf') > -1) {
              internalSlots.caseFirst = r.kf;
            }

            if (relevantExtensionKeys.indexOf('kn') > -1) {
              internalSlots.numeric = (0, ecma402_abstract_1.SameValue)(r.kn, 'true');
            }

            internalSlots.numberingSystem = r.nu;
          }
          /**
           * https://www.unicode.org/reports/tr35/#Likely_Subtags
           */


          Locale.prototype.maximize = function () {
            var locale = (0, get_internal_slots_1.default)(this).locale;

            try {
              var maximizedLocale = addLikelySubtags(locale);
              return new Locale(maximizedLocale);
            } catch (e) {
              return new Locale(locale);
            }
          };
          /**
           * https://www.unicode.org/reports/tr35/#Likely_Subtags
           */


          Locale.prototype.minimize = function () {
            var locale = (0, get_internal_slots_1.default)(this).locale;

            try {
              var minimizedLocale = removeLikelySubtags(locale);
              return new Locale(minimizedLocale);
            } catch (e) {
              return new Locale(locale);
            }
          };

          Locale.prototype.toString = function () {
            return (0, get_internal_slots_1.default)(this).locale;
          };

          Object.defineProperty(Locale.prototype, "baseName", {
            get: function () {
              var locale = (0, get_internal_slots_1.default)(this).locale;
              return (0, intl_getcanonicallocales_1.emitUnicodeLanguageId)((0, intl_getcanonicallocales_1.parseUnicodeLanguageId)(locale));
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(Locale.prototype, "calendar", {
            get: function () {
              return (0, get_internal_slots_1.default)(this).calendar;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(Locale.prototype, "collation", {
            get: function () {
              return (0, get_internal_slots_1.default)(this).collation;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(Locale.prototype, "hourCycle", {
            get: function () {
              return (0, get_internal_slots_1.default)(this).hourCycle;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(Locale.prototype, "caseFirst", {
            get: function () {
              return (0, get_internal_slots_1.default)(this).caseFirst;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(Locale.prototype, "numeric", {
            get: function () {
              return (0, get_internal_slots_1.default)(this).numeric;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(Locale.prototype, "numberingSystem", {
            get: function () {
              return (0, get_internal_slots_1.default)(this).numberingSystem;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(Locale.prototype, "language", {
            /**
             * https://tc39.es/proposal-intl-locale/#sec-Intl.Locale.prototype.language
             */
            get: function () {
              var locale = (0, get_internal_slots_1.default)(this).locale;
              return (0, intl_getcanonicallocales_1.parseUnicodeLanguageId)(locale).lang;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(Locale.prototype, "script", {
            /**
             * https://tc39.es/proposal-intl-locale/#sec-Intl.Locale.prototype.script
             */
            get: function () {
              var locale = (0, get_internal_slots_1.default)(this).locale;
              return (0, intl_getcanonicallocales_1.parseUnicodeLanguageId)(locale).script;
            },
            enumerable: false,
            configurable: true
          });
          Object.defineProperty(Locale.prototype, "region", {
            /**
             * https://tc39.es/proposal-intl-locale/#sec-Intl.Locale.prototype.region
             */
            get: function () {
              var locale = (0, get_internal_slots_1.default)(this).locale;
              return (0, intl_getcanonicallocales_1.parseUnicodeLanguageId)(locale).region;
            },
            enumerable: false,
            configurable: true
          });
          Locale.relevantExtensionKeys = RELEVANT_EXTENSION_KEYS;
          return Locale;
        }();

        exports.Locale = Locale;

        try {
          if (typeof Symbol !== 'undefined') {
            Object.defineProperty(Locale.prototype, Symbol.toStringTag, {
              value: 'Intl.Locale',
              writable: false,
              enumerable: false,
              configurable: true
            });
          }

          Object.defineProperty(Locale.prototype.constructor, 'length', {
            value: 1,
            writable: false,
            enumerable: false,
            configurable: true
          });
        } catch (e) {// Meta fix so we're test262-compliant, not important
        }

        exports.default = Locale; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.Locale;
        module.exports.default;
      }, () => ({
        'tslib': __cjsMetaURL$1,
        '@formatjs/ecma402-abstract': __cjsMetaURL$2,
        '@formatjs/intl-getcanonicallocales': __cjsMetaURL$3,
        './get_internal_slots': __cjsMetaURL$4
      }));
    }
  };
});

System.register("chunks:///_virtual/index4.js", ['./cjs-loader.mjs', './tslib4.js', './core2.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var tslib_1 = require("tslib");

        (0, tslib_1.__exportStar)(require("./src/core"), exports); // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
      }, () => ({
        'tslib': __cjsMetaURL$1,
        './src/core': __cjsMetaURL$2
      }));
    }
  };
});

System.register("chunks:///_virtual/index5.js", ['./cjs-loader.mjs', './tslib6.js', './index12.js', './InitializePluralRules.js', './ResolvePlural.js', './get_internal_slots2.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3, __cjsMetaURL$4, __cjsMetaURL$5;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$4 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$5 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.PluralRules = void 0;

        var tslib_1 = require("tslib");

        var ecma402_abstract_1 = require("@formatjs/ecma402-abstract");

        var InitializePluralRules_1 = require("./abstract/InitializePluralRules");

        var ResolvePlural_1 = require("./abstract/ResolvePlural");

        var get_internal_slots_1 = (0, tslib_1.__importDefault)(require("./get_internal_slots"));

        function validateInstance(instance, method) {
          if (!(instance instanceof PluralRules)) {
            throw new TypeError("Method Intl.PluralRules.prototype.".concat(method, " called on incompatible receiver ").concat(String(instance)));
          }
        }
        /**
         * http://ecma-international.org/ecma-402/7.0/index.html#sec-pluralruleselect
         * @param locale
         * @param type
         * @param _n
         * @param param3
         */


        function PluralRuleSelect(locale, type, _n, _a) {
          var IntegerDigits = _a.IntegerDigits,
              NumberOfFractionDigits = _a.NumberOfFractionDigits,
              FractionDigits = _a.FractionDigits;
          return PluralRules.localeData[locale].fn(NumberOfFractionDigits ? "".concat(IntegerDigits, ".").concat(FractionDigits) : IntegerDigits, type === 'ordinal');
        }

        var PluralRules =
        /** @class */
        function () {
          function PluralRules(locales, options) {
            // test262/test/intl402/RelativeTimeFormat/constructor/constructor/newtarget-undefined.js
            // Cannot use `new.target` bc of IE11 & TS transpiles it to something else
            var newTarget = this && this instanceof PluralRules ? this.constructor : void 0;

            if (!newTarget) {
              throw new TypeError("Intl.PluralRules must be called with 'new'");
            }

            return (0, InitializePluralRules_1.InitializePluralRules)(this, locales, options, {
              availableLocales: PluralRules.availableLocales,
              relevantExtensionKeys: PluralRules.relevantExtensionKeys,
              localeData: PluralRules.localeData,
              getDefaultLocale: PluralRules.getDefaultLocale,
              getInternalSlots: get_internal_slots_1.default
            });
          }

          PluralRules.prototype.resolvedOptions = function () {
            validateInstance(this, 'resolvedOptions');
            var opts = Object.create(null);
            var internalSlots = (0, get_internal_slots_1.default)(this);
            opts.locale = internalSlots.locale;
            opts.type = internalSlots.type;
            ['minimumIntegerDigits', 'minimumFractionDigits', 'maximumFractionDigits', 'minimumSignificantDigits', 'maximumSignificantDigits'].forEach(function (field) {
              var val = internalSlots[field];

              if (val !== undefined) {
                opts[field] = val;
              }
            });
            opts.pluralCategories = (0, tslib_1.__spreadArray)([], PluralRules.localeData[opts.locale].categories[opts.type], true);
            return opts;
          };

          PluralRules.prototype.select = function (val) {
            var pr = this;
            validateInstance(pr, 'select');
            var n = (0, ecma402_abstract_1.ToNumber)(val);
            return (0, ResolvePlural_1.ResolvePlural)(pr, n, {
              getInternalSlots: get_internal_slots_1.default,
              PluralRuleSelect: PluralRuleSelect
            });
          };

          PluralRules.prototype.toString = function () {
            return '[object Intl.PluralRules]';
          };

          PluralRules.supportedLocalesOf = function (locales, options) {
            return (0, ecma402_abstract_1.SupportedLocales)(PluralRules.availableLocales, (0, ecma402_abstract_1.CanonicalizeLocaleList)(locales), options);
          };

          PluralRules.__addLocaleData = function () {
            var data = [];

            for (var _i = 0; _i < arguments.length; _i++) {
              data[_i] = arguments[_i];
            }

            for (var _a = 0, data_1 = data; _a < data_1.length; _a++) {
              var _b = data_1[_a],
                  d = _b.data,
                  locale = _b.locale;
              PluralRules.localeData[locale] = d;
              PluralRules.availableLocales.add(locale);

              if (!PluralRules.__defaultLocale) {
                PluralRules.__defaultLocale = locale;
              }
            }
          };

          PluralRules.getDefaultLocale = function () {
            return PluralRules.__defaultLocale;
          };

          PluralRules.localeData = {};
          PluralRules.availableLocales = new Set();
          PluralRules.__defaultLocale = '';
          PluralRules.relevantExtensionKeys = [];
          PluralRules.polyfilled = true;
          return PluralRules;
        }();

        exports.PluralRules = PluralRules;

        try {
          // IE11 does not have Symbol
          if (typeof Symbol !== 'undefined') {
            Object.defineProperty(PluralRules.prototype, Symbol.toStringTag, {
              value: 'Intl.PluralRules',
              writable: false,
              enumerable: false,
              configurable: true
            });
          }

          try {
            // https://github.com/tc39/test262/blob/master/test/intl402/PluralRules/length.js
            Object.defineProperty(PluralRules, 'length', {
              value: 0,
              writable: false,
              enumerable: false,
              configurable: true
            });
          } catch (error) {// IE 11 sets Function.prototype.length to be non-configurable which will cause the
            // above Object.defineProperty to throw an error.
          } // https://github.com/tc39/test262/blob/master/test/intl402/RelativeTimeFormat/constructor/length.js


          Object.defineProperty(PluralRules.prototype.constructor, 'length', {
            value: 0,
            writable: false,
            enumerable: false,
            configurable: true
          }); // https://github.com/tc39/test262/blob/master/test/intl402/RelativeTimeFormat/constructor/supportedLocalesOf/length.js

          Object.defineProperty(PluralRules.supportedLocalesOf, 'length', {
            value: 1,
            writable: false,
            enumerable: false,
            configurable: true
          });
        } catch (ex) {// Meta fixes for test262
        } // #endregion ORIGINAL CODE


        module.exports;
        module.exports.__esModule;
        module.exports.PluralRules;
      }, () => ({
        'tslib': __cjsMetaURL$1,
        '@formatjs/ecma402-abstract': __cjsMetaURL$2,
        './abstract/InitializePluralRules': __cjsMetaURL$3,
        './abstract/ResolvePlural': __cjsMetaURL$4,
        './get_internal_slots': __cjsMetaURL$5
      }));
    }
  };
});

System.register("chunks:///_virtual/index6.js", ['./cjs-loader.mjs', './tslib5.js', './parser.js', './emitter.js', './canonicalizer.js', './types.js', './likelySubtags.generated.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3, __cjsMetaURL$4, __cjsMetaURL$5, __cjsMetaURL$6;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$4 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$5 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$6 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.isUnicodeLanguageSubtag = exports.isUnicodeScriptSubtag = exports.isUnicodeRegionSubtag = exports.isStructurallyValidLanguageTag = exports.parseUnicodeLanguageId = exports.parseUnicodeLocaleId = exports.getCanonicalLocales = void 0;

        var tslib_1 = require("tslib");

        var parser_1 = require("./src/parser");

        var emitter_1 = require("./src/emitter");

        var canonicalizer_1 = require("./src/canonicalizer");
        /**
         * https://tc39.es/ecma402/#sec-canonicalizelocalelist
         * @param locales
         */


        function CanonicalizeLocaleList(locales) {
          if (locales === undefined) {
            return [];
          }

          var seen = [];

          if (typeof locales === 'string') {
            locales = [locales];
          }

          for (var _i = 0, locales_1 = locales; _i < locales_1.length; _i++) {
            var locale = locales_1[_i];
            var canonicalizedTag = (0, emitter_1.emitUnicodeLocaleId)((0, canonicalizer_1.canonicalizeUnicodeLocaleId)((0, parser_1.parseUnicodeLocaleId)(locale)));

            if (seen.indexOf(canonicalizedTag) < 0) {
              seen.push(canonicalizedTag);
            }
          }

          return seen;
        }

        function getCanonicalLocales(locales) {
          return CanonicalizeLocaleList(locales);
        }

        exports.getCanonicalLocales = getCanonicalLocales;

        var parser_2 = require("./src/parser");

        Object.defineProperty(exports, "parseUnicodeLocaleId", {
          enumerable: true,
          get: function () {
            return parser_2.parseUnicodeLocaleId;
          }
        });
        Object.defineProperty(exports, "parseUnicodeLanguageId", {
          enumerable: true,
          get: function () {
            return parser_2.parseUnicodeLanguageId;
          }
        });
        Object.defineProperty(exports, "isStructurallyValidLanguageTag", {
          enumerable: true,
          get: function () {
            return parser_2.isStructurallyValidLanguageTag;
          }
        });
        Object.defineProperty(exports, "isUnicodeRegionSubtag", {
          enumerable: true,
          get: function () {
            return parser_2.isUnicodeRegionSubtag;
          }
        });
        Object.defineProperty(exports, "isUnicodeScriptSubtag", {
          enumerable: true,
          get: function () {
            return parser_2.isUnicodeScriptSubtag;
          }
        });
        Object.defineProperty(exports, "isUnicodeLanguageSubtag", {
          enumerable: true,
          get: function () {
            return parser_2.isUnicodeLanguageSubtag;
          }
        });
        (0, tslib_1.__exportStar)(require("./src/types"), exports);
        (0, tslib_1.__exportStar)(require("./src/emitter"), exports);
        (0, tslib_1.__exportStar)(require("./src/likelySubtags.generated"), exports); // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.isUnicodeLanguageSubtag;
        module.exports.isUnicodeScriptSubtag;
        module.exports.isUnicodeRegionSubtag;
        module.exports.isStructurallyValidLanguageTag;
        module.exports.parseUnicodeLanguageId;
        module.exports.parseUnicodeLocaleId;
        module.exports.getCanonicalLocales;
      }, () => ({
        'tslib': __cjsMetaURL$1,
        './src/parser': __cjsMetaURL$2,
        './src/emitter': __cjsMetaURL$3,
        './src/canonicalizer': __cjsMetaURL$4,
        './src/parser': __cjsMetaURL$2,
        './src/types': __cjsMetaURL$5,
        './src/emitter': __cjsMetaURL$3,
        './src/likelySubtags.generated': __cjsMetaURL$6
      }));
    }
  };
});

System.register("chunks:///_virtual/index7.js", ['./cjs-loader.mjs', './tslib7.js', './index13.js', './InitializeRelativeTimeFormat.js', './PartitionRelativeTimePattern.js', './get_internal_slots3.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3, __cjsMetaURL$4, __cjsMetaURL$5;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$4 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$5 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var tslib_1 = require("tslib");

        var ecma402_abstract_1 = require("@formatjs/ecma402-abstract");

        var InitializeRelativeTimeFormat_1 = require("./abstract/InitializeRelativeTimeFormat");

        var PartitionRelativeTimePattern_1 = require("./abstract/PartitionRelativeTimePattern");

        var get_internal_slots_1 = (0, tslib_1.__importDefault)(require("./get_internal_slots"));

        var RelativeTimeFormat =
        /** @class */
        function () {
          function RelativeTimeFormat(locales, options) {
            // test262/test/intl402/RelativeTimeFormat/constructor/constructor/newtarget-undefined.js
            // Cannot use `new.target` bc of IE11 & TS transpiles it to something else
            var newTarget = this && this instanceof RelativeTimeFormat ? this.constructor : void 0;

            if (!newTarget) {
              throw new TypeError("Intl.RelativeTimeFormat must be called with 'new'");
            }

            return (0, InitializeRelativeTimeFormat_1.InitializeRelativeTimeFormat)(this, locales, options, {
              getInternalSlots: get_internal_slots_1.default,
              availableLocales: RelativeTimeFormat.availableLocales,
              relevantExtensionKeys: RelativeTimeFormat.relevantExtensionKeys,
              localeData: RelativeTimeFormat.localeData,
              getDefaultLocale: RelativeTimeFormat.getDefaultLocale
            });
          }

          RelativeTimeFormat.prototype.format = function (value, unit) {
            if (typeof this !== 'object') {
              throw new TypeError('format was called on a non-object');
            }

            var internalSlots = (0, get_internal_slots_1.default)(this);

            if (!internalSlots.initializedRelativeTimeFormat) {
              throw new TypeError('format was called on a invalid context');
            }

            return (0, PartitionRelativeTimePattern_1.PartitionRelativeTimePattern)(this, Number(value), (0, ecma402_abstract_1.ToString)(unit), {
              getInternalSlots: get_internal_slots_1.default
            }).map(function (el) {
              return el.value;
            }).join('');
          };

          RelativeTimeFormat.prototype.formatToParts = function (value, unit) {
            if (typeof this !== 'object') {
              throw new TypeError('formatToParts was called on a non-object');
            }

            var internalSlots = (0, get_internal_slots_1.default)(this);

            if (!internalSlots.initializedRelativeTimeFormat) {
              throw new TypeError('formatToParts was called on a invalid context');
            }

            return (0, PartitionRelativeTimePattern_1.PartitionRelativeTimePattern)(this, Number(value), (0, ecma402_abstract_1.ToString)(unit), {
              getInternalSlots: get_internal_slots_1.default
            });
          };

          RelativeTimeFormat.prototype.resolvedOptions = function () {
            if (typeof this !== 'object') {
              throw new TypeError('resolvedOptions was called on a non-object');
            }

            var internalSlots = (0, get_internal_slots_1.default)(this);

            if (!internalSlots.initializedRelativeTimeFormat) {
              throw new TypeError('resolvedOptions was called on a invalid context');
            } // test262/test/intl402/RelativeTimeFormat/prototype/resolvedOptions/type.js


            return {
              locale: internalSlots.locale,
              style: internalSlots.style,
              numeric: internalSlots.numeric,
              numberingSystem: internalSlots.numberingSystem
            };
          };

          RelativeTimeFormat.supportedLocalesOf = function (locales, options) {
            return (0, ecma402_abstract_1.SupportedLocales)(RelativeTimeFormat.availableLocales, (0, ecma402_abstract_1.CanonicalizeLocaleList)(locales), options);
          };

          RelativeTimeFormat.__addLocaleData = function () {
            var data = [];

            for (var _i = 0; _i < arguments.length; _i++) {
              data[_i] = arguments[_i];
            }

            for (var _a = 0, data_1 = data; _a < data_1.length; _a++) {
              var _b = data_1[_a],
                  d = _b.data,
                  locale = _b.locale;
              var minimizedLocale = new Intl.Locale(locale).minimize().toString();
              RelativeTimeFormat.localeData[locale] = RelativeTimeFormat.localeData[minimizedLocale] = d;
              RelativeTimeFormat.availableLocales.add(minimizedLocale);
              RelativeTimeFormat.availableLocales.add(locale);

              if (!RelativeTimeFormat.__defaultLocale) {
                RelativeTimeFormat.__defaultLocale = minimizedLocale;
              }
            }
          };

          RelativeTimeFormat.getDefaultLocale = function () {
            return RelativeTimeFormat.__defaultLocale;
          };

          RelativeTimeFormat.localeData = {};
          RelativeTimeFormat.availableLocales = new Set();
          RelativeTimeFormat.__defaultLocale = '';
          RelativeTimeFormat.relevantExtensionKeys = ['nu'];
          RelativeTimeFormat.polyfilled = true;
          return RelativeTimeFormat;
        }();

        exports.default = RelativeTimeFormat;

        try {
          // IE11 does not have Symbol
          if (typeof Symbol !== 'undefined') {
            Object.defineProperty(RelativeTimeFormat.prototype, Symbol.toStringTag, {
              value: 'Intl.RelativeTimeFormat',
              writable: false,
              enumerable: false,
              configurable: true
            });
          } // https://github.com/tc39/test262/blob/master/test/intl402/RelativeTimeFormat/constructor/length.js


          Object.defineProperty(RelativeTimeFormat.prototype.constructor, 'length', {
            value: 0,
            writable: false,
            enumerable: false,
            configurable: true
          }); // https://github.com/tc39/test262/blob/master/test/intl402/RelativeTimeFormat/constructor/supportedLocalesOf/length.js

          Object.defineProperty(RelativeTimeFormat.supportedLocalesOf, 'length', {
            value: 1,
            writable: false,
            enumerable: false,
            configurable: true
          });
        } catch (e) {// Meta fix so we're test262-compliant, not important
        } // #endregion ORIGINAL CODE


        module.exports;
        module.exports.__esModule;
        module.exports.default;
      }, () => ({
        'tslib': __cjsMetaURL$1,
        '@formatjs/ecma402-abstract': __cjsMetaURL$2,
        './abstract/InitializeRelativeTimeFormat': __cjsMetaURL$3,
        './abstract/PartitionRelativeTimePattern': __cjsMetaURL$4,
        './get_internal_slots': __cjsMetaURL$5
      }));
    }
  };
});

System.register("chunks:///_virtual/index8.js", ['./cjs-loader.mjs', './tslib8.js', './index14.js', './index15.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });

        var tslib_1 = require("tslib");

        var ecma402_abstract_1 = require("@formatjs/ecma402-abstract");

        var intl_localematcher_1 = require("@formatjs/intl-localematcher");

        function validateInstance(instance, method) {
          if (!(instance instanceof ListFormat)) {
            throw new TypeError("Method Intl.ListFormat.prototype.".concat(method, " called on incompatible receiver ").concat(String(instance)));
          }
        }
        /**
         * https://tc39.es/proposal-intl-list-format/#sec-createstringlistfromiterable
         * @param list list
         */


        function stringListFromIterable(list) {
          if (list === undefined) {
            return [];
          }

          var result = [];

          for (var _i = 0, list_1 = list; _i < list_1.length; _i++) {
            var el = list_1[_i];

            if (typeof el !== 'string') {
              throw new TypeError("array list[".concat(list.indexOf(el), "] is not type String"));
            }

            result.push(el);
          }

          return result;
        }

        function createPartsFromList(internalSlotMap, lf, list) {
          var size = list.length;

          if (size === 0) {
            return [];
          }

          if (size === 2) {
            var pattern = (0, ecma402_abstract_1.getInternalSlot)(internalSlotMap, lf, 'templatePair');
            var first = {
              type: 'element',
              value: list[0]
            };
            var second = {
              type: 'element',
              value: list[1]
            };
            return deconstructPattern(pattern, {
              '0': first,
              '1': second
            });
          }

          var last = {
            type: 'element',
            value: list[size - 1]
          };
          var parts = last;
          var i = size - 2;

          while (i >= 0) {
            var pattern = void 0;

            if (i === 0) {
              pattern = (0, ecma402_abstract_1.getInternalSlot)(internalSlotMap, lf, 'templateStart');
            } else if (i < size - 2) {
              pattern = (0, ecma402_abstract_1.getInternalSlot)(internalSlotMap, lf, 'templateMiddle');
            } else {
              pattern = (0, ecma402_abstract_1.getInternalSlot)(internalSlotMap, lf, 'templateEnd');
            }

            var head = {
              type: 'element',
              value: list[i]
            };
            parts = deconstructPattern(pattern, {
              '0': head,
              '1': parts
            });
            i--;
          }

          return parts;
        }

        function deconstructPattern(pattern, placeables) {
          var patternParts = (0, ecma402_abstract_1.PartitionPattern)(pattern);
          var result = [];

          for (var _i = 0, patternParts_1 = patternParts; _i < patternParts_1.length; _i++) {
            var patternPart = patternParts_1[_i];
            var part = patternPart.type;

            if ((0, ecma402_abstract_1.isLiteralPart)(patternPart)) {
              result.push({
                type: 'literal',
                value: patternPart.value
              });
            } else {
              (0, ecma402_abstract_1.invariant)(part in placeables, "".concat(part, " is missing from placables"));
              var subst = placeables[part];

              if (Array.isArray(subst)) {
                result.push.apply(result, subst);
              } else {
                result.push(subst);
              }
            }
          }

          return result;
        }

        var ListFormat =
        /** @class */
        function () {
          function ListFormat(locales, options) {
            // test262/test/intl402/ListFormat/constructor/constructor/newtarget-undefined.js
            // Cannot use `new.target` bc of IE11 & TS transpiles it to something else
            var newTarget = this && this instanceof ListFormat ? this.constructor : void 0;

            if (!newTarget) {
              throw new TypeError("Intl.ListFormat must be called with 'new'");
            }

            (0, ecma402_abstract_1.setInternalSlot)(ListFormat.__INTERNAL_SLOT_MAP__, this, 'initializedListFormat', true);
            var requestedLocales = (0, ecma402_abstract_1.CanonicalizeLocaleList)(locales);
            var opt = Object.create(null);
            var opts = (0, ecma402_abstract_1.GetOptionsObject)(options);
            var matcher = (0, ecma402_abstract_1.GetOption)(opts, 'localeMatcher', 'string', ['best fit', 'lookup'], 'best fit');
            opt.localeMatcher = matcher;
            var localeData = ListFormat.localeData;
            var r = (0, intl_localematcher_1.ResolveLocale)(ListFormat.availableLocales, requestedLocales, opt, ListFormat.relevantExtensionKeys, localeData, ListFormat.getDefaultLocale);
            (0, ecma402_abstract_1.setInternalSlot)(ListFormat.__INTERNAL_SLOT_MAP__, this, 'locale', r.locale);
            var type = (0, ecma402_abstract_1.GetOption)(opts, 'type', 'string', ['conjunction', 'disjunction', 'unit'], 'conjunction');
            (0, ecma402_abstract_1.setInternalSlot)(ListFormat.__INTERNAL_SLOT_MAP__, this, 'type', type);
            var style = (0, ecma402_abstract_1.GetOption)(opts, 'style', 'string', ['long', 'short', 'narrow'], 'long');
            (0, ecma402_abstract_1.setInternalSlot)(ListFormat.__INTERNAL_SLOT_MAP__, this, 'style', style);
            var dataLocale = r.dataLocale;
            var dataLocaleData = localeData[dataLocale];
            (0, ecma402_abstract_1.invariant)(!!dataLocaleData, "Missing locale data for ".concat(dataLocale));
            var dataLocaleTypes = dataLocaleData[type];
            var templates = dataLocaleTypes[style];
            (0, ecma402_abstract_1.setInternalSlot)(ListFormat.__INTERNAL_SLOT_MAP__, this, 'templatePair', templates.pair);
            (0, ecma402_abstract_1.setInternalSlot)(ListFormat.__INTERNAL_SLOT_MAP__, this, 'templateStart', templates.start);
            (0, ecma402_abstract_1.setInternalSlot)(ListFormat.__INTERNAL_SLOT_MAP__, this, 'templateMiddle', templates.middle);
            (0, ecma402_abstract_1.setInternalSlot)(ListFormat.__INTERNAL_SLOT_MAP__, this, 'templateEnd', templates.end);
          }

          ListFormat.prototype.format = function (elements) {
            validateInstance(this, 'format');
            var result = '';
            var parts = createPartsFromList(ListFormat.__INTERNAL_SLOT_MAP__, this, stringListFromIterable(elements));

            if (!Array.isArray(parts)) {
              return parts.value;
            }

            for (var _i = 0, parts_1 = parts; _i < parts_1.length; _i++) {
              var p = parts_1[_i];
              result += p.value;
            }

            return result;
          };

          ListFormat.prototype.formatToParts = function (elements) {
            validateInstance(this, 'format');
            var parts = createPartsFromList(ListFormat.__INTERNAL_SLOT_MAP__, this, stringListFromIterable(elements));

            if (!Array.isArray(parts)) {
              return [parts];
            }

            var result = [];

            for (var _i = 0, parts_2 = parts; _i < parts_2.length; _i++) {
              var part = parts_2[_i];
              result.push((0, tslib_1.__assign)({}, part));
            }

            return result;
          };

          ListFormat.prototype.resolvedOptions = function () {
            validateInstance(this, 'resolvedOptions');
            return {
              locale: (0, ecma402_abstract_1.getInternalSlot)(ListFormat.__INTERNAL_SLOT_MAP__, this, 'locale'),
              type: (0, ecma402_abstract_1.getInternalSlot)(ListFormat.__INTERNAL_SLOT_MAP__, this, 'type'),
              style: (0, ecma402_abstract_1.getInternalSlot)(ListFormat.__INTERNAL_SLOT_MAP__, this, 'style')
            };
          };

          ListFormat.supportedLocalesOf = function (locales, options) {
            // test262/test/intl402/ListFormat/constructor/supportedLocalesOf/result-type.js
            return (0, ecma402_abstract_1.SupportedLocales)(ListFormat.availableLocales, (0, ecma402_abstract_1.CanonicalizeLocaleList)(locales), options);
          };

          ListFormat.__addLocaleData = function () {
            var data = [];

            for (var _i = 0; _i < arguments.length; _i++) {
              data[_i] = arguments[_i];
            }

            for (var _a = 0, data_1 = data; _a < data_1.length; _a++) {
              var _b = data_1[_a],
                  d = _b.data,
                  locale = _b.locale;
              var minimizedLocale = new Intl.Locale(locale).minimize().toString();
              ListFormat.localeData[locale] = ListFormat.localeData[minimizedLocale] = d;
              ListFormat.availableLocales.add(minimizedLocale);
              ListFormat.availableLocales.add(locale);

              if (!ListFormat.__defaultLocale) {
                ListFormat.__defaultLocale = minimizedLocale;
              }
            }
          };

          ListFormat.getDefaultLocale = function () {
            return ListFormat.__defaultLocale;
          };

          ListFormat.localeData = {};
          ListFormat.availableLocales = new Set();
          ListFormat.__defaultLocale = '';
          ListFormat.relevantExtensionKeys = [];
          ListFormat.polyfilled = true;
          ListFormat.__INTERNAL_SLOT_MAP__ = new WeakMap();
          return ListFormat;
        }();

        exports.default = ListFormat;

        try {
          // IE11 does not have Symbol
          if (typeof Symbol !== 'undefined') {
            Object.defineProperty(ListFormat.prototype, Symbol.toStringTag, {
              value: 'Intl.ListFormat',
              writable: false,
              enumerable: false,
              configurable: true
            });
          } // https://github.com/tc39/test262/blob/master/test/intl402/ListFormat/constructor/length.js


          Object.defineProperty(ListFormat.prototype.constructor, 'length', {
            value: 0,
            writable: false,
            enumerable: false,
            configurable: true
          }); // https://github.com/tc39/test262/blob/master/test/intl402/ListFormat/constructor/supportedLocalesOf/length.js

          Object.defineProperty(ListFormat.supportedLocalesOf, 'length', {
            value: 1,
            writable: false,
            enumerable: false,
            configurable: true
          });
        } catch (e) {// Meta fix so we're test262-compliant, not important
        } // #endregion ORIGINAL CODE


        module.exports;
        module.exports.__esModule;
        module.exports.default;
      }, () => ({
        'tslib': __cjsMetaURL$1,
        '@formatjs/ecma402-abstract': __cjsMetaURL$2,
        '@formatjs/intl-localematcher': __cjsMetaURL$3
      }));
    }
  };
});

System.register("chunks:///_virtual/index9.js", ['./cjs-loader.mjs', './CanonicalizeLocaleList4.js', './ResolveLocale.js', './LookupSupportedLocales.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ResolveLocale = exports.LookupSupportedLocales = exports.match = void 0;

        var CanonicalizeLocaleList_1 = require("./abstract/CanonicalizeLocaleList");

        var ResolveLocale_1 = require("./abstract/ResolveLocale");

        function match(requestedLocales, availableLocales, defaultLocale, opts) {
          var locales = availableLocales.reduce(function (all, l) {
            all.add(l);
            return all;
          }, new Set());
          return (0, ResolveLocale_1.ResolveLocale)(locales, (0, CanonicalizeLocaleList_1.CanonicalizeLocaleList)(requestedLocales), {
            localeMatcher: (opts === null || opts === void 0 ? void 0 : opts.algorithm) || 'best fit'
          }, [], {}, function () {
            return defaultLocale;
          }).locale;
        }

        exports.match = match;

        var LookupSupportedLocales_1 = require("./abstract/LookupSupportedLocales");

        Object.defineProperty(exports, "LookupSupportedLocales", {
          enumerable: true,
          get: function () {
            return LookupSupportedLocales_1.LookupSupportedLocales;
          }
        });

        var ResolveLocale_2 = require("./abstract/ResolveLocale");

        Object.defineProperty(exports, "ResolveLocale", {
          enumerable: true,
          get: function () {
            return ResolveLocale_2.ResolveLocale;
          }
        }); // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.ResolveLocale;
        module.exports.LookupSupportedLocales;
        module.exports.match;
      }, () => ({
        './abstract/CanonicalizeLocaleList': __cjsMetaURL$1,
        './abstract/ResolveLocale': __cjsMetaURL$2,
        './abstract/LookupSupportedLocales': __cjsMetaURL$3,
        './abstract/ResolveLocale': __cjsMetaURL$2
      }));
    }
  };
});

System.register("chunks:///_virtual/inherits.js", ['./setPrototypeOf.js'], function (exports) {
  'use strict';

  var _setPrototypeOf;

  return {
    setters: [function (module) {
      _setPrototypeOf = module.default;
    }],
    execute: function () {
      exports('default', _inherits);

      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function");
        }

        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            writable: true,
            configurable: true
          }
        });
        Object.defineProperty(subClass, "prototype", {
          writable: false
        });
        if (superClass) _setPrototypeOf(subClass, superClass);
      }
    }
  };
});

System.register("chunks:///_virtual/InitializeDateTimeFormat.js", ['./cjs-loader.mjs', './index16.js', './BasicFormatMatcher.js', './BestFitFormatMatcher.js', './utils.js', './DateTimeStyleFormat.js', './ToDateTimeOptions.js', './index21.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3, __cjsMetaURL$4, __cjsMetaURL$5, __cjsMetaURL$6, __cjsMetaURL$7;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$4 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$5 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$6 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$7 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.InitializeDateTimeFormat = void 0;

        var ecma402_abstract_1 = require("@formatjs/ecma402-abstract");

        var BasicFormatMatcher_1 = require("./BasicFormatMatcher");

        var BestFitFormatMatcher_1 = require("./BestFitFormatMatcher");

        var utils_1 = require("./utils");

        var DateTimeStyleFormat_1 = require("./DateTimeStyleFormat");

        var ToDateTimeOptions_1 = require("./ToDateTimeOptions");

        var intl_localematcher_1 = require("@formatjs/intl-localematcher");

        function isTimeRelated(opt) {
          for (var _i = 0, _a = ['hour', 'minute', 'second']; _i < _a.length; _i++) {
            var prop = _a[_i];
            var value = opt[prop];

            if (value !== undefined) {
              return true;
            }
          }

          return false;
        }

        function resolveHourCycle(hc, hcDefault, hour12) {
          if (hc == null) {
            hc = hcDefault;
          }

          if (hour12 !== undefined) {
            if (hour12) {
              if (hcDefault === 'h11' || hcDefault === 'h23') {
                hc = 'h11';
              } else {
                hc = 'h12';
              }
            } else {
              (0, ecma402_abstract_1.invariant)(!hour12, 'hour12 must not be set');

              if (hcDefault === 'h11' || hcDefault === 'h23') {
                hc = 'h23';
              } else {
                hc = 'h24';
              }
            }
          }

          return hc;
        }

        var TYPE_REGEX = /^[a-z0-9]{3,8}$/i;
        /**
         * https://tc39.es/ecma402/#sec-initializedatetimeformat
         * @param dtf DateTimeFormat
         * @param locales locales
         * @param opts options
         */

        function InitializeDateTimeFormat(dtf, locales, opts, _a) {
          var getInternalSlots = _a.getInternalSlots,
              availableLocales = _a.availableLocales,
              localeData = _a.localeData,
              getDefaultLocale = _a.getDefaultLocale,
              getDefaultTimeZone = _a.getDefaultTimeZone,
              relevantExtensionKeys = _a.relevantExtensionKeys,
              tzData = _a.tzData,
              uppercaseLinks = _a.uppercaseLinks; // @ts-ignore

          var requestedLocales = (0, ecma402_abstract_1.CanonicalizeLocaleList)(locales);
          var options = (0, ToDateTimeOptions_1.ToDateTimeOptions)(opts, 'any', 'date');
          var opt = Object.create(null);
          var matcher = (0, ecma402_abstract_1.GetOption)(options, 'localeMatcher', 'string', ['lookup', 'best fit'], 'best fit');
          opt.localeMatcher = matcher;
          var calendar = (0, ecma402_abstract_1.GetOption)(options, 'calendar', 'string', undefined, undefined);

          if (calendar !== undefined && !TYPE_REGEX.test(calendar)) {
            throw new RangeError('Malformed calendar');
          }

          var internalSlots = getInternalSlots(dtf);
          opt.ca = calendar;
          var numberingSystem = (0, ecma402_abstract_1.GetOption)(options, 'numberingSystem', 'string', undefined, undefined);

          if (numberingSystem !== undefined && !TYPE_REGEX.test(numberingSystem)) {
            throw new RangeError('Malformed numbering system');
          }

          opt.nu = numberingSystem;
          var hour12 = (0, ecma402_abstract_1.GetOption)(options, 'hour12', 'boolean', undefined, undefined);
          var hourCycle = (0, ecma402_abstract_1.GetOption)(options, 'hourCycle', 'string', ['h11', 'h12', 'h23', 'h24'], undefined);

          if (hour12 !== undefined) {
            // @ts-ignore
            hourCycle = null;
          }

          opt.hc = hourCycle;
          var r = (0, intl_localematcher_1.ResolveLocale)(availableLocales, requestedLocales, opt, relevantExtensionKeys, localeData, getDefaultLocale);
          internalSlots.locale = r.locale;
          calendar = r.ca;
          internalSlots.calendar = calendar;
          internalSlots.hourCycle = r.hc;
          internalSlots.numberingSystem = r.nu;
          var dataLocale = r.dataLocale;
          internalSlots.dataLocale = dataLocale;
          var timeZone = options.timeZone;

          if (timeZone !== undefined) {
            timeZone = String(timeZone);

            if (!(0, ecma402_abstract_1.IsValidTimeZoneName)(timeZone, {
              tzData: tzData,
              uppercaseLinks: uppercaseLinks
            })) {
              throw new RangeError('Invalid timeZoneName');
            }

            timeZone = (0, ecma402_abstract_1.CanonicalizeTimeZoneName)(timeZone, {
              tzData: tzData,
              uppercaseLinks: uppercaseLinks
            });
          } else {
            timeZone = getDefaultTimeZone();
          }

          internalSlots.timeZone = timeZone;
          opt = Object.create(null);
          opt.weekday = (0, ecma402_abstract_1.GetOption)(options, 'weekday', 'string', ['narrow', 'short', 'long'], undefined);
          opt.era = (0, ecma402_abstract_1.GetOption)(options, 'era', 'string', ['narrow', 'short', 'long'], undefined);
          opt.year = (0, ecma402_abstract_1.GetOption)(options, 'year', 'string', ['2-digit', 'numeric'], undefined);
          opt.month = (0, ecma402_abstract_1.GetOption)(options, 'month', 'string', ['2-digit', 'numeric', 'narrow', 'short', 'long'], undefined);
          opt.day = (0, ecma402_abstract_1.GetOption)(options, 'day', 'string', ['2-digit', 'numeric'], undefined);
          opt.hour = (0, ecma402_abstract_1.GetOption)(options, 'hour', 'string', ['2-digit', 'numeric'], undefined);
          opt.minute = (0, ecma402_abstract_1.GetOption)(options, 'minute', 'string', ['2-digit', 'numeric'], undefined);
          opt.second = (0, ecma402_abstract_1.GetOption)(options, 'second', 'string', ['2-digit', 'numeric'], undefined);
          opt.timeZoneName = (0, ecma402_abstract_1.GetOption)(options, 'timeZoneName', 'string', ['short', 'long'], undefined);
          opt.fractionalSecondDigits = (0, ecma402_abstract_1.GetNumberOption)(options, 'fractionalSecondDigits', 1, 3, // @ts-expect-error
          undefined);
          var dataLocaleData = localeData[dataLocale];
          (0, ecma402_abstract_1.invariant)(!!dataLocaleData, "Missing locale data for ".concat(dataLocale));
          var formats = dataLocaleData.formats[calendar]; // UNSPECCED: IMPLEMENTATION DETAILS

          if (!formats) {
            throw new RangeError("Calendar \"".concat(calendar, "\" is not supported. Try setting \"calendar\" to 1 of the following: ").concat(Object.keys(dataLocaleData.formats).join(', ')));
          }

          var formatMatcher = (0, ecma402_abstract_1.GetOption)(options, 'formatMatcher', 'string', ['basic', 'best fit'], 'best fit');
          var dateStyle = (0, ecma402_abstract_1.GetOption)(options, 'dateStyle', 'string', ['full', 'long', 'medium', 'short'], undefined);
          internalSlots.dateStyle = dateStyle;
          var timeStyle = (0, ecma402_abstract_1.GetOption)(options, 'timeStyle', 'string', ['full', 'long', 'medium', 'short'], undefined);
          internalSlots.timeStyle = timeStyle;
          var bestFormat;

          if (dateStyle === undefined && timeStyle === undefined) {
            if (formatMatcher === 'basic') {
              bestFormat = (0, BasicFormatMatcher_1.BasicFormatMatcher)(opt, formats);
            } else {
              // IMPL DETAILS START
              if (isTimeRelated(opt)) {
                var hc = resolveHourCycle(internalSlots.hourCycle, dataLocaleData.hourCycle, hour12);
                opt.hour12 = hc === 'h11' || hc === 'h12';
              } // IMPL DETAILS END


              bestFormat = (0, BestFitFormatMatcher_1.BestFitFormatMatcher)(opt, formats);
            }
          } else {
            for (var _i = 0, DATE_TIME_PROPS_1 = utils_1.DATE_TIME_PROPS; _i < DATE_TIME_PROPS_1.length; _i++) {
              var prop = DATE_TIME_PROPS_1[_i];
              var p = opt[prop];

              if (p !== undefined) {
                throw new TypeError("Intl.DateTimeFormat can't set option ".concat(prop, " when ").concat(dateStyle ? 'dateStyle' : 'timeStyle', " is used"));
              }
            }

            bestFormat = (0, DateTimeStyleFormat_1.DateTimeStyleFormat)(dateStyle, timeStyle, dataLocaleData);
          } // IMPL DETAIL START
          // For debugging


          internalSlots.format = bestFormat; // IMPL DETAIL END

          for (var prop in opt) {
            var p = bestFormat[prop];

            if (p !== undefined) {
              internalSlots[prop] = p;
            }
          }

          var pattern;
          var rangePatterns;

          if (internalSlots.hour !== undefined) {
            var hc = resolveHourCycle(internalSlots.hourCycle, dataLocaleData.hourCycle, hour12);
            internalSlots.hourCycle = hc;

            if (hc === 'h11' || hc === 'h12') {
              pattern = bestFormat.pattern12;
              rangePatterns = bestFormat.rangePatterns12;
            } else {
              pattern = bestFormat.pattern;
              rangePatterns = bestFormat.rangePatterns;
            }
          } else {
            // @ts-ignore
            internalSlots.hourCycle = undefined;
            pattern = bestFormat.pattern;
            rangePatterns = bestFormat.rangePatterns;
          }

          internalSlots.pattern = pattern;
          internalSlots.rangePatterns = rangePatterns;
          return dtf;
        }

        exports.InitializeDateTimeFormat = InitializeDateTimeFormat; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.InitializeDateTimeFormat;
      }, () => ({
        '@formatjs/ecma402-abstract': __cjsMetaURL$1,
        './BasicFormatMatcher': __cjsMetaURL$2,
        './BestFitFormatMatcher': __cjsMetaURL$3,
        './utils': __cjsMetaURL$4,
        './DateTimeStyleFormat': __cjsMetaURL$5,
        './ToDateTimeOptions': __cjsMetaURL$6,
        '@formatjs/intl-localematcher': __cjsMetaURL$7
      }));
    }
  };
});

System.register("chunks:///_virtual/InitializeNumberFormat.js", ['./cjs-loader.mjs', './CanonicalizeLocaleList.js', './GetOption.js', './index9.js', './SetNumberFormatUnitOptions.js', './CurrencyDigits.js', './SetNumberFormatDigitOptions.js', './utils2.js', './CoerceOptionsToObject.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3, __cjsMetaURL$4, __cjsMetaURL$5, __cjsMetaURL$6, __cjsMetaURL$7, __cjsMetaURL$8;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$4 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$5 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$6 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$7 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$8 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.InitializeNumberFormat = void 0;

        var CanonicalizeLocaleList_1 = require("../CanonicalizeLocaleList");

        var GetOption_1 = require("../GetOption");

        var intl_localematcher_1 = require("@formatjs/intl-localematcher");

        var SetNumberFormatUnitOptions_1 = require("./SetNumberFormatUnitOptions");

        var CurrencyDigits_1 = require("./CurrencyDigits");

        var SetNumberFormatDigitOptions_1 = require("./SetNumberFormatDigitOptions");

        var utils_1 = require("../utils");

        var CoerceOptionsToObject_1 = require("../CoerceOptionsToObject");
        /**
         * https://tc39.es/ecma402/#sec-initializenumberformat
         */


        function InitializeNumberFormat(nf, locales, opts, _a) {
          var getInternalSlots = _a.getInternalSlots,
              localeData = _a.localeData,
              availableLocales = _a.availableLocales,
              numberingSystemNames = _a.numberingSystemNames,
              getDefaultLocale = _a.getDefaultLocale,
              currencyDigitsData = _a.currencyDigitsData; // @ts-ignore

          var requestedLocales = (0, CanonicalizeLocaleList_1.CanonicalizeLocaleList)(locales);
          var options = (0, CoerceOptionsToObject_1.CoerceOptionsToObject)(opts);
          var opt = Object.create(null);
          var matcher = (0, GetOption_1.GetOption)(options, 'localeMatcher', 'string', ['lookup', 'best fit'], 'best fit');
          opt.localeMatcher = matcher;
          var numberingSystem = (0, GetOption_1.GetOption)(options, 'numberingSystem', 'string', undefined, undefined);

          if (numberingSystem !== undefined && numberingSystemNames.indexOf(numberingSystem) < 0) {
            // 8.a. If numberingSystem does not match the Unicode Locale Identifier type nonterminal,
            // throw a RangeError exception.
            throw RangeError("Invalid numberingSystems: ".concat(numberingSystem));
          }

          opt.nu = numberingSystem;
          var r = (0, intl_localematcher_1.ResolveLocale)(availableLocales, requestedLocales, opt, // [[RelevantExtensionKeys]] slot, which is a constant
          ['nu'], localeData, getDefaultLocale);
          var dataLocaleData = localeData[r.dataLocale];
          (0, utils_1.invariant)(!!dataLocaleData, "Missing locale data for ".concat(r.dataLocale));
          var internalSlots = getInternalSlots(nf);
          internalSlots.locale = r.locale;
          internalSlots.dataLocale = r.dataLocale;
          internalSlots.numberingSystem = r.nu;
          internalSlots.dataLocaleData = dataLocaleData;
          (0, SetNumberFormatUnitOptions_1.SetNumberFormatUnitOptions)(nf, options, {
            getInternalSlots: getInternalSlots
          });
          var style = internalSlots.style;
          var mnfdDefault;
          var mxfdDefault;

          if (style === 'currency') {
            var currency = internalSlots.currency;
            var cDigits = (0, CurrencyDigits_1.CurrencyDigits)(currency, {
              currencyDigitsData: currencyDigitsData
            });
            mnfdDefault = cDigits;
            mxfdDefault = cDigits;
          } else {
            mnfdDefault = 0;
            mxfdDefault = style === 'percent' ? 0 : 3;
          }

          var notation = (0, GetOption_1.GetOption)(options, 'notation', 'string', ['standard', 'scientific', 'engineering', 'compact'], 'standard');
          internalSlots.notation = notation;
          (0, SetNumberFormatDigitOptions_1.SetNumberFormatDigitOptions)(internalSlots, options, mnfdDefault, mxfdDefault, notation);
          var compactDisplay = (0, GetOption_1.GetOption)(options, 'compactDisplay', 'string', ['short', 'long'], 'short');

          if (notation === 'compact') {
            internalSlots.compactDisplay = compactDisplay;
          }

          var useGrouping = (0, GetOption_1.GetOption)(options, 'useGrouping', 'boolean', undefined, true);
          internalSlots.useGrouping = useGrouping;
          var signDisplay = (0, GetOption_1.GetOption)(options, 'signDisplay', 'string', ['auto', 'never', 'always', 'exceptZero'], 'auto');
          internalSlots.signDisplay = signDisplay;
          return nf;
        }

        exports.InitializeNumberFormat = InitializeNumberFormat; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.InitializeNumberFormat;
      }, () => ({
        '../CanonicalizeLocaleList': __cjsMetaURL$1,
        '../GetOption': __cjsMetaURL$2,
        '@formatjs/intl-localematcher': __cjsMetaURL$3,
        './SetNumberFormatUnitOptions': __cjsMetaURL$4,
        './CurrencyDigits': __cjsMetaURL$5,
        './SetNumberFormatDigitOptions': __cjsMetaURL$6,
        '../utils': __cjsMetaURL$7,
        '../CoerceOptionsToObject': __cjsMetaURL$8
      }));
    }
  };
});

System.register("chunks:///_virtual/InitializeNumberFormat2.js", ['./cjs-loader.mjs', './CanonicalizeLocaleList2.js', './GetOption2.js', './index20.js', './SetNumberFormatUnitOptions2.js', './CurrencyDigits2.js', './SetNumberFormatDigitOptions2.js', './utils3.js', './CoerceOptionsToObject2.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3, __cjsMetaURL$4, __cjsMetaURL$5, __cjsMetaURL$6, __cjsMetaURL$7, __cjsMetaURL$8;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$4 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$5 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$6 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$7 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$8 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.InitializeNumberFormat = void 0;

        var CanonicalizeLocaleList_1 = require("../CanonicalizeLocaleList");

        var GetOption_1 = require("../GetOption");

        var intl_localematcher_1 = require("@formatjs/intl-localematcher");

        var SetNumberFormatUnitOptions_1 = require("./SetNumberFormatUnitOptions");

        var CurrencyDigits_1 = require("./CurrencyDigits");

        var SetNumberFormatDigitOptions_1 = require("./SetNumberFormatDigitOptions");

        var utils_1 = require("../utils");

        var CoerceOptionsToObject_1 = require("../CoerceOptionsToObject");
        /**
         * https://tc39.es/ecma402/#sec-initializenumberformat
         */


        function InitializeNumberFormat(nf, locales, opts, _a) {
          var getInternalSlots = _a.getInternalSlots,
              localeData = _a.localeData,
              availableLocales = _a.availableLocales,
              numberingSystemNames = _a.numberingSystemNames,
              getDefaultLocale = _a.getDefaultLocale,
              currencyDigitsData = _a.currencyDigitsData; // @ts-ignore

          var requestedLocales = (0, CanonicalizeLocaleList_1.CanonicalizeLocaleList)(locales);
          var options = (0, CoerceOptionsToObject_1.CoerceOptionsToObject)(opts);
          var opt = Object.create(null);
          var matcher = (0, GetOption_1.GetOption)(options, 'localeMatcher', 'string', ['lookup', 'best fit'], 'best fit');
          opt.localeMatcher = matcher;
          var numberingSystem = (0, GetOption_1.GetOption)(options, 'numberingSystem', 'string', undefined, undefined);

          if (numberingSystem !== undefined && numberingSystemNames.indexOf(numberingSystem) < 0) {
            // 8.a. If numberingSystem does not match the Unicode Locale Identifier type nonterminal,
            // throw a RangeError exception.
            throw RangeError("Invalid numberingSystems: ".concat(numberingSystem));
          }

          opt.nu = numberingSystem;
          var r = (0, intl_localematcher_1.ResolveLocale)(availableLocales, requestedLocales, opt, // [[RelevantExtensionKeys]] slot, which is a constant
          ['nu'], localeData, getDefaultLocale);
          var dataLocaleData = localeData[r.dataLocale];
          (0, utils_1.invariant)(!!dataLocaleData, "Missing locale data for ".concat(r.dataLocale));
          var internalSlots = getInternalSlots(nf);
          internalSlots.locale = r.locale;
          internalSlots.dataLocale = r.dataLocale;
          internalSlots.numberingSystem = r.nu;
          internalSlots.dataLocaleData = dataLocaleData;
          (0, SetNumberFormatUnitOptions_1.SetNumberFormatUnitOptions)(nf, options, {
            getInternalSlots: getInternalSlots
          });
          var style = internalSlots.style;
          var mnfdDefault;
          var mxfdDefault;

          if (style === 'currency') {
            var currency = internalSlots.currency;
            var cDigits = (0, CurrencyDigits_1.CurrencyDigits)(currency, {
              currencyDigitsData: currencyDigitsData
            });
            mnfdDefault = cDigits;
            mxfdDefault = cDigits;
          } else {
            mnfdDefault = 0;
            mxfdDefault = style === 'percent' ? 0 : 3;
          }

          var notation = (0, GetOption_1.GetOption)(options, 'notation', 'string', ['standard', 'scientific', 'engineering', 'compact'], 'standard');
          internalSlots.notation = notation;
          (0, SetNumberFormatDigitOptions_1.SetNumberFormatDigitOptions)(internalSlots, options, mnfdDefault, mxfdDefault, notation);
          var compactDisplay = (0, GetOption_1.GetOption)(options, 'compactDisplay', 'string', ['short', 'long'], 'short');

          if (notation === 'compact') {
            internalSlots.compactDisplay = compactDisplay;
          }

          var useGrouping = (0, GetOption_1.GetOption)(options, 'useGrouping', 'boolean', undefined, true);
          internalSlots.useGrouping = useGrouping;
          var signDisplay = (0, GetOption_1.GetOption)(options, 'signDisplay', 'string', ['auto', 'never', 'always', 'exceptZero'], 'auto');
          internalSlots.signDisplay = signDisplay;
          return nf;
        }

        exports.InitializeNumberFormat = InitializeNumberFormat; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.InitializeNumberFormat;
      }, () => ({
        '../CanonicalizeLocaleList': __cjsMetaURL$1,
        '../GetOption': __cjsMetaURL$2,
        '@formatjs/intl-localematcher': __cjsMetaURL$3,
        './SetNumberFormatUnitOptions': __cjsMetaURL$4,
        './CurrencyDigits': __cjsMetaURL$5,
        './SetNumberFormatDigitOptions': __cjsMetaURL$6,
        '../utils': __cjsMetaURL$7,
        '../CoerceOptionsToObject': __cjsMetaURL$8
      }));
    }
  };
});

System.register("chunks:///_virtual/InitializeNumberFormat3.js", ['./cjs-loader.mjs', './CanonicalizeLocaleList3.js', './GetOption3.js', './index18.js', './SetNumberFormatUnitOptions3.js', './CurrencyDigits3.js', './SetNumberFormatDigitOptions3.js', './utils4.js', './CoerceOptionsToObject3.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3, __cjsMetaURL$4, __cjsMetaURL$5, __cjsMetaURL$6, __cjsMetaURL$7, __cjsMetaURL$8;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$4 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$5 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$6 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$7 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$8 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.InitializeNumberFormat = void 0;

        var CanonicalizeLocaleList_1 = require("../CanonicalizeLocaleList");

        var GetOption_1 = require("../GetOption");

        var intl_localematcher_1 = require("@formatjs/intl-localematcher");

        var SetNumberFormatUnitOptions_1 = require("./SetNumberFormatUnitOptions");

        var CurrencyDigits_1 = require("./CurrencyDigits");

        var SetNumberFormatDigitOptions_1 = require("./SetNumberFormatDigitOptions");

        var utils_1 = require("../utils");

        var CoerceOptionsToObject_1 = require("../CoerceOptionsToObject");
        /**
         * https://tc39.es/ecma402/#sec-initializenumberformat
         */


        function InitializeNumberFormat(nf, locales, opts, _a) {
          var getInternalSlots = _a.getInternalSlots,
              localeData = _a.localeData,
              availableLocales = _a.availableLocales,
              numberingSystemNames = _a.numberingSystemNames,
              getDefaultLocale = _a.getDefaultLocale,
              currencyDigitsData = _a.currencyDigitsData; // @ts-ignore

          var requestedLocales = (0, CanonicalizeLocaleList_1.CanonicalizeLocaleList)(locales);
          var options = (0, CoerceOptionsToObject_1.CoerceOptionsToObject)(opts);
          var opt = Object.create(null);
          var matcher = (0, GetOption_1.GetOption)(options, 'localeMatcher', 'string', ['lookup', 'best fit'], 'best fit');
          opt.localeMatcher = matcher;
          var numberingSystem = (0, GetOption_1.GetOption)(options, 'numberingSystem', 'string', undefined, undefined);

          if (numberingSystem !== undefined && numberingSystemNames.indexOf(numberingSystem) < 0) {
            // 8.a. If numberingSystem does not match the Unicode Locale Identifier type nonterminal,
            // throw a RangeError exception.
            throw RangeError("Invalid numberingSystems: ".concat(numberingSystem));
          }

          opt.nu = numberingSystem;
          var r = (0, intl_localematcher_1.ResolveLocale)(availableLocales, requestedLocales, opt, // [[RelevantExtensionKeys]] slot, which is a constant
          ['nu'], localeData, getDefaultLocale);
          var dataLocaleData = localeData[r.dataLocale];
          (0, utils_1.invariant)(!!dataLocaleData, "Missing locale data for ".concat(r.dataLocale));
          var internalSlots = getInternalSlots(nf);
          internalSlots.locale = r.locale;
          internalSlots.dataLocale = r.dataLocale;
          internalSlots.numberingSystem = r.nu;
          internalSlots.dataLocaleData = dataLocaleData;
          (0, SetNumberFormatUnitOptions_1.SetNumberFormatUnitOptions)(nf, options, {
            getInternalSlots: getInternalSlots
          });
          var style = internalSlots.style;
          var mnfdDefault;
          var mxfdDefault;

          if (style === 'currency') {
            var currency = internalSlots.currency;
            var cDigits = (0, CurrencyDigits_1.CurrencyDigits)(currency, {
              currencyDigitsData: currencyDigitsData
            });
            mnfdDefault = cDigits;
            mxfdDefault = cDigits;
          } else {
            mnfdDefault = 0;
            mxfdDefault = style === 'percent' ? 0 : 3;
          }

          var notation = (0, GetOption_1.GetOption)(options, 'notation', 'string', ['standard', 'scientific', 'engineering', 'compact'], 'standard');
          internalSlots.notation = notation;
          (0, SetNumberFormatDigitOptions_1.SetNumberFormatDigitOptions)(internalSlots, options, mnfdDefault, mxfdDefault, notation);
          var compactDisplay = (0, GetOption_1.GetOption)(options, 'compactDisplay', 'string', ['short', 'long'], 'short');

          if (notation === 'compact') {
            internalSlots.compactDisplay = compactDisplay;
          }

          var useGrouping = (0, GetOption_1.GetOption)(options, 'useGrouping', 'boolean', undefined, true);
          internalSlots.useGrouping = useGrouping;
          var signDisplay = (0, GetOption_1.GetOption)(options, 'signDisplay', 'string', ['auto', 'never', 'always', 'exceptZero'], 'auto');
          internalSlots.signDisplay = signDisplay;
          return nf;
        }

        exports.InitializeNumberFormat = InitializeNumberFormat; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.InitializeNumberFormat;
      }, () => ({
        '../CanonicalizeLocaleList': __cjsMetaURL$1,
        '../GetOption': __cjsMetaURL$2,
        '@formatjs/intl-localematcher': __cjsMetaURL$3,
        './SetNumberFormatUnitOptions': __cjsMetaURL$4,
        './CurrencyDigits': __cjsMetaURL$5,
        './SetNumberFormatDigitOptions': __cjsMetaURL$6,
        '../utils': __cjsMetaURL$7,
        '../CoerceOptionsToObject': __cjsMetaURL$8
      }));
    }
  };
});

System.register("chunks:///_virtual/InitializeNumberFormat4.js", ['./cjs-loader.mjs', './CanonicalizeLocaleList5.js', './GetOption4.js', './index19.js', './SetNumberFormatUnitOptions4.js', './CurrencyDigits4.js', './SetNumberFormatDigitOptions4.js', './utils5.js', './CoerceOptionsToObject4.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3, __cjsMetaURL$4, __cjsMetaURL$5, __cjsMetaURL$6, __cjsMetaURL$7, __cjsMetaURL$8;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$4 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$5 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$6 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$7 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$8 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.InitializeNumberFormat = void 0;

        var CanonicalizeLocaleList_1 = require("../CanonicalizeLocaleList");

        var GetOption_1 = require("../GetOption");

        var intl_localematcher_1 = require("@formatjs/intl-localematcher");

        var SetNumberFormatUnitOptions_1 = require("./SetNumberFormatUnitOptions");

        var CurrencyDigits_1 = require("./CurrencyDigits");

        var SetNumberFormatDigitOptions_1 = require("./SetNumberFormatDigitOptions");

        var utils_1 = require("../utils");

        var CoerceOptionsToObject_1 = require("../CoerceOptionsToObject");
        /**
         * https://tc39.es/ecma402/#sec-initializenumberformat
         */


        function InitializeNumberFormat(nf, locales, opts, _a) {
          var getInternalSlots = _a.getInternalSlots,
              localeData = _a.localeData,
              availableLocales = _a.availableLocales,
              numberingSystemNames = _a.numberingSystemNames,
              getDefaultLocale = _a.getDefaultLocale,
              currencyDigitsData = _a.currencyDigitsData; // @ts-ignore

          var requestedLocales = (0, CanonicalizeLocaleList_1.CanonicalizeLocaleList)(locales);
          var options = (0, CoerceOptionsToObject_1.CoerceOptionsToObject)(opts);
          var opt = Object.create(null);
          var matcher = (0, GetOption_1.GetOption)(options, 'localeMatcher', 'string', ['lookup', 'best fit'], 'best fit');
          opt.localeMatcher = matcher;
          var numberingSystem = (0, GetOption_1.GetOption)(options, 'numberingSystem', 'string', undefined, undefined);

          if (numberingSystem !== undefined && numberingSystemNames.indexOf(numberingSystem) < 0) {
            // 8.a. If numberingSystem does not match the Unicode Locale Identifier type nonterminal,
            // throw a RangeError exception.
            throw RangeError("Invalid numberingSystems: ".concat(numberingSystem));
          }

          opt.nu = numberingSystem;
          var r = (0, intl_localematcher_1.ResolveLocale)(availableLocales, requestedLocales, opt, // [[RelevantExtensionKeys]] slot, which is a constant
          ['nu'], localeData, getDefaultLocale);
          var dataLocaleData = localeData[r.dataLocale];
          (0, utils_1.invariant)(!!dataLocaleData, "Missing locale data for ".concat(r.dataLocale));
          var internalSlots = getInternalSlots(nf);
          internalSlots.locale = r.locale;
          internalSlots.dataLocale = r.dataLocale;
          internalSlots.numberingSystem = r.nu;
          internalSlots.dataLocaleData = dataLocaleData;
          (0, SetNumberFormatUnitOptions_1.SetNumberFormatUnitOptions)(nf, options, {
            getInternalSlots: getInternalSlots
          });
          var style = internalSlots.style;
          var mnfdDefault;
          var mxfdDefault;

          if (style === 'currency') {
            var currency = internalSlots.currency;
            var cDigits = (0, CurrencyDigits_1.CurrencyDigits)(currency, {
              currencyDigitsData: currencyDigitsData
            });
            mnfdDefault = cDigits;
            mxfdDefault = cDigits;
          } else {
            mnfdDefault = 0;
            mxfdDefault = style === 'percent' ? 0 : 3;
          }

          var notation = (0, GetOption_1.GetOption)(options, 'notation', 'string', ['standard', 'scientific', 'engineering', 'compact'], 'standard');
          internalSlots.notation = notation;
          (0, SetNumberFormatDigitOptions_1.SetNumberFormatDigitOptions)(internalSlots, options, mnfdDefault, mxfdDefault, notation);
          var compactDisplay = (0, GetOption_1.GetOption)(options, 'compactDisplay', 'string', ['short', 'long'], 'short');

          if (notation === 'compact') {
            internalSlots.compactDisplay = compactDisplay;
          }

          var useGrouping = (0, GetOption_1.GetOption)(options, 'useGrouping', 'boolean', undefined, true);
          internalSlots.useGrouping = useGrouping;
          var signDisplay = (0, GetOption_1.GetOption)(options, 'signDisplay', 'string', ['auto', 'never', 'always', 'exceptZero'], 'auto');
          internalSlots.signDisplay = signDisplay;
          return nf;
        }

        exports.InitializeNumberFormat = InitializeNumberFormat; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.InitializeNumberFormat;
      }, () => ({
        '../CanonicalizeLocaleList': __cjsMetaURL$1,
        '../GetOption': __cjsMetaURL$2,
        '@formatjs/intl-localematcher': __cjsMetaURL$3,
        './SetNumberFormatUnitOptions': __cjsMetaURL$4,
        './CurrencyDigits': __cjsMetaURL$5,
        './SetNumberFormatDigitOptions': __cjsMetaURL$6,
        '../utils': __cjsMetaURL$7,
        '../CoerceOptionsToObject': __cjsMetaURL$8
      }));
    }
  };
});

System.register("chunks:///_virtual/InitializeNumberFormat5.js", ['./cjs-loader.mjs', './CanonicalizeLocaleList6.js', './GetOption5.js', './index15.js', './SetNumberFormatUnitOptions5.js', './CurrencyDigits5.js', './SetNumberFormatDigitOptions5.js', './utils6.js', './CoerceOptionsToObject5.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3, __cjsMetaURL$4, __cjsMetaURL$5, __cjsMetaURL$6, __cjsMetaURL$7, __cjsMetaURL$8;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$4 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$5 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$6 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$7 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$8 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.InitializeNumberFormat = void 0;

        var CanonicalizeLocaleList_1 = require("../CanonicalizeLocaleList");

        var GetOption_1 = require("../GetOption");

        var intl_localematcher_1 = require("@formatjs/intl-localematcher");

        var SetNumberFormatUnitOptions_1 = require("./SetNumberFormatUnitOptions");

        var CurrencyDigits_1 = require("./CurrencyDigits");

        var SetNumberFormatDigitOptions_1 = require("./SetNumberFormatDigitOptions");

        var utils_1 = require("../utils");

        var CoerceOptionsToObject_1 = require("../CoerceOptionsToObject");
        /**
         * https://tc39.es/ecma402/#sec-initializenumberformat
         */


        function InitializeNumberFormat(nf, locales, opts, _a) {
          var getInternalSlots = _a.getInternalSlots,
              localeData = _a.localeData,
              availableLocales = _a.availableLocales,
              numberingSystemNames = _a.numberingSystemNames,
              getDefaultLocale = _a.getDefaultLocale,
              currencyDigitsData = _a.currencyDigitsData; // @ts-ignore

          var requestedLocales = (0, CanonicalizeLocaleList_1.CanonicalizeLocaleList)(locales);
          var options = (0, CoerceOptionsToObject_1.CoerceOptionsToObject)(opts);
          var opt = Object.create(null);
          var matcher = (0, GetOption_1.GetOption)(options, 'localeMatcher', 'string', ['lookup', 'best fit'], 'best fit');
          opt.localeMatcher = matcher;
          var numberingSystem = (0, GetOption_1.GetOption)(options, 'numberingSystem', 'string', undefined, undefined);

          if (numberingSystem !== undefined && numberingSystemNames.indexOf(numberingSystem) < 0) {
            // 8.a. If numberingSystem does not match the Unicode Locale Identifier type nonterminal,
            // throw a RangeError exception.
            throw RangeError("Invalid numberingSystems: ".concat(numberingSystem));
          }

          opt.nu = numberingSystem;
          var r = (0, intl_localematcher_1.ResolveLocale)(availableLocales, requestedLocales, opt, // [[RelevantExtensionKeys]] slot, which is a constant
          ['nu'], localeData, getDefaultLocale);
          var dataLocaleData = localeData[r.dataLocale];
          (0, utils_1.invariant)(!!dataLocaleData, "Missing locale data for ".concat(r.dataLocale));
          var internalSlots = getInternalSlots(nf);
          internalSlots.locale = r.locale;
          internalSlots.dataLocale = r.dataLocale;
          internalSlots.numberingSystem = r.nu;
          internalSlots.dataLocaleData = dataLocaleData;
          (0, SetNumberFormatUnitOptions_1.SetNumberFormatUnitOptions)(nf, options, {
            getInternalSlots: getInternalSlots
          });
          var style = internalSlots.style;
          var mnfdDefault;
          var mxfdDefault;

          if (style === 'currency') {
            var currency = internalSlots.currency;
            var cDigits = (0, CurrencyDigits_1.CurrencyDigits)(currency, {
              currencyDigitsData: currencyDigitsData
            });
            mnfdDefault = cDigits;
            mxfdDefault = cDigits;
          } else {
            mnfdDefault = 0;
            mxfdDefault = style === 'percent' ? 0 : 3;
          }

          var notation = (0, GetOption_1.GetOption)(options, 'notation', 'string', ['standard', 'scientific', 'engineering', 'compact'], 'standard');
          internalSlots.notation = notation;
          (0, SetNumberFormatDigitOptions_1.SetNumberFormatDigitOptions)(internalSlots, options, mnfdDefault, mxfdDefault, notation);
          var compactDisplay = (0, GetOption_1.GetOption)(options, 'compactDisplay', 'string', ['short', 'long'], 'short');

          if (notation === 'compact') {
            internalSlots.compactDisplay = compactDisplay;
          }

          var useGrouping = (0, GetOption_1.GetOption)(options, 'useGrouping', 'boolean', undefined, true);
          internalSlots.useGrouping = useGrouping;
          var signDisplay = (0, GetOption_1.GetOption)(options, 'signDisplay', 'string', ['auto', 'never', 'always', 'exceptZero'], 'auto');
          internalSlots.signDisplay = signDisplay;
          return nf;
        }

        exports.InitializeNumberFormat = InitializeNumberFormat; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.InitializeNumberFormat;
      }, () => ({
        '../CanonicalizeLocaleList': __cjsMetaURL$1,
        '../GetOption': __cjsMetaURL$2,
        '@formatjs/intl-localematcher': __cjsMetaURL$3,
        './SetNumberFormatUnitOptions': __cjsMetaURL$4,
        './CurrencyDigits': __cjsMetaURL$5,
        './SetNumberFormatDigitOptions': __cjsMetaURL$6,
        '../utils': __cjsMetaURL$7,
        '../CoerceOptionsToObject': __cjsMetaURL$8
      }));
    }
  };
});

System.register("chunks:///_virtual/InitializeNumberFormat6.js", ['./cjs-loader.mjs', './CanonicalizeLocaleList8.js', './GetOption6.js', './index21.js', './SetNumberFormatUnitOptions6.js', './CurrencyDigits6.js', './SetNumberFormatDigitOptions6.js', './utils8.js', './CoerceOptionsToObject6.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3, __cjsMetaURL$4, __cjsMetaURL$5, __cjsMetaURL$6, __cjsMetaURL$7, __cjsMetaURL$8;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$4 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$5 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$6 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$7 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$8 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.InitializeNumberFormat = void 0;

        var CanonicalizeLocaleList_1 = require("../CanonicalizeLocaleList");

        var GetOption_1 = require("../GetOption");

        var intl_localematcher_1 = require("@formatjs/intl-localematcher");

        var SetNumberFormatUnitOptions_1 = require("./SetNumberFormatUnitOptions");

        var CurrencyDigits_1 = require("./CurrencyDigits");

        var SetNumberFormatDigitOptions_1 = require("./SetNumberFormatDigitOptions");

        var utils_1 = require("../utils");

        var CoerceOptionsToObject_1 = require("../CoerceOptionsToObject");
        /**
         * https://tc39.es/ecma402/#sec-initializenumberformat
         */


        function InitializeNumberFormat(nf, locales, opts, _a) {
          var getInternalSlots = _a.getInternalSlots,
              localeData = _a.localeData,
              availableLocales = _a.availableLocales,
              numberingSystemNames = _a.numberingSystemNames,
              getDefaultLocale = _a.getDefaultLocale,
              currencyDigitsData = _a.currencyDigitsData; // @ts-ignore

          var requestedLocales = (0, CanonicalizeLocaleList_1.CanonicalizeLocaleList)(locales);
          var options = (0, CoerceOptionsToObject_1.CoerceOptionsToObject)(opts);
          var opt = Object.create(null);
          var matcher = (0, GetOption_1.GetOption)(options, 'localeMatcher', 'string', ['lookup', 'best fit'], 'best fit');
          opt.localeMatcher = matcher;
          var numberingSystem = (0, GetOption_1.GetOption)(options, 'numberingSystem', 'string', undefined, undefined);

          if (numberingSystem !== undefined && numberingSystemNames.indexOf(numberingSystem) < 0) {
            // 8.a. If numberingSystem does not match the Unicode Locale Identifier type nonterminal,
            // throw a RangeError exception.
            throw RangeError("Invalid numberingSystems: ".concat(numberingSystem));
          }

          opt.nu = numberingSystem;
          var r = (0, intl_localematcher_1.ResolveLocale)(availableLocales, requestedLocales, opt, // [[RelevantExtensionKeys]] slot, which is a constant
          ['nu'], localeData, getDefaultLocale);
          var dataLocaleData = localeData[r.dataLocale];
          (0, utils_1.invariant)(!!dataLocaleData, "Missing locale data for ".concat(r.dataLocale));
          var internalSlots = getInternalSlots(nf);
          internalSlots.locale = r.locale;
          internalSlots.dataLocale = r.dataLocale;
          internalSlots.numberingSystem = r.nu;
          internalSlots.dataLocaleData = dataLocaleData;
          (0, SetNumberFormatUnitOptions_1.SetNumberFormatUnitOptions)(nf, options, {
            getInternalSlots: getInternalSlots
          });
          var style = internalSlots.style;
          var mnfdDefault;
          var mxfdDefault;

          if (style === 'currency') {
            var currency = internalSlots.currency;
            var cDigits = (0, CurrencyDigits_1.CurrencyDigits)(currency, {
              currencyDigitsData: currencyDigitsData
            });
            mnfdDefault = cDigits;
            mxfdDefault = cDigits;
          } else {
            mnfdDefault = 0;
            mxfdDefault = style === 'percent' ? 0 : 3;
          }

          var notation = (0, GetOption_1.GetOption)(options, 'notation', 'string', ['standard', 'scientific', 'engineering', 'compact'], 'standard');
          internalSlots.notation = notation;
          (0, SetNumberFormatDigitOptions_1.SetNumberFormatDigitOptions)(internalSlots, options, mnfdDefault, mxfdDefault, notation);
          var compactDisplay = (0, GetOption_1.GetOption)(options, 'compactDisplay', 'string', ['short', 'long'], 'short');

          if (notation === 'compact') {
            internalSlots.compactDisplay = compactDisplay;
          }

          var useGrouping = (0, GetOption_1.GetOption)(options, 'useGrouping', 'boolean', undefined, true);
          internalSlots.useGrouping = useGrouping;
          var signDisplay = (0, GetOption_1.GetOption)(options, 'signDisplay', 'string', ['auto', 'never', 'always', 'exceptZero'], 'auto');
          internalSlots.signDisplay = signDisplay;
          return nf;
        }

        exports.InitializeNumberFormat = InitializeNumberFormat; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.InitializeNumberFormat;
      }, () => ({
        '../CanonicalizeLocaleList': __cjsMetaURL$1,
        '../GetOption': __cjsMetaURL$2,
        '@formatjs/intl-localematcher': __cjsMetaURL$3,
        './SetNumberFormatUnitOptions': __cjsMetaURL$4,
        './CurrencyDigits': __cjsMetaURL$5,
        './SetNumberFormatDigitOptions': __cjsMetaURL$6,
        '../utils': __cjsMetaURL$7,
        '../CoerceOptionsToObject': __cjsMetaURL$8
      }));
    }
  };
});

System.register("chunks:///_virtual/InitializeNumberFormat7.js", ['./cjs-loader.mjs', './CanonicalizeLocaleList9.js', './GetOption7.js', './index22.js', './SetNumberFormatUnitOptions7.js', './CurrencyDigits7.js', './SetNumberFormatDigitOptions7.js', './utils9.js', './CoerceOptionsToObject7.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3, __cjsMetaURL$4, __cjsMetaURL$5, __cjsMetaURL$6, __cjsMetaURL$7, __cjsMetaURL$8;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$4 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$5 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$6 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$7 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$8 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.InitializeNumberFormat = void 0;

        var CanonicalizeLocaleList_1 = require("../CanonicalizeLocaleList");

        var GetOption_1 = require("../GetOption");

        var intl_localematcher_1 = require("@formatjs/intl-localematcher");

        var SetNumberFormatUnitOptions_1 = require("./SetNumberFormatUnitOptions");

        var CurrencyDigits_1 = require("./CurrencyDigits");

        var SetNumberFormatDigitOptions_1 = require("./SetNumberFormatDigitOptions");

        var utils_1 = require("../utils");

        var CoerceOptionsToObject_1 = require("../CoerceOptionsToObject");
        /**
         * https://tc39.es/ecma402/#sec-initializenumberformat
         */


        function InitializeNumberFormat(nf, locales, opts, _a) {
          var getInternalSlots = _a.getInternalSlots,
              localeData = _a.localeData,
              availableLocales = _a.availableLocales,
              numberingSystemNames = _a.numberingSystemNames,
              getDefaultLocale = _a.getDefaultLocale,
              currencyDigitsData = _a.currencyDigitsData; // @ts-ignore

          var requestedLocales = (0, CanonicalizeLocaleList_1.CanonicalizeLocaleList)(locales);
          var options = (0, CoerceOptionsToObject_1.CoerceOptionsToObject)(opts);
          var opt = Object.create(null);
          var matcher = (0, GetOption_1.GetOption)(options, 'localeMatcher', 'string', ['lookup', 'best fit'], 'best fit');
          opt.localeMatcher = matcher;
          var numberingSystem = (0, GetOption_1.GetOption)(options, 'numberingSystem', 'string', undefined, undefined);

          if (numberingSystem !== undefined && numberingSystemNames.indexOf(numberingSystem) < 0) {
            // 8.a. If numberingSystem does not match the Unicode Locale Identifier type nonterminal,
            // throw a RangeError exception.
            throw RangeError("Invalid numberingSystems: ".concat(numberingSystem));
          }

          opt.nu = numberingSystem;
          var r = (0, intl_localematcher_1.ResolveLocale)(availableLocales, requestedLocales, opt, // [[RelevantExtensionKeys]] slot, which is a constant
          ['nu'], localeData, getDefaultLocale);
          var dataLocaleData = localeData[r.dataLocale];
          (0, utils_1.invariant)(!!dataLocaleData, "Missing locale data for ".concat(r.dataLocale));
          var internalSlots = getInternalSlots(nf);
          internalSlots.locale = r.locale;
          internalSlots.dataLocale = r.dataLocale;
          internalSlots.numberingSystem = r.nu;
          internalSlots.dataLocaleData = dataLocaleData;
          (0, SetNumberFormatUnitOptions_1.SetNumberFormatUnitOptions)(nf, options, {
            getInternalSlots: getInternalSlots
          });
          var style = internalSlots.style;
          var mnfdDefault;
          var mxfdDefault;

          if (style === 'currency') {
            var currency = internalSlots.currency;
            var cDigits = (0, CurrencyDigits_1.CurrencyDigits)(currency, {
              currencyDigitsData: currencyDigitsData
            });
            mnfdDefault = cDigits;
            mxfdDefault = cDigits;
          } else {
            mnfdDefault = 0;
            mxfdDefault = style === 'percent' ? 0 : 3;
          }

          var notation = (0, GetOption_1.GetOption)(options, 'notation', 'string', ['standard', 'scientific', 'engineering', 'compact'], 'standard');
          internalSlots.notation = notation;
          (0, SetNumberFormatDigitOptions_1.SetNumberFormatDigitOptions)(internalSlots, options, mnfdDefault, mxfdDefault, notation);
          var compactDisplay = (0, GetOption_1.GetOption)(options, 'compactDisplay', 'string', ['short', 'long'], 'short');

          if (notation === 'compact') {
            internalSlots.compactDisplay = compactDisplay;
          }

          var useGrouping = (0, GetOption_1.GetOption)(options, 'useGrouping', 'boolean', undefined, true);
          internalSlots.useGrouping = useGrouping;
          var signDisplay = (0, GetOption_1.GetOption)(options, 'signDisplay', 'string', ['auto', 'never', 'always', 'exceptZero'], 'auto');
          internalSlots.signDisplay = signDisplay;
          return nf;
        }

        exports.InitializeNumberFormat = InitializeNumberFormat; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.InitializeNumberFormat;
      }, () => ({
        '../CanonicalizeLocaleList': __cjsMetaURL$1,
        '../GetOption': __cjsMetaURL$2,
        '@formatjs/intl-localematcher': __cjsMetaURL$3,
        './SetNumberFormatUnitOptions': __cjsMetaURL$4,
        './CurrencyDigits': __cjsMetaURL$5,
        './SetNumberFormatDigitOptions': __cjsMetaURL$6,
        '../utils': __cjsMetaURL$7,
        '../CoerceOptionsToObject': __cjsMetaURL$8
      }));
    }
  };
});

System.register("chunks:///_virtual/InitializePluralRules.js", ['./cjs-loader.mjs', './index12.js', './index18.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.InitializePluralRules = void 0;

        var ecma402_abstract_1 = require("@formatjs/ecma402-abstract");

        var intl_localematcher_1 = require("@formatjs/intl-localematcher");

        function InitializePluralRules(pl, locales, options, _a) {
          var availableLocales = _a.availableLocales,
              relevantExtensionKeys = _a.relevantExtensionKeys,
              localeData = _a.localeData,
              getDefaultLocale = _a.getDefaultLocale,
              getInternalSlots = _a.getInternalSlots;
          var requestedLocales = (0, ecma402_abstract_1.CanonicalizeLocaleList)(locales);
          var opt = Object.create(null);
          var opts = (0, ecma402_abstract_1.CoerceOptionsToObject)(options);
          var internalSlots = getInternalSlots(pl);
          internalSlots.initializedPluralRules = true;
          var matcher = (0, ecma402_abstract_1.GetOption)(opts, 'localeMatcher', 'string', ['best fit', 'lookup'], 'best fit');
          opt.localeMatcher = matcher;
          internalSlots.type = (0, ecma402_abstract_1.GetOption)(opts, 'type', 'string', ['cardinal', 'ordinal'], 'cardinal');
          (0, ecma402_abstract_1.SetNumberFormatDigitOptions)(internalSlots, opts, 0, 3, 'standard');
          var r = (0, intl_localematcher_1.ResolveLocale)(availableLocales, requestedLocales, opt, relevantExtensionKeys, localeData, getDefaultLocale);
          internalSlots.locale = r.locale;
          return pl;
        }

        exports.InitializePluralRules = InitializePluralRules; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.InitializePluralRules;
      }, () => ({
        '@formatjs/ecma402-abstract': __cjsMetaURL$1,
        '@formatjs/intl-localematcher': __cjsMetaURL$2
      }));
    }
  };
});

System.register("chunks:///_virtual/InitializeRelativeTimeFormat.js", ['./cjs-loader.mjs', './index13.js', './index19.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.InitializeRelativeTimeFormat = void 0;

        var ecma402_abstract_1 = require("@formatjs/ecma402-abstract");

        var intl_localematcher_1 = require("@formatjs/intl-localematcher");

        var NUMBERING_SYSTEM_REGEX = /^[a-z0-9]{3,8}(-[a-z0-9]{3,8})*$/i;

        function InitializeRelativeTimeFormat(rtf, locales, options, _a) {
          var getInternalSlots = _a.getInternalSlots,
              availableLocales = _a.availableLocales,
              relevantExtensionKeys = _a.relevantExtensionKeys,
              localeData = _a.localeData,
              getDefaultLocale = _a.getDefaultLocale;
          var internalSlots = getInternalSlots(rtf);
          internalSlots.initializedRelativeTimeFormat = true;
          var requestedLocales = (0, ecma402_abstract_1.CanonicalizeLocaleList)(locales);
          var opt = Object.create(null);
          var opts = (0, ecma402_abstract_1.CoerceOptionsToObject)(options);
          var matcher = (0, ecma402_abstract_1.GetOption)(opts, 'localeMatcher', 'string', ['best fit', 'lookup'], 'best fit');
          opt.localeMatcher = matcher;
          var numberingSystem = (0, ecma402_abstract_1.GetOption)(opts, // @ts-expect-error TS option is wack
          'numberingSystem', 'string', undefined, undefined);

          if (numberingSystem !== undefined) {
            if (!NUMBERING_SYSTEM_REGEX.test(numberingSystem)) {
              throw new RangeError("Invalid numbering system ".concat(numberingSystem));
            }
          }

          opt.nu = numberingSystem;
          var r = (0, intl_localematcher_1.ResolveLocale)(availableLocales, requestedLocales, opt, relevantExtensionKeys, localeData, getDefaultLocale);
          var locale = r.locale,
              nu = r.nu;
          internalSlots.locale = locale;
          internalSlots.style = (0, ecma402_abstract_1.GetOption)(opts, 'style', 'string', ['long', 'narrow', 'short'], 'long');
          internalSlots.numeric = (0, ecma402_abstract_1.GetOption)(opts, 'numeric', 'string', ['always', 'auto'], 'always');
          var fields = localeData[r.dataLocale];
          (0, ecma402_abstract_1.invariant)(!!fields, "Missing locale data for ".concat(r.dataLocale));
          internalSlots.fields = fields;
          internalSlots.numberFormat = new Intl.NumberFormat(locales);
          internalSlots.pluralRules = new Intl.PluralRules(locales);
          internalSlots.numberingSystem = nu;
          return rtf;
        }

        exports.InitializeRelativeTimeFormat = InitializeRelativeTimeFormat; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.InitializeRelativeTimeFormat;
      }, () => ({
        '@formatjs/ecma402-abstract': __cjsMetaURL$1,
        '@formatjs/intl-localematcher': __cjsMetaURL$2
      }));
    }
  };
});

System.register("chunks:///_virtual/IsSanctionedSimpleUnitIdentifier.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.IsSanctionedSimpleUnitIdentifier = exports.SIMPLE_UNITS = exports.removeUnitNamespace = exports.SANCTIONED_UNITS = void 0;
        /**
         * https://tc39.es/ecma402/#table-sanctioned-simple-unit-identifiers
         */

        exports.SANCTIONED_UNITS = ['angle-degree', 'area-acre', 'area-hectare', 'concentr-percent', 'digital-bit', 'digital-byte', 'digital-gigabit', 'digital-gigabyte', 'digital-kilobit', 'digital-kilobyte', 'digital-megabit', 'digital-megabyte', 'digital-petabyte', 'digital-terabit', 'digital-terabyte', 'duration-day', 'duration-hour', 'duration-millisecond', 'duration-minute', 'duration-month', 'duration-second', 'duration-week', 'duration-year', 'length-centimeter', 'length-foot', 'length-inch', 'length-kilometer', 'length-meter', 'length-mile-scandinavian', 'length-mile', 'length-millimeter', 'length-yard', 'mass-gram', 'mass-kilogram', 'mass-ounce', 'mass-pound', 'mass-stone', 'temperature-celsius', 'temperature-fahrenheit', 'volume-fluid-ounce', 'volume-gallon', 'volume-liter', 'volume-milliliter']; // In CLDR, the unit name always follows the form `namespace-unit` pattern.
        // For example: `digital-bit` instead of `bit`. This function removes the namespace prefix.

        function removeUnitNamespace(unit) {
          return unit.slice(unit.indexOf('-') + 1);
        }

        exports.removeUnitNamespace = removeUnitNamespace;
        /**
         * https://tc39.es/ecma402/#table-sanctioned-simple-unit-identifiers
         */

        exports.SIMPLE_UNITS = exports.SANCTIONED_UNITS.map(removeUnitNamespace);
        /**
         * https://tc39.es/ecma402/#sec-issanctionedsimpleunitidentifier
         */

        function IsSanctionedSimpleUnitIdentifier(unitIdentifier) {
          return exports.SIMPLE_UNITS.indexOf(unitIdentifier) > -1;
        }

        exports.IsSanctionedSimpleUnitIdentifier = IsSanctionedSimpleUnitIdentifier; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.IsSanctionedSimpleUnitIdentifier;
        module.exports.SIMPLE_UNITS;
        module.exports.removeUnitNamespace;
        module.exports.SANCTIONED_UNITS;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/IsSanctionedSimpleUnitIdentifier2.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.IsSanctionedSimpleUnitIdentifier = exports.SIMPLE_UNITS = exports.removeUnitNamespace = exports.SANCTIONED_UNITS = void 0;
        /**
         * https://tc39.es/ecma402/#table-sanctioned-simple-unit-identifiers
         */

        exports.SANCTIONED_UNITS = ['angle-degree', 'area-acre', 'area-hectare', 'concentr-percent', 'digital-bit', 'digital-byte', 'digital-gigabit', 'digital-gigabyte', 'digital-kilobit', 'digital-kilobyte', 'digital-megabit', 'digital-megabyte', 'digital-petabyte', 'digital-terabit', 'digital-terabyte', 'duration-day', 'duration-hour', 'duration-millisecond', 'duration-minute', 'duration-month', 'duration-second', 'duration-week', 'duration-year', 'length-centimeter', 'length-foot', 'length-inch', 'length-kilometer', 'length-meter', 'length-mile-scandinavian', 'length-mile', 'length-millimeter', 'length-yard', 'mass-gram', 'mass-kilogram', 'mass-ounce', 'mass-pound', 'mass-stone', 'temperature-celsius', 'temperature-fahrenheit', 'volume-fluid-ounce', 'volume-gallon', 'volume-liter', 'volume-milliliter']; // In CLDR, the unit name always follows the form `namespace-unit` pattern.
        // For example: `digital-bit` instead of `bit`. This function removes the namespace prefix.

        function removeUnitNamespace(unit) {
          return unit.slice(unit.indexOf('-') + 1);
        }

        exports.removeUnitNamespace = removeUnitNamespace;
        /**
         * https://tc39.es/ecma402/#table-sanctioned-simple-unit-identifiers
         */

        exports.SIMPLE_UNITS = exports.SANCTIONED_UNITS.map(removeUnitNamespace);
        /**
         * https://tc39.es/ecma402/#sec-issanctionedsimpleunitidentifier
         */

        function IsSanctionedSimpleUnitIdentifier(unitIdentifier) {
          return exports.SIMPLE_UNITS.indexOf(unitIdentifier) > -1;
        }

        exports.IsSanctionedSimpleUnitIdentifier = IsSanctionedSimpleUnitIdentifier; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.IsSanctionedSimpleUnitIdentifier;
        module.exports.SIMPLE_UNITS;
        module.exports.removeUnitNamespace;
        module.exports.SANCTIONED_UNITS;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/IsSanctionedSimpleUnitIdentifier3.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.IsSanctionedSimpleUnitIdentifier = exports.SIMPLE_UNITS = exports.removeUnitNamespace = exports.SANCTIONED_UNITS = void 0;
        /**
         * https://tc39.es/ecma402/#table-sanctioned-simple-unit-identifiers
         */

        exports.SANCTIONED_UNITS = ['angle-degree', 'area-acre', 'area-hectare', 'concentr-percent', 'digital-bit', 'digital-byte', 'digital-gigabit', 'digital-gigabyte', 'digital-kilobit', 'digital-kilobyte', 'digital-megabit', 'digital-megabyte', 'digital-petabyte', 'digital-terabit', 'digital-terabyte', 'duration-day', 'duration-hour', 'duration-millisecond', 'duration-minute', 'duration-month', 'duration-second', 'duration-week', 'duration-year', 'length-centimeter', 'length-foot', 'length-inch', 'length-kilometer', 'length-meter', 'length-mile-scandinavian', 'length-mile', 'length-millimeter', 'length-yard', 'mass-gram', 'mass-kilogram', 'mass-ounce', 'mass-pound', 'mass-stone', 'temperature-celsius', 'temperature-fahrenheit', 'volume-fluid-ounce', 'volume-gallon', 'volume-liter', 'volume-milliliter']; // In CLDR, the unit name always follows the form `namespace-unit` pattern.
        // For example: `digital-bit` instead of `bit`. This function removes the namespace prefix.

        function removeUnitNamespace(unit) {
          return unit.slice(unit.indexOf('-') + 1);
        }

        exports.removeUnitNamespace = removeUnitNamespace;
        /**
         * https://tc39.es/ecma402/#table-sanctioned-simple-unit-identifiers
         */

        exports.SIMPLE_UNITS = exports.SANCTIONED_UNITS.map(removeUnitNamespace);
        /**
         * https://tc39.es/ecma402/#sec-issanctionedsimpleunitidentifier
         */

        function IsSanctionedSimpleUnitIdentifier(unitIdentifier) {
          return exports.SIMPLE_UNITS.indexOf(unitIdentifier) > -1;
        }

        exports.IsSanctionedSimpleUnitIdentifier = IsSanctionedSimpleUnitIdentifier; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.IsSanctionedSimpleUnitIdentifier;
        module.exports.SIMPLE_UNITS;
        module.exports.removeUnitNamespace;
        module.exports.SANCTIONED_UNITS;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/IsSanctionedSimpleUnitIdentifier4.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.IsSanctionedSimpleUnitIdentifier = exports.SIMPLE_UNITS = exports.removeUnitNamespace = exports.SANCTIONED_UNITS = void 0;
        /**
         * https://tc39.es/ecma402/#table-sanctioned-simple-unit-identifiers
         */

        exports.SANCTIONED_UNITS = ['angle-degree', 'area-acre', 'area-hectare', 'concentr-percent', 'digital-bit', 'digital-byte', 'digital-gigabit', 'digital-gigabyte', 'digital-kilobit', 'digital-kilobyte', 'digital-megabit', 'digital-megabyte', 'digital-petabyte', 'digital-terabit', 'digital-terabyte', 'duration-day', 'duration-hour', 'duration-millisecond', 'duration-minute', 'duration-month', 'duration-second', 'duration-week', 'duration-year', 'length-centimeter', 'length-foot', 'length-inch', 'length-kilometer', 'length-meter', 'length-mile-scandinavian', 'length-mile', 'length-millimeter', 'length-yard', 'mass-gram', 'mass-kilogram', 'mass-ounce', 'mass-pound', 'mass-stone', 'temperature-celsius', 'temperature-fahrenheit', 'volume-fluid-ounce', 'volume-gallon', 'volume-liter', 'volume-milliliter']; // In CLDR, the unit name always follows the form `namespace-unit` pattern.
        // For example: `digital-bit` instead of `bit`. This function removes the namespace prefix.

        function removeUnitNamespace(unit) {
          return unit.slice(unit.indexOf('-') + 1);
        }

        exports.removeUnitNamespace = removeUnitNamespace;
        /**
         * https://tc39.es/ecma402/#table-sanctioned-simple-unit-identifiers
         */

        exports.SIMPLE_UNITS = exports.SANCTIONED_UNITS.map(removeUnitNamespace);
        /**
         * https://tc39.es/ecma402/#sec-issanctionedsimpleunitidentifier
         */

        function IsSanctionedSimpleUnitIdentifier(unitIdentifier) {
          return exports.SIMPLE_UNITS.indexOf(unitIdentifier) > -1;
        }

        exports.IsSanctionedSimpleUnitIdentifier = IsSanctionedSimpleUnitIdentifier; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.IsSanctionedSimpleUnitIdentifier;
        module.exports.SIMPLE_UNITS;
        module.exports.removeUnitNamespace;
        module.exports.SANCTIONED_UNITS;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/IsSanctionedSimpleUnitIdentifier5.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.IsSanctionedSimpleUnitIdentifier = exports.SIMPLE_UNITS = exports.removeUnitNamespace = exports.SANCTIONED_UNITS = void 0;
        /**
         * https://tc39.es/ecma402/#table-sanctioned-simple-unit-identifiers
         */

        exports.SANCTIONED_UNITS = ['angle-degree', 'area-acre', 'area-hectare', 'concentr-percent', 'digital-bit', 'digital-byte', 'digital-gigabit', 'digital-gigabyte', 'digital-kilobit', 'digital-kilobyte', 'digital-megabit', 'digital-megabyte', 'digital-petabyte', 'digital-terabit', 'digital-terabyte', 'duration-day', 'duration-hour', 'duration-millisecond', 'duration-minute', 'duration-month', 'duration-second', 'duration-week', 'duration-year', 'length-centimeter', 'length-foot', 'length-inch', 'length-kilometer', 'length-meter', 'length-mile-scandinavian', 'length-mile', 'length-millimeter', 'length-yard', 'mass-gram', 'mass-kilogram', 'mass-ounce', 'mass-pound', 'mass-stone', 'temperature-celsius', 'temperature-fahrenheit', 'volume-fluid-ounce', 'volume-gallon', 'volume-liter', 'volume-milliliter']; // In CLDR, the unit name always follows the form `namespace-unit` pattern.
        // For example: `digital-bit` instead of `bit`. This function removes the namespace prefix.

        function removeUnitNamespace(unit) {
          return unit.slice(unit.indexOf('-') + 1);
        }

        exports.removeUnitNamespace = removeUnitNamespace;
        /**
         * https://tc39.es/ecma402/#table-sanctioned-simple-unit-identifiers
         */

        exports.SIMPLE_UNITS = exports.SANCTIONED_UNITS.map(removeUnitNamespace);
        /**
         * https://tc39.es/ecma402/#sec-issanctionedsimpleunitidentifier
         */

        function IsSanctionedSimpleUnitIdentifier(unitIdentifier) {
          return exports.SIMPLE_UNITS.indexOf(unitIdentifier) > -1;
        }

        exports.IsSanctionedSimpleUnitIdentifier = IsSanctionedSimpleUnitIdentifier; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.IsSanctionedSimpleUnitIdentifier;
        module.exports.SIMPLE_UNITS;
        module.exports.removeUnitNamespace;
        module.exports.SANCTIONED_UNITS;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/IsSanctionedSimpleUnitIdentifier6.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.IsSanctionedSimpleUnitIdentifier = exports.SIMPLE_UNITS = exports.removeUnitNamespace = exports.SANCTIONED_UNITS = void 0;
        /**
         * https://tc39.es/ecma402/#table-sanctioned-simple-unit-identifiers
         */

        exports.SANCTIONED_UNITS = ['angle-degree', 'area-acre', 'area-hectare', 'concentr-percent', 'digital-bit', 'digital-byte', 'digital-gigabit', 'digital-gigabyte', 'digital-kilobit', 'digital-kilobyte', 'digital-megabit', 'digital-megabyte', 'digital-petabyte', 'digital-terabit', 'digital-terabyte', 'duration-day', 'duration-hour', 'duration-millisecond', 'duration-minute', 'duration-month', 'duration-second', 'duration-week', 'duration-year', 'length-centimeter', 'length-foot', 'length-inch', 'length-kilometer', 'length-meter', 'length-mile-scandinavian', 'length-mile', 'length-millimeter', 'length-yard', 'mass-gram', 'mass-kilogram', 'mass-ounce', 'mass-pound', 'mass-stone', 'temperature-celsius', 'temperature-fahrenheit', 'volume-fluid-ounce', 'volume-gallon', 'volume-liter', 'volume-milliliter']; // In CLDR, the unit name always follows the form `namespace-unit` pattern.
        // For example: `digital-bit` instead of `bit`. This function removes the namespace prefix.

        function removeUnitNamespace(unit) {
          return unit.slice(unit.indexOf('-') + 1);
        }

        exports.removeUnitNamespace = removeUnitNamespace;
        /**
         * https://tc39.es/ecma402/#table-sanctioned-simple-unit-identifiers
         */

        exports.SIMPLE_UNITS = exports.SANCTIONED_UNITS.map(removeUnitNamespace);
        /**
         * https://tc39.es/ecma402/#sec-issanctionedsimpleunitidentifier
         */

        function IsSanctionedSimpleUnitIdentifier(unitIdentifier) {
          return exports.SIMPLE_UNITS.indexOf(unitIdentifier) > -1;
        }

        exports.IsSanctionedSimpleUnitIdentifier = IsSanctionedSimpleUnitIdentifier; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.IsSanctionedSimpleUnitIdentifier;
        module.exports.SIMPLE_UNITS;
        module.exports.removeUnitNamespace;
        module.exports.SANCTIONED_UNITS;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/IsSanctionedSimpleUnitIdentifier7.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.IsSanctionedSimpleUnitIdentifier = exports.SIMPLE_UNITS = exports.removeUnitNamespace = exports.SANCTIONED_UNITS = void 0;
        /**
         * https://tc39.es/ecma402/#table-sanctioned-simple-unit-identifiers
         */

        exports.SANCTIONED_UNITS = ['angle-degree', 'area-acre', 'area-hectare', 'concentr-percent', 'digital-bit', 'digital-byte', 'digital-gigabit', 'digital-gigabyte', 'digital-kilobit', 'digital-kilobyte', 'digital-megabit', 'digital-megabyte', 'digital-petabyte', 'digital-terabit', 'digital-terabyte', 'duration-day', 'duration-hour', 'duration-millisecond', 'duration-minute', 'duration-month', 'duration-second', 'duration-week', 'duration-year', 'length-centimeter', 'length-foot', 'length-inch', 'length-kilometer', 'length-meter', 'length-mile-scandinavian', 'length-mile', 'length-millimeter', 'length-yard', 'mass-gram', 'mass-kilogram', 'mass-ounce', 'mass-pound', 'mass-stone', 'temperature-celsius', 'temperature-fahrenheit', 'volume-fluid-ounce', 'volume-gallon', 'volume-liter', 'volume-milliliter']; // In CLDR, the unit name always follows the form `namespace-unit` pattern.
        // For example: `digital-bit` instead of `bit`. This function removes the namespace prefix.

        function removeUnitNamespace(unit) {
          return unit.slice(unit.indexOf('-') + 1);
        }

        exports.removeUnitNamespace = removeUnitNamespace;
        /**
         * https://tc39.es/ecma402/#table-sanctioned-simple-unit-identifiers
         */

        exports.SIMPLE_UNITS = exports.SANCTIONED_UNITS.map(removeUnitNamespace);
        /**
         * https://tc39.es/ecma402/#sec-issanctionedsimpleunitidentifier
         */

        function IsSanctionedSimpleUnitIdentifier(unitIdentifier) {
          return exports.SIMPLE_UNITS.indexOf(unitIdentifier) > -1;
        }

        exports.IsSanctionedSimpleUnitIdentifier = IsSanctionedSimpleUnitIdentifier; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.IsSanctionedSimpleUnitIdentifier;
        module.exports.SIMPLE_UNITS;
        module.exports.removeUnitNamespace;
        module.exports.SANCTIONED_UNITS;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/IsValidTimeZoneName.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.IsValidTimeZoneName = void 0;
        /**
         * https://tc39.es/ecma402/#sec-isvalidtimezonename
         * @param tz
         * @param implDetails implementation details
         */

        function IsValidTimeZoneName(tz, _a) {
          var tzData = _a.tzData,
              uppercaseLinks = _a.uppercaseLinks;
          var uppercasedTz = tz.toUpperCase();
          var zoneNames = new Set();
          var linkNames = new Set();
          Object.keys(tzData).map(function (z) {
            return z.toUpperCase();
          }).forEach(function (z) {
            return zoneNames.add(z);
          });
          Object.keys(uppercaseLinks).forEach(function (linkName) {
            linkNames.add(linkName.toUpperCase());
            zoneNames.add(uppercaseLinks[linkName].toUpperCase());
          });
          return zoneNames.has(uppercasedTz) || linkNames.has(uppercasedTz);
        }

        exports.IsValidTimeZoneName = IsValidTimeZoneName; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.IsValidTimeZoneName;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/IsValidTimeZoneName2.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.IsValidTimeZoneName = void 0;
        /**
         * https://tc39.es/ecma402/#sec-isvalidtimezonename
         * @param tz
         * @param implDetails implementation details
         */

        function IsValidTimeZoneName(tz, _a) {
          var tzData = _a.tzData,
              uppercaseLinks = _a.uppercaseLinks;
          var uppercasedTz = tz.toUpperCase();
          var zoneNames = new Set();
          var linkNames = new Set();
          Object.keys(tzData).map(function (z) {
            return z.toUpperCase();
          }).forEach(function (z) {
            return zoneNames.add(z);
          });
          Object.keys(uppercaseLinks).forEach(function (linkName) {
            linkNames.add(linkName.toUpperCase());
            zoneNames.add(uppercaseLinks[linkName].toUpperCase());
          });
          return zoneNames.has(uppercasedTz) || linkNames.has(uppercasedTz);
        }

        exports.IsValidTimeZoneName = IsValidTimeZoneName; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.IsValidTimeZoneName;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/IsValidTimeZoneName3.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.IsValidTimeZoneName = void 0;
        /**
         * https://tc39.es/ecma402/#sec-isvalidtimezonename
         * @param tz
         * @param implDetails implementation details
         */

        function IsValidTimeZoneName(tz, _a) {
          var tzData = _a.tzData,
              uppercaseLinks = _a.uppercaseLinks;
          var uppercasedTz = tz.toUpperCase();
          var zoneNames = new Set();
          var linkNames = new Set();
          Object.keys(tzData).map(function (z) {
            return z.toUpperCase();
          }).forEach(function (z) {
            return zoneNames.add(z);
          });
          Object.keys(uppercaseLinks).forEach(function (linkName) {
            linkNames.add(linkName.toUpperCase());
            zoneNames.add(uppercaseLinks[linkName].toUpperCase());
          });
          return zoneNames.has(uppercasedTz) || linkNames.has(uppercasedTz);
        }

        exports.IsValidTimeZoneName = IsValidTimeZoneName; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.IsValidTimeZoneName;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/IsValidTimeZoneName4.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.IsValidTimeZoneName = void 0;
        /**
         * https://tc39.es/ecma402/#sec-isvalidtimezonename
         * @param tz
         * @param implDetails implementation details
         */

        function IsValidTimeZoneName(tz, _a) {
          var tzData = _a.tzData,
              uppercaseLinks = _a.uppercaseLinks;
          var uppercasedTz = tz.toUpperCase();
          var zoneNames = new Set();
          var linkNames = new Set();
          Object.keys(tzData).map(function (z) {
            return z.toUpperCase();
          }).forEach(function (z) {
            return zoneNames.add(z);
          });
          Object.keys(uppercaseLinks).forEach(function (linkName) {
            linkNames.add(linkName.toUpperCase());
            zoneNames.add(uppercaseLinks[linkName].toUpperCase());
          });
          return zoneNames.has(uppercasedTz) || linkNames.has(uppercasedTz);
        }

        exports.IsValidTimeZoneName = IsValidTimeZoneName; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.IsValidTimeZoneName;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/IsValidTimeZoneName5.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.IsValidTimeZoneName = void 0;
        /**
         * https://tc39.es/ecma402/#sec-isvalidtimezonename
         * @param tz
         * @param implDetails implementation details
         */

        function IsValidTimeZoneName(tz, _a) {
          var tzData = _a.tzData,
              uppercaseLinks = _a.uppercaseLinks;
          var uppercasedTz = tz.toUpperCase();
          var zoneNames = new Set();
          var linkNames = new Set();
          Object.keys(tzData).map(function (z) {
            return z.toUpperCase();
          }).forEach(function (z) {
            return zoneNames.add(z);
          });
          Object.keys(uppercaseLinks).forEach(function (linkName) {
            linkNames.add(linkName.toUpperCase());
            zoneNames.add(uppercaseLinks[linkName].toUpperCase());
          });
          return zoneNames.has(uppercasedTz) || linkNames.has(uppercasedTz);
        }

        exports.IsValidTimeZoneName = IsValidTimeZoneName; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.IsValidTimeZoneName;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/IsValidTimeZoneName6.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.IsValidTimeZoneName = void 0;
        /**
         * https://tc39.es/ecma402/#sec-isvalidtimezonename
         * @param tz
         * @param implDetails implementation details
         */

        function IsValidTimeZoneName(tz, _a) {
          var tzData = _a.tzData,
              uppercaseLinks = _a.uppercaseLinks;
          var uppercasedTz = tz.toUpperCase();
          var zoneNames = new Set();
          var linkNames = new Set();
          Object.keys(tzData).map(function (z) {
            return z.toUpperCase();
          }).forEach(function (z) {
            return zoneNames.add(z);
          });
          Object.keys(uppercaseLinks).forEach(function (linkName) {
            linkNames.add(linkName.toUpperCase());
            zoneNames.add(uppercaseLinks[linkName].toUpperCase());
          });
          return zoneNames.has(uppercasedTz) || linkNames.has(uppercasedTz);
        }

        exports.IsValidTimeZoneName = IsValidTimeZoneName; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.IsValidTimeZoneName;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/IsValidTimeZoneName7.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.IsValidTimeZoneName = void 0;
        /**
         * https://tc39.es/ecma402/#sec-isvalidtimezonename
         * @param tz
         * @param implDetails implementation details
         */

        function IsValidTimeZoneName(tz, _a) {
          var tzData = _a.tzData,
              uppercaseLinks = _a.uppercaseLinks;
          var uppercasedTz = tz.toUpperCase();
          var zoneNames = new Set();
          var linkNames = new Set();
          Object.keys(tzData).map(function (z) {
            return z.toUpperCase();
          }).forEach(function (z) {
            return zoneNames.add(z);
          });
          Object.keys(uppercaseLinks).forEach(function (linkName) {
            linkNames.add(linkName.toUpperCase());
            zoneNames.add(uppercaseLinks[linkName].toUpperCase());
          });
          return zoneNames.has(uppercasedTz) || linkNames.has(uppercasedTz);
        }

        exports.IsValidTimeZoneName = IsValidTimeZoneName; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.IsValidTimeZoneName;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/IsWellFormedCurrencyCode.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.IsWellFormedCurrencyCode = void 0;
        /**
         * This follows https://tc39.es/ecma402/#sec-case-sensitivity-and-case-mapping
         * @param str string to convert
         */

        function toUpperCase(str) {
          return str.replace(/([a-z])/g, function (_, c) {
            return c.toUpperCase();
          });
        }

        var NOT_A_Z_REGEX = /[^A-Z]/;
        /**
         * https://tc39.es/ecma402/#sec-iswellformedcurrencycode
         */

        function IsWellFormedCurrencyCode(currency) {
          currency = toUpperCase(currency);

          if (currency.length !== 3) {
            return false;
          }

          if (NOT_A_Z_REGEX.test(currency)) {
            return false;
          }

          return true;
        }

        exports.IsWellFormedCurrencyCode = IsWellFormedCurrencyCode; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.IsWellFormedCurrencyCode;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/IsWellFormedCurrencyCode2.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.IsWellFormedCurrencyCode = void 0;
        /**
         * This follows https://tc39.es/ecma402/#sec-case-sensitivity-and-case-mapping
         * @param str string to convert
         */

        function toUpperCase(str) {
          return str.replace(/([a-z])/g, function (_, c) {
            return c.toUpperCase();
          });
        }

        var NOT_A_Z_REGEX = /[^A-Z]/;
        /**
         * https://tc39.es/ecma402/#sec-iswellformedcurrencycode
         */

        function IsWellFormedCurrencyCode(currency) {
          currency = toUpperCase(currency);

          if (currency.length !== 3) {
            return false;
          }

          if (NOT_A_Z_REGEX.test(currency)) {
            return false;
          }

          return true;
        }

        exports.IsWellFormedCurrencyCode = IsWellFormedCurrencyCode; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.IsWellFormedCurrencyCode;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/IsWellFormedCurrencyCode3.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.IsWellFormedCurrencyCode = void 0;
        /**
         * This follows https://tc39.es/ecma402/#sec-case-sensitivity-and-case-mapping
         * @param str string to convert
         */

        function toUpperCase(str) {
          return str.replace(/([a-z])/g, function (_, c) {
            return c.toUpperCase();
          });
        }

        var NOT_A_Z_REGEX = /[^A-Z]/;
        /**
         * https://tc39.es/ecma402/#sec-iswellformedcurrencycode
         */

        function IsWellFormedCurrencyCode(currency) {
          currency = toUpperCase(currency);

          if (currency.length !== 3) {
            return false;
          }

          if (NOT_A_Z_REGEX.test(currency)) {
            return false;
          }

          return true;
        }

        exports.IsWellFormedCurrencyCode = IsWellFormedCurrencyCode; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.IsWellFormedCurrencyCode;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/IsWellFormedCurrencyCode4.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.IsWellFormedCurrencyCode = void 0;
        /**
         * This follows https://tc39.es/ecma402/#sec-case-sensitivity-and-case-mapping
         * @param str string to convert
         */

        function toUpperCase(str) {
          return str.replace(/([a-z])/g, function (_, c) {
            return c.toUpperCase();
          });
        }

        var NOT_A_Z_REGEX = /[^A-Z]/;
        /**
         * https://tc39.es/ecma402/#sec-iswellformedcurrencycode
         */

        function IsWellFormedCurrencyCode(currency) {
          currency = toUpperCase(currency);

          if (currency.length !== 3) {
            return false;
          }

          if (NOT_A_Z_REGEX.test(currency)) {
            return false;
          }

          return true;
        }

        exports.IsWellFormedCurrencyCode = IsWellFormedCurrencyCode; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.IsWellFormedCurrencyCode;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/IsWellFormedCurrencyCode5.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.IsWellFormedCurrencyCode = void 0;
        /**
         * This follows https://tc39.es/ecma402/#sec-case-sensitivity-and-case-mapping
         * @param str string to convert
         */

        function toUpperCase(str) {
          return str.replace(/([a-z])/g, function (_, c) {
            return c.toUpperCase();
          });
        }

        var NOT_A_Z_REGEX = /[^A-Z]/;
        /**
         * https://tc39.es/ecma402/#sec-iswellformedcurrencycode
         */

        function IsWellFormedCurrencyCode(currency) {
          currency = toUpperCase(currency);

          if (currency.length !== 3) {
            return false;
          }

          if (NOT_A_Z_REGEX.test(currency)) {
            return false;
          }

          return true;
        }

        exports.IsWellFormedCurrencyCode = IsWellFormedCurrencyCode; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.IsWellFormedCurrencyCode;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/IsWellFormedCurrencyCode6.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.IsWellFormedCurrencyCode = void 0;
        /**
         * This follows https://tc39.es/ecma402/#sec-case-sensitivity-and-case-mapping
         * @param str string to convert
         */

        function toUpperCase(str) {
          return str.replace(/([a-z])/g, function (_, c) {
            return c.toUpperCase();
          });
        }

        var NOT_A_Z_REGEX = /[^A-Z]/;
        /**
         * https://tc39.es/ecma402/#sec-iswellformedcurrencycode
         */

        function IsWellFormedCurrencyCode(currency) {
          currency = toUpperCase(currency);

          if (currency.length !== 3) {
            return false;
          }

          if (NOT_A_Z_REGEX.test(currency)) {
            return false;
          }

          return true;
        }

        exports.IsWellFormedCurrencyCode = IsWellFormedCurrencyCode; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.IsWellFormedCurrencyCode;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/IsWellFormedCurrencyCode7.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.IsWellFormedCurrencyCode = void 0;
        /**
         * This follows https://tc39.es/ecma402/#sec-case-sensitivity-and-case-mapping
         * @param str string to convert
         */

        function toUpperCase(str) {
          return str.replace(/([a-z])/g, function (_, c) {
            return c.toUpperCase();
          });
        }

        var NOT_A_Z_REGEX = /[^A-Z]/;
        /**
         * https://tc39.es/ecma402/#sec-iswellformedcurrencycode
         */

        function IsWellFormedCurrencyCode(currency) {
          currency = toUpperCase(currency);

          if (currency.length !== 3) {
            return false;
          }

          if (NOT_A_Z_REGEX.test(currency)) {
            return false;
          }

          return true;
        }

        exports.IsWellFormedCurrencyCode = IsWellFormedCurrencyCode; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.IsWellFormedCurrencyCode;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/IsWellFormedUnitIdentifier.js", ['./cjs-loader.mjs', './IsSanctionedSimpleUnitIdentifier.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.IsWellFormedUnitIdentifier = void 0;

        var IsSanctionedSimpleUnitIdentifier_1 = require("./IsSanctionedSimpleUnitIdentifier");
        /**
         * This follows https://tc39.es/ecma402/#sec-case-sensitivity-and-case-mapping
         * @param str string to convert
         */


        function toLowerCase(str) {
          return str.replace(/([A-Z])/g, function (_, c) {
            return c.toLowerCase();
          });
        }
        /**
         * https://tc39.es/ecma402/#sec-iswellformedunitidentifier
         * @param unit
         */


        function IsWellFormedUnitIdentifier(unit) {
          unit = toLowerCase(unit);

          if ((0, IsSanctionedSimpleUnitIdentifier_1.IsSanctionedSimpleUnitIdentifier)(unit)) {
            return true;
          }

          var units = unit.split('-per-');

          if (units.length !== 2) {
            return false;
          }

          var numerator = units[0],
              denominator = units[1];

          if (!(0, IsSanctionedSimpleUnitIdentifier_1.IsSanctionedSimpleUnitIdentifier)(numerator) || !(0, IsSanctionedSimpleUnitIdentifier_1.IsSanctionedSimpleUnitIdentifier)(denominator)) {
            return false;
          }

          return true;
        }

        exports.IsWellFormedUnitIdentifier = IsWellFormedUnitIdentifier; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.IsWellFormedUnitIdentifier;
      }, () => ({
        './IsSanctionedSimpleUnitIdentifier': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/IsWellFormedUnitIdentifier2.js", ['./cjs-loader.mjs', './IsSanctionedSimpleUnitIdentifier2.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.IsWellFormedUnitIdentifier = void 0;

        var IsSanctionedSimpleUnitIdentifier_1 = require("./IsSanctionedSimpleUnitIdentifier");
        /**
         * This follows https://tc39.es/ecma402/#sec-case-sensitivity-and-case-mapping
         * @param str string to convert
         */


        function toLowerCase(str) {
          return str.replace(/([A-Z])/g, function (_, c) {
            return c.toLowerCase();
          });
        }
        /**
         * https://tc39.es/ecma402/#sec-iswellformedunitidentifier
         * @param unit
         */


        function IsWellFormedUnitIdentifier(unit) {
          unit = toLowerCase(unit);

          if ((0, IsSanctionedSimpleUnitIdentifier_1.IsSanctionedSimpleUnitIdentifier)(unit)) {
            return true;
          }

          var units = unit.split('-per-');

          if (units.length !== 2) {
            return false;
          }

          var numerator = units[0],
              denominator = units[1];

          if (!(0, IsSanctionedSimpleUnitIdentifier_1.IsSanctionedSimpleUnitIdentifier)(numerator) || !(0, IsSanctionedSimpleUnitIdentifier_1.IsSanctionedSimpleUnitIdentifier)(denominator)) {
            return false;
          }

          return true;
        }

        exports.IsWellFormedUnitIdentifier = IsWellFormedUnitIdentifier; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.IsWellFormedUnitIdentifier;
      }, () => ({
        './IsSanctionedSimpleUnitIdentifier': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/IsWellFormedUnitIdentifier3.js", ['./cjs-loader.mjs', './IsSanctionedSimpleUnitIdentifier3.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.IsWellFormedUnitIdentifier = void 0;

        var IsSanctionedSimpleUnitIdentifier_1 = require("./IsSanctionedSimpleUnitIdentifier");
        /**
         * This follows https://tc39.es/ecma402/#sec-case-sensitivity-and-case-mapping
         * @param str string to convert
         */


        function toLowerCase(str) {
          return str.replace(/([A-Z])/g, function (_, c) {
            return c.toLowerCase();
          });
        }
        /**
         * https://tc39.es/ecma402/#sec-iswellformedunitidentifier
         * @param unit
         */


        function IsWellFormedUnitIdentifier(unit) {
          unit = toLowerCase(unit);

          if ((0, IsSanctionedSimpleUnitIdentifier_1.IsSanctionedSimpleUnitIdentifier)(unit)) {
            return true;
          }

          var units = unit.split('-per-');

          if (units.length !== 2) {
            return false;
          }

          var numerator = units[0],
              denominator = units[1];

          if (!(0, IsSanctionedSimpleUnitIdentifier_1.IsSanctionedSimpleUnitIdentifier)(numerator) || !(0, IsSanctionedSimpleUnitIdentifier_1.IsSanctionedSimpleUnitIdentifier)(denominator)) {
            return false;
          }

          return true;
        }

        exports.IsWellFormedUnitIdentifier = IsWellFormedUnitIdentifier; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.IsWellFormedUnitIdentifier;
      }, () => ({
        './IsSanctionedSimpleUnitIdentifier': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/IsWellFormedUnitIdentifier4.js", ['./cjs-loader.mjs', './IsSanctionedSimpleUnitIdentifier4.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.IsWellFormedUnitIdentifier = void 0;

        var IsSanctionedSimpleUnitIdentifier_1 = require("./IsSanctionedSimpleUnitIdentifier");
        /**
         * This follows https://tc39.es/ecma402/#sec-case-sensitivity-and-case-mapping
         * @param str string to convert
         */


        function toLowerCase(str) {
          return str.replace(/([A-Z])/g, function (_, c) {
            return c.toLowerCase();
          });
        }
        /**
         * https://tc39.es/ecma402/#sec-iswellformedunitidentifier
         * @param unit
         */


        function IsWellFormedUnitIdentifier(unit) {
          unit = toLowerCase(unit);

          if ((0, IsSanctionedSimpleUnitIdentifier_1.IsSanctionedSimpleUnitIdentifier)(unit)) {
            return true;
          }

          var units = unit.split('-per-');

          if (units.length !== 2) {
            return false;
          }

          var numerator = units[0],
              denominator = units[1];

          if (!(0, IsSanctionedSimpleUnitIdentifier_1.IsSanctionedSimpleUnitIdentifier)(numerator) || !(0, IsSanctionedSimpleUnitIdentifier_1.IsSanctionedSimpleUnitIdentifier)(denominator)) {
            return false;
          }

          return true;
        }

        exports.IsWellFormedUnitIdentifier = IsWellFormedUnitIdentifier; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.IsWellFormedUnitIdentifier;
      }, () => ({
        './IsSanctionedSimpleUnitIdentifier': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/IsWellFormedUnitIdentifier5.js", ['./cjs-loader.mjs', './IsSanctionedSimpleUnitIdentifier5.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.IsWellFormedUnitIdentifier = void 0;

        var IsSanctionedSimpleUnitIdentifier_1 = require("./IsSanctionedSimpleUnitIdentifier");
        /**
         * This follows https://tc39.es/ecma402/#sec-case-sensitivity-and-case-mapping
         * @param str string to convert
         */


        function toLowerCase(str) {
          return str.replace(/([A-Z])/g, function (_, c) {
            return c.toLowerCase();
          });
        }
        /**
         * https://tc39.es/ecma402/#sec-iswellformedunitidentifier
         * @param unit
         */


        function IsWellFormedUnitIdentifier(unit) {
          unit = toLowerCase(unit);

          if ((0, IsSanctionedSimpleUnitIdentifier_1.IsSanctionedSimpleUnitIdentifier)(unit)) {
            return true;
          }

          var units = unit.split('-per-');

          if (units.length !== 2) {
            return false;
          }

          var numerator = units[0],
              denominator = units[1];

          if (!(0, IsSanctionedSimpleUnitIdentifier_1.IsSanctionedSimpleUnitIdentifier)(numerator) || !(0, IsSanctionedSimpleUnitIdentifier_1.IsSanctionedSimpleUnitIdentifier)(denominator)) {
            return false;
          }

          return true;
        }

        exports.IsWellFormedUnitIdentifier = IsWellFormedUnitIdentifier; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.IsWellFormedUnitIdentifier;
      }, () => ({
        './IsSanctionedSimpleUnitIdentifier': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/IsWellFormedUnitIdentifier6.js", ['./cjs-loader.mjs', './IsSanctionedSimpleUnitIdentifier6.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.IsWellFormedUnitIdentifier = void 0;

        var IsSanctionedSimpleUnitIdentifier_1 = require("./IsSanctionedSimpleUnitIdentifier");
        /**
         * This follows https://tc39.es/ecma402/#sec-case-sensitivity-and-case-mapping
         * @param str string to convert
         */


        function toLowerCase(str) {
          return str.replace(/([A-Z])/g, function (_, c) {
            return c.toLowerCase();
          });
        }
        /**
         * https://tc39.es/ecma402/#sec-iswellformedunitidentifier
         * @param unit
         */


        function IsWellFormedUnitIdentifier(unit) {
          unit = toLowerCase(unit);

          if ((0, IsSanctionedSimpleUnitIdentifier_1.IsSanctionedSimpleUnitIdentifier)(unit)) {
            return true;
          }

          var units = unit.split('-per-');

          if (units.length !== 2) {
            return false;
          }

          var numerator = units[0],
              denominator = units[1];

          if (!(0, IsSanctionedSimpleUnitIdentifier_1.IsSanctionedSimpleUnitIdentifier)(numerator) || !(0, IsSanctionedSimpleUnitIdentifier_1.IsSanctionedSimpleUnitIdentifier)(denominator)) {
            return false;
          }

          return true;
        }

        exports.IsWellFormedUnitIdentifier = IsWellFormedUnitIdentifier; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.IsWellFormedUnitIdentifier;
      }, () => ({
        './IsSanctionedSimpleUnitIdentifier': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/IsWellFormedUnitIdentifier7.js", ['./cjs-loader.mjs', './IsSanctionedSimpleUnitIdentifier7.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.IsWellFormedUnitIdentifier = void 0;

        var IsSanctionedSimpleUnitIdentifier_1 = require("./IsSanctionedSimpleUnitIdentifier");
        /**
         * This follows https://tc39.es/ecma402/#sec-case-sensitivity-and-case-mapping
         * @param str string to convert
         */


        function toLowerCase(str) {
          return str.replace(/([A-Z])/g, function (_, c) {
            return c.toLowerCase();
          });
        }
        /**
         * https://tc39.es/ecma402/#sec-iswellformedunitidentifier
         * @param unit
         */


        function IsWellFormedUnitIdentifier(unit) {
          unit = toLowerCase(unit);

          if ((0, IsSanctionedSimpleUnitIdentifier_1.IsSanctionedSimpleUnitIdentifier)(unit)) {
            return true;
          }

          var units = unit.split('-per-');

          if (units.length !== 2) {
            return false;
          }

          var numerator = units[0],
              denominator = units[1];

          if (!(0, IsSanctionedSimpleUnitIdentifier_1.IsSanctionedSimpleUnitIdentifier)(numerator) || !(0, IsSanctionedSimpleUnitIdentifier_1.IsSanctionedSimpleUnitIdentifier)(denominator)) {
            return false;
          }

          return true;
        }

        exports.IsWellFormedUnitIdentifier = IsWellFormedUnitIdentifier; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.IsWellFormedUnitIdentifier;
      }, () => ({
        './IsSanctionedSimpleUnitIdentifier': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/iterableToArray.js", [], function (exports) {
  'use strict';

  return {
    execute: function () {
      exports('default', _iterableToArray);

      function _iterableToArray(iter) {
        if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
      }
    }
  };
});

System.register("chunks:///_virtual/likelySubtags.generated.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.likelySubtags = void 0;
        /* @generated */
        // prettier-ignore  

        exports.likelySubtags = {
          "aa": "aa-Latn-ET",
          "aai": "aai-Latn-ZZ",
          "aak": "aak-Latn-ZZ",
          "aau": "aau-Latn-ZZ",
          "ab": "ab-Cyrl-GE",
          "abi": "abi-Latn-ZZ",
          "abq": "abq-Cyrl-ZZ",
          "abr": "abr-Latn-GH",
          "abt": "abt-Latn-ZZ",
          "aby": "aby-Latn-ZZ",
          "acd": "acd-Latn-ZZ",
          "ace": "ace-Latn-ID",
          "ach": "ach-Latn-UG",
          "ada": "ada-Latn-GH",
          "ade": "ade-Latn-ZZ",
          "adj": "adj-Latn-ZZ",
          "adp": "adp-Tibt-BT",
          "ady": "ady-Cyrl-RU",
          "adz": "adz-Latn-ZZ",
          "ae": "ae-Avst-IR",
          "aeb": "aeb-Arab-TN",
          "aey": "aey-Latn-ZZ",
          "af": "af-Latn-ZA",
          "agc": "agc-Latn-ZZ",
          "agd": "agd-Latn-ZZ",
          "agg": "agg-Latn-ZZ",
          "agm": "agm-Latn-ZZ",
          "ago": "ago-Latn-ZZ",
          "agq": "agq-Latn-CM",
          "aha": "aha-Latn-ZZ",
          "ahl": "ahl-Latn-ZZ",
          "aho": "aho-Ahom-IN",
          "ajg": "ajg-Latn-ZZ",
          "ak": "ak-Latn-GH",
          "akk": "akk-Xsux-IQ",
          "ala": "ala-Latn-ZZ",
          "ali": "ali-Latn-ZZ",
          "aln": "aln-Latn-XK",
          "alt": "alt-Cyrl-RU",
          "am": "am-Ethi-ET",
          "amm": "amm-Latn-ZZ",
          "amn": "amn-Latn-ZZ",
          "amo": "amo-Latn-NG",
          "amp": "amp-Latn-ZZ",
          "an": "an-Latn-ES",
          "anc": "anc-Latn-ZZ",
          "ank": "ank-Latn-ZZ",
          "ann": "ann-Latn-ZZ",
          "any": "any-Latn-ZZ",
          "aoj": "aoj-Latn-ZZ",
          "aom": "aom-Latn-ZZ",
          "aoz": "aoz-Latn-ID",
          "apc": "apc-Arab-ZZ",
          "apd": "apd-Arab-TG",
          "ape": "ape-Latn-ZZ",
          "apr": "apr-Latn-ZZ",
          "aps": "aps-Latn-ZZ",
          "apz": "apz-Latn-ZZ",
          "ar": "ar-Arab-EG",
          "arc": "arc-Armi-IR",
          "arc-Nbat": "arc-Nbat-JO",
          "arc-Palm": "arc-Palm-SY",
          "arh": "arh-Latn-ZZ",
          "arn": "arn-Latn-CL",
          "aro": "aro-Latn-BO",
          "arq": "arq-Arab-DZ",
          "ars": "ars-Arab-SA",
          "ary": "ary-Arab-MA",
          "arz": "arz-Arab-EG",
          "as": "as-Beng-IN",
          "asa": "asa-Latn-TZ",
          "ase": "ase-Sgnw-US",
          "asg": "asg-Latn-ZZ",
          "aso": "aso-Latn-ZZ",
          "ast": "ast-Latn-ES",
          "ata": "ata-Latn-ZZ",
          "atg": "atg-Latn-ZZ",
          "atj": "atj-Latn-CA",
          "auy": "auy-Latn-ZZ",
          "av": "av-Cyrl-RU",
          "avl": "avl-Arab-ZZ",
          "avn": "avn-Latn-ZZ",
          "avt": "avt-Latn-ZZ",
          "avu": "avu-Latn-ZZ",
          "awa": "awa-Deva-IN",
          "awb": "awb-Latn-ZZ",
          "awo": "awo-Latn-ZZ",
          "awx": "awx-Latn-ZZ",
          "ay": "ay-Latn-BO",
          "ayb": "ayb-Latn-ZZ",
          "az": "az-Latn-AZ",
          "az-Arab": "az-Arab-IR",
          "az-IQ": "az-Arab-IQ",
          "az-IR": "az-Arab-IR",
          "az-RU": "az-Cyrl-RU",
          "ba": "ba-Cyrl-RU",
          "bal": "bal-Arab-PK",
          "ban": "ban-Latn-ID",
          "bap": "bap-Deva-NP",
          "bar": "bar-Latn-AT",
          "bas": "bas-Latn-CM",
          "bav": "bav-Latn-ZZ",
          "bax": "bax-Bamu-CM",
          "bba": "bba-Latn-ZZ",
          "bbb": "bbb-Latn-ZZ",
          "bbc": "bbc-Latn-ID",
          "bbd": "bbd-Latn-ZZ",
          "bbj": "bbj-Latn-CM",
          "bbp": "bbp-Latn-ZZ",
          "bbr": "bbr-Latn-ZZ",
          "bcf": "bcf-Latn-ZZ",
          "bch": "bch-Latn-ZZ",
          "bci": "bci-Latn-CI",
          "bcm": "bcm-Latn-ZZ",
          "bcn": "bcn-Latn-ZZ",
          "bco": "bco-Latn-ZZ",
          "bcq": "bcq-Ethi-ZZ",
          "bcu": "bcu-Latn-ZZ",
          "bdd": "bdd-Latn-ZZ",
          "be": "be-Cyrl-BY",
          "bef": "bef-Latn-ZZ",
          "beh": "beh-Latn-ZZ",
          "bej": "bej-Arab-SD",
          "bem": "bem-Latn-ZM",
          "bet": "bet-Latn-ZZ",
          "bew": "bew-Latn-ID",
          "bex": "bex-Latn-ZZ",
          "bez": "bez-Latn-TZ",
          "bfd": "bfd-Latn-CM",
          "bfq": "bfq-Taml-IN",
          "bft": "bft-Arab-PK",
          "bfy": "bfy-Deva-IN",
          "bg": "bg-Cyrl-BG",
          "bgc": "bgc-Deva-IN",
          "bgn": "bgn-Arab-PK",
          "bgx": "bgx-Grek-TR",
          "bhb": "bhb-Deva-IN",
          "bhg": "bhg-Latn-ZZ",
          "bhi": "bhi-Deva-IN",
          "bhl": "bhl-Latn-ZZ",
          "bho": "bho-Deva-IN",
          "bhy": "bhy-Latn-ZZ",
          "bi": "bi-Latn-VU",
          "bib": "bib-Latn-ZZ",
          "big": "big-Latn-ZZ",
          "bik": "bik-Latn-PH",
          "bim": "bim-Latn-ZZ",
          "bin": "bin-Latn-NG",
          "bio": "bio-Latn-ZZ",
          "biq": "biq-Latn-ZZ",
          "bjh": "bjh-Latn-ZZ",
          "bji": "bji-Ethi-ZZ",
          "bjj": "bjj-Deva-IN",
          "bjn": "bjn-Latn-ID",
          "bjo": "bjo-Latn-ZZ",
          "bjr": "bjr-Latn-ZZ",
          "bjt": "bjt-Latn-SN",
          "bjz": "bjz-Latn-ZZ",
          "bkc": "bkc-Latn-ZZ",
          "bkm": "bkm-Latn-CM",
          "bkq": "bkq-Latn-ZZ",
          "bku": "bku-Latn-PH",
          "bkv": "bkv-Latn-ZZ",
          "blg": "blg-Latn-MY",
          "blt": "blt-Tavt-VN",
          "bm": "bm-Latn-ML",
          "bmh": "bmh-Latn-ZZ",
          "bmk": "bmk-Latn-ZZ",
          "bmq": "bmq-Latn-ML",
          "bmu": "bmu-Latn-ZZ",
          "bn": "bn-Beng-BD",
          "bng": "bng-Latn-ZZ",
          "bnm": "bnm-Latn-ZZ",
          "bnp": "bnp-Latn-ZZ",
          "bo": "bo-Tibt-CN",
          "boj": "boj-Latn-ZZ",
          "bom": "bom-Latn-ZZ",
          "bon": "bon-Latn-ZZ",
          "bpy": "bpy-Beng-IN",
          "bqc": "bqc-Latn-ZZ",
          "bqi": "bqi-Arab-IR",
          "bqp": "bqp-Latn-ZZ",
          "bqv": "bqv-Latn-CI",
          "br": "br-Latn-FR",
          "bra": "bra-Deva-IN",
          "brh": "brh-Arab-PK",
          "brx": "brx-Deva-IN",
          "brz": "brz-Latn-ZZ",
          "bs": "bs-Latn-BA",
          "bsj": "bsj-Latn-ZZ",
          "bsq": "bsq-Bass-LR",
          "bss": "bss-Latn-CM",
          "bst": "bst-Ethi-ZZ",
          "bto": "bto-Latn-PH",
          "btt": "btt-Latn-ZZ",
          "btv": "btv-Deva-PK",
          "bua": "bua-Cyrl-RU",
          "buc": "buc-Latn-YT",
          "bud": "bud-Latn-ZZ",
          "bug": "bug-Latn-ID",
          "buk": "buk-Latn-ZZ",
          "bum": "bum-Latn-CM",
          "buo": "buo-Latn-ZZ",
          "bus": "bus-Latn-ZZ",
          "buu": "buu-Latn-ZZ",
          "bvb": "bvb-Latn-GQ",
          "bwd": "bwd-Latn-ZZ",
          "bwr": "bwr-Latn-ZZ",
          "bxh": "bxh-Latn-ZZ",
          "bye": "bye-Latn-ZZ",
          "byn": "byn-Ethi-ER",
          "byr": "byr-Latn-ZZ",
          "bys": "bys-Latn-ZZ",
          "byv": "byv-Latn-CM",
          "byx": "byx-Latn-ZZ",
          "bza": "bza-Latn-ZZ",
          "bze": "bze-Latn-ML",
          "bzf": "bzf-Latn-ZZ",
          "bzh": "bzh-Latn-ZZ",
          "bzw": "bzw-Latn-ZZ",
          "ca": "ca-Latn-ES",
          "cad": "cad-Latn-US",
          "can": "can-Latn-ZZ",
          "cbj": "cbj-Latn-ZZ",
          "cch": "cch-Latn-NG",
          "ccp": "ccp-Cakm-BD",
          "ce": "ce-Cyrl-RU",
          "ceb": "ceb-Latn-PH",
          "cfa": "cfa-Latn-ZZ",
          "cgg": "cgg-Latn-UG",
          "ch": "ch-Latn-GU",
          "chk": "chk-Latn-FM",
          "chm": "chm-Cyrl-RU",
          "cho": "cho-Latn-US",
          "chp": "chp-Latn-CA",
          "chr": "chr-Cher-US",
          "cic": "cic-Latn-US",
          "cja": "cja-Arab-KH",
          "cjm": "cjm-Cham-VN",
          "cjv": "cjv-Latn-ZZ",
          "ckb": "ckb-Arab-IQ",
          "ckl": "ckl-Latn-ZZ",
          "cko": "cko-Latn-ZZ",
          "cky": "cky-Latn-ZZ",
          "cla": "cla-Latn-ZZ",
          "cme": "cme-Latn-ZZ",
          "cmg": "cmg-Soyo-MN",
          "co": "co-Latn-FR",
          "cop": "cop-Copt-EG",
          "cps": "cps-Latn-PH",
          "cr": "cr-Cans-CA",
          "crh": "crh-Cyrl-UA",
          "crj": "crj-Cans-CA",
          "crk": "crk-Cans-CA",
          "crl": "crl-Cans-CA",
          "crm": "crm-Cans-CA",
          "crs": "crs-Latn-SC",
          "cs": "cs-Latn-CZ",
          "csb": "csb-Latn-PL",
          "csw": "csw-Cans-CA",
          "ctd": "ctd-Pauc-MM",
          "cu": "cu-Cyrl-RU",
          "cu-Glag": "cu-Glag-BG",
          "cv": "cv-Cyrl-RU",
          "cy": "cy-Latn-GB",
          "da": "da-Latn-DK",
          "dad": "dad-Latn-ZZ",
          "daf": "daf-Latn-CI",
          "dag": "dag-Latn-ZZ",
          "dah": "dah-Latn-ZZ",
          "dak": "dak-Latn-US",
          "dar": "dar-Cyrl-RU",
          "dav": "dav-Latn-KE",
          "dbd": "dbd-Latn-ZZ",
          "dbq": "dbq-Latn-ZZ",
          "dcc": "dcc-Arab-IN",
          "ddn": "ddn-Latn-ZZ",
          "de": "de-Latn-DE",
          "ded": "ded-Latn-ZZ",
          "den": "den-Latn-CA",
          "dga": "dga-Latn-ZZ",
          "dgh": "dgh-Latn-ZZ",
          "dgi": "dgi-Latn-ZZ",
          "dgl": "dgl-Arab-ZZ",
          "dgr": "dgr-Latn-CA",
          "dgz": "dgz-Latn-ZZ",
          "dia": "dia-Latn-ZZ",
          "dje": "dje-Latn-NE",
          "dmf": "dmf-Medf-NG",
          "dnj": "dnj-Latn-CI",
          "dob": "dob-Latn-ZZ",
          "doi": "doi-Deva-IN",
          "dop": "dop-Latn-ZZ",
          "dow": "dow-Latn-ZZ",
          "drh": "drh-Mong-CN",
          "dri": "dri-Latn-ZZ",
          "drs": "drs-Ethi-ZZ",
          "dsb": "dsb-Latn-DE",
          "dtm": "dtm-Latn-ML",
          "dtp": "dtp-Latn-MY",
          "dts": "dts-Latn-ZZ",
          "dty": "dty-Deva-NP",
          "dua": "dua-Latn-CM",
          "duc": "duc-Latn-ZZ",
          "dud": "dud-Latn-ZZ",
          "dug": "dug-Latn-ZZ",
          "dv": "dv-Thaa-MV",
          "dva": "dva-Latn-ZZ",
          "dww": "dww-Latn-ZZ",
          "dyo": "dyo-Latn-SN",
          "dyu": "dyu-Latn-BF",
          "dz": "dz-Tibt-BT",
          "dzg": "dzg-Latn-ZZ",
          "ebu": "ebu-Latn-KE",
          "ee": "ee-Latn-GH",
          "efi": "efi-Latn-NG",
          "egl": "egl-Latn-IT",
          "egy": "egy-Egyp-EG",
          "eka": "eka-Latn-ZZ",
          "eky": "eky-Kali-MM",
          "el": "el-Grek-GR",
          "ema": "ema-Latn-ZZ",
          "emi": "emi-Latn-ZZ",
          "en": "en-Latn-US",
          "en-Shaw": "en-Shaw-GB",
          "enn": "enn-Latn-ZZ",
          "enq": "enq-Latn-ZZ",
          "eo": "eo-Latn-001",
          "eri": "eri-Latn-ZZ",
          "es": "es-Latn-ES",
          "esg": "esg-Gonm-IN",
          "esu": "esu-Latn-US",
          "et": "et-Latn-EE",
          "etr": "etr-Latn-ZZ",
          "ett": "ett-Ital-IT",
          "etu": "etu-Latn-ZZ",
          "etx": "etx-Latn-ZZ",
          "eu": "eu-Latn-ES",
          "ewo": "ewo-Latn-CM",
          "ext": "ext-Latn-ES",
          "eza": "eza-Latn-ZZ",
          "fa": "fa-Arab-IR",
          "faa": "faa-Latn-ZZ",
          "fab": "fab-Latn-ZZ",
          "fag": "fag-Latn-ZZ",
          "fai": "fai-Latn-ZZ",
          "fan": "fan-Latn-GQ",
          "ff": "ff-Latn-SN",
          "ff-Adlm": "ff-Adlm-GN",
          "ffi": "ffi-Latn-ZZ",
          "ffm": "ffm-Latn-ML",
          "fi": "fi-Latn-FI",
          "fia": "fia-Arab-SD",
          "fil": "fil-Latn-PH",
          "fit": "fit-Latn-SE",
          "fj": "fj-Latn-FJ",
          "flr": "flr-Latn-ZZ",
          "fmp": "fmp-Latn-ZZ",
          "fo": "fo-Latn-FO",
          "fod": "fod-Latn-ZZ",
          "fon": "fon-Latn-BJ",
          "for": "for-Latn-ZZ",
          "fpe": "fpe-Latn-ZZ",
          "fqs": "fqs-Latn-ZZ",
          "fr": "fr-Latn-FR",
          "frc": "frc-Latn-US",
          "frp": "frp-Latn-FR",
          "frr": "frr-Latn-DE",
          "frs": "frs-Latn-DE",
          "fub": "fub-Arab-CM",
          "fud": "fud-Latn-WF",
          "fue": "fue-Latn-ZZ",
          "fuf": "fuf-Latn-GN",
          "fuh": "fuh-Latn-ZZ",
          "fuq": "fuq-Latn-NE",
          "fur": "fur-Latn-IT",
          "fuv": "fuv-Latn-NG",
          "fuy": "fuy-Latn-ZZ",
          "fvr": "fvr-Latn-SD",
          "fy": "fy-Latn-NL",
          "ga": "ga-Latn-IE",
          "gaa": "gaa-Latn-GH",
          "gaf": "gaf-Latn-ZZ",
          "gag": "gag-Latn-MD",
          "gah": "gah-Latn-ZZ",
          "gaj": "gaj-Latn-ZZ",
          "gam": "gam-Latn-ZZ",
          "gan": "gan-Hans-CN",
          "gaw": "gaw-Latn-ZZ",
          "gay": "gay-Latn-ID",
          "gba": "gba-Latn-ZZ",
          "gbf": "gbf-Latn-ZZ",
          "gbm": "gbm-Deva-IN",
          "gby": "gby-Latn-ZZ",
          "gbz": "gbz-Arab-IR",
          "gcr": "gcr-Latn-GF",
          "gd": "gd-Latn-GB",
          "gde": "gde-Latn-ZZ",
          "gdn": "gdn-Latn-ZZ",
          "gdr": "gdr-Latn-ZZ",
          "geb": "geb-Latn-ZZ",
          "gej": "gej-Latn-ZZ",
          "gel": "gel-Latn-ZZ",
          "gez": "gez-Ethi-ET",
          "gfk": "gfk-Latn-ZZ",
          "ggn": "ggn-Deva-NP",
          "ghs": "ghs-Latn-ZZ",
          "gil": "gil-Latn-KI",
          "gim": "gim-Latn-ZZ",
          "gjk": "gjk-Arab-PK",
          "gjn": "gjn-Latn-ZZ",
          "gju": "gju-Arab-PK",
          "gkn": "gkn-Latn-ZZ",
          "gkp": "gkp-Latn-ZZ",
          "gl": "gl-Latn-ES",
          "glk": "glk-Arab-IR",
          "gmm": "gmm-Latn-ZZ",
          "gmv": "gmv-Ethi-ZZ",
          "gn": "gn-Latn-PY",
          "gnd": "gnd-Latn-ZZ",
          "gng": "gng-Latn-ZZ",
          "god": "god-Latn-ZZ",
          "gof": "gof-Ethi-ZZ",
          "goi": "goi-Latn-ZZ",
          "gom": "gom-Deva-IN",
          "gon": "gon-Telu-IN",
          "gor": "gor-Latn-ID",
          "gos": "gos-Latn-NL",
          "got": "got-Goth-UA",
          "grb": "grb-Latn-ZZ",
          "grc": "grc-Cprt-CY",
          "grc-Linb": "grc-Linb-GR",
          "grt": "grt-Beng-IN",
          "grw": "grw-Latn-ZZ",
          "gsw": "gsw-Latn-CH",
          "gu": "gu-Gujr-IN",
          "gub": "gub-Latn-BR",
          "guc": "guc-Latn-CO",
          "gud": "gud-Latn-ZZ",
          "gur": "gur-Latn-GH",
          "guw": "guw-Latn-ZZ",
          "gux": "gux-Latn-ZZ",
          "guz": "guz-Latn-KE",
          "gv": "gv-Latn-IM",
          "gvf": "gvf-Latn-ZZ",
          "gvr": "gvr-Deva-NP",
          "gvs": "gvs-Latn-ZZ",
          "gwc": "gwc-Arab-ZZ",
          "gwi": "gwi-Latn-CA",
          "gwt": "gwt-Arab-ZZ",
          "gyi": "gyi-Latn-ZZ",
          "ha": "ha-Latn-NG",
          "ha-CM": "ha-Arab-CM",
          "ha-SD": "ha-Arab-SD",
          "hag": "hag-Latn-ZZ",
          "hak": "hak-Hans-CN",
          "ham": "ham-Latn-ZZ",
          "haw": "haw-Latn-US",
          "haz": "haz-Arab-AF",
          "hbb": "hbb-Latn-ZZ",
          "hdy": "hdy-Ethi-ZZ",
          "he": "he-Hebr-IL",
          "hhy": "hhy-Latn-ZZ",
          "hi": "hi-Deva-IN",
          "hia": "hia-Latn-ZZ",
          "hif": "hif-Latn-FJ",
          "hig": "hig-Latn-ZZ",
          "hih": "hih-Latn-ZZ",
          "hil": "hil-Latn-PH",
          "hla": "hla-Latn-ZZ",
          "hlu": "hlu-Hluw-TR",
          "hmd": "hmd-Plrd-CN",
          "hmt": "hmt-Latn-ZZ",
          "hnd": "hnd-Arab-PK",
          "hne": "hne-Deva-IN",
          "hnj": "hnj-Hmnp-US",
          "hnn": "hnn-Latn-PH",
          "hno": "hno-Arab-PK",
          "ho": "ho-Latn-PG",
          "hoc": "hoc-Deva-IN",
          "hoj": "hoj-Deva-IN",
          "hot": "hot-Latn-ZZ",
          "hr": "hr-Latn-HR",
          "hsb": "hsb-Latn-DE",
          "hsn": "hsn-Hans-CN",
          "ht": "ht-Latn-HT",
          "hu": "hu-Latn-HU",
          "hui": "hui-Latn-ZZ",
          "hy": "hy-Armn-AM",
          "hz": "hz-Latn-NA",
          "ia": "ia-Latn-001",
          "ian": "ian-Latn-ZZ",
          "iar": "iar-Latn-ZZ",
          "iba": "iba-Latn-MY",
          "ibb": "ibb-Latn-NG",
          "iby": "iby-Latn-ZZ",
          "ica": "ica-Latn-ZZ",
          "ich": "ich-Latn-ZZ",
          "id": "id-Latn-ID",
          "idd": "idd-Latn-ZZ",
          "idi": "idi-Latn-ZZ",
          "idu": "idu-Latn-ZZ",
          "ife": "ife-Latn-TG",
          "ig": "ig-Latn-NG",
          "igb": "igb-Latn-ZZ",
          "ige": "ige-Latn-ZZ",
          "ii": "ii-Yiii-CN",
          "ijj": "ijj-Latn-ZZ",
          "ik": "ik-Latn-US",
          "ikk": "ikk-Latn-ZZ",
          "ikt": "ikt-Latn-CA",
          "ikw": "ikw-Latn-ZZ",
          "ikx": "ikx-Latn-ZZ",
          "ilo": "ilo-Latn-PH",
          "imo": "imo-Latn-ZZ",
          "in": "in-Latn-ID",
          "inh": "inh-Cyrl-RU",
          "io": "io-Latn-001",
          "iou": "iou-Latn-ZZ",
          "iri": "iri-Latn-ZZ",
          "is": "is-Latn-IS",
          "it": "it-Latn-IT",
          "iu": "iu-Cans-CA",
          "iw": "iw-Hebr-IL",
          "iwm": "iwm-Latn-ZZ",
          "iws": "iws-Latn-ZZ",
          "izh": "izh-Latn-RU",
          "izi": "izi-Latn-ZZ",
          "ja": "ja-Jpan-JP",
          "jab": "jab-Latn-ZZ",
          "jam": "jam-Latn-JM",
          "jar": "jar-Latn-ZZ",
          "jbo": "jbo-Latn-001",
          "jbu": "jbu-Latn-ZZ",
          "jen": "jen-Latn-ZZ",
          "jgk": "jgk-Latn-ZZ",
          "jgo": "jgo-Latn-CM",
          "ji": "ji-Hebr-UA",
          "jib": "jib-Latn-ZZ",
          "jmc": "jmc-Latn-TZ",
          "jml": "jml-Deva-NP",
          "jra": "jra-Latn-ZZ",
          "jut": "jut-Latn-DK",
          "jv": "jv-Latn-ID",
          "jw": "jw-Latn-ID",
          "ka": "ka-Geor-GE",
          "kaa": "kaa-Cyrl-UZ",
          "kab": "kab-Latn-DZ",
          "kac": "kac-Latn-MM",
          "kad": "kad-Latn-ZZ",
          "kai": "kai-Latn-ZZ",
          "kaj": "kaj-Latn-NG",
          "kam": "kam-Latn-KE",
          "kao": "kao-Latn-ML",
          "kbd": "kbd-Cyrl-RU",
          "kbm": "kbm-Latn-ZZ",
          "kbp": "kbp-Latn-ZZ",
          "kbq": "kbq-Latn-ZZ",
          "kbx": "kbx-Latn-ZZ",
          "kby": "kby-Arab-NE",
          "kcg": "kcg-Latn-NG",
          "kck": "kck-Latn-ZW",
          "kcl": "kcl-Latn-ZZ",
          "kct": "kct-Latn-ZZ",
          "kde": "kde-Latn-TZ",
          "kdh": "kdh-Latn-TG",
          "kdl": "kdl-Latn-ZZ",
          "kdt": "kdt-Thai-TH",
          "kea": "kea-Latn-CV",
          "ken": "ken-Latn-CM",
          "kez": "kez-Latn-ZZ",
          "kfo": "kfo-Latn-CI",
          "kfr": "kfr-Deva-IN",
          "kfy": "kfy-Deva-IN",
          "kg": "kg-Latn-CD",
          "kge": "kge-Latn-ID",
          "kgf": "kgf-Latn-ZZ",
          "kgp": "kgp-Latn-BR",
          "kha": "kha-Latn-IN",
          "khb": "khb-Talu-CN",
          "khn": "khn-Deva-IN",
          "khq": "khq-Latn-ML",
          "khs": "khs-Latn-ZZ",
          "kht": "kht-Mymr-IN",
          "khw": "khw-Arab-PK",
          "khz": "khz-Latn-ZZ",
          "ki": "ki-Latn-KE",
          "kij": "kij-Latn-ZZ",
          "kiu": "kiu-Latn-TR",
          "kiw": "kiw-Latn-ZZ",
          "kj": "kj-Latn-NA",
          "kjd": "kjd-Latn-ZZ",
          "kjg": "kjg-Laoo-LA",
          "kjs": "kjs-Latn-ZZ",
          "kjy": "kjy-Latn-ZZ",
          "kk": "kk-Cyrl-KZ",
          "kk-AF": "kk-Arab-AF",
          "kk-Arab": "kk-Arab-CN",
          "kk-CN": "kk-Arab-CN",
          "kk-IR": "kk-Arab-IR",
          "kk-MN": "kk-Arab-MN",
          "kkc": "kkc-Latn-ZZ",
          "kkj": "kkj-Latn-CM",
          "kl": "kl-Latn-GL",
          "kln": "kln-Latn-KE",
          "klq": "klq-Latn-ZZ",
          "klt": "klt-Latn-ZZ",
          "klx": "klx-Latn-ZZ",
          "km": "km-Khmr-KH",
          "kmb": "kmb-Latn-AO",
          "kmh": "kmh-Latn-ZZ",
          "kmo": "kmo-Latn-ZZ",
          "kms": "kms-Latn-ZZ",
          "kmu": "kmu-Latn-ZZ",
          "kmw": "kmw-Latn-ZZ",
          "kn": "kn-Knda-IN",
          "knf": "knf-Latn-GW",
          "knp": "knp-Latn-ZZ",
          "ko": "ko-Kore-KR",
          "koi": "koi-Cyrl-RU",
          "kok": "kok-Deva-IN",
          "kol": "kol-Latn-ZZ",
          "kos": "kos-Latn-FM",
          "koz": "koz-Latn-ZZ",
          "kpe": "kpe-Latn-LR",
          "kpf": "kpf-Latn-ZZ",
          "kpo": "kpo-Latn-ZZ",
          "kpr": "kpr-Latn-ZZ",
          "kpx": "kpx-Latn-ZZ",
          "kqb": "kqb-Latn-ZZ",
          "kqf": "kqf-Latn-ZZ",
          "kqs": "kqs-Latn-ZZ",
          "kqy": "kqy-Ethi-ZZ",
          "kr": "kr-Latn-ZZ",
          "krc": "krc-Cyrl-RU",
          "kri": "kri-Latn-SL",
          "krj": "krj-Latn-PH",
          "krl": "krl-Latn-RU",
          "krs": "krs-Latn-ZZ",
          "kru": "kru-Deva-IN",
          "ks": "ks-Arab-IN",
          "ksb": "ksb-Latn-TZ",
          "ksd": "ksd-Latn-ZZ",
          "ksf": "ksf-Latn-CM",
          "ksh": "ksh-Latn-DE",
          "ksj": "ksj-Latn-ZZ",
          "ksr": "ksr-Latn-ZZ",
          "ktb": "ktb-Ethi-ZZ",
          "ktm": "ktm-Latn-ZZ",
          "kto": "kto-Latn-ZZ",
          "ktr": "ktr-Latn-MY",
          "ku": "ku-Latn-TR",
          "ku-Arab": "ku-Arab-IQ",
          "ku-LB": "ku-Arab-LB",
          "ku-Yezi": "ku-Yezi-GE",
          "kub": "kub-Latn-ZZ",
          "kud": "kud-Latn-ZZ",
          "kue": "kue-Latn-ZZ",
          "kuj": "kuj-Latn-ZZ",
          "kum": "kum-Cyrl-RU",
          "kun": "kun-Latn-ZZ",
          "kup": "kup-Latn-ZZ",
          "kus": "kus-Latn-ZZ",
          "kv": "kv-Cyrl-RU",
          "kvg": "kvg-Latn-ZZ",
          "kvr": "kvr-Latn-ID",
          "kvx": "kvx-Arab-PK",
          "kw": "kw-Latn-GB",
          "kwj": "kwj-Latn-ZZ",
          "kwo": "kwo-Latn-ZZ",
          "kwq": "kwq-Latn-ZZ",
          "kxa": "kxa-Latn-ZZ",
          "kxc": "kxc-Ethi-ZZ",
          "kxe": "kxe-Latn-ZZ",
          "kxl": "kxl-Deva-IN",
          "kxm": "kxm-Thai-TH",
          "kxp": "kxp-Arab-PK",
          "kxw": "kxw-Latn-ZZ",
          "kxz": "kxz-Latn-ZZ",
          "ky": "ky-Cyrl-KG",
          "ky-Arab": "ky-Arab-CN",
          "ky-CN": "ky-Arab-CN",
          "ky-Latn": "ky-Latn-TR",
          "ky-TR": "ky-Latn-TR",
          "kye": "kye-Latn-ZZ",
          "kyx": "kyx-Latn-ZZ",
          "kzh": "kzh-Arab-ZZ",
          "kzj": "kzj-Latn-MY",
          "kzr": "kzr-Latn-ZZ",
          "kzt": "kzt-Latn-MY",
          "la": "la-Latn-VA",
          "lab": "lab-Lina-GR",
          "lad": "lad-Hebr-IL",
          "lag": "lag-Latn-TZ",
          "lah": "lah-Arab-PK",
          "laj": "laj-Latn-UG",
          "las": "las-Latn-ZZ",
          "lb": "lb-Latn-LU",
          "lbe": "lbe-Cyrl-RU",
          "lbu": "lbu-Latn-ZZ",
          "lbw": "lbw-Latn-ID",
          "lcm": "lcm-Latn-ZZ",
          "lcp": "lcp-Thai-CN",
          "ldb": "ldb-Latn-ZZ",
          "led": "led-Latn-ZZ",
          "lee": "lee-Latn-ZZ",
          "lem": "lem-Latn-ZZ",
          "lep": "lep-Lepc-IN",
          "leq": "leq-Latn-ZZ",
          "leu": "leu-Latn-ZZ",
          "lez": "lez-Cyrl-RU",
          "lg": "lg-Latn-UG",
          "lgg": "lgg-Latn-ZZ",
          "li": "li-Latn-NL",
          "lia": "lia-Latn-ZZ",
          "lid": "lid-Latn-ZZ",
          "lif": "lif-Deva-NP",
          "lif-Limb": "lif-Limb-IN",
          "lig": "lig-Latn-ZZ",
          "lih": "lih-Latn-ZZ",
          "lij": "lij-Latn-IT",
          "lis": "lis-Lisu-CN",
          "ljp": "ljp-Latn-ID",
          "lki": "lki-Arab-IR",
          "lkt": "lkt-Latn-US",
          "lle": "lle-Latn-ZZ",
          "lln": "lln-Latn-ZZ",
          "lmn": "lmn-Telu-IN",
          "lmo": "lmo-Latn-IT",
          "lmp": "lmp-Latn-ZZ",
          "ln": "ln-Latn-CD",
          "lns": "lns-Latn-ZZ",
          "lnu": "lnu-Latn-ZZ",
          "lo": "lo-Laoo-LA",
          "loj": "loj-Latn-ZZ",
          "lok": "lok-Latn-ZZ",
          "lol": "lol-Latn-CD",
          "lor": "lor-Latn-ZZ",
          "los": "los-Latn-ZZ",
          "loz": "loz-Latn-ZM",
          "lrc": "lrc-Arab-IR",
          "lt": "lt-Latn-LT",
          "ltg": "ltg-Latn-LV",
          "lu": "lu-Latn-CD",
          "lua": "lua-Latn-CD",
          "luo": "luo-Latn-KE",
          "luy": "luy-Latn-KE",
          "luz": "luz-Arab-IR",
          "lv": "lv-Latn-LV",
          "lwl": "lwl-Thai-TH",
          "lzh": "lzh-Hans-CN",
          "lzz": "lzz-Latn-TR",
          "mad": "mad-Latn-ID",
          "maf": "maf-Latn-CM",
          "mag": "mag-Deva-IN",
          "mai": "mai-Deva-IN",
          "mak": "mak-Latn-ID",
          "man": "man-Latn-GM",
          "man-GN": "man-Nkoo-GN",
          "man-Nkoo": "man-Nkoo-GN",
          "mas": "mas-Latn-KE",
          "maw": "maw-Latn-ZZ",
          "maz": "maz-Latn-MX",
          "mbh": "mbh-Latn-ZZ",
          "mbo": "mbo-Latn-ZZ",
          "mbq": "mbq-Latn-ZZ",
          "mbu": "mbu-Latn-ZZ",
          "mbw": "mbw-Latn-ZZ",
          "mci": "mci-Latn-ZZ",
          "mcp": "mcp-Latn-ZZ",
          "mcq": "mcq-Latn-ZZ",
          "mcr": "mcr-Latn-ZZ",
          "mcu": "mcu-Latn-ZZ",
          "mda": "mda-Latn-ZZ",
          "mde": "mde-Arab-ZZ",
          "mdf": "mdf-Cyrl-RU",
          "mdh": "mdh-Latn-PH",
          "mdj": "mdj-Latn-ZZ",
          "mdr": "mdr-Latn-ID",
          "mdx": "mdx-Ethi-ZZ",
          "med": "med-Latn-ZZ",
          "mee": "mee-Latn-ZZ",
          "mek": "mek-Latn-ZZ",
          "men": "men-Latn-SL",
          "mer": "mer-Latn-KE",
          "met": "met-Latn-ZZ",
          "meu": "meu-Latn-ZZ",
          "mfa": "mfa-Arab-TH",
          "mfe": "mfe-Latn-MU",
          "mfn": "mfn-Latn-ZZ",
          "mfo": "mfo-Latn-ZZ",
          "mfq": "mfq-Latn-ZZ",
          "mg": "mg-Latn-MG",
          "mgh": "mgh-Latn-MZ",
          "mgl": "mgl-Latn-ZZ",
          "mgo": "mgo-Latn-CM",
          "mgp": "mgp-Deva-NP",
          "mgy": "mgy-Latn-TZ",
          "mh": "mh-Latn-MH",
          "mhi": "mhi-Latn-ZZ",
          "mhl": "mhl-Latn-ZZ",
          "mi": "mi-Latn-NZ",
          "mif": "mif-Latn-ZZ",
          "min": "min-Latn-ID",
          "miw": "miw-Latn-ZZ",
          "mk": "mk-Cyrl-MK",
          "mki": "mki-Arab-ZZ",
          "mkl": "mkl-Latn-ZZ",
          "mkp": "mkp-Latn-ZZ",
          "mkw": "mkw-Latn-ZZ",
          "ml": "ml-Mlym-IN",
          "mle": "mle-Latn-ZZ",
          "mlp": "mlp-Latn-ZZ",
          "mls": "mls-Latn-SD",
          "mmo": "mmo-Latn-ZZ",
          "mmu": "mmu-Latn-ZZ",
          "mmx": "mmx-Latn-ZZ",
          "mn": "mn-Cyrl-MN",
          "mn-CN": "mn-Mong-CN",
          "mn-Mong": "mn-Mong-CN",
          "mna": "mna-Latn-ZZ",
          "mnf": "mnf-Latn-ZZ",
          "mni": "mni-Beng-IN",
          "mnw": "mnw-Mymr-MM",
          "mo": "mo-Latn-RO",
          "moa": "moa-Latn-ZZ",
          "moe": "moe-Latn-CA",
          "moh": "moh-Latn-CA",
          "mos": "mos-Latn-BF",
          "mox": "mox-Latn-ZZ",
          "mpp": "mpp-Latn-ZZ",
          "mps": "mps-Latn-ZZ",
          "mpt": "mpt-Latn-ZZ",
          "mpx": "mpx-Latn-ZZ",
          "mql": "mql-Latn-ZZ",
          "mr": "mr-Deva-IN",
          "mrd": "mrd-Deva-NP",
          "mrj": "mrj-Cyrl-RU",
          "mro": "mro-Mroo-BD",
          "ms": "ms-Latn-MY",
          "ms-CC": "ms-Arab-CC",
          "mt": "mt-Latn-MT",
          "mtc": "mtc-Latn-ZZ",
          "mtf": "mtf-Latn-ZZ",
          "mti": "mti-Latn-ZZ",
          "mtr": "mtr-Deva-IN",
          "mua": "mua-Latn-CM",
          "mur": "mur-Latn-ZZ",
          "mus": "mus-Latn-US",
          "mva": "mva-Latn-ZZ",
          "mvn": "mvn-Latn-ZZ",
          "mvy": "mvy-Arab-PK",
          "mwk": "mwk-Latn-ML",
          "mwr": "mwr-Deva-IN",
          "mwv": "mwv-Latn-ID",
          "mww": "mww-Hmnp-US",
          "mxc": "mxc-Latn-ZW",
          "mxm": "mxm-Latn-ZZ",
          "my": "my-Mymr-MM",
          "myk": "myk-Latn-ZZ",
          "mym": "mym-Ethi-ZZ",
          "myv": "myv-Cyrl-RU",
          "myw": "myw-Latn-ZZ",
          "myx": "myx-Latn-UG",
          "myz": "myz-Mand-IR",
          "mzk": "mzk-Latn-ZZ",
          "mzm": "mzm-Latn-ZZ",
          "mzn": "mzn-Arab-IR",
          "mzp": "mzp-Latn-ZZ",
          "mzw": "mzw-Latn-ZZ",
          "mzz": "mzz-Latn-ZZ",
          "na": "na-Latn-NR",
          "nac": "nac-Latn-ZZ",
          "naf": "naf-Latn-ZZ",
          "nak": "nak-Latn-ZZ",
          "nan": "nan-Hans-CN",
          "nap": "nap-Latn-IT",
          "naq": "naq-Latn-NA",
          "nas": "nas-Latn-ZZ",
          "nb": "nb-Latn-NO",
          "nca": "nca-Latn-ZZ",
          "nce": "nce-Latn-ZZ",
          "ncf": "ncf-Latn-ZZ",
          "nch": "nch-Latn-MX",
          "nco": "nco-Latn-ZZ",
          "ncu": "ncu-Latn-ZZ",
          "nd": "nd-Latn-ZW",
          "ndc": "ndc-Latn-MZ",
          "nds": "nds-Latn-DE",
          "ne": "ne-Deva-NP",
          "neb": "neb-Latn-ZZ",
          "new": "new-Deva-NP",
          "nex": "nex-Latn-ZZ",
          "nfr": "nfr-Latn-ZZ",
          "ng": "ng-Latn-NA",
          "nga": "nga-Latn-ZZ",
          "ngb": "ngb-Latn-ZZ",
          "ngl": "ngl-Latn-MZ",
          "nhb": "nhb-Latn-ZZ",
          "nhe": "nhe-Latn-MX",
          "nhw": "nhw-Latn-MX",
          "nif": "nif-Latn-ZZ",
          "nii": "nii-Latn-ZZ",
          "nij": "nij-Latn-ID",
          "nin": "nin-Latn-ZZ",
          "niu": "niu-Latn-NU",
          "niy": "niy-Latn-ZZ",
          "niz": "niz-Latn-ZZ",
          "njo": "njo-Latn-IN",
          "nkg": "nkg-Latn-ZZ",
          "nko": "nko-Latn-ZZ",
          "nl": "nl-Latn-NL",
          "nmg": "nmg-Latn-CM",
          "nmz": "nmz-Latn-ZZ",
          "nn": "nn-Latn-NO",
          "nnf": "nnf-Latn-ZZ",
          "nnh": "nnh-Latn-CM",
          "nnk": "nnk-Latn-ZZ",
          "nnm": "nnm-Latn-ZZ",
          "nnp": "nnp-Wcho-IN",
          "no": "no-Latn-NO",
          "nod": "nod-Lana-TH",
          "noe": "noe-Deva-IN",
          "non": "non-Runr-SE",
          "nop": "nop-Latn-ZZ",
          "nou": "nou-Latn-ZZ",
          "nqo": "nqo-Nkoo-GN",
          "nr": "nr-Latn-ZA",
          "nrb": "nrb-Latn-ZZ",
          "nsk": "nsk-Cans-CA",
          "nsn": "nsn-Latn-ZZ",
          "nso": "nso-Latn-ZA",
          "nss": "nss-Latn-ZZ",
          "nst": "nst-Tnsa-IN",
          "ntm": "ntm-Latn-ZZ",
          "ntr": "ntr-Latn-ZZ",
          "nui": "nui-Latn-ZZ",
          "nup": "nup-Latn-ZZ",
          "nus": "nus-Latn-SS",
          "nuv": "nuv-Latn-ZZ",
          "nux": "nux-Latn-ZZ",
          "nv": "nv-Latn-US",
          "nwb": "nwb-Latn-ZZ",
          "nxq": "nxq-Latn-CN",
          "nxr": "nxr-Latn-ZZ",
          "ny": "ny-Latn-MW",
          "nym": "nym-Latn-TZ",
          "nyn": "nyn-Latn-UG",
          "nzi": "nzi-Latn-GH",
          "oc": "oc-Latn-FR",
          "ogc": "ogc-Latn-ZZ",
          "okr": "okr-Latn-ZZ",
          "okv": "okv-Latn-ZZ",
          "om": "om-Latn-ET",
          "ong": "ong-Latn-ZZ",
          "onn": "onn-Latn-ZZ",
          "ons": "ons-Latn-ZZ",
          "opm": "opm-Latn-ZZ",
          "or": "or-Orya-IN",
          "oro": "oro-Latn-ZZ",
          "oru": "oru-Arab-ZZ",
          "os": "os-Cyrl-GE",
          "osa": "osa-Osge-US",
          "ota": "ota-Arab-ZZ",
          "otk": "otk-Orkh-MN",
          "oui": "oui-Ougr-143",
          "ozm": "ozm-Latn-ZZ",
          "pa": "pa-Guru-IN",
          "pa-Arab": "pa-Arab-PK",
          "pa-PK": "pa-Arab-PK",
          "pag": "pag-Latn-PH",
          "pal": "pal-Phli-IR",
          "pal-Phlp": "pal-Phlp-CN",
          "pam": "pam-Latn-PH",
          "pap": "pap-Latn-AW",
          "pau": "pau-Latn-PW",
          "pbi": "pbi-Latn-ZZ",
          "pcd": "pcd-Latn-FR",
          "pcm": "pcm-Latn-NG",
          "pdc": "pdc-Latn-US",
          "pdt": "pdt-Latn-CA",
          "ped": "ped-Latn-ZZ",
          "peo": "peo-Xpeo-IR",
          "pex": "pex-Latn-ZZ",
          "pfl": "pfl-Latn-DE",
          "phl": "phl-Arab-ZZ",
          "phn": "phn-Phnx-LB",
          "pil": "pil-Latn-ZZ",
          "pip": "pip-Latn-ZZ",
          "pka": "pka-Brah-IN",
          "pko": "pko-Latn-KE",
          "pl": "pl-Latn-PL",
          "pla": "pla-Latn-ZZ",
          "pms": "pms-Latn-IT",
          "png": "png-Latn-ZZ",
          "pnn": "pnn-Latn-ZZ",
          "pnt": "pnt-Grek-GR",
          "pon": "pon-Latn-FM",
          "ppa": "ppa-Deva-IN",
          "ppo": "ppo-Latn-ZZ",
          "pra": "pra-Khar-PK",
          "prd": "prd-Arab-IR",
          "prg": "prg-Latn-001",
          "ps": "ps-Arab-AF",
          "pss": "pss-Latn-ZZ",
          "pt": "pt-Latn-BR",
          "ptp": "ptp-Latn-ZZ",
          "puu": "puu-Latn-GA",
          "pwa": "pwa-Latn-ZZ",
          "qu": "qu-Latn-PE",
          "quc": "quc-Latn-GT",
          "qug": "qug-Latn-EC",
          "rai": "rai-Latn-ZZ",
          "raj": "raj-Deva-IN",
          "rao": "rao-Latn-ZZ",
          "rcf": "rcf-Latn-RE",
          "rej": "rej-Latn-ID",
          "rel": "rel-Latn-ZZ",
          "res": "res-Latn-ZZ",
          "rgn": "rgn-Latn-IT",
          "rhg": "rhg-Rohg-MM",
          "ria": "ria-Latn-IN",
          "rif": "rif-Tfng-MA",
          "rif-NL": "rif-Latn-NL",
          "rjs": "rjs-Deva-NP",
          "rkt": "rkt-Beng-BD",
          "rm": "rm-Latn-CH",
          "rmf": "rmf-Latn-FI",
          "rmo": "rmo-Latn-CH",
          "rmt": "rmt-Arab-IR",
          "rmu": "rmu-Latn-SE",
          "rn": "rn-Latn-BI",
          "rna": "rna-Latn-ZZ",
          "rng": "rng-Latn-MZ",
          "ro": "ro-Latn-RO",
          "rob": "rob-Latn-ID",
          "rof": "rof-Latn-TZ",
          "roo": "roo-Latn-ZZ",
          "rro": "rro-Latn-ZZ",
          "rtm": "rtm-Latn-FJ",
          "ru": "ru-Cyrl-RU",
          "rue": "rue-Cyrl-UA",
          "rug": "rug-Latn-SB",
          "rw": "rw-Latn-RW",
          "rwk": "rwk-Latn-TZ",
          "rwo": "rwo-Latn-ZZ",
          "ryu": "ryu-Kana-JP",
          "sa": "sa-Deva-IN",
          "saf": "saf-Latn-GH",
          "sah": "sah-Cyrl-RU",
          "saq": "saq-Latn-KE",
          "sas": "sas-Latn-ID",
          "sat": "sat-Olck-IN",
          "sav": "sav-Latn-SN",
          "saz": "saz-Saur-IN",
          "sba": "sba-Latn-ZZ",
          "sbe": "sbe-Latn-ZZ",
          "sbp": "sbp-Latn-TZ",
          "sc": "sc-Latn-IT",
          "sck": "sck-Deva-IN",
          "scl": "scl-Arab-ZZ",
          "scn": "scn-Latn-IT",
          "sco": "sco-Latn-GB",
          "scs": "scs-Latn-CA",
          "sd": "sd-Arab-PK",
          "sd-Deva": "sd-Deva-IN",
          "sd-Khoj": "sd-Khoj-IN",
          "sd-Sind": "sd-Sind-IN",
          "sdc": "sdc-Latn-IT",
          "sdh": "sdh-Arab-IR",
          "se": "se-Latn-NO",
          "sef": "sef-Latn-CI",
          "seh": "seh-Latn-MZ",
          "sei": "sei-Latn-MX",
          "ses": "ses-Latn-ML",
          "sg": "sg-Latn-CF",
          "sga": "sga-Ogam-IE",
          "sgs": "sgs-Latn-LT",
          "sgw": "sgw-Ethi-ZZ",
          "sgz": "sgz-Latn-ZZ",
          "shi": "shi-Tfng-MA",
          "shk": "shk-Latn-ZZ",
          "shn": "shn-Mymr-MM",
          "shu": "shu-Arab-ZZ",
          "si": "si-Sinh-LK",
          "sid": "sid-Latn-ET",
          "sig": "sig-Latn-ZZ",
          "sil": "sil-Latn-ZZ",
          "sim": "sim-Latn-ZZ",
          "sjr": "sjr-Latn-ZZ",
          "sk": "sk-Latn-SK",
          "skc": "skc-Latn-ZZ",
          "skr": "skr-Arab-PK",
          "sks": "sks-Latn-ZZ",
          "sl": "sl-Latn-SI",
          "sld": "sld-Latn-ZZ",
          "sli": "sli-Latn-PL",
          "sll": "sll-Latn-ZZ",
          "sly": "sly-Latn-ID",
          "sm": "sm-Latn-WS",
          "sma": "sma-Latn-SE",
          "smj": "smj-Latn-SE",
          "smn": "smn-Latn-FI",
          "smp": "smp-Samr-IL",
          "smq": "smq-Latn-ZZ",
          "sms": "sms-Latn-FI",
          "sn": "sn-Latn-ZW",
          "snc": "snc-Latn-ZZ",
          "snk": "snk-Latn-ML",
          "snp": "snp-Latn-ZZ",
          "snx": "snx-Latn-ZZ",
          "sny": "sny-Latn-ZZ",
          "so": "so-Latn-SO",
          "sog": "sog-Sogd-UZ",
          "sok": "sok-Latn-ZZ",
          "soq": "soq-Latn-ZZ",
          "sou": "sou-Thai-TH",
          "soy": "soy-Latn-ZZ",
          "spd": "spd-Latn-ZZ",
          "spl": "spl-Latn-ZZ",
          "sps": "sps-Latn-ZZ",
          "sq": "sq-Latn-AL",
          "sr": "sr-Cyrl-RS",
          "sr-ME": "sr-Latn-ME",
          "sr-RO": "sr-Latn-RO",
          "sr-RU": "sr-Latn-RU",
          "sr-TR": "sr-Latn-TR",
          "srb": "srb-Sora-IN",
          "srn": "srn-Latn-SR",
          "srr": "srr-Latn-SN",
          "srx": "srx-Deva-IN",
          "ss": "ss-Latn-ZA",
          "ssd": "ssd-Latn-ZZ",
          "ssg": "ssg-Latn-ZZ",
          "ssy": "ssy-Latn-ER",
          "st": "st-Latn-ZA",
          "stk": "stk-Latn-ZZ",
          "stq": "stq-Latn-DE",
          "su": "su-Latn-ID",
          "sua": "sua-Latn-ZZ",
          "sue": "sue-Latn-ZZ",
          "suk": "suk-Latn-TZ",
          "sur": "sur-Latn-ZZ",
          "sus": "sus-Latn-GN",
          "sv": "sv-Latn-SE",
          "sw": "sw-Latn-TZ",
          "swb": "swb-Arab-YT",
          "swc": "swc-Latn-CD",
          "swg": "swg-Latn-DE",
          "swp": "swp-Latn-ZZ",
          "swv": "swv-Deva-IN",
          "sxn": "sxn-Latn-ID",
          "sxw": "sxw-Latn-ZZ",
          "syl": "syl-Beng-BD",
          "syr": "syr-Syrc-IQ",
          "szl": "szl-Latn-PL",
          "ta": "ta-Taml-IN",
          "taj": "taj-Deva-NP",
          "tal": "tal-Latn-ZZ",
          "tan": "tan-Latn-ZZ",
          "taq": "taq-Latn-ZZ",
          "tbc": "tbc-Latn-ZZ",
          "tbd": "tbd-Latn-ZZ",
          "tbf": "tbf-Latn-ZZ",
          "tbg": "tbg-Latn-ZZ",
          "tbo": "tbo-Latn-ZZ",
          "tbw": "tbw-Latn-PH",
          "tbz": "tbz-Latn-ZZ",
          "tci": "tci-Latn-ZZ",
          "tcy": "tcy-Knda-IN",
          "tdd": "tdd-Tale-CN",
          "tdg": "tdg-Deva-NP",
          "tdh": "tdh-Deva-NP",
          "tdu": "tdu-Latn-MY",
          "te": "te-Telu-IN",
          "ted": "ted-Latn-ZZ",
          "tem": "tem-Latn-SL",
          "teo": "teo-Latn-UG",
          "tet": "tet-Latn-TL",
          "tfi": "tfi-Latn-ZZ",
          "tg": "tg-Cyrl-TJ",
          "tg-Arab": "tg-Arab-PK",
          "tg-PK": "tg-Arab-PK",
          "tgc": "tgc-Latn-ZZ",
          "tgo": "tgo-Latn-ZZ",
          "tgu": "tgu-Latn-ZZ",
          "th": "th-Thai-TH",
          "thl": "thl-Deva-NP",
          "thq": "thq-Deva-NP",
          "thr": "thr-Deva-NP",
          "ti": "ti-Ethi-ET",
          "tif": "tif-Latn-ZZ",
          "tig": "tig-Ethi-ER",
          "tik": "tik-Latn-ZZ",
          "tim": "tim-Latn-ZZ",
          "tio": "tio-Latn-ZZ",
          "tiv": "tiv-Latn-NG",
          "tk": "tk-Latn-TM",
          "tkl": "tkl-Latn-TK",
          "tkr": "tkr-Latn-AZ",
          "tkt": "tkt-Deva-NP",
          "tl": "tl-Latn-PH",
          "tlf": "tlf-Latn-ZZ",
          "tlx": "tlx-Latn-ZZ",
          "tly": "tly-Latn-AZ",
          "tmh": "tmh-Latn-NE",
          "tmy": "tmy-Latn-ZZ",
          "tn": "tn-Latn-ZA",
          "tnh": "tnh-Latn-ZZ",
          "to": "to-Latn-TO",
          "tof": "tof-Latn-ZZ",
          "tog": "tog-Latn-MW",
          "toq": "toq-Latn-ZZ",
          "tpi": "tpi-Latn-PG",
          "tpm": "tpm-Latn-ZZ",
          "tpz": "tpz-Latn-ZZ",
          "tqo": "tqo-Latn-ZZ",
          "tr": "tr-Latn-TR",
          "tru": "tru-Latn-TR",
          "trv": "trv-Latn-TW",
          "trw": "trw-Arab-PK",
          "ts": "ts-Latn-ZA",
          "tsd": "tsd-Grek-GR",
          "tsf": "tsf-Deva-NP",
          "tsg": "tsg-Latn-PH",
          "tsj": "tsj-Tibt-BT",
          "tsw": "tsw-Latn-ZZ",
          "tt": "tt-Cyrl-RU",
          "ttd": "ttd-Latn-ZZ",
          "tte": "tte-Latn-ZZ",
          "ttj": "ttj-Latn-UG",
          "ttr": "ttr-Latn-ZZ",
          "tts": "tts-Thai-TH",
          "ttt": "ttt-Latn-AZ",
          "tuh": "tuh-Latn-ZZ",
          "tul": "tul-Latn-ZZ",
          "tum": "tum-Latn-MW",
          "tuq": "tuq-Latn-ZZ",
          "tvd": "tvd-Latn-ZZ",
          "tvl": "tvl-Latn-TV",
          "tvu": "tvu-Latn-ZZ",
          "twh": "twh-Latn-ZZ",
          "twq": "twq-Latn-NE",
          "txg": "txg-Tang-CN",
          "txo": "txo-Toto-IN",
          "ty": "ty-Latn-PF",
          "tya": "tya-Latn-ZZ",
          "tyv": "tyv-Cyrl-RU",
          "tzm": "tzm-Latn-MA",
          "ubu": "ubu-Latn-ZZ",
          "udi": "udi-Aghb-RU",
          "udm": "udm-Cyrl-RU",
          "ug": "ug-Arab-CN",
          "ug-Cyrl": "ug-Cyrl-KZ",
          "ug-KZ": "ug-Cyrl-KZ",
          "ug-MN": "ug-Cyrl-MN",
          "uga": "uga-Ugar-SY",
          "uk": "uk-Cyrl-UA",
          "uli": "uli-Latn-FM",
          "umb": "umb-Latn-AO",
          "und": "en-Latn-US",
          "und-002": "en-Latn-NG",
          "und-003": "en-Latn-US",
          "und-005": "pt-Latn-BR",
          "und-009": "en-Latn-AU",
          "und-011": "en-Latn-NG",
          "und-013": "es-Latn-MX",
          "und-014": "sw-Latn-TZ",
          "und-015": "ar-Arab-EG",
          "und-017": "sw-Latn-CD",
          "und-018": "en-Latn-ZA",
          "und-019": "en-Latn-US",
          "und-021": "en-Latn-US",
          "und-029": "es-Latn-CU",
          "und-030": "zh-Hans-CN",
          "und-034": "hi-Deva-IN",
          "und-035": "id-Latn-ID",
          "und-039": "it-Latn-IT",
          "und-053": "en-Latn-AU",
          "und-054": "en-Latn-PG",
          "und-057": "en-Latn-GU",
          "und-061": "sm-Latn-WS",
          "und-142": "zh-Hans-CN",
          "und-143": "uz-Latn-UZ",
          "und-145": "ar-Arab-SA",
          "und-150": "ru-Cyrl-RU",
          "und-151": "ru-Cyrl-RU",
          "und-154": "en-Latn-GB",
          "und-155": "de-Latn-DE",
          "und-202": "en-Latn-NG",
          "und-419": "es-Latn-419",
          "und-AD": "ca-Latn-AD",
          "und-Adlm": "ff-Adlm-GN",
          "und-AE": "ar-Arab-AE",
          "und-AF": "fa-Arab-AF",
          "und-Aghb": "udi-Aghb-RU",
          "und-Ahom": "aho-Ahom-IN",
          "und-AL": "sq-Latn-AL",
          "und-AM": "hy-Armn-AM",
          "und-AO": "pt-Latn-AO",
          "und-AQ": "und-Latn-AQ",
          "und-AR": "es-Latn-AR",
          "und-Arab": "ar-Arab-EG",
          "und-Arab-CC": "ms-Arab-CC",
          "und-Arab-CN": "ug-Arab-CN",
          "und-Arab-GB": "ks-Arab-GB",
          "und-Arab-ID": "ms-Arab-ID",
          "und-Arab-IN": "ur-Arab-IN",
          "und-Arab-KH": "cja-Arab-KH",
          "und-Arab-MM": "rhg-Arab-MM",
          "und-Arab-MN": "kk-Arab-MN",
          "und-Arab-MU": "ur-Arab-MU",
          "und-Arab-NG": "ha-Arab-NG",
          "und-Arab-PK": "ur-Arab-PK",
          "und-Arab-TG": "apd-Arab-TG",
          "und-Arab-TH": "mfa-Arab-TH",
          "und-Arab-TJ": "fa-Arab-TJ",
          "und-Arab-TR": "az-Arab-TR",
          "und-Arab-YT": "swb-Arab-YT",
          "und-Armi": "arc-Armi-IR",
          "und-Armn": "hy-Armn-AM",
          "und-AS": "sm-Latn-AS",
          "und-AT": "de-Latn-AT",
          "und-Avst": "ae-Avst-IR",
          "und-AW": "nl-Latn-AW",
          "und-AX": "sv-Latn-AX",
          "und-AZ": "az-Latn-AZ",
          "und-BA": "bs-Latn-BA",
          "und-Bali": "ban-Bali-ID",
          "und-Bamu": "bax-Bamu-CM",
          "und-Bass": "bsq-Bass-LR",
          "und-Batk": "bbc-Batk-ID",
          "und-BD": "bn-Beng-BD",
          "und-BE": "nl-Latn-BE",
          "und-Beng": "bn-Beng-BD",
          "und-BF": "fr-Latn-BF",
          "und-BG": "bg-Cyrl-BG",
          "und-BH": "ar-Arab-BH",
          "und-Bhks": "sa-Bhks-IN",
          "und-BI": "rn-Latn-BI",
          "und-BJ": "fr-Latn-BJ",
          "und-BL": "fr-Latn-BL",
          "und-BN": "ms-Latn-BN",
          "und-BO": "es-Latn-BO",
          "und-Bopo": "zh-Bopo-TW",
          "und-BQ": "pap-Latn-BQ",
          "und-BR": "pt-Latn-BR",
          "und-Brah": "pka-Brah-IN",
          "und-Brai": "fr-Brai-FR",
          "und-BT": "dz-Tibt-BT",
          "und-Bugi": "bug-Bugi-ID",
          "und-Buhd": "bku-Buhd-PH",
          "und-BV": "und-Latn-BV",
          "und-BY": "be-Cyrl-BY",
          "und-Cakm": "ccp-Cakm-BD",
          "und-Cans": "cr-Cans-CA",
          "und-Cari": "xcr-Cari-TR",
          "und-CD": "sw-Latn-CD",
          "und-CF": "fr-Latn-CF",
          "und-CG": "fr-Latn-CG",
          "und-CH": "de-Latn-CH",
          "und-Cham": "cjm-Cham-VN",
          "und-Cher": "chr-Cher-US",
          "und-Chrs": "xco-Chrs-UZ",
          "und-CI": "fr-Latn-CI",
          "und-CL": "es-Latn-CL",
          "und-CM": "fr-Latn-CM",
          "und-CN": "zh-Hans-CN",
          "und-CO": "es-Latn-CO",
          "und-Copt": "cop-Copt-EG",
          "und-CP": "und-Latn-CP",
          "und-Cpmn": "und-Cpmn-CY",
          "und-Cpmn-CY": "und-Cpmn-CY",
          "und-Cprt": "grc-Cprt-CY",
          "und-CR": "es-Latn-CR",
          "und-CU": "es-Latn-CU",
          "und-CV": "pt-Latn-CV",
          "und-CW": "pap-Latn-CW",
          "und-CY": "el-Grek-CY",
          "und-Cyrl": "ru-Cyrl-RU",
          "und-Cyrl-AL": "mk-Cyrl-AL",
          "und-Cyrl-BA": "sr-Cyrl-BA",
          "und-Cyrl-GE": "os-Cyrl-GE",
          "und-Cyrl-GR": "mk-Cyrl-GR",
          "und-Cyrl-MD": "uk-Cyrl-MD",
          "und-Cyrl-RO": "bg-Cyrl-RO",
          "und-Cyrl-SK": "uk-Cyrl-SK",
          "und-Cyrl-TR": "kbd-Cyrl-TR",
          "und-Cyrl-XK": "sr-Cyrl-XK",
          "und-CZ": "cs-Latn-CZ",
          "und-DE": "de-Latn-DE",
          "und-Deva": "hi-Deva-IN",
          "und-Deva-BT": "ne-Deva-BT",
          "und-Deva-FJ": "hif-Deva-FJ",
          "und-Deva-MU": "bho-Deva-MU",
          "und-Deva-PK": "btv-Deva-PK",
          "und-Diak": "dv-Diak-MV",
          "und-DJ": "aa-Latn-DJ",
          "und-DK": "da-Latn-DK",
          "und-DO": "es-Latn-DO",
          "und-Dogr": "doi-Dogr-IN",
          "und-Dupl": "fr-Dupl-FR",
          "und-DZ": "ar-Arab-DZ",
          "und-EA": "es-Latn-EA",
          "und-EC": "es-Latn-EC",
          "und-EE": "et-Latn-EE",
          "und-EG": "ar-Arab-EG",
          "und-Egyp": "egy-Egyp-EG",
          "und-EH": "ar-Arab-EH",
          "und-Elba": "sq-Elba-AL",
          "und-Elym": "arc-Elym-IR",
          "und-ER": "ti-Ethi-ER",
          "und-ES": "es-Latn-ES",
          "und-ET": "am-Ethi-ET",
          "und-Ethi": "am-Ethi-ET",
          "und-EU": "en-Latn-IE",
          "und-EZ": "de-Latn-EZ",
          "und-FI": "fi-Latn-FI",
          "und-FO": "fo-Latn-FO",
          "und-FR": "fr-Latn-FR",
          "und-GA": "fr-Latn-GA",
          "und-GE": "ka-Geor-GE",
          "und-Geor": "ka-Geor-GE",
          "und-GF": "fr-Latn-GF",
          "und-GH": "ak-Latn-GH",
          "und-GL": "kl-Latn-GL",
          "und-Glag": "cu-Glag-BG",
          "und-GN": "fr-Latn-GN",
          "und-Gong": "wsg-Gong-IN",
          "und-Gonm": "esg-Gonm-IN",
          "und-Goth": "got-Goth-UA",
          "und-GP": "fr-Latn-GP",
          "und-GQ": "es-Latn-GQ",
          "und-GR": "el-Grek-GR",
          "und-Gran": "sa-Gran-IN",
          "und-Grek": "el-Grek-GR",
          "und-Grek-TR": "bgx-Grek-TR",
          "und-GS": "und-Latn-GS",
          "und-GT": "es-Latn-GT",
          "und-Gujr": "gu-Gujr-IN",
          "und-Guru": "pa-Guru-IN",
          "und-GW": "pt-Latn-GW",
          "und-Hanb": "zh-Hanb-TW",
          "und-Hang": "ko-Hang-KR",
          "und-Hani": "zh-Hani-CN",
          "und-Hano": "hnn-Hano-PH",
          "und-Hans": "zh-Hans-CN",
          "und-Hant": "zh-Hant-TW",
          "und-Hebr": "he-Hebr-IL",
          "und-Hebr-CA": "yi-Hebr-CA",
          "und-Hebr-GB": "yi-Hebr-GB",
          "und-Hebr-SE": "yi-Hebr-SE",
          "und-Hebr-UA": "yi-Hebr-UA",
          "und-Hebr-US": "yi-Hebr-US",
          "und-Hira": "ja-Hira-JP",
          "und-HK": "zh-Hant-HK",
          "und-Hluw": "hlu-Hluw-TR",
          "und-HM": "und-Latn-HM",
          "und-Hmng": "hnj-Hmng-LA",
          "und-Hmnp": "hnj-Hmnp-US",
          "und-HN": "es-Latn-HN",
          "und-HR": "hr-Latn-HR",
          "und-HT": "ht-Latn-HT",
          "und-HU": "hu-Latn-HU",
          "und-Hung": "hu-Hung-HU",
          "und-IC": "es-Latn-IC",
          "und-ID": "id-Latn-ID",
          "und-IL": "he-Hebr-IL",
          "und-IN": "hi-Deva-IN",
          "und-IQ": "ar-Arab-IQ",
          "und-IR": "fa-Arab-IR",
          "und-IS": "is-Latn-IS",
          "und-IT": "it-Latn-IT",
          "und-Ital": "ett-Ital-IT",
          "und-Jamo": "ko-Jamo-KR",
          "und-Java": "jv-Java-ID",
          "und-JO": "ar-Arab-JO",
          "und-JP": "ja-Jpan-JP",
          "und-Jpan": "ja-Jpan-JP",
          "und-Kali": "eky-Kali-MM",
          "und-Kana": "ja-Kana-JP",
          "und-KE": "sw-Latn-KE",
          "und-KG": "ky-Cyrl-KG",
          "und-KH": "km-Khmr-KH",
          "und-Khar": "pra-Khar-PK",
          "und-Khmr": "km-Khmr-KH",
          "und-Khoj": "sd-Khoj-IN",
          "und-Kits": "zkt-Kits-CN",
          "und-KM": "ar-Arab-KM",
          "und-Knda": "kn-Knda-IN",
          "und-Kore": "ko-Kore-KR",
          "und-KP": "ko-Kore-KP",
          "und-KR": "ko-Kore-KR",
          "und-Kthi": "bho-Kthi-IN",
          "und-KW": "ar-Arab-KW",
          "und-KZ": "ru-Cyrl-KZ",
          "und-LA": "lo-Laoo-LA",
          "und-Lana": "nod-Lana-TH",
          "und-Laoo": "lo-Laoo-LA",
          "und-Latn-AF": "tk-Latn-AF",
          "und-Latn-AM": "ku-Latn-AM",
          "und-Latn-CN": "za-Latn-CN",
          "und-Latn-CY": "tr-Latn-CY",
          "und-Latn-DZ": "fr-Latn-DZ",
          "und-Latn-ET": "en-Latn-ET",
          "und-Latn-GE": "ku-Latn-GE",
          "und-Latn-IR": "tk-Latn-IR",
          "und-Latn-KM": "fr-Latn-KM",
          "und-Latn-MA": "fr-Latn-MA",
          "und-Latn-MK": "sq-Latn-MK",
          "und-Latn-MM": "kac-Latn-MM",
          "und-Latn-MO": "pt-Latn-MO",
          "und-Latn-MR": "fr-Latn-MR",
          "und-Latn-RU": "krl-Latn-RU",
          "und-Latn-SY": "fr-Latn-SY",
          "und-Latn-TN": "fr-Latn-TN",
          "und-Latn-TW": "trv-Latn-TW",
          "und-Latn-UA": "pl-Latn-UA",
          "und-LB": "ar-Arab-LB",
          "und-Lepc": "lep-Lepc-IN",
          "und-LI": "de-Latn-LI",
          "und-Limb": "lif-Limb-IN",
          "und-Lina": "lab-Lina-GR",
          "und-Linb": "grc-Linb-GR",
          "und-Lisu": "lis-Lisu-CN",
          "und-LK": "si-Sinh-LK",
          "und-LS": "st-Latn-LS",
          "und-LT": "lt-Latn-LT",
          "und-LU": "fr-Latn-LU",
          "und-LV": "lv-Latn-LV",
          "und-LY": "ar-Arab-LY",
          "und-Lyci": "xlc-Lyci-TR",
          "und-Lydi": "xld-Lydi-TR",
          "und-MA": "ar-Arab-MA",
          "und-Mahj": "hi-Mahj-IN",
          "und-Maka": "mak-Maka-ID",
          "und-Mand": "myz-Mand-IR",
          "und-Mani": "xmn-Mani-CN",
          "und-Marc": "bo-Marc-CN",
          "und-MC": "fr-Latn-MC",
          "und-MD": "ro-Latn-MD",
          "und-ME": "sr-Latn-ME",
          "und-Medf": "dmf-Medf-NG",
          "und-Mend": "men-Mend-SL",
          "und-Merc": "xmr-Merc-SD",
          "und-Mero": "xmr-Mero-SD",
          "und-MF": "fr-Latn-MF",
          "und-MG": "mg-Latn-MG",
          "und-MK": "mk-Cyrl-MK",
          "und-ML": "bm-Latn-ML",
          "und-Mlym": "ml-Mlym-IN",
          "und-MM": "my-Mymr-MM",
          "und-MN": "mn-Cyrl-MN",
          "und-MO": "zh-Hant-MO",
          "und-Modi": "mr-Modi-IN",
          "und-Mong": "mn-Mong-CN",
          "und-MQ": "fr-Latn-MQ",
          "und-MR": "ar-Arab-MR",
          "und-Mroo": "mro-Mroo-BD",
          "und-MT": "mt-Latn-MT",
          "und-Mtei": "mni-Mtei-IN",
          "und-MU": "mfe-Latn-MU",
          "und-Mult": "skr-Mult-PK",
          "und-MV": "dv-Thaa-MV",
          "und-MX": "es-Latn-MX",
          "und-MY": "ms-Latn-MY",
          "und-Mymr": "my-Mymr-MM",
          "und-Mymr-IN": "kht-Mymr-IN",
          "und-Mymr-TH": "mnw-Mymr-TH",
          "und-MZ": "pt-Latn-MZ",
          "und-NA": "af-Latn-NA",
          "und-Nand": "sa-Nand-IN",
          "und-Narb": "xna-Narb-SA",
          "und-Nbat": "arc-Nbat-JO",
          "und-NC": "fr-Latn-NC",
          "und-NE": "ha-Latn-NE",
          "und-Newa": "new-Newa-NP",
          "und-NI": "es-Latn-NI",
          "und-Nkoo": "man-Nkoo-GN",
          "und-NL": "nl-Latn-NL",
          "und-NO": "nb-Latn-NO",
          "und-NP": "ne-Deva-NP",
          "und-Nshu": "zhx-Nshu-CN",
          "und-Ogam": "sga-Ogam-IE",
          "und-Olck": "sat-Olck-IN",
          "und-OM": "ar-Arab-OM",
          "und-Orkh": "otk-Orkh-MN",
          "und-Orya": "or-Orya-IN",
          "und-Osge": "osa-Osge-US",
          "und-Osma": "so-Osma-SO",
          "und-Ougr": "oui-Ougr-143",
          "und-PA": "es-Latn-PA",
          "und-Palm": "arc-Palm-SY",
          "und-Pauc": "ctd-Pauc-MM",
          "und-PE": "es-Latn-PE",
          "und-Perm": "kv-Perm-RU",
          "und-PF": "fr-Latn-PF",
          "und-PG": "tpi-Latn-PG",
          "und-PH": "fil-Latn-PH",
          "und-Phag": "lzh-Phag-CN",
          "und-Phli": "pal-Phli-IR",
          "und-Phlp": "pal-Phlp-CN",
          "und-Phnx": "phn-Phnx-LB",
          "und-PK": "ur-Arab-PK",
          "und-PL": "pl-Latn-PL",
          "und-Plrd": "hmd-Plrd-CN",
          "und-PM": "fr-Latn-PM",
          "und-PR": "es-Latn-PR",
          "und-Prti": "xpr-Prti-IR",
          "und-PS": "ar-Arab-PS",
          "und-PT": "pt-Latn-PT",
          "und-PW": "pau-Latn-PW",
          "und-PY": "gn-Latn-PY",
          "und-QA": "ar-Arab-QA",
          "und-QO": "en-Latn-DG",
          "und-RE": "fr-Latn-RE",
          "und-Rjng": "rej-Rjng-ID",
          "und-RO": "ro-Latn-RO",
          "und-Rohg": "rhg-Rohg-MM",
          "und-RS": "sr-Cyrl-RS",
          "und-RU": "ru-Cyrl-RU",
          "und-Runr": "non-Runr-SE",
          "und-RW": "rw-Latn-RW",
          "und-SA": "ar-Arab-SA",
          "und-Samr": "smp-Samr-IL",
          "und-Sarb": "xsa-Sarb-YE",
          "und-Saur": "saz-Saur-IN",
          "und-SC": "fr-Latn-SC",
          "und-SD": "ar-Arab-SD",
          "und-SE": "sv-Latn-SE",
          "und-Sgnw": "ase-Sgnw-US",
          "und-Shaw": "en-Shaw-GB",
          "und-Shrd": "sa-Shrd-IN",
          "und-SI": "sl-Latn-SI",
          "und-Sidd": "sa-Sidd-IN",
          "und-Sind": "sd-Sind-IN",
          "und-Sinh": "si-Sinh-LK",
          "und-SJ": "nb-Latn-SJ",
          "und-SK": "sk-Latn-SK",
          "und-SM": "it-Latn-SM",
          "und-SN": "fr-Latn-SN",
          "und-SO": "so-Latn-SO",
          "und-Sogd": "sog-Sogd-UZ",
          "und-Sogo": "sog-Sogo-UZ",
          "und-Sora": "srb-Sora-IN",
          "und-Soyo": "cmg-Soyo-MN",
          "und-SR": "nl-Latn-SR",
          "und-ST": "pt-Latn-ST",
          "und-Sund": "su-Sund-ID",
          "und-SV": "es-Latn-SV",
          "und-SY": "ar-Arab-SY",
          "und-Sylo": "syl-Sylo-BD",
          "und-Syrc": "syr-Syrc-IQ",
          "und-Tagb": "tbw-Tagb-PH",
          "und-Takr": "doi-Takr-IN",
          "und-Tale": "tdd-Tale-CN",
          "und-Talu": "khb-Talu-CN",
          "und-Taml": "ta-Taml-IN",
          "und-Tang": "txg-Tang-CN",
          "und-Tavt": "blt-Tavt-VN",
          "und-TD": "fr-Latn-TD",
          "und-Telu": "te-Telu-IN",
          "und-TF": "fr-Latn-TF",
          "und-Tfng": "zgh-Tfng-MA",
          "und-TG": "fr-Latn-TG",
          "und-Tglg": "fil-Tglg-PH",
          "und-TH": "th-Thai-TH",
          "und-Thaa": "dv-Thaa-MV",
          "und-Thai": "th-Thai-TH",
          "und-Thai-CN": "lcp-Thai-CN",
          "und-Thai-KH": "kdt-Thai-KH",
          "und-Thai-LA": "kdt-Thai-LA",
          "und-Tibt": "bo-Tibt-CN",
          "und-Tirh": "mai-Tirh-IN",
          "und-TJ": "tg-Cyrl-TJ",
          "und-TK": "tkl-Latn-TK",
          "und-TL": "pt-Latn-TL",
          "und-TM": "tk-Latn-TM",
          "und-TN": "ar-Arab-TN",
          "und-Tnsa": "nst-Tnsa-IN",
          "und-TO": "to-Latn-TO",
          "und-Toto": "txo-Toto-IN",
          "und-TR": "tr-Latn-TR",
          "und-TV": "tvl-Latn-TV",
          "und-TW": "zh-Hant-TW",
          "und-TZ": "sw-Latn-TZ",
          "und-UA": "uk-Cyrl-UA",
          "und-UG": "sw-Latn-UG",
          "und-Ugar": "uga-Ugar-SY",
          "und-UY": "es-Latn-UY",
          "und-UZ": "uz-Latn-UZ",
          "und-VA": "it-Latn-VA",
          "und-Vaii": "vai-Vaii-LR",
          "und-VE": "es-Latn-VE",
          "und-Vith": "sq-Vith-AL",
          "und-VN": "vi-Latn-VN",
          "und-VU": "bi-Latn-VU",
          "und-Wara": "hoc-Wara-IN",
          "und-Wcho": "nnp-Wcho-IN",
          "und-WF": "fr-Latn-WF",
          "und-WS": "sm-Latn-WS",
          "und-XK": "sq-Latn-XK",
          "und-Xpeo": "peo-Xpeo-IR",
          "und-Xsux": "akk-Xsux-IQ",
          "und-YE": "ar-Arab-YE",
          "und-Yezi": "ku-Yezi-GE",
          "und-Yiii": "ii-Yiii-CN",
          "und-YT": "fr-Latn-YT",
          "und-Zanb": "cmg-Zanb-MN",
          "und-ZW": "sn-Latn-ZW",
          "unr": "unr-Beng-IN",
          "unr-Deva": "unr-Deva-NP",
          "unr-NP": "unr-Deva-NP",
          "unx": "unx-Beng-IN",
          "uok": "uok-Latn-ZZ",
          "ur": "ur-Arab-PK",
          "uri": "uri-Latn-ZZ",
          "urt": "urt-Latn-ZZ",
          "urw": "urw-Latn-ZZ",
          "usa": "usa-Latn-ZZ",
          "uth": "uth-Latn-ZZ",
          "utr": "utr-Latn-ZZ",
          "uvh": "uvh-Latn-ZZ",
          "uvl": "uvl-Latn-ZZ",
          "uz": "uz-Latn-UZ",
          "uz-AF": "uz-Arab-AF",
          "uz-Arab": "uz-Arab-AF",
          "uz-CN": "uz-Cyrl-CN",
          "vag": "vag-Latn-ZZ",
          "vai": "vai-Vaii-LR",
          "van": "van-Latn-ZZ",
          "ve": "ve-Latn-ZA",
          "vec": "vec-Latn-IT",
          "vep": "vep-Latn-RU",
          "vi": "vi-Latn-VN",
          "vic": "vic-Latn-SX",
          "viv": "viv-Latn-ZZ",
          "vls": "vls-Latn-BE",
          "vmf": "vmf-Latn-DE",
          "vmw": "vmw-Latn-MZ",
          "vo": "vo-Latn-001",
          "vot": "vot-Latn-RU",
          "vro": "vro-Latn-EE",
          "vun": "vun-Latn-TZ",
          "vut": "vut-Latn-ZZ",
          "wa": "wa-Latn-BE",
          "wae": "wae-Latn-CH",
          "waj": "waj-Latn-ZZ",
          "wal": "wal-Ethi-ET",
          "wan": "wan-Latn-ZZ",
          "war": "war-Latn-PH",
          "wbp": "wbp-Latn-AU",
          "wbq": "wbq-Telu-IN",
          "wbr": "wbr-Deva-IN",
          "wci": "wci-Latn-ZZ",
          "wer": "wer-Latn-ZZ",
          "wgi": "wgi-Latn-ZZ",
          "whg": "whg-Latn-ZZ",
          "wib": "wib-Latn-ZZ",
          "wiu": "wiu-Latn-ZZ",
          "wiv": "wiv-Latn-ZZ",
          "wja": "wja-Latn-ZZ",
          "wji": "wji-Latn-ZZ",
          "wls": "wls-Latn-WF",
          "wmo": "wmo-Latn-ZZ",
          "wnc": "wnc-Latn-ZZ",
          "wni": "wni-Arab-KM",
          "wnu": "wnu-Latn-ZZ",
          "wo": "wo-Latn-SN",
          "wob": "wob-Latn-ZZ",
          "wos": "wos-Latn-ZZ",
          "wrs": "wrs-Latn-ZZ",
          "wsg": "wsg-Gong-IN",
          "wsk": "wsk-Latn-ZZ",
          "wtm": "wtm-Deva-IN",
          "wuu": "wuu-Hans-CN",
          "wuv": "wuv-Latn-ZZ",
          "wwa": "wwa-Latn-ZZ",
          "xav": "xav-Latn-BR",
          "xbi": "xbi-Latn-ZZ",
          "xco": "xco-Chrs-UZ",
          "xcr": "xcr-Cari-TR",
          "xes": "xes-Latn-ZZ",
          "xh": "xh-Latn-ZA",
          "xla": "xla-Latn-ZZ",
          "xlc": "xlc-Lyci-TR",
          "xld": "xld-Lydi-TR",
          "xmf": "xmf-Geor-GE",
          "xmn": "xmn-Mani-CN",
          "xmr": "xmr-Merc-SD",
          "xna": "xna-Narb-SA",
          "xnr": "xnr-Deva-IN",
          "xog": "xog-Latn-UG",
          "xon": "xon-Latn-ZZ",
          "xpr": "xpr-Prti-IR",
          "xrb": "xrb-Latn-ZZ",
          "xsa": "xsa-Sarb-YE",
          "xsi": "xsi-Latn-ZZ",
          "xsm": "xsm-Latn-ZZ",
          "xsr": "xsr-Deva-NP",
          "xwe": "xwe-Latn-ZZ",
          "yam": "yam-Latn-ZZ",
          "yao": "yao-Latn-MZ",
          "yap": "yap-Latn-FM",
          "yas": "yas-Latn-ZZ",
          "yat": "yat-Latn-ZZ",
          "yav": "yav-Latn-CM",
          "yay": "yay-Latn-ZZ",
          "yaz": "yaz-Latn-ZZ",
          "yba": "yba-Latn-ZZ",
          "ybb": "ybb-Latn-CM",
          "yby": "yby-Latn-ZZ",
          "yer": "yer-Latn-ZZ",
          "ygr": "ygr-Latn-ZZ",
          "ygw": "ygw-Latn-ZZ",
          "yi": "yi-Hebr-001",
          "yko": "yko-Latn-ZZ",
          "yle": "yle-Latn-ZZ",
          "ylg": "ylg-Latn-ZZ",
          "yll": "yll-Latn-ZZ",
          "yml": "yml-Latn-ZZ",
          "yo": "yo-Latn-NG",
          "yon": "yon-Latn-ZZ",
          "yrb": "yrb-Latn-ZZ",
          "yre": "yre-Latn-ZZ",
          "yrl": "yrl-Latn-BR",
          "yss": "yss-Latn-ZZ",
          "yua": "yua-Latn-MX",
          "yue": "yue-Hant-HK",
          "yue-CN": "yue-Hans-CN",
          "yue-Hans": "yue-Hans-CN",
          "yuj": "yuj-Latn-ZZ",
          "yut": "yut-Latn-ZZ",
          "yuw": "yuw-Latn-ZZ",
          "za": "za-Latn-CN",
          "zag": "zag-Latn-SD",
          "zdj": "zdj-Arab-KM",
          "zea": "zea-Latn-NL",
          "zgh": "zgh-Tfng-MA",
          "zh": "zh-Hans-CN",
          "zh-AU": "zh-Hant-AU",
          "zh-BN": "zh-Hant-BN",
          "zh-Bopo": "zh-Bopo-TW",
          "zh-GB": "zh-Hant-GB",
          "zh-GF": "zh-Hant-GF",
          "zh-Hanb": "zh-Hanb-TW",
          "zh-Hant": "zh-Hant-TW",
          "zh-HK": "zh-Hant-HK",
          "zh-ID": "zh-Hant-ID",
          "zh-MO": "zh-Hant-MO",
          "zh-PA": "zh-Hant-PA",
          "zh-PF": "zh-Hant-PF",
          "zh-PH": "zh-Hant-PH",
          "zh-SR": "zh-Hant-SR",
          "zh-TH": "zh-Hant-TH",
          "zh-TW": "zh-Hant-TW",
          "zh-US": "zh-Hant-US",
          "zh-VN": "zh-Hant-VN",
          "zhx": "zhx-Nshu-CN",
          "zia": "zia-Latn-ZZ",
          "zkt": "zkt-Kits-CN",
          "zlm": "zlm-Latn-TG",
          "zmi": "zmi-Latn-MY",
          "zne": "zne-Latn-ZZ",
          "zu": "zu-Latn-ZA",
          "zza": "zza-Latn-TR"
        }; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.likelySubtags;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/links.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        }); // @generated
        // prettier-ignore

        exports.default = {
          "Africa/Asmera": "Africa/Nairobi",
          "Africa/Timbuktu": "Africa/Abidjan",
          "America/Argentina/ComodRivadavia": "America/Argentina/Catamarca",
          "America/Atka": "America/Adak",
          "America/Buenos_Aires": "America/Argentina/Buenos_Aires",
          "America/Catamarca": "America/Argentina/Catamarca",
          "America/Coral_Harbour": "America/Panama",
          "America/Cordoba": "America/Argentina/Cordoba",
          "America/Ensenada": "America/Tijuana",
          "America/Fort_Wayne": "America/Indiana/Indianapolis",
          "America/Godthab": "America/Nuuk",
          "America/Indianapolis": "America/Indiana/Indianapolis",
          "America/Jujuy": "America/Argentina/Jujuy",
          "America/Knox_IN": "America/Indiana/Knox",
          "America/Louisville": "America/Kentucky/Louisville",
          "America/Mendoza": "America/Argentina/Mendoza",
          "America/Montreal": "America/Toronto",
          "America/Porto_Acre": "America/Rio_Branco",
          "America/Rosario": "America/Argentina/Cordoba",
          "America/Santa_Isabel": "America/Tijuana",
          "America/Shiprock": "America/Denver",
          "America/Virgin": "America/Puerto_Rico",
          "Antarctica/South_Pole": "Pacific/Auckland",
          "Asia/Ashkhabad": "Asia/Ashgabat",
          "Asia/Calcutta": "Asia/Kolkata",
          "Asia/Chongqing": "Asia/Shanghai",
          "Asia/Chungking": "Asia/Shanghai",
          "Asia/Dacca": "Asia/Dhaka",
          "Asia/Harbin": "Asia/Shanghai",
          "Asia/Kashgar": "Asia/Urumqi",
          "Asia/Katmandu": "Asia/Kathmandu",
          "Asia/Macao": "Asia/Macau",
          "Asia/Rangoon": "Asia/Yangon",
          "Asia/Saigon": "Asia/Ho_Chi_Minh",
          "Asia/Tel_Aviv": "Asia/Jerusalem",
          "Asia/Thimbu": "Asia/Thimphu",
          "Asia/Ujung_Pandang": "Asia/Makassar",
          "Asia/Ulan_Bator": "Asia/Ulaanbaatar",
          "Atlantic/Faeroe": "Atlantic/Faroe",
          "Atlantic/Jan_Mayen": "Europe/Oslo",
          "Australia/ACT": "Australia/Sydney",
          "Australia/Canberra": "Australia/Sydney",
          "Australia/Currie": "Australia/Hobart",
          "Australia/LHI": "Australia/Lord_Howe",
          "Australia/NSW": "Australia/Sydney",
          "Australia/North": "Australia/Darwin",
          "Australia/Queensland": "Australia/Brisbane",
          "Australia/South": "Australia/Adelaide",
          "Australia/Tasmania": "Australia/Hobart",
          "Australia/Victoria": "Australia/Melbourne",
          "Australia/West": "Australia/Perth",
          "Australia/Yancowinna": "Australia/Broken_Hill",
          "Brazil/Acre": "America/Rio_Branco",
          "Brazil/DeNoronha": "America/Noronha",
          "Brazil/East": "America/Sao_Paulo",
          "Brazil/West": "America/Manaus",
          "Canada/Atlantic": "America/Halifax",
          "Canada/Central": "America/Winnipeg",
          "Canada/Eastern": "America/Toronto",
          "Canada/Mountain": "America/Edmonton",
          "Canada/Newfoundland": "America/St_Johns",
          "Canada/Pacific": "America/Vancouver",
          "Canada/Saskatchewan": "America/Regina",
          "Canada/Yukon": "America/Whitehorse",
          "Chile/Continental": "America/Santiago",
          "Chile/EasterIsland": "Pacific/Easter",
          "Cuba": "America/Havana",
          "Egypt": "Africa/Cairo",
          "Eire": "Europe/Dublin",
          "Etc/UCT": "Etc/UTC",
          "Europe/Belfast": "Europe/London",
          "Europe/Tiraspol": "Europe/Chisinau",
          "GB": "Europe/London",
          "GB-Eire": "Europe/London",
          "GMT+0": "Etc/GMT",
          "GMT-0": "Etc/GMT",
          "GMT0": "Etc/GMT",
          "Greenwich": "Etc/GMT",
          "Hongkong": "Asia/Hong_Kong",
          "Iceland": "Atlantic/Reykjavik",
          "Iran": "Asia/Tehran",
          "Israel": "Asia/Jerusalem",
          "Jamaica": "America/Jamaica",
          "Japan": "Asia/Tokyo",
          "Kwajalein": "Pacific/Kwajalein",
          "Libya": "Africa/Tripoli",
          "Mexico/BajaNorte": "America/Tijuana",
          "Mexico/BajaSur": "America/Mazatlan",
          "Mexico/General": "America/Mexico_City",
          "NZ": "Pacific/Auckland",
          "NZ-CHAT": "Pacific/Chatham",
          "Navajo": "America/Denver",
          "PRC": "Asia/Shanghai",
          "Pacific/Enderbury": "Pacific/Kanton",
          "Pacific/Johnston": "Pacific/Honolulu",
          "Pacific/Ponape": "Pacific/Pohnpei",
          "Pacific/Samoa": "Pacific/Pago_Pago",
          "Pacific/Truk": "Pacific/Chuuk",
          "Pacific/Yap": "Pacific/Chuuk",
          "Poland": "Europe/Warsaw",
          "Portugal": "Europe/Lisbon",
          "ROC": "Asia/Taipei",
          "ROK": "Asia/Seoul",
          "Singapore": "Asia/Singapore",
          "Turkey": "Europe/Istanbul",
          "UCT": "Etc/UTC",
          "US/Alaska": "America/Anchorage",
          "US/Aleutian": "America/Adak",
          "US/Arizona": "America/Phoenix",
          "US/Central": "America/Chicago",
          "US/East-Indiana": "America/Indiana/Indianapolis",
          "US/Eastern": "America/New_York",
          "US/Hawaii": "Pacific/Honolulu",
          "US/Indiana-Starke": "America/Indiana/Knox",
          "US/Michigan": "America/Detroit",
          "US/Mountain": "America/Denver",
          "US/Pacific": "America/Los_Angeles",
          "US/Samoa": "Pacific/Pago_Pago",
          "UTC": "Etc/UTC",
          "Universal": "Etc/UTC",
          "W-SU": "Europe/Moscow",
          "Zulu": "Etc/UTC"
        }; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.default;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/list.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        }); // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/list2.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        }); // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/list3.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        }); // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/list4.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        }); // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/list5.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        }); // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/list6.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        }); // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/list7.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        }); // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/LookupMatcher.js", ['./cjs-loader.mjs', './utils7.js', './BestAvailableLocale.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.LookupMatcher = void 0;

        var utils_1 = require("./utils");

        var BestAvailableLocale_1 = require("./BestAvailableLocale");
        /**
         * https://tc39.es/ecma402/#sec-lookupmatcher
         * @param availableLocales
         * @param requestedLocales
         * @param getDefaultLocale
         */


        function LookupMatcher(availableLocales, requestedLocales, getDefaultLocale) {
          var result = {
            locale: ''
          };

          for (var _i = 0, requestedLocales_1 = requestedLocales; _i < requestedLocales_1.length; _i++) {
            var locale = requestedLocales_1[_i];
            var noExtensionLocale = locale.replace(utils_1.UNICODE_EXTENSION_SEQUENCE_REGEX, '');
            var availableLocale = (0, BestAvailableLocale_1.BestAvailableLocale)(availableLocales, noExtensionLocale);

            if (availableLocale) {
              result.locale = availableLocale;

              if (locale !== noExtensionLocale) {
                result.extension = locale.slice(noExtensionLocale.length + 1, locale.length);
              }

              return result;
            }
          }

          result.locale = getDefaultLocale();
          return result;
        }

        exports.LookupMatcher = LookupMatcher; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.LookupMatcher;
      }, () => ({
        './utils': __cjsMetaURL$1,
        './BestAvailableLocale': __cjsMetaURL$2
      }));
    }
  };
});

System.register("chunks:///_virtual/LookupMatcher2.js", ['./cjs-loader.mjs', './utils10.js', './BestAvailableLocale2.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.LookupMatcher = void 0;

        var utils_1 = require("./utils");

        var BestAvailableLocale_1 = require("./BestAvailableLocale");
        /**
         * https://tc39.es/ecma402/#sec-lookupmatcher
         * @param availableLocales
         * @param requestedLocales
         * @param getDefaultLocale
         */


        function LookupMatcher(availableLocales, requestedLocales, getDefaultLocale) {
          var result = {
            locale: ''
          };

          for (var _i = 0, requestedLocales_1 = requestedLocales; _i < requestedLocales_1.length; _i++) {
            var locale = requestedLocales_1[_i];
            var noExtensionLocale = locale.replace(utils_1.UNICODE_EXTENSION_SEQUENCE_REGEX, '');
            var availableLocale = (0, BestAvailableLocale_1.BestAvailableLocale)(availableLocales, noExtensionLocale);

            if (availableLocale) {
              result.locale = availableLocale;

              if (locale !== noExtensionLocale) {
                result.extension = locale.slice(noExtensionLocale.length + 1, locale.length);
              }

              return result;
            }
          }

          result.locale = getDefaultLocale();
          return result;
        }

        exports.LookupMatcher = LookupMatcher; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.LookupMatcher;
      }, () => ({
        './utils': __cjsMetaURL$1,
        './BestAvailableLocale': __cjsMetaURL$2
      }));
    }
  };
});

System.register("chunks:///_virtual/LookupMatcher3.js", ['./cjs-loader.mjs', './utils11.js', './BestAvailableLocale3.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.LookupMatcher = void 0;

        var utils_1 = require("./utils");

        var BestAvailableLocale_1 = require("./BestAvailableLocale");
        /**
         * https://tc39.es/ecma402/#sec-lookupmatcher
         * @param availableLocales
         * @param requestedLocales
         * @param getDefaultLocale
         */


        function LookupMatcher(availableLocales, requestedLocales, getDefaultLocale) {
          var result = {
            locale: ''
          };

          for (var _i = 0, requestedLocales_1 = requestedLocales; _i < requestedLocales_1.length; _i++) {
            var locale = requestedLocales_1[_i];
            var noExtensionLocale = locale.replace(utils_1.UNICODE_EXTENSION_SEQUENCE_REGEX, '');
            var availableLocale = (0, BestAvailableLocale_1.BestAvailableLocale)(availableLocales, noExtensionLocale);

            if (availableLocale) {
              result.locale = availableLocale;

              if (locale !== noExtensionLocale) {
                result.extension = locale.slice(noExtensionLocale.length + 1, locale.length);
              }

              return result;
            }
          }

          result.locale = getDefaultLocale();
          return result;
        }

        exports.LookupMatcher = LookupMatcher; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.LookupMatcher;
      }, () => ({
        './utils': __cjsMetaURL$1,
        './BestAvailableLocale': __cjsMetaURL$2
      }));
    }
  };
});

System.register("chunks:///_virtual/LookupMatcher4.js", ['./cjs-loader.mjs', './utils12.js', './BestAvailableLocale4.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.LookupMatcher = void 0;

        var utils_1 = require("./utils");

        var BestAvailableLocale_1 = require("./BestAvailableLocale");
        /**
         * https://tc39.es/ecma402/#sec-lookupmatcher
         * @param availableLocales
         * @param requestedLocales
         * @param getDefaultLocale
         */


        function LookupMatcher(availableLocales, requestedLocales, getDefaultLocale) {
          var result = {
            locale: ''
          };

          for (var _i = 0, requestedLocales_1 = requestedLocales; _i < requestedLocales_1.length; _i++) {
            var locale = requestedLocales_1[_i];
            var noExtensionLocale = locale.replace(utils_1.UNICODE_EXTENSION_SEQUENCE_REGEX, '');
            var availableLocale = (0, BestAvailableLocale_1.BestAvailableLocale)(availableLocales, noExtensionLocale);

            if (availableLocale) {
              result.locale = availableLocale;

              if (locale !== noExtensionLocale) {
                result.extension = locale.slice(noExtensionLocale.length + 1, locale.length);
              }

              return result;
            }
          }

          result.locale = getDefaultLocale();
          return result;
        }

        exports.LookupMatcher = LookupMatcher; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.LookupMatcher;
      }, () => ({
        './utils': __cjsMetaURL$1,
        './BestAvailableLocale': __cjsMetaURL$2
      }));
    }
  };
});

System.register("chunks:///_virtual/LookupMatcher5.js", ['./cjs-loader.mjs', './utils13.js', './BestAvailableLocale5.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.LookupMatcher = void 0;

        var utils_1 = require("./utils");

        var BestAvailableLocale_1 = require("./BestAvailableLocale");
        /**
         * https://tc39.es/ecma402/#sec-lookupmatcher
         * @param availableLocales
         * @param requestedLocales
         * @param getDefaultLocale
         */


        function LookupMatcher(availableLocales, requestedLocales, getDefaultLocale) {
          var result = {
            locale: ''
          };

          for (var _i = 0, requestedLocales_1 = requestedLocales; _i < requestedLocales_1.length; _i++) {
            var locale = requestedLocales_1[_i];
            var noExtensionLocale = locale.replace(utils_1.UNICODE_EXTENSION_SEQUENCE_REGEX, '');
            var availableLocale = (0, BestAvailableLocale_1.BestAvailableLocale)(availableLocales, noExtensionLocale);

            if (availableLocale) {
              result.locale = availableLocale;

              if (locale !== noExtensionLocale) {
                result.extension = locale.slice(noExtensionLocale.length + 1, locale.length);
              }

              return result;
            }
          }

          result.locale = getDefaultLocale();
          return result;
        }

        exports.LookupMatcher = LookupMatcher; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.LookupMatcher;
      }, () => ({
        './utils': __cjsMetaURL$1,
        './BestAvailableLocale': __cjsMetaURL$2
      }));
    }
  };
});

System.register("chunks:///_virtual/LookupMatcher6.js", ['./cjs-loader.mjs', './utils14.js', './BestAvailableLocale6.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.LookupMatcher = void 0;

        var utils_1 = require("./utils");

        var BestAvailableLocale_1 = require("./BestAvailableLocale");
        /**
         * https://tc39.es/ecma402/#sec-lookupmatcher
         * @param availableLocales
         * @param requestedLocales
         * @param getDefaultLocale
         */


        function LookupMatcher(availableLocales, requestedLocales, getDefaultLocale) {
          var result = {
            locale: ''
          };

          for (var _i = 0, requestedLocales_1 = requestedLocales; _i < requestedLocales_1.length; _i++) {
            var locale = requestedLocales_1[_i];
            var noExtensionLocale = locale.replace(utils_1.UNICODE_EXTENSION_SEQUENCE_REGEX, '');
            var availableLocale = (0, BestAvailableLocale_1.BestAvailableLocale)(availableLocales, noExtensionLocale);

            if (availableLocale) {
              result.locale = availableLocale;

              if (locale !== noExtensionLocale) {
                result.extension = locale.slice(noExtensionLocale.length + 1, locale.length);
              }

              return result;
            }
          }

          result.locale = getDefaultLocale();
          return result;
        }

        exports.LookupMatcher = LookupMatcher; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.LookupMatcher;
      }, () => ({
        './utils': __cjsMetaURL$1,
        './BestAvailableLocale': __cjsMetaURL$2
      }));
    }
  };
});

System.register("chunks:///_virtual/LookupMatcher7.js", ['./cjs-loader.mjs', './utils15.js', './BestAvailableLocale7.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.LookupMatcher = void 0;

        var utils_1 = require("./utils");

        var BestAvailableLocale_1 = require("./BestAvailableLocale");
        /**
         * https://tc39.es/ecma402/#sec-lookupmatcher
         * @param availableLocales
         * @param requestedLocales
         * @param getDefaultLocale
         */


        function LookupMatcher(availableLocales, requestedLocales, getDefaultLocale) {
          var result = {
            locale: ''
          };

          for (var _i = 0, requestedLocales_1 = requestedLocales; _i < requestedLocales_1.length; _i++) {
            var locale = requestedLocales_1[_i];
            var noExtensionLocale = locale.replace(utils_1.UNICODE_EXTENSION_SEQUENCE_REGEX, '');
            var availableLocale = (0, BestAvailableLocale_1.BestAvailableLocale)(availableLocales, noExtensionLocale);

            if (availableLocale) {
              result.locale = availableLocale;

              if (locale !== noExtensionLocale) {
                result.extension = locale.slice(noExtensionLocale.length + 1, locale.length);
              }

              return result;
            }
          }

          result.locale = getDefaultLocale();
          return result;
        }

        exports.LookupMatcher = LookupMatcher; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.LookupMatcher;
      }, () => ({
        './utils': __cjsMetaURL$1,
        './BestAvailableLocale': __cjsMetaURL$2
      }));
    }
  };
});

System.register("chunks:///_virtual/LookupSupportedLocales.js", ['./cjs-loader.mjs', './utils7.js', './BestAvailableLocale.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.LookupSupportedLocales = void 0;

        var utils_1 = require("./utils");

        var BestAvailableLocale_1 = require("./BestAvailableLocale");
        /**
         * https://tc39.es/ecma402/#sec-lookupsupportedlocales
         * @param availableLocales
         * @param requestedLocales
         */


        function LookupSupportedLocales(availableLocales, requestedLocales) {
          var subset = [];

          for (var _i = 0, requestedLocales_1 = requestedLocales; _i < requestedLocales_1.length; _i++) {
            var locale = requestedLocales_1[_i];
            var noExtensionLocale = locale.replace(utils_1.UNICODE_EXTENSION_SEQUENCE_REGEX, '');
            var availableLocale = (0, BestAvailableLocale_1.BestAvailableLocale)(availableLocales, noExtensionLocale);

            if (availableLocale) {
              subset.push(availableLocale);
            }
          }

          return subset;
        }

        exports.LookupSupportedLocales = LookupSupportedLocales; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.LookupSupportedLocales;
      }, () => ({
        './utils': __cjsMetaURL$1,
        './BestAvailableLocale': __cjsMetaURL$2
      }));
    }
  };
});

System.register("chunks:///_virtual/LookupSupportedLocales2.js", ['./cjs-loader.mjs', './utils10.js', './BestAvailableLocale2.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.LookupSupportedLocales = void 0;

        var utils_1 = require("./utils");

        var BestAvailableLocale_1 = require("./BestAvailableLocale");
        /**
         * https://tc39.es/ecma402/#sec-lookupsupportedlocales
         * @param availableLocales
         * @param requestedLocales
         */


        function LookupSupportedLocales(availableLocales, requestedLocales) {
          var subset = [];

          for (var _i = 0, requestedLocales_1 = requestedLocales; _i < requestedLocales_1.length; _i++) {
            var locale = requestedLocales_1[_i];
            var noExtensionLocale = locale.replace(utils_1.UNICODE_EXTENSION_SEQUENCE_REGEX, '');
            var availableLocale = (0, BestAvailableLocale_1.BestAvailableLocale)(availableLocales, noExtensionLocale);

            if (availableLocale) {
              subset.push(availableLocale);
            }
          }

          return subset;
        }

        exports.LookupSupportedLocales = LookupSupportedLocales; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.LookupSupportedLocales;
      }, () => ({
        './utils': __cjsMetaURL$1,
        './BestAvailableLocale': __cjsMetaURL$2
      }));
    }
  };
});

System.register("chunks:///_virtual/LookupSupportedLocales3.js", ['./cjs-loader.mjs', './utils11.js', './BestAvailableLocale3.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.LookupSupportedLocales = void 0;

        var utils_1 = require("./utils");

        var BestAvailableLocale_1 = require("./BestAvailableLocale");
        /**
         * https://tc39.es/ecma402/#sec-lookupsupportedlocales
         * @param availableLocales
         * @param requestedLocales
         */


        function LookupSupportedLocales(availableLocales, requestedLocales) {
          var subset = [];

          for (var _i = 0, requestedLocales_1 = requestedLocales; _i < requestedLocales_1.length; _i++) {
            var locale = requestedLocales_1[_i];
            var noExtensionLocale = locale.replace(utils_1.UNICODE_EXTENSION_SEQUENCE_REGEX, '');
            var availableLocale = (0, BestAvailableLocale_1.BestAvailableLocale)(availableLocales, noExtensionLocale);

            if (availableLocale) {
              subset.push(availableLocale);
            }
          }

          return subset;
        }

        exports.LookupSupportedLocales = LookupSupportedLocales; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.LookupSupportedLocales;
      }, () => ({
        './utils': __cjsMetaURL$1,
        './BestAvailableLocale': __cjsMetaURL$2
      }));
    }
  };
});

System.register("chunks:///_virtual/LookupSupportedLocales4.js", ['./cjs-loader.mjs', './utils12.js', './BestAvailableLocale4.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.LookupSupportedLocales = void 0;

        var utils_1 = require("./utils");

        var BestAvailableLocale_1 = require("./BestAvailableLocale");
        /**
         * https://tc39.es/ecma402/#sec-lookupsupportedlocales
         * @param availableLocales
         * @param requestedLocales
         */


        function LookupSupportedLocales(availableLocales, requestedLocales) {
          var subset = [];

          for (var _i = 0, requestedLocales_1 = requestedLocales; _i < requestedLocales_1.length; _i++) {
            var locale = requestedLocales_1[_i];
            var noExtensionLocale = locale.replace(utils_1.UNICODE_EXTENSION_SEQUENCE_REGEX, '');
            var availableLocale = (0, BestAvailableLocale_1.BestAvailableLocale)(availableLocales, noExtensionLocale);

            if (availableLocale) {
              subset.push(availableLocale);
            }
          }

          return subset;
        }

        exports.LookupSupportedLocales = LookupSupportedLocales; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.LookupSupportedLocales;
      }, () => ({
        './utils': __cjsMetaURL$1,
        './BestAvailableLocale': __cjsMetaURL$2
      }));
    }
  };
});

System.register("chunks:///_virtual/LookupSupportedLocales5.js", ['./cjs-loader.mjs', './utils13.js', './BestAvailableLocale5.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.LookupSupportedLocales = void 0;

        var utils_1 = require("./utils");

        var BestAvailableLocale_1 = require("./BestAvailableLocale");
        /**
         * https://tc39.es/ecma402/#sec-lookupsupportedlocales
         * @param availableLocales
         * @param requestedLocales
         */


        function LookupSupportedLocales(availableLocales, requestedLocales) {
          var subset = [];

          for (var _i = 0, requestedLocales_1 = requestedLocales; _i < requestedLocales_1.length; _i++) {
            var locale = requestedLocales_1[_i];
            var noExtensionLocale = locale.replace(utils_1.UNICODE_EXTENSION_SEQUENCE_REGEX, '');
            var availableLocale = (0, BestAvailableLocale_1.BestAvailableLocale)(availableLocales, noExtensionLocale);

            if (availableLocale) {
              subset.push(availableLocale);
            }
          }

          return subset;
        }

        exports.LookupSupportedLocales = LookupSupportedLocales; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.LookupSupportedLocales;
      }, () => ({
        './utils': __cjsMetaURL$1,
        './BestAvailableLocale': __cjsMetaURL$2
      }));
    }
  };
});

System.register("chunks:///_virtual/LookupSupportedLocales6.js", ['./cjs-loader.mjs', './utils14.js', './BestAvailableLocale6.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.LookupSupportedLocales = void 0;

        var utils_1 = require("./utils");

        var BestAvailableLocale_1 = require("./BestAvailableLocale");
        /**
         * https://tc39.es/ecma402/#sec-lookupsupportedlocales
         * @param availableLocales
         * @param requestedLocales
         */


        function LookupSupportedLocales(availableLocales, requestedLocales) {
          var subset = [];

          for (var _i = 0, requestedLocales_1 = requestedLocales; _i < requestedLocales_1.length; _i++) {
            var locale = requestedLocales_1[_i];
            var noExtensionLocale = locale.replace(utils_1.UNICODE_EXTENSION_SEQUENCE_REGEX, '');
            var availableLocale = (0, BestAvailableLocale_1.BestAvailableLocale)(availableLocales, noExtensionLocale);

            if (availableLocale) {
              subset.push(availableLocale);
            }
          }

          return subset;
        }

        exports.LookupSupportedLocales = LookupSupportedLocales; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.LookupSupportedLocales;
      }, () => ({
        './utils': __cjsMetaURL$1,
        './BestAvailableLocale': __cjsMetaURL$2
      }));
    }
  };
});

System.register("chunks:///_virtual/LookupSupportedLocales7.js", ['./cjs-loader.mjs', './utils15.js', './BestAvailableLocale7.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.LookupSupportedLocales = void 0;

        var utils_1 = require("./utils");

        var BestAvailableLocale_1 = require("./BestAvailableLocale");
        /**
         * https://tc39.es/ecma402/#sec-lookupsupportedlocales
         * @param availableLocales
         * @param requestedLocales
         */


        function LookupSupportedLocales(availableLocales, requestedLocales) {
          var subset = [];

          for (var _i = 0, requestedLocales_1 = requestedLocales; _i < requestedLocales_1.length; _i++) {
            var locale = requestedLocales_1[_i];
            var noExtensionLocale = locale.replace(utils_1.UNICODE_EXTENSION_SEQUENCE_REGEX, '');
            var availableLocale = (0, BestAvailableLocale_1.BestAvailableLocale)(availableLocales, noExtensionLocale);

            if (availableLocale) {
              subset.push(availableLocale);
            }
          }

          return subset;
        }

        exports.LookupSupportedLocales = LookupSupportedLocales; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.LookupSupportedLocales;
      }, () => ({
        './utils': __cjsMetaURL$1,
        './BestAvailableLocale': __cjsMetaURL$2
      }));
    }
  };
});

System.register("chunks:///_virtual/MakePartsList.js", ['./cjs-loader.mjs', './index13.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.MakePartsList = void 0;

        var ecma402_abstract_1 = require("@formatjs/ecma402-abstract");

        function MakePartsList(pattern, unit, parts) {
          var patternParts = (0, ecma402_abstract_1.PartitionPattern)(pattern);
          var result = [];

          for (var _i = 0, patternParts_1 = patternParts; _i < patternParts_1.length; _i++) {
            var patternPart = patternParts_1[_i];

            if (patternPart.type === 'literal') {
              result.push({
                type: 'literal',
                value: patternPart.value
              });
            } else {
              (0, ecma402_abstract_1.invariant)(patternPart.type === '0', "Malformed pattern ".concat(pattern));

              for (var _a = 0, parts_1 = parts; _a < parts_1.length; _a++) {
                var part = parts_1[_a];
                result.push({
                  type: part.type,
                  value: part.value,
                  unit: unit
                });
              }
            }
          }

          return result;
        }

        exports.MakePartsList = MakePartsList; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.MakePartsList;
      }, () => ({
        '@formatjs/ecma402-abstract': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/nonIterableRest.js", [], function (exports) {
  'use strict';

  return {
    execute: function () {
      exports('default', _nonIterableRest);

      function _nonIterableRest() {
        throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
      }
    }
  };
});

System.register("chunks:///_virtual/number.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        }); // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/number2.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        }); // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/number3.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        }); // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/number4.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        }); // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/number5.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        }); // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/number6.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        }); // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/number7.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        }); // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/numbering-systems.generated.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.numberingSystemNames = void 0;
        exports.numberingSystemNames = ["adlm", "ahom", "arab", "arabext", "armn", "armnlow", "bali", "beng", "bhks", "brah", "cakm", "cham", "cyrl", "deva", "diak", "ethi", "fullwide", "geor", "gong", "gonm", "grek", "greklow", "gujr", "guru", "hanidays", "hanidec", "hans", "hansfin", "hant", "hantfin", "hebr", "hmng", "hmnp", "java", "jpan", "jpanfin", "jpanyear", "kali", "khmr", "knda", "lana", "lanatham", "laoo", "latn", "lepc", "limb", "mathbold", "mathdbl", "mathmono", "mathsanb", "mathsans", "mlym", "modi", "mong", "mroo", "mtei", "mymr", "mymrshan", "mymrtlng", "newa", "nkoo", "olck", "orya", "osma", "rohg", "roman", "romanlow", "saur", "segment", "shrd", "sind", "sinh", "sora", "sund", "takr", "talu", "taml", "tamldec", "telu", "thai", "tibt", "tirh", "tnsa", "vaii", "wara", "wcho"]; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.numberingSystemNames;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/packer.js", ['./cjs-loader.mjs', './tslib3.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.unpack = exports.pack = void 0;

        var tslib_1 = require("tslib");

        function pack(data) {
          var zoneNames = Object.keys(data.zones);
          zoneNames.sort(); // so output is stable

          return {
            zones: zoneNames.map(function (zone) {
              return (0, tslib_1.__spreadArray)([zone], data.zones[zone].map(function (_a) {
                var ts = _a[0],
                    others = _a.slice(1);

                return (0, tslib_1.__spreadArray)([ts === '' ? '' : ts.toString(36)], others, true).join(',');
              }), true).join('|');
            }),
            abbrvs: data.abbrvs.join('|'),
            offsets: data.offsets.map(function (o) {
              return o.toString(36);
            }).join('|')
          };
        }

        exports.pack = pack;

        function unpack(data) {
          var abbrvs = data.abbrvs.split('|');
          var offsets = data.offsets.split('|').map(function (n) {
            return parseInt(n, 36);
          });
          var packedZones = data.zones;
          var zones = {};

          for (var _i = 0, packedZones_1 = packedZones; _i < packedZones_1.length; _i++) {
            var d = packedZones_1[_i];

            var _a = d.split('|'),
                zone = _a[0],
                zoneData = _a.slice(1);

            zones[zone] = zoneData.map(function (z) {
              return z.split(',');
            }).map(function (_a) {
              var ts = _a[0],
                  abbrvIndex = _a[1],
                  offsetIndex = _a[2],
                  dst = _a[3];
              return [ts === '' ? -Infinity : parseInt(ts, 36), abbrvs[+abbrvIndex], offsets[+offsetIndex], dst === '1'];
            });
          }

          return zones;
        }

        exports.unpack = unpack; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.unpack;
        module.exports.pack;
      }, () => ({
        'tslib': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/parser.js", ['./cjs-loader.mjs', './tslib5.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.parseUnicodeLocaleId = exports.parseUnicodeLanguageId = exports.isUnicodeVariantSubtag = exports.isUnicodeScriptSubtag = exports.isUnicodeRegionSubtag = exports.isStructurallyValidLanguageTag = exports.isUnicodeLanguageSubtag = exports.SEPARATOR = void 0;

        var tslib_1 = require("tslib");

        var ALPHANUM_1_8 = /^[a-z0-9]{1,8}$/i;
        var ALPHANUM_2_8 = /^[a-z0-9]{2,8}$/i;
        var ALPHANUM_3_8 = /^[a-z0-9]{3,8}$/i;
        var KEY_REGEX = /^[a-z0-9][a-z]$/i;
        var TYPE_REGEX = /^[a-z0-9]{3,8}$/i;
        var ALPHA_4 = /^[a-z]{4}$/i; // alphanum-[tTuUxX]

        var OTHER_EXTENSION_TYPE = /^[0-9a-svwyz]$/i;
        var UNICODE_REGION_SUBTAG_REGEX = /^([a-z]{2}|[0-9]{3})$/i;
        var UNICODE_VARIANT_SUBTAG_REGEX = /^([a-z0-9]{5,8}|[0-9][a-z0-9]{3})$/i;
        var UNICODE_LANGUAGE_SUBTAG_REGEX = /^([a-z]{2,3}|[a-z]{5,8})$/i;
        var TKEY_REGEX = /^[a-z][0-9]$/i;
        exports.SEPARATOR = '-';

        function isUnicodeLanguageSubtag(lang) {
          return UNICODE_LANGUAGE_SUBTAG_REGEX.test(lang);
        }

        exports.isUnicodeLanguageSubtag = isUnicodeLanguageSubtag;

        function isStructurallyValidLanguageTag(tag) {
          try {
            parseUnicodeLanguageId(tag.split(exports.SEPARATOR));
          } catch (e) {
            return false;
          }

          return true;
        }

        exports.isStructurallyValidLanguageTag = isStructurallyValidLanguageTag;

        function isUnicodeRegionSubtag(region) {
          return UNICODE_REGION_SUBTAG_REGEX.test(region);
        }

        exports.isUnicodeRegionSubtag = isUnicodeRegionSubtag;

        function isUnicodeScriptSubtag(script) {
          return ALPHA_4.test(script);
        }

        exports.isUnicodeScriptSubtag = isUnicodeScriptSubtag;

        function isUnicodeVariantSubtag(variant) {
          return UNICODE_VARIANT_SUBTAG_REGEX.test(variant);
        }

        exports.isUnicodeVariantSubtag = isUnicodeVariantSubtag;

        function parseUnicodeLanguageId(chunks) {
          if (typeof chunks === 'string') {
            chunks = chunks.split(exports.SEPARATOR);
          }

          var lang = chunks.shift();

          if (!lang) {
            throw new RangeError('Missing unicode_language_subtag');
          }

          if (lang === 'root') {
            return {
              lang: 'root',
              variants: []
            };
          } // unicode_language_subtag


          if (!isUnicodeLanguageSubtag(lang)) {
            throw new RangeError('Malformed unicode_language_subtag');
          }

          var script; // unicode_script_subtag

          if (chunks.length && isUnicodeScriptSubtag(chunks[0])) {
            script = chunks.shift();
          }

          var region; // unicode_region_subtag

          if (chunks.length && isUnicodeRegionSubtag(chunks[0])) {
            region = chunks.shift();
          }

          var variants = {};

          while (chunks.length && isUnicodeVariantSubtag(chunks[0])) {
            var variant = chunks.shift();

            if (variant in variants) {
              throw new RangeError("Duplicate variant \"".concat(variant, "\""));
            }

            variants[variant] = 1;
          }

          return {
            lang: lang,
            script: script,
            region: region,
            variants: Object.keys(variants)
          };
        }

        exports.parseUnicodeLanguageId = parseUnicodeLanguageId;

        function parseUnicodeExtension(chunks) {
          var keywords = [];
          var keyword;

          while (chunks.length && (keyword = parseKeyword(chunks))) {
            keywords.push(keyword);
          }

          if (keywords.length) {
            return {
              type: 'u',
              keywords: keywords,
              attributes: []
            };
          } // Mix of attributes & keywords
          // Check for attributes first


          var attributes = [];

          while (chunks.length && ALPHANUM_3_8.test(chunks[0])) {
            attributes.push(chunks.shift());
          }

          while (chunks.length && (keyword = parseKeyword(chunks))) {
            keywords.push(keyword);
          }

          if (keywords.length || attributes.length) {
            return {
              type: 'u',
              attributes: attributes,
              keywords: keywords
            };
          }

          throw new RangeError('Malformed unicode_extension');
        }

        function parseKeyword(chunks) {
          var key;

          if (!KEY_REGEX.test(chunks[0])) {
            return;
          }

          key = chunks.shift();
          var type = [];

          while (chunks.length && TYPE_REGEX.test(chunks[0])) {
            type.push(chunks.shift());
          }

          var value = '';

          if (type.length) {
            value = type.join(exports.SEPARATOR);
          }

          return [key, value];
        }

        function parseTransformedExtension(chunks) {
          var lang;

          try {
            lang = parseUnicodeLanguageId(chunks);
          } catch (e) {// Try just parsing tfield
          }

          var fields = [];

          while (chunks.length && TKEY_REGEX.test(chunks[0])) {
            var key = chunks.shift();
            var value = [];

            while (chunks.length && ALPHANUM_3_8.test(chunks[0])) {
              value.push(chunks.shift());
            }

            if (!value.length) {
              throw new RangeError("Missing tvalue for tkey \"".concat(key, "\""));
            }

            fields.push([key, value.join(exports.SEPARATOR)]);
          }

          if (fields.length) {
            return {
              type: 't',
              fields: fields,
              lang: lang
            };
          }

          throw new RangeError('Malformed transformed_extension');
        }

        function parsePuExtension(chunks) {
          var exts = [];

          while (chunks.length && ALPHANUM_1_8.test(chunks[0])) {
            exts.push(chunks.shift());
          }

          if (exts.length) {
            return {
              type: 'x',
              value: exts.join(exports.SEPARATOR)
            };
          }

          throw new RangeError('Malformed private_use_extension');
        }

        function parseOtherExtensionValue(chunks) {
          var exts = [];

          while (chunks.length && ALPHANUM_2_8.test(chunks[0])) {
            exts.push(chunks.shift());
          }

          if (exts.length) {
            return exts.join(exports.SEPARATOR);
          }

          return '';
        }

        function parseExtensions(chunks) {
          if (!chunks.length) {
            return {
              extensions: []
            };
          }

          var extensions = [];
          var unicodeExtension;
          var transformedExtension;
          var puExtension;
          var otherExtensionMap = {};

          do {
            var type = chunks.shift();

            switch (type) {
              case 'u':
              case 'U':
                if (unicodeExtension) {
                  throw new RangeError('There can only be 1 -u- extension');
                }

                unicodeExtension = parseUnicodeExtension(chunks);
                extensions.push(unicodeExtension);
                break;

              case 't':
              case 'T':
                if (transformedExtension) {
                  throw new RangeError('There can only be 1 -t- extension');
                }

                transformedExtension = parseTransformedExtension(chunks);
                extensions.push(transformedExtension);
                break;

              case 'x':
              case 'X':
                if (puExtension) {
                  throw new RangeError('There can only be 1 -x- extension');
                }

                puExtension = parsePuExtension(chunks);
                extensions.push(puExtension);
                break;

              default:
                if (!OTHER_EXTENSION_TYPE.test(type)) {
                  throw new RangeError('Malformed extension type');
                }

                if (type in otherExtensionMap) {
                  throw new RangeError("There can only be 1 -".concat(type, "- extension"));
                }

                var extension = {
                  type: type,
                  value: parseOtherExtensionValue(chunks)
                };
                otherExtensionMap[extension.type] = extension;
                extensions.push(extension);
                break;
            }
          } while (chunks.length);

          return {
            extensions: extensions
          };
        }

        function parseUnicodeLocaleId(locale) {
          var chunks = locale.split(exports.SEPARATOR);
          var lang = parseUnicodeLanguageId(chunks);
          return (0, tslib_1.__assign)({
            lang: lang
          }, parseExtensions(chunks));
        }

        exports.parseUnicodeLocaleId = parseUnicodeLocaleId; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.parseUnicodeLocaleId;
        module.exports.parseUnicodeLanguageId;
        module.exports.isUnicodeVariantSubtag;
        module.exports.isUnicodeScriptSubtag;
        module.exports.isUnicodeRegionSubtag;
        module.exports.isStructurallyValidLanguageTag;
        module.exports.isUnicodeLanguageSubtag;
        module.exports.SEPARATOR;
      }, () => ({
        'tslib': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/PartitionDateTimePattern.js", ['./cjs-loader.mjs', './index16.js', './FormatDateTimePattern.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.PartitionDateTimePattern = void 0;

        var ecma402_abstract_1 = require("@formatjs/ecma402-abstract");

        var FormatDateTimePattern_1 = require("./FormatDateTimePattern");
        /**
         * https://tc39.es/ecma402/#sec-partitiondatetimepattern
         * @param dtf
         * @param x
         */


        function PartitionDateTimePattern(dtf, x, implDetails) {
          x = (0, ecma402_abstract_1.TimeClip)(x);

          if (isNaN(x)) {
            throw new RangeError('invalid time');
          }
          /** IMPL START */


          var getInternalSlots = implDetails.getInternalSlots;
          var internalSlots = getInternalSlots(dtf);
          /** IMPL END */

          var pattern = internalSlots.pattern;
          return (0, FormatDateTimePattern_1.FormatDateTimePattern)(dtf, (0, ecma402_abstract_1.PartitionPattern)(pattern), x, implDetails);
        }

        exports.PartitionDateTimePattern = PartitionDateTimePattern; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.PartitionDateTimePattern;
      }, () => ({
        '@formatjs/ecma402-abstract': __cjsMetaURL$1,
        './FormatDateTimePattern': __cjsMetaURL$2
      }));
    }
  };
});

System.register("chunks:///_virtual/PartitionDateTimeRangePattern.js", ['./cjs-loader.mjs', './index16.js', './ToLocalTime.js', './FormatDateTimePattern.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.PartitionDateTimeRangePattern = void 0;

        var ecma402_abstract_1 = require("@formatjs/ecma402-abstract");

        var ToLocalTime_1 = require("./ToLocalTime");

        var FormatDateTimePattern_1 = require("./FormatDateTimePattern");

        var TABLE_2_FIELDS = ['era', 'year', 'month', 'day', 'dayPeriod', 'ampm', 'hour', 'minute', 'second', 'fractionalSecondDigits'];

        function PartitionDateTimeRangePattern(dtf, x, y, implDetails) {
          x = (0, ecma402_abstract_1.TimeClip)(x);

          if (isNaN(x)) {
            throw new RangeError('Invalid start time');
          }

          y = (0, ecma402_abstract_1.TimeClip)(y);

          if (isNaN(y)) {
            throw new RangeError('Invalid end time');
          }
          /** IMPL START */


          var getInternalSlots = implDetails.getInternalSlots,
              tzData = implDetails.tzData;
          var internalSlots = getInternalSlots(dtf);
          /** IMPL END */

          var tm1 = (0, ToLocalTime_1.ToLocalTime)(x, // @ts-ignore
          internalSlots.calendar, internalSlots.timeZone, {
            tzData: tzData
          });
          var tm2 = (0, ToLocalTime_1.ToLocalTime)(y, // @ts-ignore
          internalSlots.calendar, internalSlots.timeZone, {
            tzData: tzData
          });
          var pattern = internalSlots.pattern,
              rangePatterns = internalSlots.rangePatterns;
          var rangePattern;
          var dateFieldsPracticallyEqual = true;
          var patternContainsLargerDateField = false;

          for (var _i = 0, TABLE_2_FIELDS_1 = TABLE_2_FIELDS; _i < TABLE_2_FIELDS_1.length; _i++) {
            var fieldName = TABLE_2_FIELDS_1[_i];

            if (dateFieldsPracticallyEqual && !patternContainsLargerDateField) {
              var rp = fieldName in rangePatterns ? rangePatterns[fieldName] : undefined;

              if (rangePattern !== undefined && rp === undefined) {
                patternContainsLargerDateField = true;
              } else {
                rangePattern = rp;

                if (fieldName === 'ampm') {
                  var v1 = tm1.hour;
                  var v2 = tm2.hour;

                  if (v1 > 11 && v2 < 11 || v1 < 11 && v2 > 11) {
                    dateFieldsPracticallyEqual = false;
                  }
                } else if (fieldName === 'dayPeriod') ;else if (fieldName === 'fractionalSecondDigits') {
                  var fractionalSecondDigits = internalSlots.fractionalSecondDigits;

                  if (fractionalSecondDigits === undefined) {
                    fractionalSecondDigits = 3;
                  }

                  var v1 = Math.floor(tm1.millisecond * Math.pow(10, fractionalSecondDigits - 3));
                  var v2 = Math.floor(tm2.millisecond * Math.pow(10, fractionalSecondDigits - 3));

                  if (!(0, ecma402_abstract_1.SameValue)(v1, v2)) {
                    dateFieldsPracticallyEqual = false;
                  }
                } else {
                  var v1 = tm1[fieldName];
                  var v2 = tm2[fieldName];

                  if (!(0, ecma402_abstract_1.SameValue)(v1, v2)) {
                    dateFieldsPracticallyEqual = false;
                  }
                }
              }
            }
          }

          if (dateFieldsPracticallyEqual) {
            var result_2 = (0, FormatDateTimePattern_1.FormatDateTimePattern)(dtf, (0, ecma402_abstract_1.PartitionPattern)(pattern), x, implDetails);

            for (var _a = 0, result_1 = result_2; _a < result_1.length; _a++) {
              var r = result_1[_a];
              r.source = ecma402_abstract_1.RangePatternType.shared;
            }

            return result_2;
          }

          var result = [];

          if (rangePattern === undefined) {
            rangePattern = rangePatterns.default;
            /** IMPL DETAILS */
            // Now we have to replace {0} & {1} with actual pattern

            for (var _b = 0, _c = rangePattern.patternParts; _b < _c.length; _b++) {
              var patternPart = _c[_b];

              if (patternPart.pattern === '{0}' || patternPart.pattern === '{1}') {
                patternPart.pattern = pattern;
              }
            }
          }

          for (var _d = 0, _e = rangePattern.patternParts; _d < _e.length; _d++) {
            var rangePatternPart = _e[_d];
            var source = rangePatternPart.source,
                pattern_1 = rangePatternPart.pattern;
            var z = void 0;

            if (source === ecma402_abstract_1.RangePatternType.startRange || source === ecma402_abstract_1.RangePatternType.shared) {
              z = x;
            } else {
              z = y;
            }

            var patternParts = (0, ecma402_abstract_1.PartitionPattern)(pattern_1);
            var partResult = (0, FormatDateTimePattern_1.FormatDateTimePattern)(dtf, patternParts, z, implDetails);

            for (var _f = 0, partResult_1 = partResult; _f < partResult_1.length; _f++) {
              var r = partResult_1[_f];
              r.source = source;
            }

            result = result.concat(partResult);
          }

          return result;
        }

        exports.PartitionDateTimeRangePattern = PartitionDateTimeRangePattern; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.PartitionDateTimeRangePattern;
      }, () => ({
        '@formatjs/ecma402-abstract': __cjsMetaURL$1,
        './ToLocalTime': __cjsMetaURL$2,
        './FormatDateTimePattern': __cjsMetaURL$3
      }));
    }
  };
});

System.register("chunks:///_virtual/PartitionNumberPattern.js", ['./cjs-loader.mjs', './tslib.js', './FormatNumericToString.js', './262.js', './ComputeExponent.js', './format_to_parts.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3, __cjsMetaURL$4, __cjsMetaURL$5;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$4 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$5 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.PartitionNumberPattern = void 0;

        var tslib_1 = require("tslib");

        var FormatNumericToString_1 = require("./FormatNumericToString");

        var _262_1 = require("../262");

        var ComputeExponent_1 = require("./ComputeExponent");

        var format_to_parts_1 = (0, tslib_1.__importDefault)(require("./format_to_parts"));
        /**
         * https://tc39.es/ecma402/#sec-formatnumberstring
         */

        function PartitionNumberPattern(numberFormat, x, _a) {
          var _b;

          var getInternalSlots = _a.getInternalSlots;
          var internalSlots = getInternalSlots(numberFormat);
          var pl = internalSlots.pl,
              dataLocaleData = internalSlots.dataLocaleData,
              numberingSystem = internalSlots.numberingSystem;
          var symbols = dataLocaleData.numbers.symbols[numberingSystem] || dataLocaleData.numbers.symbols[dataLocaleData.numbers.nu[0]];
          var magnitude = 0;
          var exponent = 0;
          var n;

          if (isNaN(x)) {
            n = symbols.nan;
          } else if (!isFinite(x)) {
            n = symbols.infinity;
          } else {
            if (internalSlots.style === 'percent') {
              x *= 100;
            }

            _b = (0, ComputeExponent_1.ComputeExponent)(numberFormat, x, {
              getInternalSlots: getInternalSlots
            }), exponent = _b[0], magnitude = _b[1]; // Preserve more precision by doing multiplication when exponent is negative.

            x = exponent < 0 ? x * Math.pow(10, -exponent) : x / Math.pow(10, exponent);
            var formatNumberResult = (0, FormatNumericToString_1.FormatNumericToString)(internalSlots, x);
            n = formatNumberResult.formattedString;
            x = formatNumberResult.roundedNumber;
          } // Based on https://tc39.es/ecma402/#sec-getnumberformatpattern
          // We need to do this before `x` is rounded.


          var sign;
          var signDisplay = internalSlots.signDisplay;

          switch (signDisplay) {
            case 'never':
              sign = 0;
              break;

            case 'auto':
              if ((0, _262_1.SameValue)(x, 0) || x > 0 || isNaN(x)) {
                sign = 0;
              } else {
                sign = -1;
              }

              break;

            case 'always':
              if ((0, _262_1.SameValue)(x, 0) || x > 0 || isNaN(x)) {
                sign = 1;
              } else {
                sign = -1;
              }

              break;

            default:
              // x === 0 -> x is 0 or x is -0
              if (x === 0 || isNaN(x)) {
                sign = 0;
              } else if (x > 0) {
                sign = 1;
              } else {
                sign = -1;
              }

          }

          return (0, format_to_parts_1.default)({
            roundedNumber: x,
            formattedString: n,
            exponent: exponent,
            magnitude: magnitude,
            sign: sign
          }, internalSlots.dataLocaleData, pl, internalSlots);
        }

        exports.PartitionNumberPattern = PartitionNumberPattern; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.PartitionNumberPattern;
      }, () => ({
        'tslib': __cjsMetaURL$1,
        './FormatNumericToString': __cjsMetaURL$2,
        '../262': __cjsMetaURL$3,
        './ComputeExponent': __cjsMetaURL$4,
        './format_to_parts': __cjsMetaURL$5
      }));
    }
  };
});

System.register("chunks:///_virtual/PartitionNumberPattern2.js", ['./cjs-loader.mjs', './tslib2.js', './FormatNumericToString2.js', './2622.js', './ComputeExponent2.js', './format_to_parts2.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3, __cjsMetaURL$4, __cjsMetaURL$5;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$4 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$5 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.PartitionNumberPattern = void 0;

        var tslib_1 = require("tslib");

        var FormatNumericToString_1 = require("./FormatNumericToString");

        var _262_1 = require("../262");

        var ComputeExponent_1 = require("./ComputeExponent");

        var format_to_parts_1 = (0, tslib_1.__importDefault)(require("./format_to_parts"));
        /**
         * https://tc39.es/ecma402/#sec-formatnumberstring
         */

        function PartitionNumberPattern(numberFormat, x, _a) {
          var _b;

          var getInternalSlots = _a.getInternalSlots;
          var internalSlots = getInternalSlots(numberFormat);
          var pl = internalSlots.pl,
              dataLocaleData = internalSlots.dataLocaleData,
              numberingSystem = internalSlots.numberingSystem;
          var symbols = dataLocaleData.numbers.symbols[numberingSystem] || dataLocaleData.numbers.symbols[dataLocaleData.numbers.nu[0]];
          var magnitude = 0;
          var exponent = 0;
          var n;

          if (isNaN(x)) {
            n = symbols.nan;
          } else if (!isFinite(x)) {
            n = symbols.infinity;
          } else {
            if (internalSlots.style === 'percent') {
              x *= 100;
            }

            _b = (0, ComputeExponent_1.ComputeExponent)(numberFormat, x, {
              getInternalSlots: getInternalSlots
            }), exponent = _b[0], magnitude = _b[1]; // Preserve more precision by doing multiplication when exponent is negative.

            x = exponent < 0 ? x * Math.pow(10, -exponent) : x / Math.pow(10, exponent);
            var formatNumberResult = (0, FormatNumericToString_1.FormatNumericToString)(internalSlots, x);
            n = formatNumberResult.formattedString;
            x = formatNumberResult.roundedNumber;
          } // Based on https://tc39.es/ecma402/#sec-getnumberformatpattern
          // We need to do this before `x` is rounded.


          var sign;
          var signDisplay = internalSlots.signDisplay;

          switch (signDisplay) {
            case 'never':
              sign = 0;
              break;

            case 'auto':
              if ((0, _262_1.SameValue)(x, 0) || x > 0 || isNaN(x)) {
                sign = 0;
              } else {
                sign = -1;
              }

              break;

            case 'always':
              if ((0, _262_1.SameValue)(x, 0) || x > 0 || isNaN(x)) {
                sign = 1;
              } else {
                sign = -1;
              }

              break;

            default:
              // x === 0 -> x is 0 or x is -0
              if (x === 0 || isNaN(x)) {
                sign = 0;
              } else if (x > 0) {
                sign = 1;
              } else {
                sign = -1;
              }

          }

          return (0, format_to_parts_1.default)({
            roundedNumber: x,
            formattedString: n,
            exponent: exponent,
            magnitude: magnitude,
            sign: sign
          }, internalSlots.dataLocaleData, pl, internalSlots);
        }

        exports.PartitionNumberPattern = PartitionNumberPattern; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.PartitionNumberPattern;
      }, () => ({
        'tslib': __cjsMetaURL$1,
        './FormatNumericToString': __cjsMetaURL$2,
        '../262': __cjsMetaURL$3,
        './ComputeExponent': __cjsMetaURL$4,
        './format_to_parts': __cjsMetaURL$5
      }));
    }
  };
});

System.register("chunks:///_virtual/PartitionNumberPattern3.js", ['./cjs-loader.mjs', './tslib6.js', './FormatNumericToString3.js', './2623.js', './ComputeExponent3.js', './format_to_parts3.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3, __cjsMetaURL$4, __cjsMetaURL$5;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$4 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$5 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.PartitionNumberPattern = void 0;

        var tslib_1 = require("tslib");

        var FormatNumericToString_1 = require("./FormatNumericToString");

        var _262_1 = require("../262");

        var ComputeExponent_1 = require("./ComputeExponent");

        var format_to_parts_1 = (0, tslib_1.__importDefault)(require("./format_to_parts"));
        /**
         * https://tc39.es/ecma402/#sec-formatnumberstring
         */

        function PartitionNumberPattern(numberFormat, x, _a) {
          var _b;

          var getInternalSlots = _a.getInternalSlots;
          var internalSlots = getInternalSlots(numberFormat);
          var pl = internalSlots.pl,
              dataLocaleData = internalSlots.dataLocaleData,
              numberingSystem = internalSlots.numberingSystem;
          var symbols = dataLocaleData.numbers.symbols[numberingSystem] || dataLocaleData.numbers.symbols[dataLocaleData.numbers.nu[0]];
          var magnitude = 0;
          var exponent = 0;
          var n;

          if (isNaN(x)) {
            n = symbols.nan;
          } else if (!isFinite(x)) {
            n = symbols.infinity;
          } else {
            if (internalSlots.style === 'percent') {
              x *= 100;
            }

            _b = (0, ComputeExponent_1.ComputeExponent)(numberFormat, x, {
              getInternalSlots: getInternalSlots
            }), exponent = _b[0], magnitude = _b[1]; // Preserve more precision by doing multiplication when exponent is negative.

            x = exponent < 0 ? x * Math.pow(10, -exponent) : x / Math.pow(10, exponent);
            var formatNumberResult = (0, FormatNumericToString_1.FormatNumericToString)(internalSlots, x);
            n = formatNumberResult.formattedString;
            x = formatNumberResult.roundedNumber;
          } // Based on https://tc39.es/ecma402/#sec-getnumberformatpattern
          // We need to do this before `x` is rounded.


          var sign;
          var signDisplay = internalSlots.signDisplay;

          switch (signDisplay) {
            case 'never':
              sign = 0;
              break;

            case 'auto':
              if ((0, _262_1.SameValue)(x, 0) || x > 0 || isNaN(x)) {
                sign = 0;
              } else {
                sign = -1;
              }

              break;

            case 'always':
              if ((0, _262_1.SameValue)(x, 0) || x > 0 || isNaN(x)) {
                sign = 1;
              } else {
                sign = -1;
              }

              break;

            default:
              // x === 0 -> x is 0 or x is -0
              if (x === 0 || isNaN(x)) {
                sign = 0;
              } else if (x > 0) {
                sign = 1;
              } else {
                sign = -1;
              }

          }

          return (0, format_to_parts_1.default)({
            roundedNumber: x,
            formattedString: n,
            exponent: exponent,
            magnitude: magnitude,
            sign: sign
          }, internalSlots.dataLocaleData, pl, internalSlots);
        }

        exports.PartitionNumberPattern = PartitionNumberPattern; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.PartitionNumberPattern;
      }, () => ({
        'tslib': __cjsMetaURL$1,
        './FormatNumericToString': __cjsMetaURL$2,
        '../262': __cjsMetaURL$3,
        './ComputeExponent': __cjsMetaURL$4,
        './format_to_parts': __cjsMetaURL$5
      }));
    }
  };
});

System.register("chunks:///_virtual/PartitionNumberPattern4.js", ['./cjs-loader.mjs', './tslib7.js', './FormatNumericToString4.js', './2624.js', './ComputeExponent4.js', './format_to_parts4.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3, __cjsMetaURL$4, __cjsMetaURL$5;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$4 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$5 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.PartitionNumberPattern = void 0;

        var tslib_1 = require("tslib");

        var FormatNumericToString_1 = require("./FormatNumericToString");

        var _262_1 = require("../262");

        var ComputeExponent_1 = require("./ComputeExponent");

        var format_to_parts_1 = (0, tslib_1.__importDefault)(require("./format_to_parts"));
        /**
         * https://tc39.es/ecma402/#sec-formatnumberstring
         */

        function PartitionNumberPattern(numberFormat, x, _a) {
          var _b;

          var getInternalSlots = _a.getInternalSlots;
          var internalSlots = getInternalSlots(numberFormat);
          var pl = internalSlots.pl,
              dataLocaleData = internalSlots.dataLocaleData,
              numberingSystem = internalSlots.numberingSystem;
          var symbols = dataLocaleData.numbers.symbols[numberingSystem] || dataLocaleData.numbers.symbols[dataLocaleData.numbers.nu[0]];
          var magnitude = 0;
          var exponent = 0;
          var n;

          if (isNaN(x)) {
            n = symbols.nan;
          } else if (!isFinite(x)) {
            n = symbols.infinity;
          } else {
            if (internalSlots.style === 'percent') {
              x *= 100;
            }

            _b = (0, ComputeExponent_1.ComputeExponent)(numberFormat, x, {
              getInternalSlots: getInternalSlots
            }), exponent = _b[0], magnitude = _b[1]; // Preserve more precision by doing multiplication when exponent is negative.

            x = exponent < 0 ? x * Math.pow(10, -exponent) : x / Math.pow(10, exponent);
            var formatNumberResult = (0, FormatNumericToString_1.FormatNumericToString)(internalSlots, x);
            n = formatNumberResult.formattedString;
            x = formatNumberResult.roundedNumber;
          } // Based on https://tc39.es/ecma402/#sec-getnumberformatpattern
          // We need to do this before `x` is rounded.


          var sign;
          var signDisplay = internalSlots.signDisplay;

          switch (signDisplay) {
            case 'never':
              sign = 0;
              break;

            case 'auto':
              if ((0, _262_1.SameValue)(x, 0) || x > 0 || isNaN(x)) {
                sign = 0;
              } else {
                sign = -1;
              }

              break;

            case 'always':
              if ((0, _262_1.SameValue)(x, 0) || x > 0 || isNaN(x)) {
                sign = 1;
              } else {
                sign = -1;
              }

              break;

            default:
              // x === 0 -> x is 0 or x is -0
              if (x === 0 || isNaN(x)) {
                sign = 0;
              } else if (x > 0) {
                sign = 1;
              } else {
                sign = -1;
              }

          }

          return (0, format_to_parts_1.default)({
            roundedNumber: x,
            formattedString: n,
            exponent: exponent,
            magnitude: magnitude,
            sign: sign
          }, internalSlots.dataLocaleData, pl, internalSlots);
        }

        exports.PartitionNumberPattern = PartitionNumberPattern; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.PartitionNumberPattern;
      }, () => ({
        'tslib': __cjsMetaURL$1,
        './FormatNumericToString': __cjsMetaURL$2,
        '../262': __cjsMetaURL$3,
        './ComputeExponent': __cjsMetaURL$4,
        './format_to_parts': __cjsMetaURL$5
      }));
    }
  };
});

System.register("chunks:///_virtual/PartitionNumberPattern5.js", ['./cjs-loader.mjs', './tslib9.js', './FormatNumericToString5.js', './2625.js', './ComputeExponent5.js', './format_to_parts5.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3, __cjsMetaURL$4, __cjsMetaURL$5;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$4 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$5 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.PartitionNumberPattern = void 0;

        var tslib_1 = require("tslib");

        var FormatNumericToString_1 = require("./FormatNumericToString");

        var _262_1 = require("../262");

        var ComputeExponent_1 = require("./ComputeExponent");

        var format_to_parts_1 = (0, tslib_1.__importDefault)(require("./format_to_parts"));
        /**
         * https://tc39.es/ecma402/#sec-formatnumberstring
         */

        function PartitionNumberPattern(numberFormat, x, _a) {
          var _b;

          var getInternalSlots = _a.getInternalSlots;
          var internalSlots = getInternalSlots(numberFormat);
          var pl = internalSlots.pl,
              dataLocaleData = internalSlots.dataLocaleData,
              numberingSystem = internalSlots.numberingSystem;
          var symbols = dataLocaleData.numbers.symbols[numberingSystem] || dataLocaleData.numbers.symbols[dataLocaleData.numbers.nu[0]];
          var magnitude = 0;
          var exponent = 0;
          var n;

          if (isNaN(x)) {
            n = symbols.nan;
          } else if (!isFinite(x)) {
            n = symbols.infinity;
          } else {
            if (internalSlots.style === 'percent') {
              x *= 100;
            }

            _b = (0, ComputeExponent_1.ComputeExponent)(numberFormat, x, {
              getInternalSlots: getInternalSlots
            }), exponent = _b[0], magnitude = _b[1]; // Preserve more precision by doing multiplication when exponent is negative.

            x = exponent < 0 ? x * Math.pow(10, -exponent) : x / Math.pow(10, exponent);
            var formatNumberResult = (0, FormatNumericToString_1.FormatNumericToString)(internalSlots, x);
            n = formatNumberResult.formattedString;
            x = formatNumberResult.roundedNumber;
          } // Based on https://tc39.es/ecma402/#sec-getnumberformatpattern
          // We need to do this before `x` is rounded.


          var sign;
          var signDisplay = internalSlots.signDisplay;

          switch (signDisplay) {
            case 'never':
              sign = 0;
              break;

            case 'auto':
              if ((0, _262_1.SameValue)(x, 0) || x > 0 || isNaN(x)) {
                sign = 0;
              } else {
                sign = -1;
              }

              break;

            case 'always':
              if ((0, _262_1.SameValue)(x, 0) || x > 0 || isNaN(x)) {
                sign = 1;
              } else {
                sign = -1;
              }

              break;

            default:
              // x === 0 -> x is 0 or x is -0
              if (x === 0 || isNaN(x)) {
                sign = 0;
              } else if (x > 0) {
                sign = 1;
              } else {
                sign = -1;
              }

          }

          return (0, format_to_parts_1.default)({
            roundedNumber: x,
            formattedString: n,
            exponent: exponent,
            magnitude: magnitude,
            sign: sign
          }, internalSlots.dataLocaleData, pl, internalSlots);
        }

        exports.PartitionNumberPattern = PartitionNumberPattern; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.PartitionNumberPattern;
      }, () => ({
        'tslib': __cjsMetaURL$1,
        './FormatNumericToString': __cjsMetaURL$2,
        '../262': __cjsMetaURL$3,
        './ComputeExponent': __cjsMetaURL$4,
        './format_to_parts': __cjsMetaURL$5
      }));
    }
  };
});

System.register("chunks:///_virtual/PartitionNumberPattern6.js", ['./cjs-loader.mjs', './tslib3.js', './FormatNumericToString6.js', './2626.js', './ComputeExponent6.js', './format_to_parts6.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3, __cjsMetaURL$4, __cjsMetaURL$5;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$4 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$5 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.PartitionNumberPattern = void 0;

        var tslib_1 = require("tslib");

        var FormatNumericToString_1 = require("./FormatNumericToString");

        var _262_1 = require("../262");

        var ComputeExponent_1 = require("./ComputeExponent");

        var format_to_parts_1 = (0, tslib_1.__importDefault)(require("./format_to_parts"));
        /**
         * https://tc39.es/ecma402/#sec-formatnumberstring
         */

        function PartitionNumberPattern(numberFormat, x, _a) {
          var _b;

          var getInternalSlots = _a.getInternalSlots;
          var internalSlots = getInternalSlots(numberFormat);
          var pl = internalSlots.pl,
              dataLocaleData = internalSlots.dataLocaleData,
              numberingSystem = internalSlots.numberingSystem;
          var symbols = dataLocaleData.numbers.symbols[numberingSystem] || dataLocaleData.numbers.symbols[dataLocaleData.numbers.nu[0]];
          var magnitude = 0;
          var exponent = 0;
          var n;

          if (isNaN(x)) {
            n = symbols.nan;
          } else if (!isFinite(x)) {
            n = symbols.infinity;
          } else {
            if (internalSlots.style === 'percent') {
              x *= 100;
            }

            _b = (0, ComputeExponent_1.ComputeExponent)(numberFormat, x, {
              getInternalSlots: getInternalSlots
            }), exponent = _b[0], magnitude = _b[1]; // Preserve more precision by doing multiplication when exponent is negative.

            x = exponent < 0 ? x * Math.pow(10, -exponent) : x / Math.pow(10, exponent);
            var formatNumberResult = (0, FormatNumericToString_1.FormatNumericToString)(internalSlots, x);
            n = formatNumberResult.formattedString;
            x = formatNumberResult.roundedNumber;
          } // Based on https://tc39.es/ecma402/#sec-getnumberformatpattern
          // We need to do this before `x` is rounded.


          var sign;
          var signDisplay = internalSlots.signDisplay;

          switch (signDisplay) {
            case 'never':
              sign = 0;
              break;

            case 'auto':
              if ((0, _262_1.SameValue)(x, 0) || x > 0 || isNaN(x)) {
                sign = 0;
              } else {
                sign = -1;
              }

              break;

            case 'always':
              if ((0, _262_1.SameValue)(x, 0) || x > 0 || isNaN(x)) {
                sign = 1;
              } else {
                sign = -1;
              }

              break;

            default:
              // x === 0 -> x is 0 or x is -0
              if (x === 0 || isNaN(x)) {
                sign = 0;
              } else if (x > 0) {
                sign = 1;
              } else {
                sign = -1;
              }

          }

          return (0, format_to_parts_1.default)({
            roundedNumber: x,
            formattedString: n,
            exponent: exponent,
            magnitude: magnitude,
            sign: sign
          }, internalSlots.dataLocaleData, pl, internalSlots);
        }

        exports.PartitionNumberPattern = PartitionNumberPattern; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.PartitionNumberPattern;
      }, () => ({
        'tslib': __cjsMetaURL$1,
        './FormatNumericToString': __cjsMetaURL$2,
        '../262': __cjsMetaURL$3,
        './ComputeExponent': __cjsMetaURL$4,
        './format_to_parts': __cjsMetaURL$5
      }));
    }
  };
});

System.register("chunks:///_virtual/PartitionNumberPattern7.js", ['./cjs-loader.mjs', './tslib4.js', './FormatNumericToString7.js', './2627.js', './ComputeExponent7.js', './format_to_parts7.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3, __cjsMetaURL$4, __cjsMetaURL$5;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$4 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$5 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.PartitionNumberPattern = void 0;

        var tslib_1 = require("tslib");

        var FormatNumericToString_1 = require("./FormatNumericToString");

        var _262_1 = require("../262");

        var ComputeExponent_1 = require("./ComputeExponent");

        var format_to_parts_1 = (0, tslib_1.__importDefault)(require("./format_to_parts"));
        /**
         * https://tc39.es/ecma402/#sec-formatnumberstring
         */

        function PartitionNumberPattern(numberFormat, x, _a) {
          var _b;

          var getInternalSlots = _a.getInternalSlots;
          var internalSlots = getInternalSlots(numberFormat);
          var pl = internalSlots.pl,
              dataLocaleData = internalSlots.dataLocaleData,
              numberingSystem = internalSlots.numberingSystem;
          var symbols = dataLocaleData.numbers.symbols[numberingSystem] || dataLocaleData.numbers.symbols[dataLocaleData.numbers.nu[0]];
          var magnitude = 0;
          var exponent = 0;
          var n;

          if (isNaN(x)) {
            n = symbols.nan;
          } else if (!isFinite(x)) {
            n = symbols.infinity;
          } else {
            if (internalSlots.style === 'percent') {
              x *= 100;
            }

            _b = (0, ComputeExponent_1.ComputeExponent)(numberFormat, x, {
              getInternalSlots: getInternalSlots
            }), exponent = _b[0], magnitude = _b[1]; // Preserve more precision by doing multiplication when exponent is negative.

            x = exponent < 0 ? x * Math.pow(10, -exponent) : x / Math.pow(10, exponent);
            var formatNumberResult = (0, FormatNumericToString_1.FormatNumericToString)(internalSlots, x);
            n = formatNumberResult.formattedString;
            x = formatNumberResult.roundedNumber;
          } // Based on https://tc39.es/ecma402/#sec-getnumberformatpattern
          // We need to do this before `x` is rounded.


          var sign;
          var signDisplay = internalSlots.signDisplay;

          switch (signDisplay) {
            case 'never':
              sign = 0;
              break;

            case 'auto':
              if ((0, _262_1.SameValue)(x, 0) || x > 0 || isNaN(x)) {
                sign = 0;
              } else {
                sign = -1;
              }

              break;

            case 'always':
              if ((0, _262_1.SameValue)(x, 0) || x > 0 || isNaN(x)) {
                sign = 1;
              } else {
                sign = -1;
              }

              break;

            default:
              // x === 0 -> x is 0 or x is -0
              if (x === 0 || isNaN(x)) {
                sign = 0;
              } else if (x > 0) {
                sign = 1;
              } else {
                sign = -1;
              }

          }

          return (0, format_to_parts_1.default)({
            roundedNumber: x,
            formattedString: n,
            exponent: exponent,
            magnitude: magnitude,
            sign: sign
          }, internalSlots.dataLocaleData, pl, internalSlots);
        }

        exports.PartitionNumberPattern = PartitionNumberPattern; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.PartitionNumberPattern;
      }, () => ({
        'tslib': __cjsMetaURL$1,
        './FormatNumericToString': __cjsMetaURL$2,
        '../262': __cjsMetaURL$3,
        './ComputeExponent': __cjsMetaURL$4,
        './format_to_parts': __cjsMetaURL$5
      }));
    }
  };
});

System.register("chunks:///_virtual/PartitionPattern.js", ['./cjs-loader.mjs', './utils2.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.PartitionPattern = void 0;

        var utils_1 = require("./utils");
        /**
         * https://tc39.es/ecma402/#sec-partitionpattern
         * @param pattern
         */


        function PartitionPattern(pattern) {
          var result = [];
          var beginIndex = pattern.indexOf('{');
          var endIndex = 0;
          var nextIndex = 0;
          var length = pattern.length;

          while (beginIndex < pattern.length && beginIndex > -1) {
            endIndex = pattern.indexOf('}', beginIndex);
            (0, utils_1.invariant)(endIndex > beginIndex, "Invalid pattern ".concat(pattern));

            if (beginIndex > nextIndex) {
              result.push({
                type: 'literal',
                value: pattern.substring(nextIndex, beginIndex)
              });
            }

            result.push({
              type: pattern.substring(beginIndex + 1, endIndex),
              value: undefined
            });
            nextIndex = endIndex + 1;
            beginIndex = pattern.indexOf('{', nextIndex);
          }

          if (nextIndex < length) {
            result.push({
              type: 'literal',
              value: pattern.substring(nextIndex, length)
            });
          }

          return result;
        }

        exports.PartitionPattern = PartitionPattern; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.PartitionPattern;
      }, () => ({
        './utils': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/PartitionPattern2.js", ['./cjs-loader.mjs', './utils3.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.PartitionPattern = void 0;

        var utils_1 = require("./utils");
        /**
         * https://tc39.es/ecma402/#sec-partitionpattern
         * @param pattern
         */


        function PartitionPattern(pattern) {
          var result = [];
          var beginIndex = pattern.indexOf('{');
          var endIndex = 0;
          var nextIndex = 0;
          var length = pattern.length;

          while (beginIndex < pattern.length && beginIndex > -1) {
            endIndex = pattern.indexOf('}', beginIndex);
            (0, utils_1.invariant)(endIndex > beginIndex, "Invalid pattern ".concat(pattern));

            if (beginIndex > nextIndex) {
              result.push({
                type: 'literal',
                value: pattern.substring(nextIndex, beginIndex)
              });
            }

            result.push({
              type: pattern.substring(beginIndex + 1, endIndex),
              value: undefined
            });
            nextIndex = endIndex + 1;
            beginIndex = pattern.indexOf('{', nextIndex);
          }

          if (nextIndex < length) {
            result.push({
              type: 'literal',
              value: pattern.substring(nextIndex, length)
            });
          }

          return result;
        }

        exports.PartitionPattern = PartitionPattern; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.PartitionPattern;
      }, () => ({
        './utils': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/PartitionPattern3.js", ['./cjs-loader.mjs', './utils4.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.PartitionPattern = void 0;

        var utils_1 = require("./utils");
        /**
         * https://tc39.es/ecma402/#sec-partitionpattern
         * @param pattern
         */


        function PartitionPattern(pattern) {
          var result = [];
          var beginIndex = pattern.indexOf('{');
          var endIndex = 0;
          var nextIndex = 0;
          var length = pattern.length;

          while (beginIndex < pattern.length && beginIndex > -1) {
            endIndex = pattern.indexOf('}', beginIndex);
            (0, utils_1.invariant)(endIndex > beginIndex, "Invalid pattern ".concat(pattern));

            if (beginIndex > nextIndex) {
              result.push({
                type: 'literal',
                value: pattern.substring(nextIndex, beginIndex)
              });
            }

            result.push({
              type: pattern.substring(beginIndex + 1, endIndex),
              value: undefined
            });
            nextIndex = endIndex + 1;
            beginIndex = pattern.indexOf('{', nextIndex);
          }

          if (nextIndex < length) {
            result.push({
              type: 'literal',
              value: pattern.substring(nextIndex, length)
            });
          }

          return result;
        }

        exports.PartitionPattern = PartitionPattern; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.PartitionPattern;
      }, () => ({
        './utils': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/PartitionPattern4.js", ['./cjs-loader.mjs', './utils5.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.PartitionPattern = void 0;

        var utils_1 = require("./utils");
        /**
         * https://tc39.es/ecma402/#sec-partitionpattern
         * @param pattern
         */


        function PartitionPattern(pattern) {
          var result = [];
          var beginIndex = pattern.indexOf('{');
          var endIndex = 0;
          var nextIndex = 0;
          var length = pattern.length;

          while (beginIndex < pattern.length && beginIndex > -1) {
            endIndex = pattern.indexOf('}', beginIndex);
            (0, utils_1.invariant)(endIndex > beginIndex, "Invalid pattern ".concat(pattern));

            if (beginIndex > nextIndex) {
              result.push({
                type: 'literal',
                value: pattern.substring(nextIndex, beginIndex)
              });
            }

            result.push({
              type: pattern.substring(beginIndex + 1, endIndex),
              value: undefined
            });
            nextIndex = endIndex + 1;
            beginIndex = pattern.indexOf('{', nextIndex);
          }

          if (nextIndex < length) {
            result.push({
              type: 'literal',
              value: pattern.substring(nextIndex, length)
            });
          }

          return result;
        }

        exports.PartitionPattern = PartitionPattern; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.PartitionPattern;
      }, () => ({
        './utils': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/PartitionPattern5.js", ['./cjs-loader.mjs', './utils6.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.PartitionPattern = void 0;

        var utils_1 = require("./utils");
        /**
         * https://tc39.es/ecma402/#sec-partitionpattern
         * @param pattern
         */


        function PartitionPattern(pattern) {
          var result = [];
          var beginIndex = pattern.indexOf('{');
          var endIndex = 0;
          var nextIndex = 0;
          var length = pattern.length;

          while (beginIndex < pattern.length && beginIndex > -1) {
            endIndex = pattern.indexOf('}', beginIndex);
            (0, utils_1.invariant)(endIndex > beginIndex, "Invalid pattern ".concat(pattern));

            if (beginIndex > nextIndex) {
              result.push({
                type: 'literal',
                value: pattern.substring(nextIndex, beginIndex)
              });
            }

            result.push({
              type: pattern.substring(beginIndex + 1, endIndex),
              value: undefined
            });
            nextIndex = endIndex + 1;
            beginIndex = pattern.indexOf('{', nextIndex);
          }

          if (nextIndex < length) {
            result.push({
              type: 'literal',
              value: pattern.substring(nextIndex, length)
            });
          }

          return result;
        }

        exports.PartitionPattern = PartitionPattern; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.PartitionPattern;
      }, () => ({
        './utils': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/PartitionPattern6.js", ['./cjs-loader.mjs', './utils8.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.PartitionPattern = void 0;

        var utils_1 = require("./utils");
        /**
         * https://tc39.es/ecma402/#sec-partitionpattern
         * @param pattern
         */


        function PartitionPattern(pattern) {
          var result = [];
          var beginIndex = pattern.indexOf('{');
          var endIndex = 0;
          var nextIndex = 0;
          var length = pattern.length;

          while (beginIndex < pattern.length && beginIndex > -1) {
            endIndex = pattern.indexOf('}', beginIndex);
            (0, utils_1.invariant)(endIndex > beginIndex, "Invalid pattern ".concat(pattern));

            if (beginIndex > nextIndex) {
              result.push({
                type: 'literal',
                value: pattern.substring(nextIndex, beginIndex)
              });
            }

            result.push({
              type: pattern.substring(beginIndex + 1, endIndex),
              value: undefined
            });
            nextIndex = endIndex + 1;
            beginIndex = pattern.indexOf('{', nextIndex);
          }

          if (nextIndex < length) {
            result.push({
              type: 'literal',
              value: pattern.substring(nextIndex, length)
            });
          }

          return result;
        }

        exports.PartitionPattern = PartitionPattern; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.PartitionPattern;
      }, () => ({
        './utils': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/PartitionPattern7.js", ['./cjs-loader.mjs', './utils9.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.PartitionPattern = void 0;

        var utils_1 = require("./utils");
        /**
         * https://tc39.es/ecma402/#sec-partitionpattern
         * @param pattern
         */


        function PartitionPattern(pattern) {
          var result = [];
          var beginIndex = pattern.indexOf('{');
          var endIndex = 0;
          var nextIndex = 0;
          var length = pattern.length;

          while (beginIndex < pattern.length && beginIndex > -1) {
            endIndex = pattern.indexOf('}', beginIndex);
            (0, utils_1.invariant)(endIndex > beginIndex, "Invalid pattern ".concat(pattern));

            if (beginIndex > nextIndex) {
              result.push({
                type: 'literal',
                value: pattern.substring(nextIndex, beginIndex)
              });
            }

            result.push({
              type: pattern.substring(beginIndex + 1, endIndex),
              value: undefined
            });
            nextIndex = endIndex + 1;
            beginIndex = pattern.indexOf('{', nextIndex);
          }

          if (nextIndex < length) {
            result.push({
              type: 'literal',
              value: pattern.substring(nextIndex, length)
            });
          }

          return result;
        }

        exports.PartitionPattern = PartitionPattern; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.PartitionPattern;
      }, () => ({
        './utils': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/PartitionRelativeTimePattern.js", ['./cjs-loader.mjs', './index13.js', './SingularRelativeTimeUnit.js', './MakePartsList.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.PartitionRelativeTimePattern = void 0;

        var ecma402_abstract_1 = require("@formatjs/ecma402-abstract");

        var SingularRelativeTimeUnit_1 = require("./SingularRelativeTimeUnit");

        var MakePartsList_1 = require("./MakePartsList");

        function PartitionRelativeTimePattern(rtf, value, unit, _a) {
          var getInternalSlots = _a.getInternalSlots;
          (0, ecma402_abstract_1.invariant)((0, ecma402_abstract_1.Type)(value) === 'Number', "value must be number, instead got ".concat(typeof value), TypeError);
          (0, ecma402_abstract_1.invariant)((0, ecma402_abstract_1.Type)(unit) === 'String', "unit must be number, instead got ".concat(typeof value), TypeError);

          if (isNaN(value) || !isFinite(value)) {
            throw new RangeError("Invalid value ".concat(value));
          }

          var resolvedUnit = (0, SingularRelativeTimeUnit_1.SingularRelativeTimeUnit)(unit);

          var _b = getInternalSlots(rtf),
              fields = _b.fields,
              style = _b.style,
              numeric = _b.numeric,
              pluralRules = _b.pluralRules,
              numberFormat = _b.numberFormat;

          var entry = resolvedUnit;

          if (style === 'short') {
            entry = "".concat(resolvedUnit, "-short");
          } else if (style === 'narrow') {
            entry = "".concat(resolvedUnit, "-narrow");
          }

          if (!(entry in fields)) {
            entry = resolvedUnit;
          }

          var patterns = fields[entry];

          if (numeric === 'auto') {
            if ((0, ecma402_abstract_1.ToString)(value) in patterns) {
              return [{
                type: 'literal',
                value: patterns[(0, ecma402_abstract_1.ToString)(value)]
              }];
            }
          }

          var tl = 'future';

          if ((0, ecma402_abstract_1.SameValue)(value, -0) || value < 0) {
            tl = 'past';
          }

          var po = patterns[tl];
          var fv = typeof numberFormat.formatToParts === 'function' ? numberFormat.formatToParts(Math.abs(value)) : // TODO: If formatToParts is not supported, we assume the whole formatted
          // number is a part
          [{
            type: 'literal',
            value: numberFormat.format(Math.abs(value)),
            unit: unit
          }];
          var pr = pluralRules.select(value);
          var pattern = po[pr];
          return (0, MakePartsList_1.MakePartsList)(pattern, resolvedUnit, fv);
        }

        exports.PartitionRelativeTimePattern = PartitionRelativeTimePattern; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.PartitionRelativeTimePattern;
      }, () => ({
        '@formatjs/ecma402-abstract': __cjsMetaURL$1,
        './SingularRelativeTimeUnit': __cjsMetaURL$2,
        './MakePartsList': __cjsMetaURL$3
      }));
    }
  };
});

System.register("chunks:///_virtual/plural-rules.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        }); // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/plural-rules2.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        }); // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/plural-rules3.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        }); // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/plural-rules4.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        }); // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/plural-rules5.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        }); // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/plural-rules6.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        }); // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/plural-rules7.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        }); // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/possibleConstructorReturn.js", ['./typeof.js', './assertThisInitialized.js'], function (exports) {
  'use strict';

  var _typeof, _assertThisInitialized;

  return {
    setters: [function (module) {
      _typeof = module.default;
    }, function (module) {
      _assertThisInitialized = module.default;
    }],
    execute: function () {
      exports('default', _possibleConstructorReturn);

      function _possibleConstructorReturn(self, call) {
        if (call && (_typeof(call) === "object" || typeof call === "function")) {
          return call;
        } else if (call !== void 0) {
          throw new TypeError("Derived constructors may only return object or undefined");
        }

        return _assertThisInitialized(self);
      }
    }
  };
});

System.register("chunks:///_virtual/regex.generated.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.S_UNICODE_REGEX = void 0; // @generated from regex-gen.ts

        exports.S_UNICODE_REGEX = /[\$\+<->\^`\|~\xA2-\xA6\xA8\xA9\xAC\xAE-\xB1\xB4\xB8\xD7\xF7\u02C2-\u02C5\u02D2-\u02DF\u02E5-\u02EB\u02ED\u02EF-\u02FF\u0375\u0384\u0385\u03F6\u0482\u058D-\u058F\u0606-\u0608\u060B\u060E\u060F\u06DE\u06E9\u06FD\u06FE\u07F6\u07FE\u07FF\u09F2\u09F3\u09FA\u09FB\u0AF1\u0B70\u0BF3-\u0BFA\u0C7F\u0D4F\u0D79\u0E3F\u0F01-\u0F03\u0F13\u0F15-\u0F17\u0F1A-\u0F1F\u0F34\u0F36\u0F38\u0FBE-\u0FC5\u0FC7-\u0FCC\u0FCE\u0FCF\u0FD5-\u0FD8\u109E\u109F\u1390-\u1399\u166D\u17DB\u1940\u19DE-\u19FF\u1B61-\u1B6A\u1B74-\u1B7C\u1FBD\u1FBF-\u1FC1\u1FCD-\u1FCF\u1FDD-\u1FDF\u1FED-\u1FEF\u1FFD\u1FFE\u2044\u2052\u207A-\u207C\u208A-\u208C\u20A0-\u20BF\u2100\u2101\u2103-\u2106\u2108\u2109\u2114\u2116-\u2118\u211E-\u2123\u2125\u2127\u2129\u212E\u213A\u213B\u2140-\u2144\u214A-\u214D\u214F\u218A\u218B\u2190-\u2307\u230C-\u2328\u232B-\u2426\u2440-\u244A\u249C-\u24E9\u2500-\u2767\u2794-\u27C4\u27C7-\u27E5\u27F0-\u2982\u2999-\u29D7\u29DC-\u29FB\u29FE-\u2B73\u2B76-\u2B95\u2B97-\u2BFF\u2CE5-\u2CEA\u2E50\u2E51\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u2FF0-\u2FFB\u3004\u3012\u3013\u3020\u3036\u3037\u303E\u303F\u309B\u309C\u3190\u3191\u3196-\u319F\u31C0-\u31E3\u3200-\u321E\u322A-\u3247\u3250\u3260-\u327F\u328A-\u32B0\u32C0-\u33FF\u4DC0-\u4DFF\uA490-\uA4C6\uA700-\uA716\uA720\uA721\uA789\uA78A\uA828-\uA82B\uA836-\uA839\uAA77-\uAA79\uAB5B\uAB6A\uAB6B\uFB29\uFBB2-\uFBC1\uFDFC\uFDFD\uFE62\uFE64-\uFE66\uFE69\uFF04\uFF0B\uFF1C-\uFF1E\uFF3E\uFF40\uFF5C\uFF5E\uFFE0-\uFFE6\uFFE8-\uFFEE\uFFFC\uFFFD]|\uD800[\uDD37-\uDD3F\uDD79-\uDD89\uDD8C-\uDD8E\uDD90-\uDD9C\uDDA0\uDDD0-\uDDFC]|\uD802[\uDC77\uDC78\uDEC8]|\uD805\uDF3F|\uD807[\uDFD5-\uDFF1]|\uD81A[\uDF3C-\uDF3F\uDF45]|\uD82F\uDC9C|\uD834[\uDC00-\uDCF5\uDD00-\uDD26\uDD29-\uDD64\uDD6A-\uDD6C\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDDE8\uDE00-\uDE41\uDE45\uDF00-\uDF56]|\uD835[\uDEC1\uDEDB\uDEFB\uDF15\uDF35\uDF4F\uDF6F\uDF89\uDFA9\uDFC3]|\uD836[\uDC00-\uDDFF\uDE37-\uDE3A\uDE6D-\uDE74\uDE76-\uDE83\uDE85\uDE86]|\uD838[\uDD4F\uDEFF]|\uD83B[\uDCAC\uDCB0\uDD2E\uDEF0\uDEF1]|\uD83C[\uDC00-\uDC2B\uDC30-\uDC93\uDCA0-\uDCAE\uDCB1-\uDCBF\uDCC1-\uDCCF\uDCD1-\uDCF5\uDD0D-\uDDAD\uDDE6-\uDE02\uDE10-\uDE3B\uDE40-\uDE48\uDE50\uDE51\uDE60-\uDE65\uDF00-\uDFFF]|\uD83D[\uDC00-\uDED7\uDEE0-\uDEEC\uDEF0-\uDEFC\uDF00-\uDF73\uDF80-\uDFD8\uDFE0-\uDFEB]|\uD83E[\uDC00-\uDC0B\uDC10-\uDC47\uDC50-\uDC59\uDC60-\uDC87\uDC90-\uDCAD\uDCB0\uDCB1\uDD00-\uDD78\uDD7A-\uDDCB\uDDCD-\uDE53\uDE60-\uDE6D\uDE70-\uDE74\uDE78-\uDE7A\uDE80-\uDE86\uDE90-\uDEA8\uDEB0-\uDEB6\uDEC0-\uDEC2\uDED0-\uDED6\uDF00-\uDF92\uDF94-\uDFCA]/; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.S_UNICODE_REGEX;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/regex.generated2.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.S_UNICODE_REGEX = void 0; // @generated from regex-gen.ts

        exports.S_UNICODE_REGEX = /[\$\+<->\^`\|~\xA2-\xA6\xA8\xA9\xAC\xAE-\xB1\xB4\xB8\xD7\xF7\u02C2-\u02C5\u02D2-\u02DF\u02E5-\u02EB\u02ED\u02EF-\u02FF\u0375\u0384\u0385\u03F6\u0482\u058D-\u058F\u0606-\u0608\u060B\u060E\u060F\u06DE\u06E9\u06FD\u06FE\u07F6\u07FE\u07FF\u09F2\u09F3\u09FA\u09FB\u0AF1\u0B70\u0BF3-\u0BFA\u0C7F\u0D4F\u0D79\u0E3F\u0F01-\u0F03\u0F13\u0F15-\u0F17\u0F1A-\u0F1F\u0F34\u0F36\u0F38\u0FBE-\u0FC5\u0FC7-\u0FCC\u0FCE\u0FCF\u0FD5-\u0FD8\u109E\u109F\u1390-\u1399\u166D\u17DB\u1940\u19DE-\u19FF\u1B61-\u1B6A\u1B74-\u1B7C\u1FBD\u1FBF-\u1FC1\u1FCD-\u1FCF\u1FDD-\u1FDF\u1FED-\u1FEF\u1FFD\u1FFE\u2044\u2052\u207A-\u207C\u208A-\u208C\u20A0-\u20BF\u2100\u2101\u2103-\u2106\u2108\u2109\u2114\u2116-\u2118\u211E-\u2123\u2125\u2127\u2129\u212E\u213A\u213B\u2140-\u2144\u214A-\u214D\u214F\u218A\u218B\u2190-\u2307\u230C-\u2328\u232B-\u2426\u2440-\u244A\u249C-\u24E9\u2500-\u2767\u2794-\u27C4\u27C7-\u27E5\u27F0-\u2982\u2999-\u29D7\u29DC-\u29FB\u29FE-\u2B73\u2B76-\u2B95\u2B97-\u2BFF\u2CE5-\u2CEA\u2E50\u2E51\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u2FF0-\u2FFB\u3004\u3012\u3013\u3020\u3036\u3037\u303E\u303F\u309B\u309C\u3190\u3191\u3196-\u319F\u31C0-\u31E3\u3200-\u321E\u322A-\u3247\u3250\u3260-\u327F\u328A-\u32B0\u32C0-\u33FF\u4DC0-\u4DFF\uA490-\uA4C6\uA700-\uA716\uA720\uA721\uA789\uA78A\uA828-\uA82B\uA836-\uA839\uAA77-\uAA79\uAB5B\uAB6A\uAB6B\uFB29\uFBB2-\uFBC1\uFDFC\uFDFD\uFE62\uFE64-\uFE66\uFE69\uFF04\uFF0B\uFF1C-\uFF1E\uFF3E\uFF40\uFF5C\uFF5E\uFFE0-\uFFE6\uFFE8-\uFFEE\uFFFC\uFFFD]|\uD800[\uDD37-\uDD3F\uDD79-\uDD89\uDD8C-\uDD8E\uDD90-\uDD9C\uDDA0\uDDD0-\uDDFC]|\uD802[\uDC77\uDC78\uDEC8]|\uD805\uDF3F|\uD807[\uDFD5-\uDFF1]|\uD81A[\uDF3C-\uDF3F\uDF45]|\uD82F\uDC9C|\uD834[\uDC00-\uDCF5\uDD00-\uDD26\uDD29-\uDD64\uDD6A-\uDD6C\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDDE8\uDE00-\uDE41\uDE45\uDF00-\uDF56]|\uD835[\uDEC1\uDEDB\uDEFB\uDF15\uDF35\uDF4F\uDF6F\uDF89\uDFA9\uDFC3]|\uD836[\uDC00-\uDDFF\uDE37-\uDE3A\uDE6D-\uDE74\uDE76-\uDE83\uDE85\uDE86]|\uD838[\uDD4F\uDEFF]|\uD83B[\uDCAC\uDCB0\uDD2E\uDEF0\uDEF1]|\uD83C[\uDC00-\uDC2B\uDC30-\uDC93\uDCA0-\uDCAE\uDCB1-\uDCBF\uDCC1-\uDCCF\uDCD1-\uDCF5\uDD0D-\uDDAD\uDDE6-\uDE02\uDE10-\uDE3B\uDE40-\uDE48\uDE50\uDE51\uDE60-\uDE65\uDF00-\uDFFF]|\uD83D[\uDC00-\uDED7\uDEE0-\uDEEC\uDEF0-\uDEFC\uDF00-\uDF73\uDF80-\uDFD8\uDFE0-\uDFEB]|\uD83E[\uDC00-\uDC0B\uDC10-\uDC47\uDC50-\uDC59\uDC60-\uDC87\uDC90-\uDCAD\uDCB0\uDCB1\uDD00-\uDD78\uDD7A-\uDDCB\uDDCD-\uDE53\uDE60-\uDE6D\uDE70-\uDE74\uDE78-\uDE7A\uDE80-\uDE86\uDE90-\uDEA8\uDEB0-\uDEB6\uDEC0-\uDEC2\uDED0-\uDED6\uDF00-\uDF92\uDF94-\uDFCA]/; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.S_UNICODE_REGEX;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/regex.generated3.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.S_UNICODE_REGEX = void 0; // @generated from regex-gen.ts

        exports.S_UNICODE_REGEX = /[\$\+<->\^`\|~\xA2-\xA6\xA8\xA9\xAC\xAE-\xB1\xB4\xB8\xD7\xF7\u02C2-\u02C5\u02D2-\u02DF\u02E5-\u02EB\u02ED\u02EF-\u02FF\u0375\u0384\u0385\u03F6\u0482\u058D-\u058F\u0606-\u0608\u060B\u060E\u060F\u06DE\u06E9\u06FD\u06FE\u07F6\u07FE\u07FF\u09F2\u09F3\u09FA\u09FB\u0AF1\u0B70\u0BF3-\u0BFA\u0C7F\u0D4F\u0D79\u0E3F\u0F01-\u0F03\u0F13\u0F15-\u0F17\u0F1A-\u0F1F\u0F34\u0F36\u0F38\u0FBE-\u0FC5\u0FC7-\u0FCC\u0FCE\u0FCF\u0FD5-\u0FD8\u109E\u109F\u1390-\u1399\u166D\u17DB\u1940\u19DE-\u19FF\u1B61-\u1B6A\u1B74-\u1B7C\u1FBD\u1FBF-\u1FC1\u1FCD-\u1FCF\u1FDD-\u1FDF\u1FED-\u1FEF\u1FFD\u1FFE\u2044\u2052\u207A-\u207C\u208A-\u208C\u20A0-\u20BF\u2100\u2101\u2103-\u2106\u2108\u2109\u2114\u2116-\u2118\u211E-\u2123\u2125\u2127\u2129\u212E\u213A\u213B\u2140-\u2144\u214A-\u214D\u214F\u218A\u218B\u2190-\u2307\u230C-\u2328\u232B-\u2426\u2440-\u244A\u249C-\u24E9\u2500-\u2767\u2794-\u27C4\u27C7-\u27E5\u27F0-\u2982\u2999-\u29D7\u29DC-\u29FB\u29FE-\u2B73\u2B76-\u2B95\u2B97-\u2BFF\u2CE5-\u2CEA\u2E50\u2E51\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u2FF0-\u2FFB\u3004\u3012\u3013\u3020\u3036\u3037\u303E\u303F\u309B\u309C\u3190\u3191\u3196-\u319F\u31C0-\u31E3\u3200-\u321E\u322A-\u3247\u3250\u3260-\u327F\u328A-\u32B0\u32C0-\u33FF\u4DC0-\u4DFF\uA490-\uA4C6\uA700-\uA716\uA720\uA721\uA789\uA78A\uA828-\uA82B\uA836-\uA839\uAA77-\uAA79\uAB5B\uAB6A\uAB6B\uFB29\uFBB2-\uFBC1\uFDFC\uFDFD\uFE62\uFE64-\uFE66\uFE69\uFF04\uFF0B\uFF1C-\uFF1E\uFF3E\uFF40\uFF5C\uFF5E\uFFE0-\uFFE6\uFFE8-\uFFEE\uFFFC\uFFFD]|\uD800[\uDD37-\uDD3F\uDD79-\uDD89\uDD8C-\uDD8E\uDD90-\uDD9C\uDDA0\uDDD0-\uDDFC]|\uD802[\uDC77\uDC78\uDEC8]|\uD805\uDF3F|\uD807[\uDFD5-\uDFF1]|\uD81A[\uDF3C-\uDF3F\uDF45]|\uD82F\uDC9C|\uD834[\uDC00-\uDCF5\uDD00-\uDD26\uDD29-\uDD64\uDD6A-\uDD6C\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDDE8\uDE00-\uDE41\uDE45\uDF00-\uDF56]|\uD835[\uDEC1\uDEDB\uDEFB\uDF15\uDF35\uDF4F\uDF6F\uDF89\uDFA9\uDFC3]|\uD836[\uDC00-\uDDFF\uDE37-\uDE3A\uDE6D-\uDE74\uDE76-\uDE83\uDE85\uDE86]|\uD838[\uDD4F\uDEFF]|\uD83B[\uDCAC\uDCB0\uDD2E\uDEF0\uDEF1]|\uD83C[\uDC00-\uDC2B\uDC30-\uDC93\uDCA0-\uDCAE\uDCB1-\uDCBF\uDCC1-\uDCCF\uDCD1-\uDCF5\uDD0D-\uDDAD\uDDE6-\uDE02\uDE10-\uDE3B\uDE40-\uDE48\uDE50\uDE51\uDE60-\uDE65\uDF00-\uDFFF]|\uD83D[\uDC00-\uDED7\uDEE0-\uDEEC\uDEF0-\uDEFC\uDF00-\uDF73\uDF80-\uDFD8\uDFE0-\uDFEB]|\uD83E[\uDC00-\uDC0B\uDC10-\uDC47\uDC50-\uDC59\uDC60-\uDC87\uDC90-\uDCAD\uDCB0\uDCB1\uDD00-\uDD78\uDD7A-\uDDCB\uDDCD-\uDE53\uDE60-\uDE6D\uDE70-\uDE74\uDE78-\uDE7A\uDE80-\uDE86\uDE90-\uDEA8\uDEB0-\uDEB6\uDEC0-\uDEC2\uDED0-\uDED6\uDF00-\uDF92\uDF94-\uDFCA]/; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.S_UNICODE_REGEX;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/regex.generated4.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.S_UNICODE_REGEX = void 0; // @generated from regex-gen.ts

        exports.S_UNICODE_REGEX = /[\$\+<->\^`\|~\xA2-\xA6\xA8\xA9\xAC\xAE-\xB1\xB4\xB8\xD7\xF7\u02C2-\u02C5\u02D2-\u02DF\u02E5-\u02EB\u02ED\u02EF-\u02FF\u0375\u0384\u0385\u03F6\u0482\u058D-\u058F\u0606-\u0608\u060B\u060E\u060F\u06DE\u06E9\u06FD\u06FE\u07F6\u07FE\u07FF\u09F2\u09F3\u09FA\u09FB\u0AF1\u0B70\u0BF3-\u0BFA\u0C7F\u0D4F\u0D79\u0E3F\u0F01-\u0F03\u0F13\u0F15-\u0F17\u0F1A-\u0F1F\u0F34\u0F36\u0F38\u0FBE-\u0FC5\u0FC7-\u0FCC\u0FCE\u0FCF\u0FD5-\u0FD8\u109E\u109F\u1390-\u1399\u166D\u17DB\u1940\u19DE-\u19FF\u1B61-\u1B6A\u1B74-\u1B7C\u1FBD\u1FBF-\u1FC1\u1FCD-\u1FCF\u1FDD-\u1FDF\u1FED-\u1FEF\u1FFD\u1FFE\u2044\u2052\u207A-\u207C\u208A-\u208C\u20A0-\u20BF\u2100\u2101\u2103-\u2106\u2108\u2109\u2114\u2116-\u2118\u211E-\u2123\u2125\u2127\u2129\u212E\u213A\u213B\u2140-\u2144\u214A-\u214D\u214F\u218A\u218B\u2190-\u2307\u230C-\u2328\u232B-\u2426\u2440-\u244A\u249C-\u24E9\u2500-\u2767\u2794-\u27C4\u27C7-\u27E5\u27F0-\u2982\u2999-\u29D7\u29DC-\u29FB\u29FE-\u2B73\u2B76-\u2B95\u2B97-\u2BFF\u2CE5-\u2CEA\u2E50\u2E51\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u2FF0-\u2FFB\u3004\u3012\u3013\u3020\u3036\u3037\u303E\u303F\u309B\u309C\u3190\u3191\u3196-\u319F\u31C0-\u31E3\u3200-\u321E\u322A-\u3247\u3250\u3260-\u327F\u328A-\u32B0\u32C0-\u33FF\u4DC0-\u4DFF\uA490-\uA4C6\uA700-\uA716\uA720\uA721\uA789\uA78A\uA828-\uA82B\uA836-\uA839\uAA77-\uAA79\uAB5B\uAB6A\uAB6B\uFB29\uFBB2-\uFBC1\uFDFC\uFDFD\uFE62\uFE64-\uFE66\uFE69\uFF04\uFF0B\uFF1C-\uFF1E\uFF3E\uFF40\uFF5C\uFF5E\uFFE0-\uFFE6\uFFE8-\uFFEE\uFFFC\uFFFD]|\uD800[\uDD37-\uDD3F\uDD79-\uDD89\uDD8C-\uDD8E\uDD90-\uDD9C\uDDA0\uDDD0-\uDDFC]|\uD802[\uDC77\uDC78\uDEC8]|\uD805\uDF3F|\uD807[\uDFD5-\uDFF1]|\uD81A[\uDF3C-\uDF3F\uDF45]|\uD82F\uDC9C|\uD834[\uDC00-\uDCF5\uDD00-\uDD26\uDD29-\uDD64\uDD6A-\uDD6C\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDDE8\uDE00-\uDE41\uDE45\uDF00-\uDF56]|\uD835[\uDEC1\uDEDB\uDEFB\uDF15\uDF35\uDF4F\uDF6F\uDF89\uDFA9\uDFC3]|\uD836[\uDC00-\uDDFF\uDE37-\uDE3A\uDE6D-\uDE74\uDE76-\uDE83\uDE85\uDE86]|\uD838[\uDD4F\uDEFF]|\uD83B[\uDCAC\uDCB0\uDD2E\uDEF0\uDEF1]|\uD83C[\uDC00-\uDC2B\uDC30-\uDC93\uDCA0-\uDCAE\uDCB1-\uDCBF\uDCC1-\uDCCF\uDCD1-\uDCF5\uDD0D-\uDDAD\uDDE6-\uDE02\uDE10-\uDE3B\uDE40-\uDE48\uDE50\uDE51\uDE60-\uDE65\uDF00-\uDFFF]|\uD83D[\uDC00-\uDED7\uDEE0-\uDEEC\uDEF0-\uDEFC\uDF00-\uDF73\uDF80-\uDFD8\uDFE0-\uDFEB]|\uD83E[\uDC00-\uDC0B\uDC10-\uDC47\uDC50-\uDC59\uDC60-\uDC87\uDC90-\uDCAD\uDCB0\uDCB1\uDD00-\uDD78\uDD7A-\uDDCB\uDDCD-\uDE53\uDE60-\uDE6D\uDE70-\uDE74\uDE78-\uDE7A\uDE80-\uDE86\uDE90-\uDEA8\uDEB0-\uDEB6\uDEC0-\uDEC2\uDED0-\uDED6\uDF00-\uDF92\uDF94-\uDFCA]/; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.S_UNICODE_REGEX;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/regex.generated5.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.S_UNICODE_REGEX = void 0; // @generated from regex-gen.ts

        exports.S_UNICODE_REGEX = /[\$\+<->\^`\|~\xA2-\xA6\xA8\xA9\xAC\xAE-\xB1\xB4\xB8\xD7\xF7\u02C2-\u02C5\u02D2-\u02DF\u02E5-\u02EB\u02ED\u02EF-\u02FF\u0375\u0384\u0385\u03F6\u0482\u058D-\u058F\u0606-\u0608\u060B\u060E\u060F\u06DE\u06E9\u06FD\u06FE\u07F6\u07FE\u07FF\u09F2\u09F3\u09FA\u09FB\u0AF1\u0B70\u0BF3-\u0BFA\u0C7F\u0D4F\u0D79\u0E3F\u0F01-\u0F03\u0F13\u0F15-\u0F17\u0F1A-\u0F1F\u0F34\u0F36\u0F38\u0FBE-\u0FC5\u0FC7-\u0FCC\u0FCE\u0FCF\u0FD5-\u0FD8\u109E\u109F\u1390-\u1399\u166D\u17DB\u1940\u19DE-\u19FF\u1B61-\u1B6A\u1B74-\u1B7C\u1FBD\u1FBF-\u1FC1\u1FCD-\u1FCF\u1FDD-\u1FDF\u1FED-\u1FEF\u1FFD\u1FFE\u2044\u2052\u207A-\u207C\u208A-\u208C\u20A0-\u20BF\u2100\u2101\u2103-\u2106\u2108\u2109\u2114\u2116-\u2118\u211E-\u2123\u2125\u2127\u2129\u212E\u213A\u213B\u2140-\u2144\u214A-\u214D\u214F\u218A\u218B\u2190-\u2307\u230C-\u2328\u232B-\u2426\u2440-\u244A\u249C-\u24E9\u2500-\u2767\u2794-\u27C4\u27C7-\u27E5\u27F0-\u2982\u2999-\u29D7\u29DC-\u29FB\u29FE-\u2B73\u2B76-\u2B95\u2B97-\u2BFF\u2CE5-\u2CEA\u2E50\u2E51\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u2FF0-\u2FFB\u3004\u3012\u3013\u3020\u3036\u3037\u303E\u303F\u309B\u309C\u3190\u3191\u3196-\u319F\u31C0-\u31E3\u3200-\u321E\u322A-\u3247\u3250\u3260-\u327F\u328A-\u32B0\u32C0-\u33FF\u4DC0-\u4DFF\uA490-\uA4C6\uA700-\uA716\uA720\uA721\uA789\uA78A\uA828-\uA82B\uA836-\uA839\uAA77-\uAA79\uAB5B\uAB6A\uAB6B\uFB29\uFBB2-\uFBC1\uFDFC\uFDFD\uFE62\uFE64-\uFE66\uFE69\uFF04\uFF0B\uFF1C-\uFF1E\uFF3E\uFF40\uFF5C\uFF5E\uFFE0-\uFFE6\uFFE8-\uFFEE\uFFFC\uFFFD]|\uD800[\uDD37-\uDD3F\uDD79-\uDD89\uDD8C-\uDD8E\uDD90-\uDD9C\uDDA0\uDDD0-\uDDFC]|\uD802[\uDC77\uDC78\uDEC8]|\uD805\uDF3F|\uD807[\uDFD5-\uDFF1]|\uD81A[\uDF3C-\uDF3F\uDF45]|\uD82F\uDC9C|\uD834[\uDC00-\uDCF5\uDD00-\uDD26\uDD29-\uDD64\uDD6A-\uDD6C\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDDE8\uDE00-\uDE41\uDE45\uDF00-\uDF56]|\uD835[\uDEC1\uDEDB\uDEFB\uDF15\uDF35\uDF4F\uDF6F\uDF89\uDFA9\uDFC3]|\uD836[\uDC00-\uDDFF\uDE37-\uDE3A\uDE6D-\uDE74\uDE76-\uDE83\uDE85\uDE86]|\uD838[\uDD4F\uDEFF]|\uD83B[\uDCAC\uDCB0\uDD2E\uDEF0\uDEF1]|\uD83C[\uDC00-\uDC2B\uDC30-\uDC93\uDCA0-\uDCAE\uDCB1-\uDCBF\uDCC1-\uDCCF\uDCD1-\uDCF5\uDD0D-\uDDAD\uDDE6-\uDE02\uDE10-\uDE3B\uDE40-\uDE48\uDE50\uDE51\uDE60-\uDE65\uDF00-\uDFFF]|\uD83D[\uDC00-\uDED7\uDEE0-\uDEEC\uDEF0-\uDEFC\uDF00-\uDF73\uDF80-\uDFD8\uDFE0-\uDFEB]|\uD83E[\uDC00-\uDC0B\uDC10-\uDC47\uDC50-\uDC59\uDC60-\uDC87\uDC90-\uDCAD\uDCB0\uDCB1\uDD00-\uDD78\uDD7A-\uDDCB\uDDCD-\uDE53\uDE60-\uDE6D\uDE70-\uDE74\uDE78-\uDE7A\uDE80-\uDE86\uDE90-\uDEA8\uDEB0-\uDEB6\uDEC0-\uDEC2\uDED0-\uDED6\uDF00-\uDF92\uDF94-\uDFCA]/; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.S_UNICODE_REGEX;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/regex.generated6.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.S_UNICODE_REGEX = void 0; // @generated from regex-gen.ts

        exports.S_UNICODE_REGEX = /[\$\+<->\^`\|~\xA2-\xA6\xA8\xA9\xAC\xAE-\xB1\xB4\xB8\xD7\xF7\u02C2-\u02C5\u02D2-\u02DF\u02E5-\u02EB\u02ED\u02EF-\u02FF\u0375\u0384\u0385\u03F6\u0482\u058D-\u058F\u0606-\u0608\u060B\u060E\u060F\u06DE\u06E9\u06FD\u06FE\u07F6\u07FE\u07FF\u09F2\u09F3\u09FA\u09FB\u0AF1\u0B70\u0BF3-\u0BFA\u0C7F\u0D4F\u0D79\u0E3F\u0F01-\u0F03\u0F13\u0F15-\u0F17\u0F1A-\u0F1F\u0F34\u0F36\u0F38\u0FBE-\u0FC5\u0FC7-\u0FCC\u0FCE\u0FCF\u0FD5-\u0FD8\u109E\u109F\u1390-\u1399\u166D\u17DB\u1940\u19DE-\u19FF\u1B61-\u1B6A\u1B74-\u1B7C\u1FBD\u1FBF-\u1FC1\u1FCD-\u1FCF\u1FDD-\u1FDF\u1FED-\u1FEF\u1FFD\u1FFE\u2044\u2052\u207A-\u207C\u208A-\u208C\u20A0-\u20BF\u2100\u2101\u2103-\u2106\u2108\u2109\u2114\u2116-\u2118\u211E-\u2123\u2125\u2127\u2129\u212E\u213A\u213B\u2140-\u2144\u214A-\u214D\u214F\u218A\u218B\u2190-\u2307\u230C-\u2328\u232B-\u2426\u2440-\u244A\u249C-\u24E9\u2500-\u2767\u2794-\u27C4\u27C7-\u27E5\u27F0-\u2982\u2999-\u29D7\u29DC-\u29FB\u29FE-\u2B73\u2B76-\u2B95\u2B97-\u2BFF\u2CE5-\u2CEA\u2E50\u2E51\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u2FF0-\u2FFB\u3004\u3012\u3013\u3020\u3036\u3037\u303E\u303F\u309B\u309C\u3190\u3191\u3196-\u319F\u31C0-\u31E3\u3200-\u321E\u322A-\u3247\u3250\u3260-\u327F\u328A-\u32B0\u32C0-\u33FF\u4DC0-\u4DFF\uA490-\uA4C6\uA700-\uA716\uA720\uA721\uA789\uA78A\uA828-\uA82B\uA836-\uA839\uAA77-\uAA79\uAB5B\uAB6A\uAB6B\uFB29\uFBB2-\uFBC1\uFDFC\uFDFD\uFE62\uFE64-\uFE66\uFE69\uFF04\uFF0B\uFF1C-\uFF1E\uFF3E\uFF40\uFF5C\uFF5E\uFFE0-\uFFE6\uFFE8-\uFFEE\uFFFC\uFFFD]|\uD800[\uDD37-\uDD3F\uDD79-\uDD89\uDD8C-\uDD8E\uDD90-\uDD9C\uDDA0\uDDD0-\uDDFC]|\uD802[\uDC77\uDC78\uDEC8]|\uD805\uDF3F|\uD807[\uDFD5-\uDFF1]|\uD81A[\uDF3C-\uDF3F\uDF45]|\uD82F\uDC9C|\uD834[\uDC00-\uDCF5\uDD00-\uDD26\uDD29-\uDD64\uDD6A-\uDD6C\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDDE8\uDE00-\uDE41\uDE45\uDF00-\uDF56]|\uD835[\uDEC1\uDEDB\uDEFB\uDF15\uDF35\uDF4F\uDF6F\uDF89\uDFA9\uDFC3]|\uD836[\uDC00-\uDDFF\uDE37-\uDE3A\uDE6D-\uDE74\uDE76-\uDE83\uDE85\uDE86]|\uD838[\uDD4F\uDEFF]|\uD83B[\uDCAC\uDCB0\uDD2E\uDEF0\uDEF1]|\uD83C[\uDC00-\uDC2B\uDC30-\uDC93\uDCA0-\uDCAE\uDCB1-\uDCBF\uDCC1-\uDCCF\uDCD1-\uDCF5\uDD0D-\uDDAD\uDDE6-\uDE02\uDE10-\uDE3B\uDE40-\uDE48\uDE50\uDE51\uDE60-\uDE65\uDF00-\uDFFF]|\uD83D[\uDC00-\uDED7\uDEE0-\uDEEC\uDEF0-\uDEFC\uDF00-\uDF73\uDF80-\uDFD8\uDFE0-\uDFEB]|\uD83E[\uDC00-\uDC0B\uDC10-\uDC47\uDC50-\uDC59\uDC60-\uDC87\uDC90-\uDCAD\uDCB0\uDCB1\uDD00-\uDD78\uDD7A-\uDDCB\uDDCD-\uDE53\uDE60-\uDE6D\uDE70-\uDE74\uDE78-\uDE7A\uDE80-\uDE86\uDE90-\uDEA8\uDEB0-\uDEB6\uDEC0-\uDEC2\uDED0-\uDED6\uDF00-\uDF92\uDF94-\uDFCA]/; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.S_UNICODE_REGEX;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/regex.generated7.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.S_UNICODE_REGEX = void 0; // @generated from regex-gen.ts

        exports.S_UNICODE_REGEX = /[\$\+<->\^`\|~\xA2-\xA6\xA8\xA9\xAC\xAE-\xB1\xB4\xB8\xD7\xF7\u02C2-\u02C5\u02D2-\u02DF\u02E5-\u02EB\u02ED\u02EF-\u02FF\u0375\u0384\u0385\u03F6\u0482\u058D-\u058F\u0606-\u0608\u060B\u060E\u060F\u06DE\u06E9\u06FD\u06FE\u07F6\u07FE\u07FF\u09F2\u09F3\u09FA\u09FB\u0AF1\u0B70\u0BF3-\u0BFA\u0C7F\u0D4F\u0D79\u0E3F\u0F01-\u0F03\u0F13\u0F15-\u0F17\u0F1A-\u0F1F\u0F34\u0F36\u0F38\u0FBE-\u0FC5\u0FC7-\u0FCC\u0FCE\u0FCF\u0FD5-\u0FD8\u109E\u109F\u1390-\u1399\u166D\u17DB\u1940\u19DE-\u19FF\u1B61-\u1B6A\u1B74-\u1B7C\u1FBD\u1FBF-\u1FC1\u1FCD-\u1FCF\u1FDD-\u1FDF\u1FED-\u1FEF\u1FFD\u1FFE\u2044\u2052\u207A-\u207C\u208A-\u208C\u20A0-\u20BF\u2100\u2101\u2103-\u2106\u2108\u2109\u2114\u2116-\u2118\u211E-\u2123\u2125\u2127\u2129\u212E\u213A\u213B\u2140-\u2144\u214A-\u214D\u214F\u218A\u218B\u2190-\u2307\u230C-\u2328\u232B-\u2426\u2440-\u244A\u249C-\u24E9\u2500-\u2767\u2794-\u27C4\u27C7-\u27E5\u27F0-\u2982\u2999-\u29D7\u29DC-\u29FB\u29FE-\u2B73\u2B76-\u2B95\u2B97-\u2BFF\u2CE5-\u2CEA\u2E50\u2E51\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u2FF0-\u2FFB\u3004\u3012\u3013\u3020\u3036\u3037\u303E\u303F\u309B\u309C\u3190\u3191\u3196-\u319F\u31C0-\u31E3\u3200-\u321E\u322A-\u3247\u3250\u3260-\u327F\u328A-\u32B0\u32C0-\u33FF\u4DC0-\u4DFF\uA490-\uA4C6\uA700-\uA716\uA720\uA721\uA789\uA78A\uA828-\uA82B\uA836-\uA839\uAA77-\uAA79\uAB5B\uAB6A\uAB6B\uFB29\uFBB2-\uFBC1\uFDFC\uFDFD\uFE62\uFE64-\uFE66\uFE69\uFF04\uFF0B\uFF1C-\uFF1E\uFF3E\uFF40\uFF5C\uFF5E\uFFE0-\uFFE6\uFFE8-\uFFEE\uFFFC\uFFFD]|\uD800[\uDD37-\uDD3F\uDD79-\uDD89\uDD8C-\uDD8E\uDD90-\uDD9C\uDDA0\uDDD0-\uDDFC]|\uD802[\uDC77\uDC78\uDEC8]|\uD805\uDF3F|\uD807[\uDFD5-\uDFF1]|\uD81A[\uDF3C-\uDF3F\uDF45]|\uD82F\uDC9C|\uD834[\uDC00-\uDCF5\uDD00-\uDD26\uDD29-\uDD64\uDD6A-\uDD6C\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDDE8\uDE00-\uDE41\uDE45\uDF00-\uDF56]|\uD835[\uDEC1\uDEDB\uDEFB\uDF15\uDF35\uDF4F\uDF6F\uDF89\uDFA9\uDFC3]|\uD836[\uDC00-\uDDFF\uDE37-\uDE3A\uDE6D-\uDE74\uDE76-\uDE83\uDE85\uDE86]|\uD838[\uDD4F\uDEFF]|\uD83B[\uDCAC\uDCB0\uDD2E\uDEF0\uDEF1]|\uD83C[\uDC00-\uDC2B\uDC30-\uDC93\uDCA0-\uDCAE\uDCB1-\uDCBF\uDCC1-\uDCCF\uDCD1-\uDCF5\uDD0D-\uDDAD\uDDE6-\uDE02\uDE10-\uDE3B\uDE40-\uDE48\uDE50\uDE51\uDE60-\uDE65\uDF00-\uDFFF]|\uD83D[\uDC00-\uDED7\uDEE0-\uDEEC\uDEF0-\uDEFC\uDF00-\uDF73\uDF80-\uDFD8\uDFE0-\uDFEB]|\uD83E[\uDC00-\uDC0B\uDC10-\uDC47\uDC50-\uDC59\uDC60-\uDC87\uDC90-\uDCAD\uDCB0\uDCB1\uDD00-\uDD78\uDD7A-\uDDCB\uDDCD-\uDE53\uDE60-\uDE6D\uDE70-\uDE74\uDE78-\uDE7A\uDE80-\uDE86\uDE90-\uDEA8\uDEB0-\uDEB6\uDEC0-\uDEC2\uDED0-\uDED6\uDF00-\uDF92\uDF94-\uDFCA]/; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.S_UNICODE_REGEX;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/relative-time.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        }); // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/relative-time2.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        }); // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/relative-time3.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        }); // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/relative-time4.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        }); // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/relative-time5.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        }); // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/relative-time6.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        }); // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/relative-time7.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        }); // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/ResolveLocale.js", ['./cjs-loader.mjs', './LookupMatcher.js', './BestFitMatcher.js', './utils7.js', './UnicodeExtensionValue.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3, __cjsMetaURL$4;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$4 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ResolveLocale = void 0;

        var LookupMatcher_1 = require("./LookupMatcher");

        var BestFitMatcher_1 = require("./BestFitMatcher");

        var utils_1 = require("./utils");

        var UnicodeExtensionValue_1 = require("./UnicodeExtensionValue");
        /**
         * https://tc39.es/ecma402/#sec-resolvelocale
         */


        function ResolveLocale(availableLocales, requestedLocales, options, relevantExtensionKeys, localeData, getDefaultLocale) {
          var matcher = options.localeMatcher;
          var r;

          if (matcher === 'lookup') {
            r = (0, LookupMatcher_1.LookupMatcher)(availableLocales, requestedLocales, getDefaultLocale);
          } else {
            r = (0, BestFitMatcher_1.BestFitMatcher)(availableLocales, requestedLocales, getDefaultLocale);
          }

          var foundLocale = r.locale;
          var result = {
            locale: '',
            dataLocale: foundLocale
          };
          var supportedExtension = '-u';

          for (var _i = 0, relevantExtensionKeys_1 = relevantExtensionKeys; _i < relevantExtensionKeys_1.length; _i++) {
            var key = relevantExtensionKeys_1[_i];
            (0, utils_1.invariant)(foundLocale in localeData, "Missing locale data for ".concat(foundLocale));
            var foundLocaleData = localeData[foundLocale];
            (0, utils_1.invariant)(typeof foundLocaleData === 'object' && foundLocaleData !== null, "locale data ".concat(key, " must be an object"));
            var keyLocaleData = foundLocaleData[key];
            (0, utils_1.invariant)(Array.isArray(keyLocaleData), "keyLocaleData for ".concat(key, " must be an array"));
            var value = keyLocaleData[0];
            (0, utils_1.invariant)(typeof value === 'string' || value === null, "value must be string or null but got ".concat(typeof value, " in key ").concat(key));
            var supportedExtensionAddition = '';

            if (r.extension) {
              var requestedValue = (0, UnicodeExtensionValue_1.UnicodeExtensionValue)(r.extension, key);

              if (requestedValue !== undefined) {
                if (requestedValue !== '') {
                  if (~keyLocaleData.indexOf(requestedValue)) {
                    value = requestedValue;
                    supportedExtensionAddition = "-".concat(key, "-").concat(value);
                  }
                } else if (~requestedValue.indexOf('true')) {
                  value = 'true';
                  supportedExtensionAddition = "-".concat(key);
                }
              }
            }

            if (key in options) {
              var optionsValue = options[key];
              (0, utils_1.invariant)(typeof optionsValue === 'string' || typeof optionsValue === 'undefined' || optionsValue === null, 'optionsValue must be String, Undefined or Null');

              if (~keyLocaleData.indexOf(optionsValue)) {
                if (optionsValue !== value) {
                  value = optionsValue;
                  supportedExtensionAddition = '';
                }
              }
            }

            result[key] = value;
            supportedExtension += supportedExtensionAddition;
          }

          if (supportedExtension.length > 2) {
            var privateIndex = foundLocale.indexOf('-x-');

            if (privateIndex === -1) {
              foundLocale = foundLocale + supportedExtension;
            } else {
              var preExtension = foundLocale.slice(0, privateIndex);
              var postExtension = foundLocale.slice(privateIndex, foundLocale.length);
              foundLocale = preExtension + supportedExtension + postExtension;
            }

            foundLocale = Intl.getCanonicalLocales(foundLocale)[0];
          }

          result.locale = foundLocale;
          return result;
        }

        exports.ResolveLocale = ResolveLocale; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.ResolveLocale;
      }, () => ({
        './LookupMatcher': __cjsMetaURL$1,
        './BestFitMatcher': __cjsMetaURL$2,
        './utils': __cjsMetaURL$3,
        './UnicodeExtensionValue': __cjsMetaURL$4
      }));
    }
  };
});

System.register("chunks:///_virtual/ResolveLocale2.js", ['./cjs-loader.mjs', './LookupMatcher2.js', './BestFitMatcher2.js', './utils10.js', './UnicodeExtensionValue2.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3, __cjsMetaURL$4;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$4 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ResolveLocale = void 0;

        var LookupMatcher_1 = require("./LookupMatcher");

        var BestFitMatcher_1 = require("./BestFitMatcher");

        var utils_1 = require("./utils");

        var UnicodeExtensionValue_1 = require("./UnicodeExtensionValue");
        /**
         * https://tc39.es/ecma402/#sec-resolvelocale
         */


        function ResolveLocale(availableLocales, requestedLocales, options, relevantExtensionKeys, localeData, getDefaultLocale) {
          var matcher = options.localeMatcher;
          var r;

          if (matcher === 'lookup') {
            r = (0, LookupMatcher_1.LookupMatcher)(availableLocales, requestedLocales, getDefaultLocale);
          } else {
            r = (0, BestFitMatcher_1.BestFitMatcher)(availableLocales, requestedLocales, getDefaultLocale);
          }

          var foundLocale = r.locale;
          var result = {
            locale: '',
            dataLocale: foundLocale
          };
          var supportedExtension = '-u';

          for (var _i = 0, relevantExtensionKeys_1 = relevantExtensionKeys; _i < relevantExtensionKeys_1.length; _i++) {
            var key = relevantExtensionKeys_1[_i];
            (0, utils_1.invariant)(foundLocale in localeData, "Missing locale data for ".concat(foundLocale));
            var foundLocaleData = localeData[foundLocale];
            (0, utils_1.invariant)(typeof foundLocaleData === 'object' && foundLocaleData !== null, "locale data ".concat(key, " must be an object"));
            var keyLocaleData = foundLocaleData[key];
            (0, utils_1.invariant)(Array.isArray(keyLocaleData), "keyLocaleData for ".concat(key, " must be an array"));
            var value = keyLocaleData[0];
            (0, utils_1.invariant)(typeof value === 'string' || value === null, "value must be string or null but got ".concat(typeof value, " in key ").concat(key));
            var supportedExtensionAddition = '';

            if (r.extension) {
              var requestedValue = (0, UnicodeExtensionValue_1.UnicodeExtensionValue)(r.extension, key);

              if (requestedValue !== undefined) {
                if (requestedValue !== '') {
                  if (~keyLocaleData.indexOf(requestedValue)) {
                    value = requestedValue;
                    supportedExtensionAddition = "-".concat(key, "-").concat(value);
                  }
                } else if (~requestedValue.indexOf('true')) {
                  value = 'true';
                  supportedExtensionAddition = "-".concat(key);
                }
              }
            }

            if (key in options) {
              var optionsValue = options[key];
              (0, utils_1.invariant)(typeof optionsValue === 'string' || typeof optionsValue === 'undefined' || optionsValue === null, 'optionsValue must be String, Undefined or Null');

              if (~keyLocaleData.indexOf(optionsValue)) {
                if (optionsValue !== value) {
                  value = optionsValue;
                  supportedExtensionAddition = '';
                }
              }
            }

            result[key] = value;
            supportedExtension += supportedExtensionAddition;
          }

          if (supportedExtension.length > 2) {
            var privateIndex = foundLocale.indexOf('-x-');

            if (privateIndex === -1) {
              foundLocale = foundLocale + supportedExtension;
            } else {
              var preExtension = foundLocale.slice(0, privateIndex);
              var postExtension = foundLocale.slice(privateIndex, foundLocale.length);
              foundLocale = preExtension + supportedExtension + postExtension;
            }

            foundLocale = Intl.getCanonicalLocales(foundLocale)[0];
          }

          result.locale = foundLocale;
          return result;
        }

        exports.ResolveLocale = ResolveLocale; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.ResolveLocale;
      }, () => ({
        './LookupMatcher': __cjsMetaURL$1,
        './BestFitMatcher': __cjsMetaURL$2,
        './utils': __cjsMetaURL$3,
        './UnicodeExtensionValue': __cjsMetaURL$4
      }));
    }
  };
});

System.register("chunks:///_virtual/ResolveLocale3.js", ['./cjs-loader.mjs', './LookupMatcher3.js', './BestFitMatcher3.js', './utils11.js', './UnicodeExtensionValue3.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3, __cjsMetaURL$4;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$4 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ResolveLocale = void 0;

        var LookupMatcher_1 = require("./LookupMatcher");

        var BestFitMatcher_1 = require("./BestFitMatcher");

        var utils_1 = require("./utils");

        var UnicodeExtensionValue_1 = require("./UnicodeExtensionValue");
        /**
         * https://tc39.es/ecma402/#sec-resolvelocale
         */


        function ResolveLocale(availableLocales, requestedLocales, options, relevantExtensionKeys, localeData, getDefaultLocale) {
          var matcher = options.localeMatcher;
          var r;

          if (matcher === 'lookup') {
            r = (0, LookupMatcher_1.LookupMatcher)(availableLocales, requestedLocales, getDefaultLocale);
          } else {
            r = (0, BestFitMatcher_1.BestFitMatcher)(availableLocales, requestedLocales, getDefaultLocale);
          }

          var foundLocale = r.locale;
          var result = {
            locale: '',
            dataLocale: foundLocale
          };
          var supportedExtension = '-u';

          for (var _i = 0, relevantExtensionKeys_1 = relevantExtensionKeys; _i < relevantExtensionKeys_1.length; _i++) {
            var key = relevantExtensionKeys_1[_i];
            (0, utils_1.invariant)(foundLocale in localeData, "Missing locale data for ".concat(foundLocale));
            var foundLocaleData = localeData[foundLocale];
            (0, utils_1.invariant)(typeof foundLocaleData === 'object' && foundLocaleData !== null, "locale data ".concat(key, " must be an object"));
            var keyLocaleData = foundLocaleData[key];
            (0, utils_1.invariant)(Array.isArray(keyLocaleData), "keyLocaleData for ".concat(key, " must be an array"));
            var value = keyLocaleData[0];
            (0, utils_1.invariant)(typeof value === 'string' || value === null, "value must be string or null but got ".concat(typeof value, " in key ").concat(key));
            var supportedExtensionAddition = '';

            if (r.extension) {
              var requestedValue = (0, UnicodeExtensionValue_1.UnicodeExtensionValue)(r.extension, key);

              if (requestedValue !== undefined) {
                if (requestedValue !== '') {
                  if (~keyLocaleData.indexOf(requestedValue)) {
                    value = requestedValue;
                    supportedExtensionAddition = "-".concat(key, "-").concat(value);
                  }
                } else if (~requestedValue.indexOf('true')) {
                  value = 'true';
                  supportedExtensionAddition = "-".concat(key);
                }
              }
            }

            if (key in options) {
              var optionsValue = options[key];
              (0, utils_1.invariant)(typeof optionsValue === 'string' || typeof optionsValue === 'undefined' || optionsValue === null, 'optionsValue must be String, Undefined or Null');

              if (~keyLocaleData.indexOf(optionsValue)) {
                if (optionsValue !== value) {
                  value = optionsValue;
                  supportedExtensionAddition = '';
                }
              }
            }

            result[key] = value;
            supportedExtension += supportedExtensionAddition;
          }

          if (supportedExtension.length > 2) {
            var privateIndex = foundLocale.indexOf('-x-');

            if (privateIndex === -1) {
              foundLocale = foundLocale + supportedExtension;
            } else {
              var preExtension = foundLocale.slice(0, privateIndex);
              var postExtension = foundLocale.slice(privateIndex, foundLocale.length);
              foundLocale = preExtension + supportedExtension + postExtension;
            }

            foundLocale = Intl.getCanonicalLocales(foundLocale)[0];
          }

          result.locale = foundLocale;
          return result;
        }

        exports.ResolveLocale = ResolveLocale; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.ResolveLocale;
      }, () => ({
        './LookupMatcher': __cjsMetaURL$1,
        './BestFitMatcher': __cjsMetaURL$2,
        './utils': __cjsMetaURL$3,
        './UnicodeExtensionValue': __cjsMetaURL$4
      }));
    }
  };
});

System.register("chunks:///_virtual/ResolveLocale4.js", ['./cjs-loader.mjs', './LookupMatcher4.js', './BestFitMatcher4.js', './utils12.js', './UnicodeExtensionValue4.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3, __cjsMetaURL$4;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$4 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ResolveLocale = void 0;

        var LookupMatcher_1 = require("./LookupMatcher");

        var BestFitMatcher_1 = require("./BestFitMatcher");

        var utils_1 = require("./utils");

        var UnicodeExtensionValue_1 = require("./UnicodeExtensionValue");
        /**
         * https://tc39.es/ecma402/#sec-resolvelocale
         */


        function ResolveLocale(availableLocales, requestedLocales, options, relevantExtensionKeys, localeData, getDefaultLocale) {
          var matcher = options.localeMatcher;
          var r;

          if (matcher === 'lookup') {
            r = (0, LookupMatcher_1.LookupMatcher)(availableLocales, requestedLocales, getDefaultLocale);
          } else {
            r = (0, BestFitMatcher_1.BestFitMatcher)(availableLocales, requestedLocales, getDefaultLocale);
          }

          var foundLocale = r.locale;
          var result = {
            locale: '',
            dataLocale: foundLocale
          };
          var supportedExtension = '-u';

          for (var _i = 0, relevantExtensionKeys_1 = relevantExtensionKeys; _i < relevantExtensionKeys_1.length; _i++) {
            var key = relevantExtensionKeys_1[_i];
            (0, utils_1.invariant)(foundLocale in localeData, "Missing locale data for ".concat(foundLocale));
            var foundLocaleData = localeData[foundLocale];
            (0, utils_1.invariant)(typeof foundLocaleData === 'object' && foundLocaleData !== null, "locale data ".concat(key, " must be an object"));
            var keyLocaleData = foundLocaleData[key];
            (0, utils_1.invariant)(Array.isArray(keyLocaleData), "keyLocaleData for ".concat(key, " must be an array"));
            var value = keyLocaleData[0];
            (0, utils_1.invariant)(typeof value === 'string' || value === null, "value must be string or null but got ".concat(typeof value, " in key ").concat(key));
            var supportedExtensionAddition = '';

            if (r.extension) {
              var requestedValue = (0, UnicodeExtensionValue_1.UnicodeExtensionValue)(r.extension, key);

              if (requestedValue !== undefined) {
                if (requestedValue !== '') {
                  if (~keyLocaleData.indexOf(requestedValue)) {
                    value = requestedValue;
                    supportedExtensionAddition = "-".concat(key, "-").concat(value);
                  }
                } else if (~requestedValue.indexOf('true')) {
                  value = 'true';
                  supportedExtensionAddition = "-".concat(key);
                }
              }
            }

            if (key in options) {
              var optionsValue = options[key];
              (0, utils_1.invariant)(typeof optionsValue === 'string' || typeof optionsValue === 'undefined' || optionsValue === null, 'optionsValue must be String, Undefined or Null');

              if (~keyLocaleData.indexOf(optionsValue)) {
                if (optionsValue !== value) {
                  value = optionsValue;
                  supportedExtensionAddition = '';
                }
              }
            }

            result[key] = value;
            supportedExtension += supportedExtensionAddition;
          }

          if (supportedExtension.length > 2) {
            var privateIndex = foundLocale.indexOf('-x-');

            if (privateIndex === -1) {
              foundLocale = foundLocale + supportedExtension;
            } else {
              var preExtension = foundLocale.slice(0, privateIndex);
              var postExtension = foundLocale.slice(privateIndex, foundLocale.length);
              foundLocale = preExtension + supportedExtension + postExtension;
            }

            foundLocale = Intl.getCanonicalLocales(foundLocale)[0];
          }

          result.locale = foundLocale;
          return result;
        }

        exports.ResolveLocale = ResolveLocale; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.ResolveLocale;
      }, () => ({
        './LookupMatcher': __cjsMetaURL$1,
        './BestFitMatcher': __cjsMetaURL$2,
        './utils': __cjsMetaURL$3,
        './UnicodeExtensionValue': __cjsMetaURL$4
      }));
    }
  };
});

System.register("chunks:///_virtual/ResolveLocale5.js", ['./cjs-loader.mjs', './LookupMatcher5.js', './BestFitMatcher5.js', './utils13.js', './UnicodeExtensionValue5.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3, __cjsMetaURL$4;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$4 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ResolveLocale = void 0;

        var LookupMatcher_1 = require("./LookupMatcher");

        var BestFitMatcher_1 = require("./BestFitMatcher");

        var utils_1 = require("./utils");

        var UnicodeExtensionValue_1 = require("./UnicodeExtensionValue");
        /**
         * https://tc39.es/ecma402/#sec-resolvelocale
         */


        function ResolveLocale(availableLocales, requestedLocales, options, relevantExtensionKeys, localeData, getDefaultLocale) {
          var matcher = options.localeMatcher;
          var r;

          if (matcher === 'lookup') {
            r = (0, LookupMatcher_1.LookupMatcher)(availableLocales, requestedLocales, getDefaultLocale);
          } else {
            r = (0, BestFitMatcher_1.BestFitMatcher)(availableLocales, requestedLocales, getDefaultLocale);
          }

          var foundLocale = r.locale;
          var result = {
            locale: '',
            dataLocale: foundLocale
          };
          var supportedExtension = '-u';

          for (var _i = 0, relevantExtensionKeys_1 = relevantExtensionKeys; _i < relevantExtensionKeys_1.length; _i++) {
            var key = relevantExtensionKeys_1[_i];
            (0, utils_1.invariant)(foundLocale in localeData, "Missing locale data for ".concat(foundLocale));
            var foundLocaleData = localeData[foundLocale];
            (0, utils_1.invariant)(typeof foundLocaleData === 'object' && foundLocaleData !== null, "locale data ".concat(key, " must be an object"));
            var keyLocaleData = foundLocaleData[key];
            (0, utils_1.invariant)(Array.isArray(keyLocaleData), "keyLocaleData for ".concat(key, " must be an array"));
            var value = keyLocaleData[0];
            (0, utils_1.invariant)(typeof value === 'string' || value === null, "value must be string or null but got ".concat(typeof value, " in key ").concat(key));
            var supportedExtensionAddition = '';

            if (r.extension) {
              var requestedValue = (0, UnicodeExtensionValue_1.UnicodeExtensionValue)(r.extension, key);

              if (requestedValue !== undefined) {
                if (requestedValue !== '') {
                  if (~keyLocaleData.indexOf(requestedValue)) {
                    value = requestedValue;
                    supportedExtensionAddition = "-".concat(key, "-").concat(value);
                  }
                } else if (~requestedValue.indexOf('true')) {
                  value = 'true';
                  supportedExtensionAddition = "-".concat(key);
                }
              }
            }

            if (key in options) {
              var optionsValue = options[key];
              (0, utils_1.invariant)(typeof optionsValue === 'string' || typeof optionsValue === 'undefined' || optionsValue === null, 'optionsValue must be String, Undefined or Null');

              if (~keyLocaleData.indexOf(optionsValue)) {
                if (optionsValue !== value) {
                  value = optionsValue;
                  supportedExtensionAddition = '';
                }
              }
            }

            result[key] = value;
            supportedExtension += supportedExtensionAddition;
          }

          if (supportedExtension.length > 2) {
            var privateIndex = foundLocale.indexOf('-x-');

            if (privateIndex === -1) {
              foundLocale = foundLocale + supportedExtension;
            } else {
              var preExtension = foundLocale.slice(0, privateIndex);
              var postExtension = foundLocale.slice(privateIndex, foundLocale.length);
              foundLocale = preExtension + supportedExtension + postExtension;
            }

            foundLocale = Intl.getCanonicalLocales(foundLocale)[0];
          }

          result.locale = foundLocale;
          return result;
        }

        exports.ResolveLocale = ResolveLocale; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.ResolveLocale;
      }, () => ({
        './LookupMatcher': __cjsMetaURL$1,
        './BestFitMatcher': __cjsMetaURL$2,
        './utils': __cjsMetaURL$3,
        './UnicodeExtensionValue': __cjsMetaURL$4
      }));
    }
  };
});

System.register("chunks:///_virtual/ResolveLocale6.js", ['./cjs-loader.mjs', './LookupMatcher6.js', './BestFitMatcher6.js', './utils14.js', './UnicodeExtensionValue6.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3, __cjsMetaURL$4;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$4 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ResolveLocale = void 0;

        var LookupMatcher_1 = require("./LookupMatcher");

        var BestFitMatcher_1 = require("./BestFitMatcher");

        var utils_1 = require("./utils");

        var UnicodeExtensionValue_1 = require("./UnicodeExtensionValue");
        /**
         * https://tc39.es/ecma402/#sec-resolvelocale
         */


        function ResolveLocale(availableLocales, requestedLocales, options, relevantExtensionKeys, localeData, getDefaultLocale) {
          var matcher = options.localeMatcher;
          var r;

          if (matcher === 'lookup') {
            r = (0, LookupMatcher_1.LookupMatcher)(availableLocales, requestedLocales, getDefaultLocale);
          } else {
            r = (0, BestFitMatcher_1.BestFitMatcher)(availableLocales, requestedLocales, getDefaultLocale);
          }

          var foundLocale = r.locale;
          var result = {
            locale: '',
            dataLocale: foundLocale
          };
          var supportedExtension = '-u';

          for (var _i = 0, relevantExtensionKeys_1 = relevantExtensionKeys; _i < relevantExtensionKeys_1.length; _i++) {
            var key = relevantExtensionKeys_1[_i];
            (0, utils_1.invariant)(foundLocale in localeData, "Missing locale data for ".concat(foundLocale));
            var foundLocaleData = localeData[foundLocale];
            (0, utils_1.invariant)(typeof foundLocaleData === 'object' && foundLocaleData !== null, "locale data ".concat(key, " must be an object"));
            var keyLocaleData = foundLocaleData[key];
            (0, utils_1.invariant)(Array.isArray(keyLocaleData), "keyLocaleData for ".concat(key, " must be an array"));
            var value = keyLocaleData[0];
            (0, utils_1.invariant)(typeof value === 'string' || value === null, "value must be string or null but got ".concat(typeof value, " in key ").concat(key));
            var supportedExtensionAddition = '';

            if (r.extension) {
              var requestedValue = (0, UnicodeExtensionValue_1.UnicodeExtensionValue)(r.extension, key);

              if (requestedValue !== undefined) {
                if (requestedValue !== '') {
                  if (~keyLocaleData.indexOf(requestedValue)) {
                    value = requestedValue;
                    supportedExtensionAddition = "-".concat(key, "-").concat(value);
                  }
                } else if (~requestedValue.indexOf('true')) {
                  value = 'true';
                  supportedExtensionAddition = "-".concat(key);
                }
              }
            }

            if (key in options) {
              var optionsValue = options[key];
              (0, utils_1.invariant)(typeof optionsValue === 'string' || typeof optionsValue === 'undefined' || optionsValue === null, 'optionsValue must be String, Undefined or Null');

              if (~keyLocaleData.indexOf(optionsValue)) {
                if (optionsValue !== value) {
                  value = optionsValue;
                  supportedExtensionAddition = '';
                }
              }
            }

            result[key] = value;
            supportedExtension += supportedExtensionAddition;
          }

          if (supportedExtension.length > 2) {
            var privateIndex = foundLocale.indexOf('-x-');

            if (privateIndex === -1) {
              foundLocale = foundLocale + supportedExtension;
            } else {
              var preExtension = foundLocale.slice(0, privateIndex);
              var postExtension = foundLocale.slice(privateIndex, foundLocale.length);
              foundLocale = preExtension + supportedExtension + postExtension;
            }

            foundLocale = Intl.getCanonicalLocales(foundLocale)[0];
          }

          result.locale = foundLocale;
          return result;
        }

        exports.ResolveLocale = ResolveLocale; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.ResolveLocale;
      }, () => ({
        './LookupMatcher': __cjsMetaURL$1,
        './BestFitMatcher': __cjsMetaURL$2,
        './utils': __cjsMetaURL$3,
        './UnicodeExtensionValue': __cjsMetaURL$4
      }));
    }
  };
});

System.register("chunks:///_virtual/ResolveLocale7.js", ['./cjs-loader.mjs', './LookupMatcher7.js', './BestFitMatcher7.js', './utils15.js', './UnicodeExtensionValue7.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3, __cjsMetaURL$4;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$4 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ResolveLocale = void 0;

        var LookupMatcher_1 = require("./LookupMatcher");

        var BestFitMatcher_1 = require("./BestFitMatcher");

        var utils_1 = require("./utils");

        var UnicodeExtensionValue_1 = require("./UnicodeExtensionValue");
        /**
         * https://tc39.es/ecma402/#sec-resolvelocale
         */


        function ResolveLocale(availableLocales, requestedLocales, options, relevantExtensionKeys, localeData, getDefaultLocale) {
          var matcher = options.localeMatcher;
          var r;

          if (matcher === 'lookup') {
            r = (0, LookupMatcher_1.LookupMatcher)(availableLocales, requestedLocales, getDefaultLocale);
          } else {
            r = (0, BestFitMatcher_1.BestFitMatcher)(availableLocales, requestedLocales, getDefaultLocale);
          }

          var foundLocale = r.locale;
          var result = {
            locale: '',
            dataLocale: foundLocale
          };
          var supportedExtension = '-u';

          for (var _i = 0, relevantExtensionKeys_1 = relevantExtensionKeys; _i < relevantExtensionKeys_1.length; _i++) {
            var key = relevantExtensionKeys_1[_i];
            (0, utils_1.invariant)(foundLocale in localeData, "Missing locale data for ".concat(foundLocale));
            var foundLocaleData = localeData[foundLocale];
            (0, utils_1.invariant)(typeof foundLocaleData === 'object' && foundLocaleData !== null, "locale data ".concat(key, " must be an object"));
            var keyLocaleData = foundLocaleData[key];
            (0, utils_1.invariant)(Array.isArray(keyLocaleData), "keyLocaleData for ".concat(key, " must be an array"));
            var value = keyLocaleData[0];
            (0, utils_1.invariant)(typeof value === 'string' || value === null, "value must be string or null but got ".concat(typeof value, " in key ").concat(key));
            var supportedExtensionAddition = '';

            if (r.extension) {
              var requestedValue = (0, UnicodeExtensionValue_1.UnicodeExtensionValue)(r.extension, key);

              if (requestedValue !== undefined) {
                if (requestedValue !== '') {
                  if (~keyLocaleData.indexOf(requestedValue)) {
                    value = requestedValue;
                    supportedExtensionAddition = "-".concat(key, "-").concat(value);
                  }
                } else if (~requestedValue.indexOf('true')) {
                  value = 'true';
                  supportedExtensionAddition = "-".concat(key);
                }
              }
            }

            if (key in options) {
              var optionsValue = options[key];
              (0, utils_1.invariant)(typeof optionsValue === 'string' || typeof optionsValue === 'undefined' || optionsValue === null, 'optionsValue must be String, Undefined or Null');

              if (~keyLocaleData.indexOf(optionsValue)) {
                if (optionsValue !== value) {
                  value = optionsValue;
                  supportedExtensionAddition = '';
                }
              }
            }

            result[key] = value;
            supportedExtension += supportedExtensionAddition;
          }

          if (supportedExtension.length > 2) {
            var privateIndex = foundLocale.indexOf('-x-');

            if (privateIndex === -1) {
              foundLocale = foundLocale + supportedExtension;
            } else {
              var preExtension = foundLocale.slice(0, privateIndex);
              var postExtension = foundLocale.slice(privateIndex, foundLocale.length);
              foundLocale = preExtension + supportedExtension + postExtension;
            }

            foundLocale = Intl.getCanonicalLocales(foundLocale)[0];
          }

          result.locale = foundLocale;
          return result;
        }

        exports.ResolveLocale = ResolveLocale; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.ResolveLocale;
      }, () => ({
        './LookupMatcher': __cjsMetaURL$1,
        './BestFitMatcher': __cjsMetaURL$2,
        './utils': __cjsMetaURL$3,
        './UnicodeExtensionValue': __cjsMetaURL$4
      }));
    }
  };
});

System.register("chunks:///_virtual/ResolvePlural.js", ['./cjs-loader.mjs', './index12.js', './GetOperands.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ResolvePlural = void 0;

        var ecma402_abstract_1 = require("@formatjs/ecma402-abstract");

        var GetOperands_1 = require("./GetOperands");
        /**
         * http://ecma-international.org/ecma-402/7.0/index.html#sec-resolveplural
         * @param pl
         * @param n
         * @param PluralRuleSelect Has to pass in bc it's implementation-specific
         */


        function ResolvePlural(pl, n, _a) {
          var getInternalSlots = _a.getInternalSlots,
              PluralRuleSelect = _a.PluralRuleSelect;
          var internalSlots = getInternalSlots(pl);
          (0, ecma402_abstract_1.invariant)((0, ecma402_abstract_1.Type)(internalSlots) === 'Object', 'pl has to be an object');
          (0, ecma402_abstract_1.invariant)('initializedPluralRules' in internalSlots, 'pluralrules must be initialized');
          (0, ecma402_abstract_1.invariant)((0, ecma402_abstract_1.Type)(n) === 'Number', 'n must be a number');

          if (!isFinite(n)) {
            return 'other';
          }

          var locale = internalSlots.locale,
              type = internalSlots.type;
          var res = (0, ecma402_abstract_1.FormatNumericToString)(internalSlots, n);
          var s = res.formattedString;
          var operands = (0, GetOperands_1.GetOperands)(s);
          return PluralRuleSelect(locale, type, n, operands);
        }

        exports.ResolvePlural = ResolvePlural; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.ResolvePlural;
      }, () => ({
        '@formatjs/ecma402-abstract': __cjsMetaURL$1,
        './GetOperands': __cjsMetaURL$2
      }));
    }
  };
});

System.register("chunks:///_virtual/rollupPluginModLoBabelHelpers.js", [], function (exports) {
  'use strict';

  return {
    execute: function () {
      exports({
        applyDecoratedDescriptor: _applyDecoratedDescriptor,
        initializerDefineProperty: _initializerDefineProperty
      });

      function _initializerDefineProperty(target, property, descriptor, context) {
        if (!descriptor) return;
        Object.defineProperty(target, property, {
          enumerable: descriptor.enumerable,
          configurable: descriptor.configurable,
          writable: descriptor.writable,
          value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
        });
      }

      function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
        var desc = {};
        Object.keys(descriptor).forEach(function (key) {
          desc[key] = descriptor[key];
        });
        desc.enumerable = !!desc.enumerable;
        desc.configurable = !!desc.configurable;

        if ('value' in desc || desc.initializer) {
          desc.writable = true;
        }

        desc = decorators.slice().reverse().reduce(function (desc, decorator) {
          return decorator(target, property, desc) || desc;
        }, desc);

        if (context && desc.initializer !== void 0) {
          desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
          desc.initializer = undefined;
        }

        if (desc.initializer === void 0) {
          Object.defineProperty(target, property, desc);
          desc = null;
        }

        return desc;
      }
    }
  };
});

System.register("chunks:///_virtual/SetNumberFormatDigitOptions.js", ['./cjs-loader.mjs', './GetNumberOption.js', './DefaultNumberOption.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.SetNumberFormatDigitOptions = void 0;

        var GetNumberOption_1 = require("../GetNumberOption");

        var DefaultNumberOption_1 = require("../DefaultNumberOption");
        /**
         * https://tc39.es/ecma402/#sec-setnfdigitoptions
         */


        function SetNumberFormatDigitOptions(internalSlots, opts, mnfdDefault, mxfdDefault, notation) {
          var mnid = (0, GetNumberOption_1.GetNumberOption)(opts, 'minimumIntegerDigits', 1, 21, 1);
          var mnfd = opts.minimumFractionDigits;
          var mxfd = opts.maximumFractionDigits;
          var mnsd = opts.minimumSignificantDigits;
          var mxsd = opts.maximumSignificantDigits;
          internalSlots.minimumIntegerDigits = mnid;

          if (mnsd !== undefined || mxsd !== undefined) {
            internalSlots.roundingType = 'significantDigits';
            mnsd = (0, DefaultNumberOption_1.DefaultNumberOption)(mnsd, 1, 21, 1);
            mxsd = (0, DefaultNumberOption_1.DefaultNumberOption)(mxsd, mnsd, 21, 21);
            internalSlots.minimumSignificantDigits = mnsd;
            internalSlots.maximumSignificantDigits = mxsd;
          } else if (mnfd !== undefined || mxfd !== undefined) {
            internalSlots.roundingType = 'fractionDigits';
            mnfd = (0, DefaultNumberOption_1.DefaultNumberOption)(mnfd, 0, 20, mnfdDefault);
            var mxfdActualDefault = Math.max(mnfd, mxfdDefault);
            mxfd = (0, DefaultNumberOption_1.DefaultNumberOption)(mxfd, mnfd, 20, mxfdActualDefault);
            internalSlots.minimumFractionDigits = mnfd;
            internalSlots.maximumFractionDigits = mxfd;
          } else if (notation === 'compact') {
            internalSlots.roundingType = 'compactRounding';
          } else {
            internalSlots.roundingType = 'fractionDigits';
            internalSlots.minimumFractionDigits = mnfdDefault;
            internalSlots.maximumFractionDigits = mxfdDefault;
          }
        }

        exports.SetNumberFormatDigitOptions = SetNumberFormatDigitOptions; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.SetNumberFormatDigitOptions;
      }, () => ({
        '../GetNumberOption': __cjsMetaURL$1,
        '../DefaultNumberOption': __cjsMetaURL$2
      }));
    }
  };
});

System.register("chunks:///_virtual/SetNumberFormatDigitOptions2.js", ['./cjs-loader.mjs', './GetNumberOption2.js', './DefaultNumberOption2.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.SetNumberFormatDigitOptions = void 0;

        var GetNumberOption_1 = require("../GetNumberOption");

        var DefaultNumberOption_1 = require("../DefaultNumberOption");
        /**
         * https://tc39.es/ecma402/#sec-setnfdigitoptions
         */


        function SetNumberFormatDigitOptions(internalSlots, opts, mnfdDefault, mxfdDefault, notation) {
          var mnid = (0, GetNumberOption_1.GetNumberOption)(opts, 'minimumIntegerDigits', 1, 21, 1);
          var mnfd = opts.minimumFractionDigits;
          var mxfd = opts.maximumFractionDigits;
          var mnsd = opts.minimumSignificantDigits;
          var mxsd = opts.maximumSignificantDigits;
          internalSlots.minimumIntegerDigits = mnid;

          if (mnsd !== undefined || mxsd !== undefined) {
            internalSlots.roundingType = 'significantDigits';
            mnsd = (0, DefaultNumberOption_1.DefaultNumberOption)(mnsd, 1, 21, 1);
            mxsd = (0, DefaultNumberOption_1.DefaultNumberOption)(mxsd, mnsd, 21, 21);
            internalSlots.minimumSignificantDigits = mnsd;
            internalSlots.maximumSignificantDigits = mxsd;
          } else if (mnfd !== undefined || mxfd !== undefined) {
            internalSlots.roundingType = 'fractionDigits';
            mnfd = (0, DefaultNumberOption_1.DefaultNumberOption)(mnfd, 0, 20, mnfdDefault);
            var mxfdActualDefault = Math.max(mnfd, mxfdDefault);
            mxfd = (0, DefaultNumberOption_1.DefaultNumberOption)(mxfd, mnfd, 20, mxfdActualDefault);
            internalSlots.minimumFractionDigits = mnfd;
            internalSlots.maximumFractionDigits = mxfd;
          } else if (notation === 'compact') {
            internalSlots.roundingType = 'compactRounding';
          } else {
            internalSlots.roundingType = 'fractionDigits';
            internalSlots.minimumFractionDigits = mnfdDefault;
            internalSlots.maximumFractionDigits = mxfdDefault;
          }
        }

        exports.SetNumberFormatDigitOptions = SetNumberFormatDigitOptions; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.SetNumberFormatDigitOptions;
      }, () => ({
        '../GetNumberOption': __cjsMetaURL$1,
        '../DefaultNumberOption': __cjsMetaURL$2
      }));
    }
  };
});

System.register("chunks:///_virtual/SetNumberFormatDigitOptions3.js", ['./cjs-loader.mjs', './GetNumberOption3.js', './DefaultNumberOption3.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.SetNumberFormatDigitOptions = void 0;

        var GetNumberOption_1 = require("../GetNumberOption");

        var DefaultNumberOption_1 = require("../DefaultNumberOption");
        /**
         * https://tc39.es/ecma402/#sec-setnfdigitoptions
         */


        function SetNumberFormatDigitOptions(internalSlots, opts, mnfdDefault, mxfdDefault, notation) {
          var mnid = (0, GetNumberOption_1.GetNumberOption)(opts, 'minimumIntegerDigits', 1, 21, 1);
          var mnfd = opts.minimumFractionDigits;
          var mxfd = opts.maximumFractionDigits;
          var mnsd = opts.minimumSignificantDigits;
          var mxsd = opts.maximumSignificantDigits;
          internalSlots.minimumIntegerDigits = mnid;

          if (mnsd !== undefined || mxsd !== undefined) {
            internalSlots.roundingType = 'significantDigits';
            mnsd = (0, DefaultNumberOption_1.DefaultNumberOption)(mnsd, 1, 21, 1);
            mxsd = (0, DefaultNumberOption_1.DefaultNumberOption)(mxsd, mnsd, 21, 21);
            internalSlots.minimumSignificantDigits = mnsd;
            internalSlots.maximumSignificantDigits = mxsd;
          } else if (mnfd !== undefined || mxfd !== undefined) {
            internalSlots.roundingType = 'fractionDigits';
            mnfd = (0, DefaultNumberOption_1.DefaultNumberOption)(mnfd, 0, 20, mnfdDefault);
            var mxfdActualDefault = Math.max(mnfd, mxfdDefault);
            mxfd = (0, DefaultNumberOption_1.DefaultNumberOption)(mxfd, mnfd, 20, mxfdActualDefault);
            internalSlots.minimumFractionDigits = mnfd;
            internalSlots.maximumFractionDigits = mxfd;
          } else if (notation === 'compact') {
            internalSlots.roundingType = 'compactRounding';
          } else {
            internalSlots.roundingType = 'fractionDigits';
            internalSlots.minimumFractionDigits = mnfdDefault;
            internalSlots.maximumFractionDigits = mxfdDefault;
          }
        }

        exports.SetNumberFormatDigitOptions = SetNumberFormatDigitOptions; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.SetNumberFormatDigitOptions;
      }, () => ({
        '../GetNumberOption': __cjsMetaURL$1,
        '../DefaultNumberOption': __cjsMetaURL$2
      }));
    }
  };
});

System.register("chunks:///_virtual/SetNumberFormatDigitOptions4.js", ['./cjs-loader.mjs', './GetNumberOption4.js', './DefaultNumberOption4.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.SetNumberFormatDigitOptions = void 0;

        var GetNumberOption_1 = require("../GetNumberOption");

        var DefaultNumberOption_1 = require("../DefaultNumberOption");
        /**
         * https://tc39.es/ecma402/#sec-setnfdigitoptions
         */


        function SetNumberFormatDigitOptions(internalSlots, opts, mnfdDefault, mxfdDefault, notation) {
          var mnid = (0, GetNumberOption_1.GetNumberOption)(opts, 'minimumIntegerDigits', 1, 21, 1);
          var mnfd = opts.minimumFractionDigits;
          var mxfd = opts.maximumFractionDigits;
          var mnsd = opts.minimumSignificantDigits;
          var mxsd = opts.maximumSignificantDigits;
          internalSlots.minimumIntegerDigits = mnid;

          if (mnsd !== undefined || mxsd !== undefined) {
            internalSlots.roundingType = 'significantDigits';
            mnsd = (0, DefaultNumberOption_1.DefaultNumberOption)(mnsd, 1, 21, 1);
            mxsd = (0, DefaultNumberOption_1.DefaultNumberOption)(mxsd, mnsd, 21, 21);
            internalSlots.minimumSignificantDigits = mnsd;
            internalSlots.maximumSignificantDigits = mxsd;
          } else if (mnfd !== undefined || mxfd !== undefined) {
            internalSlots.roundingType = 'fractionDigits';
            mnfd = (0, DefaultNumberOption_1.DefaultNumberOption)(mnfd, 0, 20, mnfdDefault);
            var mxfdActualDefault = Math.max(mnfd, mxfdDefault);
            mxfd = (0, DefaultNumberOption_1.DefaultNumberOption)(mxfd, mnfd, 20, mxfdActualDefault);
            internalSlots.minimumFractionDigits = mnfd;
            internalSlots.maximumFractionDigits = mxfd;
          } else if (notation === 'compact') {
            internalSlots.roundingType = 'compactRounding';
          } else {
            internalSlots.roundingType = 'fractionDigits';
            internalSlots.minimumFractionDigits = mnfdDefault;
            internalSlots.maximumFractionDigits = mxfdDefault;
          }
        }

        exports.SetNumberFormatDigitOptions = SetNumberFormatDigitOptions; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.SetNumberFormatDigitOptions;
      }, () => ({
        '../GetNumberOption': __cjsMetaURL$1,
        '../DefaultNumberOption': __cjsMetaURL$2
      }));
    }
  };
});

System.register("chunks:///_virtual/SetNumberFormatDigitOptions5.js", ['./cjs-loader.mjs', './GetNumberOption5.js', './DefaultNumberOption5.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.SetNumberFormatDigitOptions = void 0;

        var GetNumberOption_1 = require("../GetNumberOption");

        var DefaultNumberOption_1 = require("../DefaultNumberOption");
        /**
         * https://tc39.es/ecma402/#sec-setnfdigitoptions
         */


        function SetNumberFormatDigitOptions(internalSlots, opts, mnfdDefault, mxfdDefault, notation) {
          var mnid = (0, GetNumberOption_1.GetNumberOption)(opts, 'minimumIntegerDigits', 1, 21, 1);
          var mnfd = opts.minimumFractionDigits;
          var mxfd = opts.maximumFractionDigits;
          var mnsd = opts.minimumSignificantDigits;
          var mxsd = opts.maximumSignificantDigits;
          internalSlots.minimumIntegerDigits = mnid;

          if (mnsd !== undefined || mxsd !== undefined) {
            internalSlots.roundingType = 'significantDigits';
            mnsd = (0, DefaultNumberOption_1.DefaultNumberOption)(mnsd, 1, 21, 1);
            mxsd = (0, DefaultNumberOption_1.DefaultNumberOption)(mxsd, mnsd, 21, 21);
            internalSlots.minimumSignificantDigits = mnsd;
            internalSlots.maximumSignificantDigits = mxsd;
          } else if (mnfd !== undefined || mxfd !== undefined) {
            internalSlots.roundingType = 'fractionDigits';
            mnfd = (0, DefaultNumberOption_1.DefaultNumberOption)(mnfd, 0, 20, mnfdDefault);
            var mxfdActualDefault = Math.max(mnfd, mxfdDefault);
            mxfd = (0, DefaultNumberOption_1.DefaultNumberOption)(mxfd, mnfd, 20, mxfdActualDefault);
            internalSlots.minimumFractionDigits = mnfd;
            internalSlots.maximumFractionDigits = mxfd;
          } else if (notation === 'compact') {
            internalSlots.roundingType = 'compactRounding';
          } else {
            internalSlots.roundingType = 'fractionDigits';
            internalSlots.minimumFractionDigits = mnfdDefault;
            internalSlots.maximumFractionDigits = mxfdDefault;
          }
        }

        exports.SetNumberFormatDigitOptions = SetNumberFormatDigitOptions; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.SetNumberFormatDigitOptions;
      }, () => ({
        '../GetNumberOption': __cjsMetaURL$1,
        '../DefaultNumberOption': __cjsMetaURL$2
      }));
    }
  };
});

System.register("chunks:///_virtual/SetNumberFormatDigitOptions6.js", ['./cjs-loader.mjs', './GetNumberOption6.js', './DefaultNumberOption6.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.SetNumberFormatDigitOptions = void 0;

        var GetNumberOption_1 = require("../GetNumberOption");

        var DefaultNumberOption_1 = require("../DefaultNumberOption");
        /**
         * https://tc39.es/ecma402/#sec-setnfdigitoptions
         */


        function SetNumberFormatDigitOptions(internalSlots, opts, mnfdDefault, mxfdDefault, notation) {
          var mnid = (0, GetNumberOption_1.GetNumberOption)(opts, 'minimumIntegerDigits', 1, 21, 1);
          var mnfd = opts.minimumFractionDigits;
          var mxfd = opts.maximumFractionDigits;
          var mnsd = opts.minimumSignificantDigits;
          var mxsd = opts.maximumSignificantDigits;
          internalSlots.minimumIntegerDigits = mnid;

          if (mnsd !== undefined || mxsd !== undefined) {
            internalSlots.roundingType = 'significantDigits';
            mnsd = (0, DefaultNumberOption_1.DefaultNumberOption)(mnsd, 1, 21, 1);
            mxsd = (0, DefaultNumberOption_1.DefaultNumberOption)(mxsd, mnsd, 21, 21);
            internalSlots.minimumSignificantDigits = mnsd;
            internalSlots.maximumSignificantDigits = mxsd;
          } else if (mnfd !== undefined || mxfd !== undefined) {
            internalSlots.roundingType = 'fractionDigits';
            mnfd = (0, DefaultNumberOption_1.DefaultNumberOption)(mnfd, 0, 20, mnfdDefault);
            var mxfdActualDefault = Math.max(mnfd, mxfdDefault);
            mxfd = (0, DefaultNumberOption_1.DefaultNumberOption)(mxfd, mnfd, 20, mxfdActualDefault);
            internalSlots.minimumFractionDigits = mnfd;
            internalSlots.maximumFractionDigits = mxfd;
          } else if (notation === 'compact') {
            internalSlots.roundingType = 'compactRounding';
          } else {
            internalSlots.roundingType = 'fractionDigits';
            internalSlots.minimumFractionDigits = mnfdDefault;
            internalSlots.maximumFractionDigits = mxfdDefault;
          }
        }

        exports.SetNumberFormatDigitOptions = SetNumberFormatDigitOptions; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.SetNumberFormatDigitOptions;
      }, () => ({
        '../GetNumberOption': __cjsMetaURL$1,
        '../DefaultNumberOption': __cjsMetaURL$2
      }));
    }
  };
});

System.register("chunks:///_virtual/SetNumberFormatDigitOptions7.js", ['./cjs-loader.mjs', './GetNumberOption7.js', './DefaultNumberOption7.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.SetNumberFormatDigitOptions = void 0;

        var GetNumberOption_1 = require("../GetNumberOption");

        var DefaultNumberOption_1 = require("../DefaultNumberOption");
        /**
         * https://tc39.es/ecma402/#sec-setnfdigitoptions
         */


        function SetNumberFormatDigitOptions(internalSlots, opts, mnfdDefault, mxfdDefault, notation) {
          var mnid = (0, GetNumberOption_1.GetNumberOption)(opts, 'minimumIntegerDigits', 1, 21, 1);
          var mnfd = opts.minimumFractionDigits;
          var mxfd = opts.maximumFractionDigits;
          var mnsd = opts.minimumSignificantDigits;
          var mxsd = opts.maximumSignificantDigits;
          internalSlots.minimumIntegerDigits = mnid;

          if (mnsd !== undefined || mxsd !== undefined) {
            internalSlots.roundingType = 'significantDigits';
            mnsd = (0, DefaultNumberOption_1.DefaultNumberOption)(mnsd, 1, 21, 1);
            mxsd = (0, DefaultNumberOption_1.DefaultNumberOption)(mxsd, mnsd, 21, 21);
            internalSlots.minimumSignificantDigits = mnsd;
            internalSlots.maximumSignificantDigits = mxsd;
          } else if (mnfd !== undefined || mxfd !== undefined) {
            internalSlots.roundingType = 'fractionDigits';
            mnfd = (0, DefaultNumberOption_1.DefaultNumberOption)(mnfd, 0, 20, mnfdDefault);
            var mxfdActualDefault = Math.max(mnfd, mxfdDefault);
            mxfd = (0, DefaultNumberOption_1.DefaultNumberOption)(mxfd, mnfd, 20, mxfdActualDefault);
            internalSlots.minimumFractionDigits = mnfd;
            internalSlots.maximumFractionDigits = mxfd;
          } else if (notation === 'compact') {
            internalSlots.roundingType = 'compactRounding';
          } else {
            internalSlots.roundingType = 'fractionDigits';
            internalSlots.minimumFractionDigits = mnfdDefault;
            internalSlots.maximumFractionDigits = mxfdDefault;
          }
        }

        exports.SetNumberFormatDigitOptions = SetNumberFormatDigitOptions; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.SetNumberFormatDigitOptions;
      }, () => ({
        '../GetNumberOption': __cjsMetaURL$1,
        '../DefaultNumberOption': __cjsMetaURL$2
      }));
    }
  };
});

System.register("chunks:///_virtual/SetNumberFormatUnitOptions.js", ['./cjs-loader.mjs', './GetOption.js', './IsWellFormedCurrencyCode.js', './IsWellFormedUnitIdentifier.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.SetNumberFormatUnitOptions = void 0;

        var GetOption_1 = require("../GetOption");

        var IsWellFormedCurrencyCode_1 = require("../IsWellFormedCurrencyCode");

        var IsWellFormedUnitIdentifier_1 = require("../IsWellFormedUnitIdentifier");
        /**
         * https://tc39.es/ecma402/#sec-setnumberformatunitoptions
         */


        function SetNumberFormatUnitOptions(nf, options, _a) {
          if (options === void 0) {
            options = Object.create(null);
          }

          var getInternalSlots = _a.getInternalSlots;
          var internalSlots = getInternalSlots(nf);
          var style = (0, GetOption_1.GetOption)(options, 'style', 'string', ['decimal', 'percent', 'currency', 'unit'], 'decimal');
          internalSlots.style = style;
          var currency = (0, GetOption_1.GetOption)(options, 'currency', 'string', undefined, undefined);

          if (currency !== undefined && !(0, IsWellFormedCurrencyCode_1.IsWellFormedCurrencyCode)(currency)) {
            throw RangeError('Malformed currency code');
          }

          if (style === 'currency' && currency === undefined) {
            throw TypeError('currency cannot be undefined');
          }

          var currencyDisplay = (0, GetOption_1.GetOption)(options, 'currencyDisplay', 'string', ['code', 'symbol', 'narrowSymbol', 'name'], 'symbol');
          var currencySign = (0, GetOption_1.GetOption)(options, 'currencySign', 'string', ['standard', 'accounting'], 'standard');
          var unit = (0, GetOption_1.GetOption)(options, 'unit', 'string', undefined, undefined);

          if (unit !== undefined && !(0, IsWellFormedUnitIdentifier_1.IsWellFormedUnitIdentifier)(unit)) {
            throw RangeError('Invalid unit argument for Intl.NumberFormat()');
          }

          if (style === 'unit' && unit === undefined) {
            throw TypeError('unit cannot be undefined');
          }

          var unitDisplay = (0, GetOption_1.GetOption)(options, 'unitDisplay', 'string', ['short', 'narrow', 'long'], 'short');

          if (style === 'currency') {
            internalSlots.currency = currency.toUpperCase();
            internalSlots.currencyDisplay = currencyDisplay;
            internalSlots.currencySign = currencySign;
          }

          if (style === 'unit') {
            internalSlots.unit = unit;
            internalSlots.unitDisplay = unitDisplay;
          }
        }

        exports.SetNumberFormatUnitOptions = SetNumberFormatUnitOptions; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.SetNumberFormatUnitOptions;
      }, () => ({
        '../GetOption': __cjsMetaURL$1,
        '../IsWellFormedCurrencyCode': __cjsMetaURL$2,
        '../IsWellFormedUnitIdentifier': __cjsMetaURL$3
      }));
    }
  };
});

System.register("chunks:///_virtual/SetNumberFormatUnitOptions2.js", ['./cjs-loader.mjs', './GetOption2.js', './IsWellFormedCurrencyCode2.js', './IsWellFormedUnitIdentifier2.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.SetNumberFormatUnitOptions = void 0;

        var GetOption_1 = require("../GetOption");

        var IsWellFormedCurrencyCode_1 = require("../IsWellFormedCurrencyCode");

        var IsWellFormedUnitIdentifier_1 = require("../IsWellFormedUnitIdentifier");
        /**
         * https://tc39.es/ecma402/#sec-setnumberformatunitoptions
         */


        function SetNumberFormatUnitOptions(nf, options, _a) {
          if (options === void 0) {
            options = Object.create(null);
          }

          var getInternalSlots = _a.getInternalSlots;
          var internalSlots = getInternalSlots(nf);
          var style = (0, GetOption_1.GetOption)(options, 'style', 'string', ['decimal', 'percent', 'currency', 'unit'], 'decimal');
          internalSlots.style = style;
          var currency = (0, GetOption_1.GetOption)(options, 'currency', 'string', undefined, undefined);

          if (currency !== undefined && !(0, IsWellFormedCurrencyCode_1.IsWellFormedCurrencyCode)(currency)) {
            throw RangeError('Malformed currency code');
          }

          if (style === 'currency' && currency === undefined) {
            throw TypeError('currency cannot be undefined');
          }

          var currencyDisplay = (0, GetOption_1.GetOption)(options, 'currencyDisplay', 'string', ['code', 'symbol', 'narrowSymbol', 'name'], 'symbol');
          var currencySign = (0, GetOption_1.GetOption)(options, 'currencySign', 'string', ['standard', 'accounting'], 'standard');
          var unit = (0, GetOption_1.GetOption)(options, 'unit', 'string', undefined, undefined);

          if (unit !== undefined && !(0, IsWellFormedUnitIdentifier_1.IsWellFormedUnitIdentifier)(unit)) {
            throw RangeError('Invalid unit argument for Intl.NumberFormat()');
          }

          if (style === 'unit' && unit === undefined) {
            throw TypeError('unit cannot be undefined');
          }

          var unitDisplay = (0, GetOption_1.GetOption)(options, 'unitDisplay', 'string', ['short', 'narrow', 'long'], 'short');

          if (style === 'currency') {
            internalSlots.currency = currency.toUpperCase();
            internalSlots.currencyDisplay = currencyDisplay;
            internalSlots.currencySign = currencySign;
          }

          if (style === 'unit') {
            internalSlots.unit = unit;
            internalSlots.unitDisplay = unitDisplay;
          }
        }

        exports.SetNumberFormatUnitOptions = SetNumberFormatUnitOptions; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.SetNumberFormatUnitOptions;
      }, () => ({
        '../GetOption': __cjsMetaURL$1,
        '../IsWellFormedCurrencyCode': __cjsMetaURL$2,
        '../IsWellFormedUnitIdentifier': __cjsMetaURL$3
      }));
    }
  };
});

System.register("chunks:///_virtual/SetNumberFormatUnitOptions3.js", ['./cjs-loader.mjs', './GetOption3.js', './IsWellFormedCurrencyCode3.js', './IsWellFormedUnitIdentifier3.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.SetNumberFormatUnitOptions = void 0;

        var GetOption_1 = require("../GetOption");

        var IsWellFormedCurrencyCode_1 = require("../IsWellFormedCurrencyCode");

        var IsWellFormedUnitIdentifier_1 = require("../IsWellFormedUnitIdentifier");
        /**
         * https://tc39.es/ecma402/#sec-setnumberformatunitoptions
         */


        function SetNumberFormatUnitOptions(nf, options, _a) {
          if (options === void 0) {
            options = Object.create(null);
          }

          var getInternalSlots = _a.getInternalSlots;
          var internalSlots = getInternalSlots(nf);
          var style = (0, GetOption_1.GetOption)(options, 'style', 'string', ['decimal', 'percent', 'currency', 'unit'], 'decimal');
          internalSlots.style = style;
          var currency = (0, GetOption_1.GetOption)(options, 'currency', 'string', undefined, undefined);

          if (currency !== undefined && !(0, IsWellFormedCurrencyCode_1.IsWellFormedCurrencyCode)(currency)) {
            throw RangeError('Malformed currency code');
          }

          if (style === 'currency' && currency === undefined) {
            throw TypeError('currency cannot be undefined');
          }

          var currencyDisplay = (0, GetOption_1.GetOption)(options, 'currencyDisplay', 'string', ['code', 'symbol', 'narrowSymbol', 'name'], 'symbol');
          var currencySign = (0, GetOption_1.GetOption)(options, 'currencySign', 'string', ['standard', 'accounting'], 'standard');
          var unit = (0, GetOption_1.GetOption)(options, 'unit', 'string', undefined, undefined);

          if (unit !== undefined && !(0, IsWellFormedUnitIdentifier_1.IsWellFormedUnitIdentifier)(unit)) {
            throw RangeError('Invalid unit argument for Intl.NumberFormat()');
          }

          if (style === 'unit' && unit === undefined) {
            throw TypeError('unit cannot be undefined');
          }

          var unitDisplay = (0, GetOption_1.GetOption)(options, 'unitDisplay', 'string', ['short', 'narrow', 'long'], 'short');

          if (style === 'currency') {
            internalSlots.currency = currency.toUpperCase();
            internalSlots.currencyDisplay = currencyDisplay;
            internalSlots.currencySign = currencySign;
          }

          if (style === 'unit') {
            internalSlots.unit = unit;
            internalSlots.unitDisplay = unitDisplay;
          }
        }

        exports.SetNumberFormatUnitOptions = SetNumberFormatUnitOptions; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.SetNumberFormatUnitOptions;
      }, () => ({
        '../GetOption': __cjsMetaURL$1,
        '../IsWellFormedCurrencyCode': __cjsMetaURL$2,
        '../IsWellFormedUnitIdentifier': __cjsMetaURL$3
      }));
    }
  };
});

System.register("chunks:///_virtual/SetNumberFormatUnitOptions4.js", ['./cjs-loader.mjs', './GetOption4.js', './IsWellFormedCurrencyCode4.js', './IsWellFormedUnitIdentifier4.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.SetNumberFormatUnitOptions = void 0;

        var GetOption_1 = require("../GetOption");

        var IsWellFormedCurrencyCode_1 = require("../IsWellFormedCurrencyCode");

        var IsWellFormedUnitIdentifier_1 = require("../IsWellFormedUnitIdentifier");
        /**
         * https://tc39.es/ecma402/#sec-setnumberformatunitoptions
         */


        function SetNumberFormatUnitOptions(nf, options, _a) {
          if (options === void 0) {
            options = Object.create(null);
          }

          var getInternalSlots = _a.getInternalSlots;
          var internalSlots = getInternalSlots(nf);
          var style = (0, GetOption_1.GetOption)(options, 'style', 'string', ['decimal', 'percent', 'currency', 'unit'], 'decimal');
          internalSlots.style = style;
          var currency = (0, GetOption_1.GetOption)(options, 'currency', 'string', undefined, undefined);

          if (currency !== undefined && !(0, IsWellFormedCurrencyCode_1.IsWellFormedCurrencyCode)(currency)) {
            throw RangeError('Malformed currency code');
          }

          if (style === 'currency' && currency === undefined) {
            throw TypeError('currency cannot be undefined');
          }

          var currencyDisplay = (0, GetOption_1.GetOption)(options, 'currencyDisplay', 'string', ['code', 'symbol', 'narrowSymbol', 'name'], 'symbol');
          var currencySign = (0, GetOption_1.GetOption)(options, 'currencySign', 'string', ['standard', 'accounting'], 'standard');
          var unit = (0, GetOption_1.GetOption)(options, 'unit', 'string', undefined, undefined);

          if (unit !== undefined && !(0, IsWellFormedUnitIdentifier_1.IsWellFormedUnitIdentifier)(unit)) {
            throw RangeError('Invalid unit argument for Intl.NumberFormat()');
          }

          if (style === 'unit' && unit === undefined) {
            throw TypeError('unit cannot be undefined');
          }

          var unitDisplay = (0, GetOption_1.GetOption)(options, 'unitDisplay', 'string', ['short', 'narrow', 'long'], 'short');

          if (style === 'currency') {
            internalSlots.currency = currency.toUpperCase();
            internalSlots.currencyDisplay = currencyDisplay;
            internalSlots.currencySign = currencySign;
          }

          if (style === 'unit') {
            internalSlots.unit = unit;
            internalSlots.unitDisplay = unitDisplay;
          }
        }

        exports.SetNumberFormatUnitOptions = SetNumberFormatUnitOptions; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.SetNumberFormatUnitOptions;
      }, () => ({
        '../GetOption': __cjsMetaURL$1,
        '../IsWellFormedCurrencyCode': __cjsMetaURL$2,
        '../IsWellFormedUnitIdentifier': __cjsMetaURL$3
      }));
    }
  };
});

System.register("chunks:///_virtual/SetNumberFormatUnitOptions5.js", ['./cjs-loader.mjs', './GetOption5.js', './IsWellFormedCurrencyCode5.js', './IsWellFormedUnitIdentifier5.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.SetNumberFormatUnitOptions = void 0;

        var GetOption_1 = require("../GetOption");

        var IsWellFormedCurrencyCode_1 = require("../IsWellFormedCurrencyCode");

        var IsWellFormedUnitIdentifier_1 = require("../IsWellFormedUnitIdentifier");
        /**
         * https://tc39.es/ecma402/#sec-setnumberformatunitoptions
         */


        function SetNumberFormatUnitOptions(nf, options, _a) {
          if (options === void 0) {
            options = Object.create(null);
          }

          var getInternalSlots = _a.getInternalSlots;
          var internalSlots = getInternalSlots(nf);
          var style = (0, GetOption_1.GetOption)(options, 'style', 'string', ['decimal', 'percent', 'currency', 'unit'], 'decimal');
          internalSlots.style = style;
          var currency = (0, GetOption_1.GetOption)(options, 'currency', 'string', undefined, undefined);

          if (currency !== undefined && !(0, IsWellFormedCurrencyCode_1.IsWellFormedCurrencyCode)(currency)) {
            throw RangeError('Malformed currency code');
          }

          if (style === 'currency' && currency === undefined) {
            throw TypeError('currency cannot be undefined');
          }

          var currencyDisplay = (0, GetOption_1.GetOption)(options, 'currencyDisplay', 'string', ['code', 'symbol', 'narrowSymbol', 'name'], 'symbol');
          var currencySign = (0, GetOption_1.GetOption)(options, 'currencySign', 'string', ['standard', 'accounting'], 'standard');
          var unit = (0, GetOption_1.GetOption)(options, 'unit', 'string', undefined, undefined);

          if (unit !== undefined && !(0, IsWellFormedUnitIdentifier_1.IsWellFormedUnitIdentifier)(unit)) {
            throw RangeError('Invalid unit argument for Intl.NumberFormat()');
          }

          if (style === 'unit' && unit === undefined) {
            throw TypeError('unit cannot be undefined');
          }

          var unitDisplay = (0, GetOption_1.GetOption)(options, 'unitDisplay', 'string', ['short', 'narrow', 'long'], 'short');

          if (style === 'currency') {
            internalSlots.currency = currency.toUpperCase();
            internalSlots.currencyDisplay = currencyDisplay;
            internalSlots.currencySign = currencySign;
          }

          if (style === 'unit') {
            internalSlots.unit = unit;
            internalSlots.unitDisplay = unitDisplay;
          }
        }

        exports.SetNumberFormatUnitOptions = SetNumberFormatUnitOptions; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.SetNumberFormatUnitOptions;
      }, () => ({
        '../GetOption': __cjsMetaURL$1,
        '../IsWellFormedCurrencyCode': __cjsMetaURL$2,
        '../IsWellFormedUnitIdentifier': __cjsMetaURL$3
      }));
    }
  };
});

System.register("chunks:///_virtual/SetNumberFormatUnitOptions6.js", ['./cjs-loader.mjs', './GetOption6.js', './IsWellFormedCurrencyCode6.js', './IsWellFormedUnitIdentifier6.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.SetNumberFormatUnitOptions = void 0;

        var GetOption_1 = require("../GetOption");

        var IsWellFormedCurrencyCode_1 = require("../IsWellFormedCurrencyCode");

        var IsWellFormedUnitIdentifier_1 = require("../IsWellFormedUnitIdentifier");
        /**
         * https://tc39.es/ecma402/#sec-setnumberformatunitoptions
         */


        function SetNumberFormatUnitOptions(nf, options, _a) {
          if (options === void 0) {
            options = Object.create(null);
          }

          var getInternalSlots = _a.getInternalSlots;
          var internalSlots = getInternalSlots(nf);
          var style = (0, GetOption_1.GetOption)(options, 'style', 'string', ['decimal', 'percent', 'currency', 'unit'], 'decimal');
          internalSlots.style = style;
          var currency = (0, GetOption_1.GetOption)(options, 'currency', 'string', undefined, undefined);

          if (currency !== undefined && !(0, IsWellFormedCurrencyCode_1.IsWellFormedCurrencyCode)(currency)) {
            throw RangeError('Malformed currency code');
          }

          if (style === 'currency' && currency === undefined) {
            throw TypeError('currency cannot be undefined');
          }

          var currencyDisplay = (0, GetOption_1.GetOption)(options, 'currencyDisplay', 'string', ['code', 'symbol', 'narrowSymbol', 'name'], 'symbol');
          var currencySign = (0, GetOption_1.GetOption)(options, 'currencySign', 'string', ['standard', 'accounting'], 'standard');
          var unit = (0, GetOption_1.GetOption)(options, 'unit', 'string', undefined, undefined);

          if (unit !== undefined && !(0, IsWellFormedUnitIdentifier_1.IsWellFormedUnitIdentifier)(unit)) {
            throw RangeError('Invalid unit argument for Intl.NumberFormat()');
          }

          if (style === 'unit' && unit === undefined) {
            throw TypeError('unit cannot be undefined');
          }

          var unitDisplay = (0, GetOption_1.GetOption)(options, 'unitDisplay', 'string', ['short', 'narrow', 'long'], 'short');

          if (style === 'currency') {
            internalSlots.currency = currency.toUpperCase();
            internalSlots.currencyDisplay = currencyDisplay;
            internalSlots.currencySign = currencySign;
          }

          if (style === 'unit') {
            internalSlots.unit = unit;
            internalSlots.unitDisplay = unitDisplay;
          }
        }

        exports.SetNumberFormatUnitOptions = SetNumberFormatUnitOptions; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.SetNumberFormatUnitOptions;
      }, () => ({
        '../GetOption': __cjsMetaURL$1,
        '../IsWellFormedCurrencyCode': __cjsMetaURL$2,
        '../IsWellFormedUnitIdentifier': __cjsMetaURL$3
      }));
    }
  };
});

System.register("chunks:///_virtual/SetNumberFormatUnitOptions7.js", ['./cjs-loader.mjs', './GetOption7.js', './IsWellFormedCurrencyCode7.js', './IsWellFormedUnitIdentifier7.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.SetNumberFormatUnitOptions = void 0;

        var GetOption_1 = require("../GetOption");

        var IsWellFormedCurrencyCode_1 = require("../IsWellFormedCurrencyCode");

        var IsWellFormedUnitIdentifier_1 = require("../IsWellFormedUnitIdentifier");
        /**
         * https://tc39.es/ecma402/#sec-setnumberformatunitoptions
         */


        function SetNumberFormatUnitOptions(nf, options, _a) {
          if (options === void 0) {
            options = Object.create(null);
          }

          var getInternalSlots = _a.getInternalSlots;
          var internalSlots = getInternalSlots(nf);
          var style = (0, GetOption_1.GetOption)(options, 'style', 'string', ['decimal', 'percent', 'currency', 'unit'], 'decimal');
          internalSlots.style = style;
          var currency = (0, GetOption_1.GetOption)(options, 'currency', 'string', undefined, undefined);

          if (currency !== undefined && !(0, IsWellFormedCurrencyCode_1.IsWellFormedCurrencyCode)(currency)) {
            throw RangeError('Malformed currency code');
          }

          if (style === 'currency' && currency === undefined) {
            throw TypeError('currency cannot be undefined');
          }

          var currencyDisplay = (0, GetOption_1.GetOption)(options, 'currencyDisplay', 'string', ['code', 'symbol', 'narrowSymbol', 'name'], 'symbol');
          var currencySign = (0, GetOption_1.GetOption)(options, 'currencySign', 'string', ['standard', 'accounting'], 'standard');
          var unit = (0, GetOption_1.GetOption)(options, 'unit', 'string', undefined, undefined);

          if (unit !== undefined && !(0, IsWellFormedUnitIdentifier_1.IsWellFormedUnitIdentifier)(unit)) {
            throw RangeError('Invalid unit argument for Intl.NumberFormat()');
          }

          if (style === 'unit' && unit === undefined) {
            throw TypeError('unit cannot be undefined');
          }

          var unitDisplay = (0, GetOption_1.GetOption)(options, 'unitDisplay', 'string', ['short', 'narrow', 'long'], 'short');

          if (style === 'currency') {
            internalSlots.currency = currency.toUpperCase();
            internalSlots.currencyDisplay = currencyDisplay;
            internalSlots.currencySign = currencySign;
          }

          if (style === 'unit') {
            internalSlots.unit = unit;
            internalSlots.unitDisplay = unitDisplay;
          }
        }

        exports.SetNumberFormatUnitOptions = SetNumberFormatUnitOptions; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.SetNumberFormatUnitOptions;
      }, () => ({
        '../GetOption': __cjsMetaURL$1,
        '../IsWellFormedCurrencyCode': __cjsMetaURL$2,
        '../IsWellFormedUnitIdentifier': __cjsMetaURL$3
      }));
    }
  };
});

System.register("chunks:///_virtual/setPrototypeOf.js", [], function (exports) {
  'use strict';

  return {
    execute: function () {
      exports('default', _setPrototypeOf);

      function _setPrototypeOf(o, p) {
        _setPrototypeOf = exports('default', Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
          o.__proto__ = p;
          return o;
        });
        return _setPrototypeOf(o, p);
      }
    }
  };
});

System.register("chunks:///_virtual/SingularRelativeTimeUnit.js", ['./cjs-loader.mjs', './index13.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.SingularRelativeTimeUnit = void 0;

        var ecma402_abstract_1 = require("@formatjs/ecma402-abstract");
        /**
         * https://tc39.es/proposal-intl-relative-time/#sec-singularrelativetimeunit
         * @param unit
         */


        function SingularRelativeTimeUnit(unit) {
          (0, ecma402_abstract_1.invariant)((0, ecma402_abstract_1.Type)(unit) === 'String', 'unit must be a string');
          if (unit === 'seconds') return 'second';
          if (unit === 'minutes') return 'minute';
          if (unit === 'hours') return 'hour';
          if (unit === 'days') return 'day';
          if (unit === 'weeks') return 'week';
          if (unit === 'months') return 'month';
          if (unit === 'quarters') return 'quarter';
          if (unit === 'years') return 'year';

          if (unit !== 'second' && unit !== 'minute' && unit !== 'hour' && unit !== 'day' && unit !== 'week' && unit !== 'month' && unit !== 'quarter' && unit !== 'year') {
            throw new RangeError('invalid unit');
          }

          return unit;
        }

        exports.SingularRelativeTimeUnit = SingularRelativeTimeUnit; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.SingularRelativeTimeUnit;
      }, () => ({
        '@formatjs/ecma402-abstract': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/skeleton.js", ['./cjs-loader.mjs', './tslib3.js', './index16.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.splitRangePattern = exports.splitFallbackRangePattern = exports.parseDateTimeSkeleton = exports.processDateTimePattern = void 0;

        var tslib_1 = require("tslib");

        var ecma402_abstract_1 = require("@formatjs/ecma402-abstract");
        /**
         * https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
         * Credit: https://github.com/caridy/intl-datetimeformat-pattern/blob/master/index.js
         * with some tweaks
         */


        var DATE_TIME_REGEX = /(?:[Eec]{1,6}|G{1,5}|[Qq]{1,5}|(?:[yYur]+|U{1,5})|[ML]{1,5}|d{1,2}|D{1,3}|F{1}|[abB]{1,5}|[hkHK]{1,2}|w{1,2}|W{1}|m{1,2}|s{1,2}|[zZOvVxX]{1,4})(?=([^']*'[^']*')*[^']*$)/g; // trim patterns after transformations

        var expPatternTrimmer = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

        function matchSkeletonPattern(match, result) {
          var len = match.length;

          switch (match[0]) {
            // Era
            case 'G':
              result.era = len === 4 ? 'long' : len === 5 ? 'narrow' : 'short';
              return '{era}';
            // Year

            case 'y':
            case 'Y':
            case 'u':
            case 'U':
            case 'r':
              result.year = len === 2 ? '2-digit' : 'numeric';
              return '{year}';
            // Quarter

            case 'q':
            case 'Q':
              throw new RangeError('`w/Q` (quarter) patterns are not supported');
            // Month

            case 'M':
            case 'L':
              result.month = ['numeric', '2-digit', 'short', 'long', 'narrow'][len - 1];
              return '{month}';
            // Week

            case 'w':
            case 'W':
              throw new RangeError('`w/W` (week of year) patterns are not supported');

            case 'd':
              result.day = ['numeric', '2-digit'][len - 1];
              return '{day}';

            case 'D':
            case 'F':
            case 'g':
              result.day = 'numeric';
              return '{day}';
            // Weekday

            case 'E':
              result.weekday = len === 4 ? 'long' : len === 5 ? 'narrow' : 'short';
              return '{weekday}';

            case 'e':
              result.weekday = [undefined, undefined, 'short', 'long', 'narrow', 'short'][len - 1];
              return '{weekday}';

            case 'c':
              result.weekday = [undefined, undefined, 'short', 'long', 'narrow', 'short'][len - 1];
              return '{weekday}';
            // Period

            case 'a': // AM, PM

            case 'b': // am, pm, noon, midnight

            case 'B':
              // flexible day periods
              result.hour12 = true;
              return '{ampm}';
            // Hour

            case 'h':
              result.hour = ['numeric', '2-digit'][len - 1];
              result.hour12 = true;
              return '{hour}';

            case 'H':
              result.hour = ['numeric', '2-digit'][len - 1];
              return '{hour}';

            case 'K':
              result.hour = ['numeric', '2-digit'][len - 1];
              result.hour12 = true;
              return '{hour}';

            case 'k':
              result.hour = ['numeric', '2-digit'][len - 1];
              return '{hour}';

            case 'j':
            case 'J':
            case 'C':
              throw new RangeError('`j/J/C` (hour) patterns are not supported, use `h/H/K/k` instead');
            // Minute

            case 'm':
              result.minute = ['numeric', '2-digit'][len - 1];
              return '{minute}';
            // Second

            case 's':
              result.second = ['numeric', '2-digit'][len - 1];
              return '{second}';

            case 'S':
            case 'A':
              result.second = 'numeric';
              return '{second}';
            // Zone

            case 'z': // 1..3, 4: specific non-location format

            case 'Z': // 1..3, 4, 5: The ISO8601 varios formats

            case 'O': // 1, 4: miliseconds in day short, long

            case 'v': // 1, 4: generic non-location format

            case 'V': // 1, 2, 3, 4: time zone ID or city

            case 'X': // 1, 2, 3, 4: The ISO8601 varios formats

            case 'x':
              // 1, 2, 3, 4: The ISO8601 varios formats
              result.timeZoneName = len < 4 ? 'short' : 'long';
              return '{timeZoneName}';
          }

          return '';
        }

        function skeletonTokenToTable2(c) {
          switch (c) {
            // Era
            case 'G':
              return 'era';
            // Year

            case 'y':
            case 'Y':
            case 'u':
            case 'U':
            case 'r':
              return 'year';
            // Month

            case 'M':
            case 'L':
              return 'month';
            // Day

            case 'd':
            case 'D':
            case 'F':
            case 'g':
              return 'day';
            // Period

            case 'a': // AM, PM

            case 'b': // am, pm, noon, midnight

            case 'B':
              // flexible day periods
              return 'ampm';
            // Hour

            case 'h':
            case 'H':
            case 'K':
            case 'k':
              return 'hour';
            // Minute

            case 'm':
              return 'minute';
            // Second

            case 's':
            case 'S':
            case 'A':
              return 'second';

            default:
              throw new RangeError('Invalid range pattern token');
          }
        }

        function processDateTimePattern(pattern, result) {
          var literals = []; // Use skeleton to populate result, but use mapped pattern to populate pattern

          var pattern12 = pattern // Double apostrophe
          .replace(/'{2}/g, '{apostrophe}') // Apostrophe-escaped
          .replace(/'(.*?)'/g, function (_, literal) {
            literals.push(literal);
            return "$$".concat(literals.length - 1, "$$");
          }).replace(DATE_TIME_REGEX, function (m) {
            return matchSkeletonPattern(m, result || {});
          }); //Restore literals

          if (literals.length) {
            pattern12 = pattern12.replace(/\$\$(\d+)\$\$/g, function (_, i) {
              return literals[+i];
            }).replace(/\{apostrophe\}/g, "'");
          } // Handle apostrophe-escaped things


          return [pattern12.replace(/([\s\uFEFF\xA0])\{ampm\}([\s\uFEFF\xA0])/, '$1').replace('{ampm}', '').replace(expPatternTrimmer, ''), pattern12];
        }

        exports.processDateTimePattern = processDateTimePattern;
        /**
         * Parse Date time skeleton into Intl.DateTimeFormatOptions
         * Ref: https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
         * @public
         * @param skeleton skeleton string
         */

        function parseDateTimeSkeleton(skeleton, rawPattern, rangePatterns, intervalFormatFallback) {
          if (rawPattern === void 0) {
            rawPattern = skeleton;
          }

          var result = {
            pattern: '',
            pattern12: '',
            skeleton: skeleton,
            rawPattern: rawPattern,
            rangePatterns: {},
            rangePatterns12: {}
          };

          if (rangePatterns) {
            for (var k in rangePatterns) {
              var key = skeletonTokenToTable2(k);
              var rawPattern_1 = rangePatterns[k];
              var intervalResult = {
                patternParts: []
              };

              var _a = processDateTimePattern(rawPattern_1, intervalResult),
                  pattern_1 = _a[0],
                  pattern12_1 = _a[1];

              result.rangePatterns[key] = (0, tslib_1.__assign)((0, tslib_1.__assign)({}, intervalResult), {
                patternParts: splitRangePattern(pattern_1)
              });
              result.rangePatterns12[key] = (0, tslib_1.__assign)((0, tslib_1.__assign)({}, intervalResult), {
                patternParts: splitRangePattern(pattern12_1)
              });
            }
          }

          if (intervalFormatFallback) {
            var patternParts = splitFallbackRangePattern(intervalFormatFallback);
            result.rangePatterns.default = {
              patternParts: patternParts
            };
            result.rangePatterns12.default = {
              patternParts: patternParts
            };
          } // Process skeleton


          skeleton.replace(DATE_TIME_REGEX, function (m) {
            return matchSkeletonPattern(m, result);
          });

          var _b = processDateTimePattern(rawPattern),
              pattern = _b[0],
              pattern12 = _b[1];

          result.pattern = pattern;
          result.pattern12 = pattern12;
          return result;
        }

        exports.parseDateTimeSkeleton = parseDateTimeSkeleton;

        function splitFallbackRangePattern(pattern) {
          var parts = pattern.split(/(\{[0|1]\})/g).filter(Boolean);
          return parts.map(function (pattern) {
            switch (pattern) {
              case '{0}':
                return {
                  source: ecma402_abstract_1.RangePatternType.startRange,
                  pattern: pattern
                };

              case '{1}':
                return {
                  source: ecma402_abstract_1.RangePatternType.endRange,
                  pattern: pattern
                };

              default:
                return {
                  source: ecma402_abstract_1.RangePatternType.shared,
                  pattern: pattern
                };
            }
          });
        }

        exports.splitFallbackRangePattern = splitFallbackRangePattern;

        function splitRangePattern(pattern) {
          var PART_REGEX = /\{(.*?)\}/g; // Map of part and index within the string

          var parts = {};
          var match;
          var splitIndex = 0;

          while (match = PART_REGEX.exec(pattern)) {
            if (!(match[0] in parts)) {
              parts[match[0]] = match.index;
            } else {
              splitIndex = match.index;
              break;
            }
          }

          if (!splitIndex) {
            return [{
              source: ecma402_abstract_1.RangePatternType.startRange,
              pattern: pattern
            }];
          }

          return [{
            source: ecma402_abstract_1.RangePatternType.startRange,
            pattern: pattern.slice(0, splitIndex)
          }, {
            source: ecma402_abstract_1.RangePatternType.endRange,
            pattern: pattern.slice(splitIndex)
          }];
        }

        exports.splitRangePattern = splitRangePattern; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.splitRangePattern;
        module.exports.splitFallbackRangePattern;
        module.exports.parseDateTimeSkeleton;
        module.exports.processDateTimePattern;
      }, () => ({
        'tslib': __cjsMetaURL$1,
        '@formatjs/ecma402-abstract': __cjsMetaURL$2
      }));
    }
  };
});

System.register("chunks:///_virtual/SupportedLocales.js", ['./cjs-loader.mjs', './262.js', './GetOption.js', './index9.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.SupportedLocales = void 0;

        var _262_1 = require("./262");

        var GetOption_1 = require("./GetOption");

        var intl_localematcher_1 = require("@formatjs/intl-localematcher");
        /**
         * https://tc39.es/ecma402/#sec-supportedlocales
         * @param availableLocales
         * @param requestedLocales
         * @param options
         */


        function SupportedLocales(availableLocales, requestedLocales, options) {
          var matcher = 'best fit';

          if (options !== undefined) {
            options = (0, _262_1.ToObject)(options);
            matcher = (0, GetOption_1.GetOption)(options, 'localeMatcher', 'string', ['lookup', 'best fit'], 'best fit');
          }

          if (matcher === 'best fit') {
            return (0, intl_localematcher_1.LookupSupportedLocales)(availableLocales, requestedLocales);
          }

          return (0, intl_localematcher_1.LookupSupportedLocales)(availableLocales, requestedLocales);
        }

        exports.SupportedLocales = SupportedLocales; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.SupportedLocales;
      }, () => ({
        './262': __cjsMetaURL$1,
        './GetOption': __cjsMetaURL$2,
        '@formatjs/intl-localematcher': __cjsMetaURL$3
      }));
    }
  };
});

System.register("chunks:///_virtual/SupportedLocales2.js", ['./cjs-loader.mjs', './2622.js', './GetOption2.js', './index20.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.SupportedLocales = void 0;

        var _262_1 = require("./262");

        var GetOption_1 = require("./GetOption");

        var intl_localematcher_1 = require("@formatjs/intl-localematcher");
        /**
         * https://tc39.es/ecma402/#sec-supportedlocales
         * @param availableLocales
         * @param requestedLocales
         * @param options
         */


        function SupportedLocales(availableLocales, requestedLocales, options) {
          var matcher = 'best fit';

          if (options !== undefined) {
            options = (0, _262_1.ToObject)(options);
            matcher = (0, GetOption_1.GetOption)(options, 'localeMatcher', 'string', ['lookup', 'best fit'], 'best fit');
          }

          if (matcher === 'best fit') {
            return (0, intl_localematcher_1.LookupSupportedLocales)(availableLocales, requestedLocales);
          }

          return (0, intl_localematcher_1.LookupSupportedLocales)(availableLocales, requestedLocales);
        }

        exports.SupportedLocales = SupportedLocales; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.SupportedLocales;
      }, () => ({
        './262': __cjsMetaURL$1,
        './GetOption': __cjsMetaURL$2,
        '@formatjs/intl-localematcher': __cjsMetaURL$3
      }));
    }
  };
});

System.register("chunks:///_virtual/SupportedLocales3.js", ['./cjs-loader.mjs', './2623.js', './GetOption3.js', './index18.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.SupportedLocales = void 0;

        var _262_1 = require("./262");

        var GetOption_1 = require("./GetOption");

        var intl_localematcher_1 = require("@formatjs/intl-localematcher");
        /**
         * https://tc39.es/ecma402/#sec-supportedlocales
         * @param availableLocales
         * @param requestedLocales
         * @param options
         */


        function SupportedLocales(availableLocales, requestedLocales, options) {
          var matcher = 'best fit';

          if (options !== undefined) {
            options = (0, _262_1.ToObject)(options);
            matcher = (0, GetOption_1.GetOption)(options, 'localeMatcher', 'string', ['lookup', 'best fit'], 'best fit');
          }

          if (matcher === 'best fit') {
            return (0, intl_localematcher_1.LookupSupportedLocales)(availableLocales, requestedLocales);
          }

          return (0, intl_localematcher_1.LookupSupportedLocales)(availableLocales, requestedLocales);
        }

        exports.SupportedLocales = SupportedLocales; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.SupportedLocales;
      }, () => ({
        './262': __cjsMetaURL$1,
        './GetOption': __cjsMetaURL$2,
        '@formatjs/intl-localematcher': __cjsMetaURL$3
      }));
    }
  };
});

System.register("chunks:///_virtual/SupportedLocales4.js", ['./cjs-loader.mjs', './2624.js', './GetOption4.js', './index19.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.SupportedLocales = void 0;

        var _262_1 = require("./262");

        var GetOption_1 = require("./GetOption");

        var intl_localematcher_1 = require("@formatjs/intl-localematcher");
        /**
         * https://tc39.es/ecma402/#sec-supportedlocales
         * @param availableLocales
         * @param requestedLocales
         * @param options
         */


        function SupportedLocales(availableLocales, requestedLocales, options) {
          var matcher = 'best fit';

          if (options !== undefined) {
            options = (0, _262_1.ToObject)(options);
            matcher = (0, GetOption_1.GetOption)(options, 'localeMatcher', 'string', ['lookup', 'best fit'], 'best fit');
          }

          if (matcher === 'best fit') {
            return (0, intl_localematcher_1.LookupSupportedLocales)(availableLocales, requestedLocales);
          }

          return (0, intl_localematcher_1.LookupSupportedLocales)(availableLocales, requestedLocales);
        }

        exports.SupportedLocales = SupportedLocales; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.SupportedLocales;
      }, () => ({
        './262': __cjsMetaURL$1,
        './GetOption': __cjsMetaURL$2,
        '@formatjs/intl-localematcher': __cjsMetaURL$3
      }));
    }
  };
});

System.register("chunks:///_virtual/SupportedLocales5.js", ['./cjs-loader.mjs', './2625.js', './GetOption5.js', './index15.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.SupportedLocales = void 0;

        var _262_1 = require("./262");

        var GetOption_1 = require("./GetOption");

        var intl_localematcher_1 = require("@formatjs/intl-localematcher");
        /**
         * https://tc39.es/ecma402/#sec-supportedlocales
         * @param availableLocales
         * @param requestedLocales
         * @param options
         */


        function SupportedLocales(availableLocales, requestedLocales, options) {
          var matcher = 'best fit';

          if (options !== undefined) {
            options = (0, _262_1.ToObject)(options);
            matcher = (0, GetOption_1.GetOption)(options, 'localeMatcher', 'string', ['lookup', 'best fit'], 'best fit');
          }

          if (matcher === 'best fit') {
            return (0, intl_localematcher_1.LookupSupportedLocales)(availableLocales, requestedLocales);
          }

          return (0, intl_localematcher_1.LookupSupportedLocales)(availableLocales, requestedLocales);
        }

        exports.SupportedLocales = SupportedLocales; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.SupportedLocales;
      }, () => ({
        './262': __cjsMetaURL$1,
        './GetOption': __cjsMetaURL$2,
        '@formatjs/intl-localematcher': __cjsMetaURL$3
      }));
    }
  };
});

System.register("chunks:///_virtual/SupportedLocales6.js", ['./cjs-loader.mjs', './2626.js', './GetOption6.js', './index21.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.SupportedLocales = void 0;

        var _262_1 = require("./262");

        var GetOption_1 = require("./GetOption");

        var intl_localematcher_1 = require("@formatjs/intl-localematcher");
        /**
         * https://tc39.es/ecma402/#sec-supportedlocales
         * @param availableLocales
         * @param requestedLocales
         * @param options
         */


        function SupportedLocales(availableLocales, requestedLocales, options) {
          var matcher = 'best fit';

          if (options !== undefined) {
            options = (0, _262_1.ToObject)(options);
            matcher = (0, GetOption_1.GetOption)(options, 'localeMatcher', 'string', ['lookup', 'best fit'], 'best fit');
          }

          if (matcher === 'best fit') {
            return (0, intl_localematcher_1.LookupSupportedLocales)(availableLocales, requestedLocales);
          }

          return (0, intl_localematcher_1.LookupSupportedLocales)(availableLocales, requestedLocales);
        }

        exports.SupportedLocales = SupportedLocales; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.SupportedLocales;
      }, () => ({
        './262': __cjsMetaURL$1,
        './GetOption': __cjsMetaURL$2,
        '@formatjs/intl-localematcher': __cjsMetaURL$3
      }));
    }
  };
});

System.register("chunks:///_virtual/SupportedLocales7.js", ['./cjs-loader.mjs', './2627.js', './GetOption7.js', './index22.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1, __cjsMetaURL$2, __cjsMetaURL$3;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$2 = module.__cjsMetaURL;
    }, function (module) {
      __cjsMetaURL$3 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.SupportedLocales = void 0;

        var _262_1 = require("./262");

        var GetOption_1 = require("./GetOption");

        var intl_localematcher_1 = require("@formatjs/intl-localematcher");
        /**
         * https://tc39.es/ecma402/#sec-supportedlocales
         * @param availableLocales
         * @param requestedLocales
         * @param options
         */


        function SupportedLocales(availableLocales, requestedLocales, options) {
          var matcher = 'best fit';

          if (options !== undefined) {
            options = (0, _262_1.ToObject)(options);
            matcher = (0, GetOption_1.GetOption)(options, 'localeMatcher', 'string', ['lookup', 'best fit'], 'best fit');
          }

          if (matcher === 'best fit') {
            return (0, intl_localematcher_1.LookupSupportedLocales)(availableLocales, requestedLocales);
          }

          return (0, intl_localematcher_1.LookupSupportedLocales)(availableLocales, requestedLocales);
        }

        exports.SupportedLocales = SupportedLocales; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.SupportedLocales;
      }, () => ({
        './262': __cjsMetaURL$1,
        './GetOption': __cjsMetaURL$2,
        '@formatjs/intl-localematcher': __cjsMetaURL$3
      }));
    }
  };
});

System.register("chunks:///_virtual/toArray.js", ['./arrayWithHoles.js', './iterableToArray.js', './unsupportedIterableToArray.js', './nonIterableRest.js'], function (exports) {
  'use strict';

  var _arrayWithHoles, _iterableToArray, _unsupportedIterableToArray, _nonIterableRest;

  return {
    setters: [function (module) {
      _arrayWithHoles = module.default;
    }, function (module) {
      _iterableToArray = module.default;
    }, function (module) {
      _unsupportedIterableToArray = module.default;
    }, function (module) {
      _nonIterableRest = module.default;
    }],
    execute: function () {
      exports('default', _toArray);

      function _toArray(arr) {
        return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest();
      }
    }
  };
});

System.register("chunks:///_virtual/ToDateTimeOptions.js", ['./cjs-loader.mjs', './index16.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ToDateTimeOptions = void 0;

        var ecma402_abstract_1 = require("@formatjs/ecma402-abstract");
        /**
         * https://tc39.es/ecma402/#sec-todatetimeoptions
         * @param options
         * @param required
         * @param defaults
         */


        function ToDateTimeOptions(options, required, defaults) {
          if (options === undefined) {
            options = null;
          } else {
            options = (0, ecma402_abstract_1.ToObject)(options);
          }

          options = Object.create(options);
          var needDefaults = true;

          if (required === 'date' || required === 'any') {
            for (var _i = 0, _a = ['weekday', 'year', 'month', 'day']; _i < _a.length; _i++) {
              var prop = _a[_i];
              var value = options[prop];

              if (value !== undefined) {
                needDefaults = false;
              }
            }
          }

          if (required === 'time' || required === 'any') {
            for (var _b = 0, _c = ['dayPeriod', 'hour', 'minute', 'second', 'fractionalSecondDigits']; _b < _c.length; _b++) {
              var prop = _c[_b];
              var value = options[prop];

              if (value !== undefined) {
                needDefaults = false;
              }
            }
          }

          if (options.dateStyle !== undefined || options.timeStyle !== undefined) {
            needDefaults = false;
          }

          if (required === 'date' && options.timeStyle) {
            throw new TypeError('Intl.DateTimeFormat date was required but timeStyle was included');
          }

          if (required === 'time' && options.dateStyle) {
            throw new TypeError('Intl.DateTimeFormat time was required but dateStyle was included');
          }

          if (needDefaults && (defaults === 'date' || defaults === 'all')) {
            for (var _d = 0, _e = ['year', 'month', 'day']; _d < _e.length; _d++) {
              var prop = _e[_d];
              options[prop] = 'numeric';
            }
          }

          if (needDefaults && (defaults === 'time' || defaults === 'all')) {
            for (var _f = 0, _g = ['hour', 'minute', 'second']; _f < _g.length; _f++) {
              var prop = _g[_f];
              options[prop] = 'numeric';
            }
          }

          return options;
        }

        exports.ToDateTimeOptions = ToDateTimeOptions; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.ToDateTimeOptions;
      }, () => ({
        '@formatjs/ecma402-abstract': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/ToLocalTime.js", ['./cjs-loader.mjs', './index16.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ToLocalTime = void 0;

        var ecma402_abstract_1 = require("@formatjs/ecma402-abstract");

        function getApplicableZoneData(t, timeZone, tzData) {
          var _a;

          var zoneData = tzData[timeZone]; // We don't have data for this so just say it's UTC

          if (!zoneData) {
            return [0, false];
          }

          var i = 0;
          var offset = 0;
          var dst = false;

          for (; i <= zoneData.length; i++) {
            if (i === zoneData.length || zoneData[i][0] * 1e3 > t) {
              _a = zoneData[i - 1], offset = _a[2], dst = _a[3];
              break;
            }
          }

          return [offset * 1e3, dst];
        }
        /**
         * https://tc39.es/ecma402/#sec-tolocaltime
         * @param t
         * @param calendar
         * @param timeZone
         */


        function ToLocalTime(t, calendar, timeZone, _a) {
          var tzData = _a.tzData;
          (0, ecma402_abstract_1.invariant)((0, ecma402_abstract_1.Type)(t) === 'Number', 'invalid time');
          (0, ecma402_abstract_1.invariant)(calendar === 'gregory', 'We only support Gregory calendar right now');

          var _b = getApplicableZoneData(t, timeZone, tzData),
              timeZoneOffset = _b[0],
              inDST = _b[1];

          var tz = t + timeZoneOffset;
          var year = (0, ecma402_abstract_1.YearFromTime)(tz);
          return {
            weekday: (0, ecma402_abstract_1.WeekDay)(tz),
            era: year < 0 ? 'BC' : 'AD',
            year: year,
            relatedYear: undefined,
            yearName: undefined,
            month: (0, ecma402_abstract_1.MonthFromTime)(tz),
            day: (0, ecma402_abstract_1.DateFromTime)(tz),
            hour: (0, ecma402_abstract_1.HourFromTime)(tz),
            minute: (0, ecma402_abstract_1.MinFromTime)(tz),
            second: (0, ecma402_abstract_1.SecFromTime)(tz),
            millisecond: (0, ecma402_abstract_1.msFromTime)(tz),
            inDST: inDST,
            // IMPORTANT: Not in spec
            timeZoneOffset: timeZoneOffset
          };
        }

        exports.ToLocalTime = ToLocalTime; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.ToLocalTime;
      }, () => ({
        '@formatjs/ecma402-abstract': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/ToRawFixed.js", ['./cjs-loader.mjs', './utils2.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ToRawFixed = void 0;

        var utils_1 = require("../utils");
        /**
         * TODO: dedup with intl-pluralrules and support BigInt
         * https://tc39.es/ecma402/#sec-torawfixed
         * @param x a finite non-negative Number or BigInt
         * @param minFraction and integer between 0 and 20
         * @param maxFraction and integer between 0 and 20
         */


        function ToRawFixed(x, minFraction, maxFraction) {
          var f = maxFraction;
          var n = Math.round(x * Math.pow(10, f));
          var xFinal = n / Math.pow(10, f); // n is a positive integer, but it is possible to be greater than 1e21.
          // In such case we will go the slow path.
          // See also: https://tc39.es/ecma262/#sec-numeric-types-number-tostring

          var m;

          if (n < 1e21) {
            m = n.toString();
          } else {
            m = n.toString();

            var _a = m.split('e'),
                mantissa = _a[0],
                exponent = _a[1];

            m = mantissa.replace('.', '');
            m = m + (0, utils_1.repeat)('0', Math.max(+exponent - m.length + 1, 0));
          }

          var int;

          if (f !== 0) {
            var k = m.length;

            if (k <= f) {
              var z = (0, utils_1.repeat)('0', f + 1 - k);
              m = z + m;
              k = f + 1;
            }

            var a = m.slice(0, k - f);
            var b = m.slice(k - f);
            m = "".concat(a, ".").concat(b);
            int = a.length;
          } else {
            int = m.length;
          }

          var cut = maxFraction - minFraction;

          while (cut > 0 && m[m.length - 1] === '0') {
            m = m.slice(0, -1);
            cut--;
          }

          if (m[m.length - 1] === '.') {
            m = m.slice(0, -1);
          }

          return {
            formattedString: m,
            roundedNumber: xFinal,
            integerDigitsCount: int
          };
        }

        exports.ToRawFixed = ToRawFixed; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.ToRawFixed;
      }, () => ({
        '../utils': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/ToRawFixed2.js", ['./cjs-loader.mjs', './utils3.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ToRawFixed = void 0;

        var utils_1 = require("../utils");
        /**
         * TODO: dedup with intl-pluralrules and support BigInt
         * https://tc39.es/ecma402/#sec-torawfixed
         * @param x a finite non-negative Number or BigInt
         * @param minFraction and integer between 0 and 20
         * @param maxFraction and integer between 0 and 20
         */


        function ToRawFixed(x, minFraction, maxFraction) {
          var f = maxFraction;
          var n = Math.round(x * Math.pow(10, f));
          var xFinal = n / Math.pow(10, f); // n is a positive integer, but it is possible to be greater than 1e21.
          // In such case we will go the slow path.
          // See also: https://tc39.es/ecma262/#sec-numeric-types-number-tostring

          var m;

          if (n < 1e21) {
            m = n.toString();
          } else {
            m = n.toString();

            var _a = m.split('e'),
                mantissa = _a[0],
                exponent = _a[1];

            m = mantissa.replace('.', '');
            m = m + (0, utils_1.repeat)('0', Math.max(+exponent - m.length + 1, 0));
          }

          var int;

          if (f !== 0) {
            var k = m.length;

            if (k <= f) {
              var z = (0, utils_1.repeat)('0', f + 1 - k);
              m = z + m;
              k = f + 1;
            }

            var a = m.slice(0, k - f);
            var b = m.slice(k - f);
            m = "".concat(a, ".").concat(b);
            int = a.length;
          } else {
            int = m.length;
          }

          var cut = maxFraction - minFraction;

          while (cut > 0 && m[m.length - 1] === '0') {
            m = m.slice(0, -1);
            cut--;
          }

          if (m[m.length - 1] === '.') {
            m = m.slice(0, -1);
          }

          return {
            formattedString: m,
            roundedNumber: xFinal,
            integerDigitsCount: int
          };
        }

        exports.ToRawFixed = ToRawFixed; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.ToRawFixed;
      }, () => ({
        '../utils': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/ToRawFixed3.js", ['./cjs-loader.mjs', './utils4.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ToRawFixed = void 0;

        var utils_1 = require("../utils");
        /**
         * TODO: dedup with intl-pluralrules and support BigInt
         * https://tc39.es/ecma402/#sec-torawfixed
         * @param x a finite non-negative Number or BigInt
         * @param minFraction and integer between 0 and 20
         * @param maxFraction and integer between 0 and 20
         */


        function ToRawFixed(x, minFraction, maxFraction) {
          var f = maxFraction;
          var n = Math.round(x * Math.pow(10, f));
          var xFinal = n / Math.pow(10, f); // n is a positive integer, but it is possible to be greater than 1e21.
          // In such case we will go the slow path.
          // See also: https://tc39.es/ecma262/#sec-numeric-types-number-tostring

          var m;

          if (n < 1e21) {
            m = n.toString();
          } else {
            m = n.toString();

            var _a = m.split('e'),
                mantissa = _a[0],
                exponent = _a[1];

            m = mantissa.replace('.', '');
            m = m + (0, utils_1.repeat)('0', Math.max(+exponent - m.length + 1, 0));
          }

          var int;

          if (f !== 0) {
            var k = m.length;

            if (k <= f) {
              var z = (0, utils_1.repeat)('0', f + 1 - k);
              m = z + m;
              k = f + 1;
            }

            var a = m.slice(0, k - f);
            var b = m.slice(k - f);
            m = "".concat(a, ".").concat(b);
            int = a.length;
          } else {
            int = m.length;
          }

          var cut = maxFraction - minFraction;

          while (cut > 0 && m[m.length - 1] === '0') {
            m = m.slice(0, -1);
            cut--;
          }

          if (m[m.length - 1] === '.') {
            m = m.slice(0, -1);
          }

          return {
            formattedString: m,
            roundedNumber: xFinal,
            integerDigitsCount: int
          };
        }

        exports.ToRawFixed = ToRawFixed; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.ToRawFixed;
      }, () => ({
        '../utils': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/ToRawFixed4.js", ['./cjs-loader.mjs', './utils5.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ToRawFixed = void 0;

        var utils_1 = require("../utils");
        /**
         * TODO: dedup with intl-pluralrules and support BigInt
         * https://tc39.es/ecma402/#sec-torawfixed
         * @param x a finite non-negative Number or BigInt
         * @param minFraction and integer between 0 and 20
         * @param maxFraction and integer between 0 and 20
         */


        function ToRawFixed(x, minFraction, maxFraction) {
          var f = maxFraction;
          var n = Math.round(x * Math.pow(10, f));
          var xFinal = n / Math.pow(10, f); // n is a positive integer, but it is possible to be greater than 1e21.
          // In such case we will go the slow path.
          // See also: https://tc39.es/ecma262/#sec-numeric-types-number-tostring

          var m;

          if (n < 1e21) {
            m = n.toString();
          } else {
            m = n.toString();

            var _a = m.split('e'),
                mantissa = _a[0],
                exponent = _a[1];

            m = mantissa.replace('.', '');
            m = m + (0, utils_1.repeat)('0', Math.max(+exponent - m.length + 1, 0));
          }

          var int;

          if (f !== 0) {
            var k = m.length;

            if (k <= f) {
              var z = (0, utils_1.repeat)('0', f + 1 - k);
              m = z + m;
              k = f + 1;
            }

            var a = m.slice(0, k - f);
            var b = m.slice(k - f);
            m = "".concat(a, ".").concat(b);
            int = a.length;
          } else {
            int = m.length;
          }

          var cut = maxFraction - minFraction;

          while (cut > 0 && m[m.length - 1] === '0') {
            m = m.slice(0, -1);
            cut--;
          }

          if (m[m.length - 1] === '.') {
            m = m.slice(0, -1);
          }

          return {
            formattedString: m,
            roundedNumber: xFinal,
            integerDigitsCount: int
          };
        }

        exports.ToRawFixed = ToRawFixed; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.ToRawFixed;
      }, () => ({
        '../utils': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/ToRawFixed5.js", ['./cjs-loader.mjs', './utils6.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ToRawFixed = void 0;

        var utils_1 = require("../utils");
        /**
         * TODO: dedup with intl-pluralrules and support BigInt
         * https://tc39.es/ecma402/#sec-torawfixed
         * @param x a finite non-negative Number or BigInt
         * @param minFraction and integer between 0 and 20
         * @param maxFraction and integer between 0 and 20
         */


        function ToRawFixed(x, minFraction, maxFraction) {
          var f = maxFraction;
          var n = Math.round(x * Math.pow(10, f));
          var xFinal = n / Math.pow(10, f); // n is a positive integer, but it is possible to be greater than 1e21.
          // In such case we will go the slow path.
          // See also: https://tc39.es/ecma262/#sec-numeric-types-number-tostring

          var m;

          if (n < 1e21) {
            m = n.toString();
          } else {
            m = n.toString();

            var _a = m.split('e'),
                mantissa = _a[0],
                exponent = _a[1];

            m = mantissa.replace('.', '');
            m = m + (0, utils_1.repeat)('0', Math.max(+exponent - m.length + 1, 0));
          }

          var int;

          if (f !== 0) {
            var k = m.length;

            if (k <= f) {
              var z = (0, utils_1.repeat)('0', f + 1 - k);
              m = z + m;
              k = f + 1;
            }

            var a = m.slice(0, k - f);
            var b = m.slice(k - f);
            m = "".concat(a, ".").concat(b);
            int = a.length;
          } else {
            int = m.length;
          }

          var cut = maxFraction - minFraction;

          while (cut > 0 && m[m.length - 1] === '0') {
            m = m.slice(0, -1);
            cut--;
          }

          if (m[m.length - 1] === '.') {
            m = m.slice(0, -1);
          }

          return {
            formattedString: m,
            roundedNumber: xFinal,
            integerDigitsCount: int
          };
        }

        exports.ToRawFixed = ToRawFixed; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.ToRawFixed;
      }, () => ({
        '../utils': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/ToRawFixed6.js", ['./cjs-loader.mjs', './utils8.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ToRawFixed = void 0;

        var utils_1 = require("../utils");
        /**
         * TODO: dedup with intl-pluralrules and support BigInt
         * https://tc39.es/ecma402/#sec-torawfixed
         * @param x a finite non-negative Number or BigInt
         * @param minFraction and integer between 0 and 20
         * @param maxFraction and integer between 0 and 20
         */


        function ToRawFixed(x, minFraction, maxFraction) {
          var f = maxFraction;
          var n = Math.round(x * Math.pow(10, f));
          var xFinal = n / Math.pow(10, f); // n is a positive integer, but it is possible to be greater than 1e21.
          // In such case we will go the slow path.
          // See also: https://tc39.es/ecma262/#sec-numeric-types-number-tostring

          var m;

          if (n < 1e21) {
            m = n.toString();
          } else {
            m = n.toString();

            var _a = m.split('e'),
                mantissa = _a[0],
                exponent = _a[1];

            m = mantissa.replace('.', '');
            m = m + (0, utils_1.repeat)('0', Math.max(+exponent - m.length + 1, 0));
          }

          var int;

          if (f !== 0) {
            var k = m.length;

            if (k <= f) {
              var z = (0, utils_1.repeat)('0', f + 1 - k);
              m = z + m;
              k = f + 1;
            }

            var a = m.slice(0, k - f);
            var b = m.slice(k - f);
            m = "".concat(a, ".").concat(b);
            int = a.length;
          } else {
            int = m.length;
          }

          var cut = maxFraction - minFraction;

          while (cut > 0 && m[m.length - 1] === '0') {
            m = m.slice(0, -1);
            cut--;
          }

          if (m[m.length - 1] === '.') {
            m = m.slice(0, -1);
          }

          return {
            formattedString: m,
            roundedNumber: xFinal,
            integerDigitsCount: int
          };
        }

        exports.ToRawFixed = ToRawFixed; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.ToRawFixed;
      }, () => ({
        '../utils': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/ToRawFixed7.js", ['./cjs-loader.mjs', './utils9.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ToRawFixed = void 0;

        var utils_1 = require("../utils");
        /**
         * TODO: dedup with intl-pluralrules and support BigInt
         * https://tc39.es/ecma402/#sec-torawfixed
         * @param x a finite non-negative Number or BigInt
         * @param minFraction and integer between 0 and 20
         * @param maxFraction and integer between 0 and 20
         */


        function ToRawFixed(x, minFraction, maxFraction) {
          var f = maxFraction;
          var n = Math.round(x * Math.pow(10, f));
          var xFinal = n / Math.pow(10, f); // n is a positive integer, but it is possible to be greater than 1e21.
          // In such case we will go the slow path.
          // See also: https://tc39.es/ecma262/#sec-numeric-types-number-tostring

          var m;

          if (n < 1e21) {
            m = n.toString();
          } else {
            m = n.toString();

            var _a = m.split('e'),
                mantissa = _a[0],
                exponent = _a[1];

            m = mantissa.replace('.', '');
            m = m + (0, utils_1.repeat)('0', Math.max(+exponent - m.length + 1, 0));
          }

          var int;

          if (f !== 0) {
            var k = m.length;

            if (k <= f) {
              var z = (0, utils_1.repeat)('0', f + 1 - k);
              m = z + m;
              k = f + 1;
            }

            var a = m.slice(0, k - f);
            var b = m.slice(k - f);
            m = "".concat(a, ".").concat(b);
            int = a.length;
          } else {
            int = m.length;
          }

          var cut = maxFraction - minFraction;

          while (cut > 0 && m[m.length - 1] === '0') {
            m = m.slice(0, -1);
            cut--;
          }

          if (m[m.length - 1] === '.') {
            m = m.slice(0, -1);
          }

          return {
            formattedString: m,
            roundedNumber: xFinal,
            integerDigitsCount: int
          };
        }

        exports.ToRawFixed = ToRawFixed; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.ToRawFixed;
      }, () => ({
        '../utils': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/ToRawPrecision.js", ['./cjs-loader.mjs', './utils2.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ToRawPrecision = void 0;

        var utils_1 = require("../utils");

        function ToRawPrecision(x, minPrecision, maxPrecision) {
          var p = maxPrecision;
          var m;
          var e;
          var xFinal;

          if (x === 0) {
            m = (0, utils_1.repeat)('0', p);
            e = 0;
            xFinal = 0;
          } else {
            var xToString = x.toString(); // If xToString is formatted as scientific notation, the number is either very small or very
            // large. If the precision of the formatted string is lower that requested max precision, we
            // should still infer them from the formatted string, otherwise the formatted result might have
            // precision loss (e.g. 1e41 will not have 0 in every trailing digits).

            var xToStringExponentIndex = xToString.indexOf('e');

            var _a = xToString.split('e'),
                xToStringMantissa = _a[0],
                xToStringExponent = _a[1];

            var xToStringMantissaWithoutDecimalPoint = xToStringMantissa.replace('.', '');

            if (xToStringExponentIndex >= 0 && xToStringMantissaWithoutDecimalPoint.length <= p) {
              e = +xToStringExponent;
              m = xToStringMantissaWithoutDecimalPoint + (0, utils_1.repeat)('0', p - xToStringMantissaWithoutDecimalPoint.length);
              xFinal = x;
            } else {
              e = (0, utils_1.getMagnitude)(x);
              var decimalPlaceOffset = e - p + 1; // n is the integer containing the required precision digits. To derive the formatted string,
              // we will adjust its decimal place in the logic below.

              var n = Math.round(adjustDecimalPlace(x, decimalPlaceOffset)); // The rounding caused the change of magnitude, so we should increment `e` by 1.

              if (adjustDecimalPlace(n, p - 1) >= 10) {
                e = e + 1; // Divide n by 10 to swallow one precision.

                n = Math.floor(n / 10);
              }

              m = n.toString(); // Equivalent of n * 10 ** (e - p + 1)

              xFinal = adjustDecimalPlace(n, p - 1 - e);
            }
          }

          var int;

          if (e >= p - 1) {
            m = m + (0, utils_1.repeat)('0', e - p + 1);
            int = e + 1;
          } else if (e >= 0) {
            m = "".concat(m.slice(0, e + 1), ".").concat(m.slice(e + 1));
            int = e + 1;
          } else {
            m = "0.".concat((0, utils_1.repeat)('0', -e - 1)).concat(m);
            int = 1;
          }

          if (m.indexOf('.') >= 0 && maxPrecision > minPrecision) {
            var cut = maxPrecision - minPrecision;

            while (cut > 0 && m[m.length - 1] === '0') {
              m = m.slice(0, -1);
              cut--;
            }

            if (m[m.length - 1] === '.') {
              m = m.slice(0, -1);
            }
          }

          return {
            formattedString: m,
            roundedNumber: xFinal,
            integerDigitsCount: int
          }; // x / (10 ** magnitude), but try to preserve as much floating point precision as possible.

          function adjustDecimalPlace(x, magnitude) {
            return magnitude < 0 ? x * Math.pow(10, -magnitude) : x / Math.pow(10, magnitude);
          }
        }

        exports.ToRawPrecision = ToRawPrecision; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.ToRawPrecision;
      }, () => ({
        '../utils': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/ToRawPrecision2.js", ['./cjs-loader.mjs', './utils3.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ToRawPrecision = void 0;

        var utils_1 = require("../utils");

        function ToRawPrecision(x, minPrecision, maxPrecision) {
          var p = maxPrecision;
          var m;
          var e;
          var xFinal;

          if (x === 0) {
            m = (0, utils_1.repeat)('0', p);
            e = 0;
            xFinal = 0;
          } else {
            var xToString = x.toString(); // If xToString is formatted as scientific notation, the number is either very small or very
            // large. If the precision of the formatted string is lower that requested max precision, we
            // should still infer them from the formatted string, otherwise the formatted result might have
            // precision loss (e.g. 1e41 will not have 0 in every trailing digits).

            var xToStringExponentIndex = xToString.indexOf('e');

            var _a = xToString.split('e'),
                xToStringMantissa = _a[0],
                xToStringExponent = _a[1];

            var xToStringMantissaWithoutDecimalPoint = xToStringMantissa.replace('.', '');

            if (xToStringExponentIndex >= 0 && xToStringMantissaWithoutDecimalPoint.length <= p) {
              e = +xToStringExponent;
              m = xToStringMantissaWithoutDecimalPoint + (0, utils_1.repeat)('0', p - xToStringMantissaWithoutDecimalPoint.length);
              xFinal = x;
            } else {
              e = (0, utils_1.getMagnitude)(x);
              var decimalPlaceOffset = e - p + 1; // n is the integer containing the required precision digits. To derive the formatted string,
              // we will adjust its decimal place in the logic below.

              var n = Math.round(adjustDecimalPlace(x, decimalPlaceOffset)); // The rounding caused the change of magnitude, so we should increment `e` by 1.

              if (adjustDecimalPlace(n, p - 1) >= 10) {
                e = e + 1; // Divide n by 10 to swallow one precision.

                n = Math.floor(n / 10);
              }

              m = n.toString(); // Equivalent of n * 10 ** (e - p + 1)

              xFinal = adjustDecimalPlace(n, p - 1 - e);
            }
          }

          var int;

          if (e >= p - 1) {
            m = m + (0, utils_1.repeat)('0', e - p + 1);
            int = e + 1;
          } else if (e >= 0) {
            m = "".concat(m.slice(0, e + 1), ".").concat(m.slice(e + 1));
            int = e + 1;
          } else {
            m = "0.".concat((0, utils_1.repeat)('0', -e - 1)).concat(m);
            int = 1;
          }

          if (m.indexOf('.') >= 0 && maxPrecision > minPrecision) {
            var cut = maxPrecision - minPrecision;

            while (cut > 0 && m[m.length - 1] === '0') {
              m = m.slice(0, -1);
              cut--;
            }

            if (m[m.length - 1] === '.') {
              m = m.slice(0, -1);
            }
          }

          return {
            formattedString: m,
            roundedNumber: xFinal,
            integerDigitsCount: int
          }; // x / (10 ** magnitude), but try to preserve as much floating point precision as possible.

          function adjustDecimalPlace(x, magnitude) {
            return magnitude < 0 ? x * Math.pow(10, -magnitude) : x / Math.pow(10, magnitude);
          }
        }

        exports.ToRawPrecision = ToRawPrecision; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.ToRawPrecision;
      }, () => ({
        '../utils': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/ToRawPrecision3.js", ['./cjs-loader.mjs', './utils4.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ToRawPrecision = void 0;

        var utils_1 = require("../utils");

        function ToRawPrecision(x, minPrecision, maxPrecision) {
          var p = maxPrecision;
          var m;
          var e;
          var xFinal;

          if (x === 0) {
            m = (0, utils_1.repeat)('0', p);
            e = 0;
            xFinal = 0;
          } else {
            var xToString = x.toString(); // If xToString is formatted as scientific notation, the number is either very small or very
            // large. If the precision of the formatted string is lower that requested max precision, we
            // should still infer them from the formatted string, otherwise the formatted result might have
            // precision loss (e.g. 1e41 will not have 0 in every trailing digits).

            var xToStringExponentIndex = xToString.indexOf('e');

            var _a = xToString.split('e'),
                xToStringMantissa = _a[0],
                xToStringExponent = _a[1];

            var xToStringMantissaWithoutDecimalPoint = xToStringMantissa.replace('.', '');

            if (xToStringExponentIndex >= 0 && xToStringMantissaWithoutDecimalPoint.length <= p) {
              e = +xToStringExponent;
              m = xToStringMantissaWithoutDecimalPoint + (0, utils_1.repeat)('0', p - xToStringMantissaWithoutDecimalPoint.length);
              xFinal = x;
            } else {
              e = (0, utils_1.getMagnitude)(x);
              var decimalPlaceOffset = e - p + 1; // n is the integer containing the required precision digits. To derive the formatted string,
              // we will adjust its decimal place in the logic below.

              var n = Math.round(adjustDecimalPlace(x, decimalPlaceOffset)); // The rounding caused the change of magnitude, so we should increment `e` by 1.

              if (adjustDecimalPlace(n, p - 1) >= 10) {
                e = e + 1; // Divide n by 10 to swallow one precision.

                n = Math.floor(n / 10);
              }

              m = n.toString(); // Equivalent of n * 10 ** (e - p + 1)

              xFinal = adjustDecimalPlace(n, p - 1 - e);
            }
          }

          var int;

          if (e >= p - 1) {
            m = m + (0, utils_1.repeat)('0', e - p + 1);
            int = e + 1;
          } else if (e >= 0) {
            m = "".concat(m.slice(0, e + 1), ".").concat(m.slice(e + 1));
            int = e + 1;
          } else {
            m = "0.".concat((0, utils_1.repeat)('0', -e - 1)).concat(m);
            int = 1;
          }

          if (m.indexOf('.') >= 0 && maxPrecision > minPrecision) {
            var cut = maxPrecision - minPrecision;

            while (cut > 0 && m[m.length - 1] === '0') {
              m = m.slice(0, -1);
              cut--;
            }

            if (m[m.length - 1] === '.') {
              m = m.slice(0, -1);
            }
          }

          return {
            formattedString: m,
            roundedNumber: xFinal,
            integerDigitsCount: int
          }; // x / (10 ** magnitude), but try to preserve as much floating point precision as possible.

          function adjustDecimalPlace(x, magnitude) {
            return magnitude < 0 ? x * Math.pow(10, -magnitude) : x / Math.pow(10, magnitude);
          }
        }

        exports.ToRawPrecision = ToRawPrecision; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.ToRawPrecision;
      }, () => ({
        '../utils': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/ToRawPrecision4.js", ['./cjs-loader.mjs', './utils5.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ToRawPrecision = void 0;

        var utils_1 = require("../utils");

        function ToRawPrecision(x, minPrecision, maxPrecision) {
          var p = maxPrecision;
          var m;
          var e;
          var xFinal;

          if (x === 0) {
            m = (0, utils_1.repeat)('0', p);
            e = 0;
            xFinal = 0;
          } else {
            var xToString = x.toString(); // If xToString is formatted as scientific notation, the number is either very small or very
            // large. If the precision of the formatted string is lower that requested max precision, we
            // should still infer them from the formatted string, otherwise the formatted result might have
            // precision loss (e.g. 1e41 will not have 0 in every trailing digits).

            var xToStringExponentIndex = xToString.indexOf('e');

            var _a = xToString.split('e'),
                xToStringMantissa = _a[0],
                xToStringExponent = _a[1];

            var xToStringMantissaWithoutDecimalPoint = xToStringMantissa.replace('.', '');

            if (xToStringExponentIndex >= 0 && xToStringMantissaWithoutDecimalPoint.length <= p) {
              e = +xToStringExponent;
              m = xToStringMantissaWithoutDecimalPoint + (0, utils_1.repeat)('0', p - xToStringMantissaWithoutDecimalPoint.length);
              xFinal = x;
            } else {
              e = (0, utils_1.getMagnitude)(x);
              var decimalPlaceOffset = e - p + 1; // n is the integer containing the required precision digits. To derive the formatted string,
              // we will adjust its decimal place in the logic below.

              var n = Math.round(adjustDecimalPlace(x, decimalPlaceOffset)); // The rounding caused the change of magnitude, so we should increment `e` by 1.

              if (adjustDecimalPlace(n, p - 1) >= 10) {
                e = e + 1; // Divide n by 10 to swallow one precision.

                n = Math.floor(n / 10);
              }

              m = n.toString(); // Equivalent of n * 10 ** (e - p + 1)

              xFinal = adjustDecimalPlace(n, p - 1 - e);
            }
          }

          var int;

          if (e >= p - 1) {
            m = m + (0, utils_1.repeat)('0', e - p + 1);
            int = e + 1;
          } else if (e >= 0) {
            m = "".concat(m.slice(0, e + 1), ".").concat(m.slice(e + 1));
            int = e + 1;
          } else {
            m = "0.".concat((0, utils_1.repeat)('0', -e - 1)).concat(m);
            int = 1;
          }

          if (m.indexOf('.') >= 0 && maxPrecision > minPrecision) {
            var cut = maxPrecision - minPrecision;

            while (cut > 0 && m[m.length - 1] === '0') {
              m = m.slice(0, -1);
              cut--;
            }

            if (m[m.length - 1] === '.') {
              m = m.slice(0, -1);
            }
          }

          return {
            formattedString: m,
            roundedNumber: xFinal,
            integerDigitsCount: int
          }; // x / (10 ** magnitude), but try to preserve as much floating point precision as possible.

          function adjustDecimalPlace(x, magnitude) {
            return magnitude < 0 ? x * Math.pow(10, -magnitude) : x / Math.pow(10, magnitude);
          }
        }

        exports.ToRawPrecision = ToRawPrecision; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.ToRawPrecision;
      }, () => ({
        '../utils': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/ToRawPrecision5.js", ['./cjs-loader.mjs', './utils6.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ToRawPrecision = void 0;

        var utils_1 = require("../utils");

        function ToRawPrecision(x, minPrecision, maxPrecision) {
          var p = maxPrecision;
          var m;
          var e;
          var xFinal;

          if (x === 0) {
            m = (0, utils_1.repeat)('0', p);
            e = 0;
            xFinal = 0;
          } else {
            var xToString = x.toString(); // If xToString is formatted as scientific notation, the number is either very small or very
            // large. If the precision of the formatted string is lower that requested max precision, we
            // should still infer them from the formatted string, otherwise the formatted result might have
            // precision loss (e.g. 1e41 will not have 0 in every trailing digits).

            var xToStringExponentIndex = xToString.indexOf('e');

            var _a = xToString.split('e'),
                xToStringMantissa = _a[0],
                xToStringExponent = _a[1];

            var xToStringMantissaWithoutDecimalPoint = xToStringMantissa.replace('.', '');

            if (xToStringExponentIndex >= 0 && xToStringMantissaWithoutDecimalPoint.length <= p) {
              e = +xToStringExponent;
              m = xToStringMantissaWithoutDecimalPoint + (0, utils_1.repeat)('0', p - xToStringMantissaWithoutDecimalPoint.length);
              xFinal = x;
            } else {
              e = (0, utils_1.getMagnitude)(x);
              var decimalPlaceOffset = e - p + 1; // n is the integer containing the required precision digits. To derive the formatted string,
              // we will adjust its decimal place in the logic below.

              var n = Math.round(adjustDecimalPlace(x, decimalPlaceOffset)); // The rounding caused the change of magnitude, so we should increment `e` by 1.

              if (adjustDecimalPlace(n, p - 1) >= 10) {
                e = e + 1; // Divide n by 10 to swallow one precision.

                n = Math.floor(n / 10);
              }

              m = n.toString(); // Equivalent of n * 10 ** (e - p + 1)

              xFinal = adjustDecimalPlace(n, p - 1 - e);
            }
          }

          var int;

          if (e >= p - 1) {
            m = m + (0, utils_1.repeat)('0', e - p + 1);
            int = e + 1;
          } else if (e >= 0) {
            m = "".concat(m.slice(0, e + 1), ".").concat(m.slice(e + 1));
            int = e + 1;
          } else {
            m = "0.".concat((0, utils_1.repeat)('0', -e - 1)).concat(m);
            int = 1;
          }

          if (m.indexOf('.') >= 0 && maxPrecision > minPrecision) {
            var cut = maxPrecision - minPrecision;

            while (cut > 0 && m[m.length - 1] === '0') {
              m = m.slice(0, -1);
              cut--;
            }

            if (m[m.length - 1] === '.') {
              m = m.slice(0, -1);
            }
          }

          return {
            formattedString: m,
            roundedNumber: xFinal,
            integerDigitsCount: int
          }; // x / (10 ** magnitude), but try to preserve as much floating point precision as possible.

          function adjustDecimalPlace(x, magnitude) {
            return magnitude < 0 ? x * Math.pow(10, -magnitude) : x / Math.pow(10, magnitude);
          }
        }

        exports.ToRawPrecision = ToRawPrecision; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.ToRawPrecision;
      }, () => ({
        '../utils': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/ToRawPrecision6.js", ['./cjs-loader.mjs', './utils8.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ToRawPrecision = void 0;

        var utils_1 = require("../utils");

        function ToRawPrecision(x, minPrecision, maxPrecision) {
          var p = maxPrecision;
          var m;
          var e;
          var xFinal;

          if (x === 0) {
            m = (0, utils_1.repeat)('0', p);
            e = 0;
            xFinal = 0;
          } else {
            var xToString = x.toString(); // If xToString is formatted as scientific notation, the number is either very small or very
            // large. If the precision of the formatted string is lower that requested max precision, we
            // should still infer them from the formatted string, otherwise the formatted result might have
            // precision loss (e.g. 1e41 will not have 0 in every trailing digits).

            var xToStringExponentIndex = xToString.indexOf('e');

            var _a = xToString.split('e'),
                xToStringMantissa = _a[0],
                xToStringExponent = _a[1];

            var xToStringMantissaWithoutDecimalPoint = xToStringMantissa.replace('.', '');

            if (xToStringExponentIndex >= 0 && xToStringMantissaWithoutDecimalPoint.length <= p) {
              e = +xToStringExponent;
              m = xToStringMantissaWithoutDecimalPoint + (0, utils_1.repeat)('0', p - xToStringMantissaWithoutDecimalPoint.length);
              xFinal = x;
            } else {
              e = (0, utils_1.getMagnitude)(x);
              var decimalPlaceOffset = e - p + 1; // n is the integer containing the required precision digits. To derive the formatted string,
              // we will adjust its decimal place in the logic below.

              var n = Math.round(adjustDecimalPlace(x, decimalPlaceOffset)); // The rounding caused the change of magnitude, so we should increment `e` by 1.

              if (adjustDecimalPlace(n, p - 1) >= 10) {
                e = e + 1; // Divide n by 10 to swallow one precision.

                n = Math.floor(n / 10);
              }

              m = n.toString(); // Equivalent of n * 10 ** (e - p + 1)

              xFinal = adjustDecimalPlace(n, p - 1 - e);
            }
          }

          var int;

          if (e >= p - 1) {
            m = m + (0, utils_1.repeat)('0', e - p + 1);
            int = e + 1;
          } else if (e >= 0) {
            m = "".concat(m.slice(0, e + 1), ".").concat(m.slice(e + 1));
            int = e + 1;
          } else {
            m = "0.".concat((0, utils_1.repeat)('0', -e - 1)).concat(m);
            int = 1;
          }

          if (m.indexOf('.') >= 0 && maxPrecision > minPrecision) {
            var cut = maxPrecision - minPrecision;

            while (cut > 0 && m[m.length - 1] === '0') {
              m = m.slice(0, -1);
              cut--;
            }

            if (m[m.length - 1] === '.') {
              m = m.slice(0, -1);
            }
          }

          return {
            formattedString: m,
            roundedNumber: xFinal,
            integerDigitsCount: int
          }; // x / (10 ** magnitude), but try to preserve as much floating point precision as possible.

          function adjustDecimalPlace(x, magnitude) {
            return magnitude < 0 ? x * Math.pow(10, -magnitude) : x / Math.pow(10, magnitude);
          }
        }

        exports.ToRawPrecision = ToRawPrecision; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.ToRawPrecision;
      }, () => ({
        '../utils': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/ToRawPrecision7.js", ['./cjs-loader.mjs', './utils9.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.ToRawPrecision = void 0;

        var utils_1 = require("../utils");

        function ToRawPrecision(x, minPrecision, maxPrecision) {
          var p = maxPrecision;
          var m;
          var e;
          var xFinal;

          if (x === 0) {
            m = (0, utils_1.repeat)('0', p);
            e = 0;
            xFinal = 0;
          } else {
            var xToString = x.toString(); // If xToString is formatted as scientific notation, the number is either very small or very
            // large. If the precision of the formatted string is lower that requested max precision, we
            // should still infer them from the formatted string, otherwise the formatted result might have
            // precision loss (e.g. 1e41 will not have 0 in every trailing digits).

            var xToStringExponentIndex = xToString.indexOf('e');

            var _a = xToString.split('e'),
                xToStringMantissa = _a[0],
                xToStringExponent = _a[1];

            var xToStringMantissaWithoutDecimalPoint = xToStringMantissa.replace('.', '');

            if (xToStringExponentIndex >= 0 && xToStringMantissaWithoutDecimalPoint.length <= p) {
              e = +xToStringExponent;
              m = xToStringMantissaWithoutDecimalPoint + (0, utils_1.repeat)('0', p - xToStringMantissaWithoutDecimalPoint.length);
              xFinal = x;
            } else {
              e = (0, utils_1.getMagnitude)(x);
              var decimalPlaceOffset = e - p + 1; // n is the integer containing the required precision digits. To derive the formatted string,
              // we will adjust its decimal place in the logic below.

              var n = Math.round(adjustDecimalPlace(x, decimalPlaceOffset)); // The rounding caused the change of magnitude, so we should increment `e` by 1.

              if (adjustDecimalPlace(n, p - 1) >= 10) {
                e = e + 1; // Divide n by 10 to swallow one precision.

                n = Math.floor(n / 10);
              }

              m = n.toString(); // Equivalent of n * 10 ** (e - p + 1)

              xFinal = adjustDecimalPlace(n, p - 1 - e);
            }
          }

          var int;

          if (e >= p - 1) {
            m = m + (0, utils_1.repeat)('0', e - p + 1);
            int = e + 1;
          } else if (e >= 0) {
            m = "".concat(m.slice(0, e + 1), ".").concat(m.slice(e + 1));
            int = e + 1;
          } else {
            m = "0.".concat((0, utils_1.repeat)('0', -e - 1)).concat(m);
            int = 1;
          }

          if (m.indexOf('.') >= 0 && maxPrecision > minPrecision) {
            var cut = maxPrecision - minPrecision;

            while (cut > 0 && m[m.length - 1] === '0') {
              m = m.slice(0, -1);
              cut--;
            }

            if (m[m.length - 1] === '.') {
              m = m.slice(0, -1);
            }
          }

          return {
            formattedString: m,
            roundedNumber: xFinal,
            integerDigitsCount: int
          }; // x / (10 ** magnitude), but try to preserve as much floating point precision as possible.

          function adjustDecimalPlace(x, magnitude) {
            return magnitude < 0 ? x * Math.pow(10, -magnitude) : x / Math.pow(10, magnitude);
          }
        }

        exports.ToRawPrecision = ToRawPrecision; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.ToRawPrecision;
      }, () => ({
        '../utils': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/tslib.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        // #region ORIGINAL CODE

        /******************************************************************************
        Copyright (c) Microsoft Corporation.
        
        Permission to use, copy, modify, and/or distribute this software for any
        purpose with or without fee is hereby granted.
        
        THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
        REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
        AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
        INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
        LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
        OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
        PERFORMANCE OF THIS SOFTWARE.
        ***************************************************************************** */

        /* global global, define, System, Reflect, Promise */
        var __extends;

        var __assign;

        var __rest;

        var __decorate;

        var __param;

        var __metadata;

        var __awaiter;

        var __generator;

        var __exportStar;

        var __values;

        var __read;

        var __spread;

        var __spreadArrays;

        var __spreadArray;

        var __await;

        var __asyncGenerator;

        var __asyncDelegator;

        var __asyncValues;

        var __makeTemplateObject;

        var __importStar;

        var __importDefault;

        var __classPrivateFieldGet;

        var __classPrivateFieldSet;

        var __classPrivateFieldIn;

        var __createBinding;

        (function (factory) {
          var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};

          if (typeof define === "function" && define.amd) {
            define("tslib", ["exports"], function (exports) {
              factory(createExporter(root, createExporter(exports)));
            });
          } else if (typeof module === "object" && typeof module.exports === "object") {
            factory(createExporter(root, createExporter(module.exports)));
          } else {
            factory(createExporter(root));
          }

          function createExporter(exports, previous) {
            if (exports !== root) {
              if (typeof Object.create === "function") {
                Object.defineProperty(exports, "__esModule", {
                  value: true
                });
              } else {
                exports.__esModule = true;
              }
            }

            return function (id, v) {
              return exports[id] = previous ? previous(id, v) : v;
            };
          }
        })(function (exporter) {
          var extendStatics = Object.setPrototypeOf || {
            __proto__: []
          } instanceof Array && function (d, b) {
            d.__proto__ = b;
          } || function (d, b) {
            for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
          };

          __extends = function (d, b) {
            if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);

            function __() {
              this.constructor = d;
            }

            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
          };

          __assign = Object.assign || function (t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
              s = arguments[i];

              for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }

            return t;
          };

          __rest = function (s, e) {
            var t = {};

            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];

            if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
            }
            return t;
          };

          __decorate = function (decorators, target, key, desc) {
            var c = arguments.length,
                r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                d;
            if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
            return c > 3 && r && Object.defineProperty(target, key, r), r;
          };

          __param = function (paramIndex, decorator) {
            return function (target, key) {
              decorator(target, key, paramIndex);
            };
          };

          __metadata = function (metadataKey, metadataValue) {
            if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
          };

          __awaiter = function (thisArg, _arguments, P, generator) {
            function adopt(value) {
              return value instanceof P ? value : new P(function (resolve) {
                resolve(value);
              });
            }

            return new (P || (P = Promise))(function (resolve, reject) {
              function fulfilled(value) {
                try {
                  step(generator.next(value));
                } catch (e) {
                  reject(e);
                }
              }

              function rejected(value) {
                try {
                  step(generator["throw"](value));
                } catch (e) {
                  reject(e);
                }
              }

              function step(result) {
                result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
              }

              step((generator = generator.apply(thisArg, _arguments || [])).next());
            });
          };

          __generator = function (thisArg, body) {
            var _ = {
              label: 0,
              sent: function () {
                if (t[0] & 1) throw t[1];
                return t[1];
              },
              trys: [],
              ops: []
            },
                f,
                y,
                t,
                g;
            return g = {
              next: verb(0),
              "throw": verb(1),
              "return": verb(2)
            }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
              return this;
            }), g;

            function verb(n) {
              return function (v) {
                return step([n, v]);
              };
            }

            function step(op) {
              if (f) throw new TypeError("Generator is already executing.");

              while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];

                switch (op[0]) {
                  case 0:
                  case 1:
                    t = op;
                    break;

                  case 4:
                    _.label++;
                    return {
                      value: op[1],
                      done: false
                    };

                  case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;

                  case 7:
                    op = _.ops.pop();

                    _.trys.pop();

                    continue;

                  default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                      _ = 0;
                      continue;
                    }

                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                      _.label = op[1];
                      break;
                    }

                    if (op[0] === 6 && _.label < t[1]) {
                      _.label = t[1];
                      t = op;
                      break;
                    }

                    if (t && _.label < t[2]) {
                      _.label = t[2];

                      _.ops.push(op);

                      break;
                    }

                    if (t[2]) _.ops.pop();

                    _.trys.pop();

                    continue;
                }

                op = body.call(thisArg, _);
              } catch (e) {
                op = [6, e];
                y = 0;
              } finally {
                f = t = 0;
              }

              if (op[0] & 5) throw op[1];
              return {
                value: op[0] ? op[1] : void 0,
                done: true
              };
            }
          };

          __exportStar = function (m, o) {
            for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
          };

          __createBinding = Object.create ? function (o, m, k, k2) {
            if (k2 === undefined) k2 = k;
            var desc = Object.getOwnPropertyDescriptor(m, k);

            if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
              desc = {
                enumerable: true,
                get: function () {
                  return m[k];
                }
              };
            }

            Object.defineProperty(o, k2, desc);
          } : function (o, m, k, k2) {
            if (k2 === undefined) k2 = k;
            o[k2] = m[k];
          };

          __values = function (o) {
            var s = typeof Symbol === "function" && Symbol.iterator,
                m = s && o[s],
                i = 0;
            if (m) return m.call(o);
            if (o && typeof o.length === "number") return {
              next: function () {
                if (o && i >= o.length) o = void 0;
                return {
                  value: o && o[i++],
                  done: !o
                };
              }
            };
            throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
          };

          __read = function (o, n) {
            var m = typeof Symbol === "function" && o[Symbol.iterator];
            if (!m) return o;
            var i = m.call(o),
                r,
                ar = [],
                e;

            try {
              while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
            } catch (error) {
              e = {
                error: error
              };
            } finally {
              try {
                if (r && !r.done && (m = i["return"])) m.call(i);
              } finally {
                if (e) throw e.error;
              }
            }

            return ar;
          };
          /** @deprecated */


          __spread = function () {
            for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));

            return ar;
          };
          /** @deprecated */


          __spreadArrays = function () {
            for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;

            for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];

            return r;
          };

          __spreadArray = function (to, from, pack) {
            if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
              if (ar || !(i in from)) {
                if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                ar[i] = from[i];
              }
            }
            return to.concat(ar || Array.prototype.slice.call(from));
          };

          __await = function (v) {
            return this instanceof __await ? (this.v = v, this) : new __await(v);
          };

          __asyncGenerator = function (thisArg, _arguments, generator) {
            if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
            var g = generator.apply(thisArg, _arguments || []),
                i,
                q = [];
            return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
              return this;
            }, i;

            function verb(n) {
              if (g[n]) i[n] = function (v) {
                return new Promise(function (a, b) {
                  q.push([n, v, a, b]) > 1 || resume(n, v);
                });
              };
            }

            function resume(n, v) {
              try {
                step(g[n](v));
              } catch (e) {
                settle(q[0][3], e);
              }
            }

            function step(r) {
              r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
            }

            function fulfill(value) {
              resume("next", value);
            }

            function reject(value) {
              resume("throw", value);
            }

            function settle(f, v) {
              if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
            }
          };

          __asyncDelegator = function (o) {
            var i, p;
            return i = {}, verb("next"), verb("throw", function (e) {
              throw e;
            }), verb("return"), i[Symbol.iterator] = function () {
              return this;
            }, i;

            function verb(n, f) {
              i[n] = o[n] ? function (v) {
                return (p = !p) ? {
                  value: __await(o[n](v)),
                  done: n === "return"
                } : f ? f(v) : v;
              } : f;
            }
          };

          __asyncValues = function (o) {
            if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
            var m = o[Symbol.asyncIterator],
                i;
            return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
              return this;
            }, i);

            function verb(n) {
              i[n] = o[n] && function (v) {
                return new Promise(function (resolve, reject) {
                  v = o[n](v), settle(resolve, reject, v.done, v.value);
                });
              };
            }

            function settle(resolve, reject, d, v) {
              Promise.resolve(v).then(function (v) {
                resolve({
                  value: v,
                  done: d
                });
              }, reject);
            }
          };

          __makeTemplateObject = function (cooked, raw) {
            if (Object.defineProperty) {
              Object.defineProperty(cooked, "raw", {
                value: raw
              });
            } else {
              cooked.raw = raw;
            }

            return cooked;
          };

          var __setModuleDefault = Object.create ? function (o, v) {
            Object.defineProperty(o, "default", {
              enumerable: true,
              value: v
            });
          } : function (o, v) {
            o["default"] = v;
          };

          __importStar = function (mod) {
            if (mod && mod.__esModule) return mod;
            var result = {};
            if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);

            __setModuleDefault(result, mod);

            return result;
          };

          __importDefault = function (mod) {
            return mod && mod.__esModule ? mod : {
              "default": mod
            };
          };

          __classPrivateFieldGet = function (receiver, state, kind, f) {
            if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
            if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
            return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
          };

          __classPrivateFieldSet = function (receiver, state, value, kind, f) {
            if (kind === "m") throw new TypeError("Private method is not writable");
            if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
            if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
            return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
          };

          __classPrivateFieldIn = function (state, receiver) {
            if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function") throw new TypeError("Cannot use 'in' operator on non-object");
            return typeof state === "function" ? receiver === state : state.has(receiver);
          };

          exporter("__extends", __extends);
          exporter("__assign", __assign);
          exporter("__rest", __rest);
          exporter("__decorate", __decorate);
          exporter("__param", __param);
          exporter("__metadata", __metadata);
          exporter("__awaiter", __awaiter);
          exporter("__generator", __generator);
          exporter("__exportStar", __exportStar);
          exporter("__createBinding", __createBinding);
          exporter("__values", __values);
          exporter("__read", __read);
          exporter("__spread", __spread);
          exporter("__spreadArrays", __spreadArrays);
          exporter("__spreadArray", __spreadArray);
          exporter("__await", __await);
          exporter("__asyncGenerator", __asyncGenerator);
          exporter("__asyncDelegator", __asyncDelegator);
          exporter("__asyncValues", __asyncValues);
          exporter("__makeTemplateObject", __makeTemplateObject);
          exporter("__importStar", __importStar);
          exporter("__importDefault", __importDefault);
          exporter("__classPrivateFieldGet", __classPrivateFieldGet);
          exporter("__classPrivateFieldSet", __classPrivateFieldSet);
          exporter("__classPrivateFieldIn", __classPrivateFieldIn);
        }); // #endregion ORIGINAL CODE


        module.exports;
        module.exports.__esModule;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/tslib2.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        // #region ORIGINAL CODE

        /******************************************************************************
        Copyright (c) Microsoft Corporation.
        
        Permission to use, copy, modify, and/or distribute this software for any
        purpose with or without fee is hereby granted.
        
        THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
        REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
        AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
        INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
        LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
        OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
        PERFORMANCE OF THIS SOFTWARE.
        ***************************************************************************** */

        /* global global, define, System, Reflect, Promise */
        var __extends;

        var __assign;

        var __rest;

        var __decorate;

        var __param;

        var __metadata;

        var __awaiter;

        var __generator;

        var __exportStar;

        var __values;

        var __read;

        var __spread;

        var __spreadArrays;

        var __spreadArray;

        var __await;

        var __asyncGenerator;

        var __asyncDelegator;

        var __asyncValues;

        var __makeTemplateObject;

        var __importStar;

        var __importDefault;

        var __classPrivateFieldGet;

        var __classPrivateFieldSet;

        var __classPrivateFieldIn;

        var __createBinding;

        (function (factory) {
          var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};

          if (typeof define === "function" && define.amd) {
            define("tslib", ["exports"], function (exports) {
              factory(createExporter(root, createExporter(exports)));
            });
          } else if (typeof module === "object" && typeof module.exports === "object") {
            factory(createExporter(root, createExporter(module.exports)));
          } else {
            factory(createExporter(root));
          }

          function createExporter(exports, previous) {
            if (exports !== root) {
              if (typeof Object.create === "function") {
                Object.defineProperty(exports, "__esModule", {
                  value: true
                });
              } else {
                exports.__esModule = true;
              }
            }

            return function (id, v) {
              return exports[id] = previous ? previous(id, v) : v;
            };
          }
        })(function (exporter) {
          var extendStatics = Object.setPrototypeOf || {
            __proto__: []
          } instanceof Array && function (d, b) {
            d.__proto__ = b;
          } || function (d, b) {
            for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
          };

          __extends = function (d, b) {
            if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);

            function __() {
              this.constructor = d;
            }

            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
          };

          __assign = Object.assign || function (t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
              s = arguments[i];

              for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }

            return t;
          };

          __rest = function (s, e) {
            var t = {};

            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];

            if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
            }
            return t;
          };

          __decorate = function (decorators, target, key, desc) {
            var c = arguments.length,
                r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                d;
            if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
            return c > 3 && r && Object.defineProperty(target, key, r), r;
          };

          __param = function (paramIndex, decorator) {
            return function (target, key) {
              decorator(target, key, paramIndex);
            };
          };

          __metadata = function (metadataKey, metadataValue) {
            if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
          };

          __awaiter = function (thisArg, _arguments, P, generator) {
            function adopt(value) {
              return value instanceof P ? value : new P(function (resolve) {
                resolve(value);
              });
            }

            return new (P || (P = Promise))(function (resolve, reject) {
              function fulfilled(value) {
                try {
                  step(generator.next(value));
                } catch (e) {
                  reject(e);
                }
              }

              function rejected(value) {
                try {
                  step(generator["throw"](value));
                } catch (e) {
                  reject(e);
                }
              }

              function step(result) {
                result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
              }

              step((generator = generator.apply(thisArg, _arguments || [])).next());
            });
          };

          __generator = function (thisArg, body) {
            var _ = {
              label: 0,
              sent: function () {
                if (t[0] & 1) throw t[1];
                return t[1];
              },
              trys: [],
              ops: []
            },
                f,
                y,
                t,
                g;
            return g = {
              next: verb(0),
              "throw": verb(1),
              "return": verb(2)
            }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
              return this;
            }), g;

            function verb(n) {
              return function (v) {
                return step([n, v]);
              };
            }

            function step(op) {
              if (f) throw new TypeError("Generator is already executing.");

              while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];

                switch (op[0]) {
                  case 0:
                  case 1:
                    t = op;
                    break;

                  case 4:
                    _.label++;
                    return {
                      value: op[1],
                      done: false
                    };

                  case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;

                  case 7:
                    op = _.ops.pop();

                    _.trys.pop();

                    continue;

                  default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                      _ = 0;
                      continue;
                    }

                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                      _.label = op[1];
                      break;
                    }

                    if (op[0] === 6 && _.label < t[1]) {
                      _.label = t[1];
                      t = op;
                      break;
                    }

                    if (t && _.label < t[2]) {
                      _.label = t[2];

                      _.ops.push(op);

                      break;
                    }

                    if (t[2]) _.ops.pop();

                    _.trys.pop();

                    continue;
                }

                op = body.call(thisArg, _);
              } catch (e) {
                op = [6, e];
                y = 0;
              } finally {
                f = t = 0;
              }

              if (op[0] & 5) throw op[1];
              return {
                value: op[0] ? op[1] : void 0,
                done: true
              };
            }
          };

          __exportStar = function (m, o) {
            for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
          };

          __createBinding = Object.create ? function (o, m, k, k2) {
            if (k2 === undefined) k2 = k;
            var desc = Object.getOwnPropertyDescriptor(m, k);

            if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
              desc = {
                enumerable: true,
                get: function () {
                  return m[k];
                }
              };
            }

            Object.defineProperty(o, k2, desc);
          } : function (o, m, k, k2) {
            if (k2 === undefined) k2 = k;
            o[k2] = m[k];
          };

          __values = function (o) {
            var s = typeof Symbol === "function" && Symbol.iterator,
                m = s && o[s],
                i = 0;
            if (m) return m.call(o);
            if (o && typeof o.length === "number") return {
              next: function () {
                if (o && i >= o.length) o = void 0;
                return {
                  value: o && o[i++],
                  done: !o
                };
              }
            };
            throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
          };

          __read = function (o, n) {
            var m = typeof Symbol === "function" && o[Symbol.iterator];
            if (!m) return o;
            var i = m.call(o),
                r,
                ar = [],
                e;

            try {
              while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
            } catch (error) {
              e = {
                error: error
              };
            } finally {
              try {
                if (r && !r.done && (m = i["return"])) m.call(i);
              } finally {
                if (e) throw e.error;
              }
            }

            return ar;
          };
          /** @deprecated */


          __spread = function () {
            for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));

            return ar;
          };
          /** @deprecated */


          __spreadArrays = function () {
            for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;

            for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];

            return r;
          };

          __spreadArray = function (to, from, pack) {
            if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
              if (ar || !(i in from)) {
                if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                ar[i] = from[i];
              }
            }
            return to.concat(ar || Array.prototype.slice.call(from));
          };

          __await = function (v) {
            return this instanceof __await ? (this.v = v, this) : new __await(v);
          };

          __asyncGenerator = function (thisArg, _arguments, generator) {
            if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
            var g = generator.apply(thisArg, _arguments || []),
                i,
                q = [];
            return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
              return this;
            }, i;

            function verb(n) {
              if (g[n]) i[n] = function (v) {
                return new Promise(function (a, b) {
                  q.push([n, v, a, b]) > 1 || resume(n, v);
                });
              };
            }

            function resume(n, v) {
              try {
                step(g[n](v));
              } catch (e) {
                settle(q[0][3], e);
              }
            }

            function step(r) {
              r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
            }

            function fulfill(value) {
              resume("next", value);
            }

            function reject(value) {
              resume("throw", value);
            }

            function settle(f, v) {
              if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
            }
          };

          __asyncDelegator = function (o) {
            var i, p;
            return i = {}, verb("next"), verb("throw", function (e) {
              throw e;
            }), verb("return"), i[Symbol.iterator] = function () {
              return this;
            }, i;

            function verb(n, f) {
              i[n] = o[n] ? function (v) {
                return (p = !p) ? {
                  value: __await(o[n](v)),
                  done: n === "return"
                } : f ? f(v) : v;
              } : f;
            }
          };

          __asyncValues = function (o) {
            if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
            var m = o[Symbol.asyncIterator],
                i;
            return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
              return this;
            }, i);

            function verb(n) {
              i[n] = o[n] && function (v) {
                return new Promise(function (resolve, reject) {
                  v = o[n](v), settle(resolve, reject, v.done, v.value);
                });
              };
            }

            function settle(resolve, reject, d, v) {
              Promise.resolve(v).then(function (v) {
                resolve({
                  value: v,
                  done: d
                });
              }, reject);
            }
          };

          __makeTemplateObject = function (cooked, raw) {
            if (Object.defineProperty) {
              Object.defineProperty(cooked, "raw", {
                value: raw
              });
            } else {
              cooked.raw = raw;
            }

            return cooked;
          };

          var __setModuleDefault = Object.create ? function (o, v) {
            Object.defineProperty(o, "default", {
              enumerable: true,
              value: v
            });
          } : function (o, v) {
            o["default"] = v;
          };

          __importStar = function (mod) {
            if (mod && mod.__esModule) return mod;
            var result = {};
            if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);

            __setModuleDefault(result, mod);

            return result;
          };

          __importDefault = function (mod) {
            return mod && mod.__esModule ? mod : {
              "default": mod
            };
          };

          __classPrivateFieldGet = function (receiver, state, kind, f) {
            if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
            if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
            return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
          };

          __classPrivateFieldSet = function (receiver, state, value, kind, f) {
            if (kind === "m") throw new TypeError("Private method is not writable");
            if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
            if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
            return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
          };

          __classPrivateFieldIn = function (state, receiver) {
            if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function") throw new TypeError("Cannot use 'in' operator on non-object");
            return typeof state === "function" ? receiver === state : state.has(receiver);
          };

          exporter("__extends", __extends);
          exporter("__assign", __assign);
          exporter("__rest", __rest);
          exporter("__decorate", __decorate);
          exporter("__param", __param);
          exporter("__metadata", __metadata);
          exporter("__awaiter", __awaiter);
          exporter("__generator", __generator);
          exporter("__exportStar", __exportStar);
          exporter("__createBinding", __createBinding);
          exporter("__values", __values);
          exporter("__read", __read);
          exporter("__spread", __spread);
          exporter("__spreadArrays", __spreadArrays);
          exporter("__spreadArray", __spreadArray);
          exporter("__await", __await);
          exporter("__asyncGenerator", __asyncGenerator);
          exporter("__asyncDelegator", __asyncDelegator);
          exporter("__asyncValues", __asyncValues);
          exporter("__makeTemplateObject", __makeTemplateObject);
          exporter("__importStar", __importStar);
          exporter("__importDefault", __importDefault);
          exporter("__classPrivateFieldGet", __classPrivateFieldGet);
          exporter("__classPrivateFieldSet", __classPrivateFieldSet);
          exporter("__classPrivateFieldIn", __classPrivateFieldIn);
        }); // #endregion ORIGINAL CODE


        module.exports;
        module.exports.__esModule;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/tslib3.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        // #region ORIGINAL CODE

        /******************************************************************************
        Copyright (c) Microsoft Corporation.
        
        Permission to use, copy, modify, and/or distribute this software for any
        purpose with or without fee is hereby granted.
        
        THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
        REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
        AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
        INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
        LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
        OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
        PERFORMANCE OF THIS SOFTWARE.
        ***************************************************************************** */

        /* global global, define, System, Reflect, Promise */
        var __extends;

        var __assign;

        var __rest;

        var __decorate;

        var __param;

        var __metadata;

        var __awaiter;

        var __generator;

        var __exportStar;

        var __values;

        var __read;

        var __spread;

        var __spreadArrays;

        var __spreadArray;

        var __await;

        var __asyncGenerator;

        var __asyncDelegator;

        var __asyncValues;

        var __makeTemplateObject;

        var __importStar;

        var __importDefault;

        var __classPrivateFieldGet;

        var __classPrivateFieldSet;

        var __classPrivateFieldIn;

        var __createBinding;

        (function (factory) {
          var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};

          if (typeof define === "function" && define.amd) {
            define("tslib", ["exports"], function (exports) {
              factory(createExporter(root, createExporter(exports)));
            });
          } else if (typeof module === "object" && typeof module.exports === "object") {
            factory(createExporter(root, createExporter(module.exports)));
          } else {
            factory(createExporter(root));
          }

          function createExporter(exports, previous) {
            if (exports !== root) {
              if (typeof Object.create === "function") {
                Object.defineProperty(exports, "__esModule", {
                  value: true
                });
              } else {
                exports.__esModule = true;
              }
            }

            return function (id, v) {
              return exports[id] = previous ? previous(id, v) : v;
            };
          }
        })(function (exporter) {
          var extendStatics = Object.setPrototypeOf || {
            __proto__: []
          } instanceof Array && function (d, b) {
            d.__proto__ = b;
          } || function (d, b) {
            for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
          };

          __extends = function (d, b) {
            if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);

            function __() {
              this.constructor = d;
            }

            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
          };

          __assign = Object.assign || function (t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
              s = arguments[i];

              for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }

            return t;
          };

          __rest = function (s, e) {
            var t = {};

            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];

            if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
            }
            return t;
          };

          __decorate = function (decorators, target, key, desc) {
            var c = arguments.length,
                r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                d;
            if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
            return c > 3 && r && Object.defineProperty(target, key, r), r;
          };

          __param = function (paramIndex, decorator) {
            return function (target, key) {
              decorator(target, key, paramIndex);
            };
          };

          __metadata = function (metadataKey, metadataValue) {
            if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
          };

          __awaiter = function (thisArg, _arguments, P, generator) {
            function adopt(value) {
              return value instanceof P ? value : new P(function (resolve) {
                resolve(value);
              });
            }

            return new (P || (P = Promise))(function (resolve, reject) {
              function fulfilled(value) {
                try {
                  step(generator.next(value));
                } catch (e) {
                  reject(e);
                }
              }

              function rejected(value) {
                try {
                  step(generator["throw"](value));
                } catch (e) {
                  reject(e);
                }
              }

              function step(result) {
                result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
              }

              step((generator = generator.apply(thisArg, _arguments || [])).next());
            });
          };

          __generator = function (thisArg, body) {
            var _ = {
              label: 0,
              sent: function () {
                if (t[0] & 1) throw t[1];
                return t[1];
              },
              trys: [],
              ops: []
            },
                f,
                y,
                t,
                g;
            return g = {
              next: verb(0),
              "throw": verb(1),
              "return": verb(2)
            }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
              return this;
            }), g;

            function verb(n) {
              return function (v) {
                return step([n, v]);
              };
            }

            function step(op) {
              if (f) throw new TypeError("Generator is already executing.");

              while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];

                switch (op[0]) {
                  case 0:
                  case 1:
                    t = op;
                    break;

                  case 4:
                    _.label++;
                    return {
                      value: op[1],
                      done: false
                    };

                  case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;

                  case 7:
                    op = _.ops.pop();

                    _.trys.pop();

                    continue;

                  default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                      _ = 0;
                      continue;
                    }

                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                      _.label = op[1];
                      break;
                    }

                    if (op[0] === 6 && _.label < t[1]) {
                      _.label = t[1];
                      t = op;
                      break;
                    }

                    if (t && _.label < t[2]) {
                      _.label = t[2];

                      _.ops.push(op);

                      break;
                    }

                    if (t[2]) _.ops.pop();

                    _.trys.pop();

                    continue;
                }

                op = body.call(thisArg, _);
              } catch (e) {
                op = [6, e];
                y = 0;
              } finally {
                f = t = 0;
              }

              if (op[0] & 5) throw op[1];
              return {
                value: op[0] ? op[1] : void 0,
                done: true
              };
            }
          };

          __exportStar = function (m, o) {
            for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
          };

          __createBinding = Object.create ? function (o, m, k, k2) {
            if (k2 === undefined) k2 = k;
            var desc = Object.getOwnPropertyDescriptor(m, k);

            if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
              desc = {
                enumerable: true,
                get: function () {
                  return m[k];
                }
              };
            }

            Object.defineProperty(o, k2, desc);
          } : function (o, m, k, k2) {
            if (k2 === undefined) k2 = k;
            o[k2] = m[k];
          };

          __values = function (o) {
            var s = typeof Symbol === "function" && Symbol.iterator,
                m = s && o[s],
                i = 0;
            if (m) return m.call(o);
            if (o && typeof o.length === "number") return {
              next: function () {
                if (o && i >= o.length) o = void 0;
                return {
                  value: o && o[i++],
                  done: !o
                };
              }
            };
            throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
          };

          __read = function (o, n) {
            var m = typeof Symbol === "function" && o[Symbol.iterator];
            if (!m) return o;
            var i = m.call(o),
                r,
                ar = [],
                e;

            try {
              while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
            } catch (error) {
              e = {
                error: error
              };
            } finally {
              try {
                if (r && !r.done && (m = i["return"])) m.call(i);
              } finally {
                if (e) throw e.error;
              }
            }

            return ar;
          };
          /** @deprecated */


          __spread = function () {
            for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));

            return ar;
          };
          /** @deprecated */


          __spreadArrays = function () {
            for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;

            for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];

            return r;
          };

          __spreadArray = function (to, from, pack) {
            if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
              if (ar || !(i in from)) {
                if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                ar[i] = from[i];
              }
            }
            return to.concat(ar || Array.prototype.slice.call(from));
          };

          __await = function (v) {
            return this instanceof __await ? (this.v = v, this) : new __await(v);
          };

          __asyncGenerator = function (thisArg, _arguments, generator) {
            if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
            var g = generator.apply(thisArg, _arguments || []),
                i,
                q = [];
            return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
              return this;
            }, i;

            function verb(n) {
              if (g[n]) i[n] = function (v) {
                return new Promise(function (a, b) {
                  q.push([n, v, a, b]) > 1 || resume(n, v);
                });
              };
            }

            function resume(n, v) {
              try {
                step(g[n](v));
              } catch (e) {
                settle(q[0][3], e);
              }
            }

            function step(r) {
              r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
            }

            function fulfill(value) {
              resume("next", value);
            }

            function reject(value) {
              resume("throw", value);
            }

            function settle(f, v) {
              if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
            }
          };

          __asyncDelegator = function (o) {
            var i, p;
            return i = {}, verb("next"), verb("throw", function (e) {
              throw e;
            }), verb("return"), i[Symbol.iterator] = function () {
              return this;
            }, i;

            function verb(n, f) {
              i[n] = o[n] ? function (v) {
                return (p = !p) ? {
                  value: __await(o[n](v)),
                  done: n === "return"
                } : f ? f(v) : v;
              } : f;
            }
          };

          __asyncValues = function (o) {
            if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
            var m = o[Symbol.asyncIterator],
                i;
            return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
              return this;
            }, i);

            function verb(n) {
              i[n] = o[n] && function (v) {
                return new Promise(function (resolve, reject) {
                  v = o[n](v), settle(resolve, reject, v.done, v.value);
                });
              };
            }

            function settle(resolve, reject, d, v) {
              Promise.resolve(v).then(function (v) {
                resolve({
                  value: v,
                  done: d
                });
              }, reject);
            }
          };

          __makeTemplateObject = function (cooked, raw) {
            if (Object.defineProperty) {
              Object.defineProperty(cooked, "raw", {
                value: raw
              });
            } else {
              cooked.raw = raw;
            }

            return cooked;
          };

          var __setModuleDefault = Object.create ? function (o, v) {
            Object.defineProperty(o, "default", {
              enumerable: true,
              value: v
            });
          } : function (o, v) {
            o["default"] = v;
          };

          __importStar = function (mod) {
            if (mod && mod.__esModule) return mod;
            var result = {};
            if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);

            __setModuleDefault(result, mod);

            return result;
          };

          __importDefault = function (mod) {
            return mod && mod.__esModule ? mod : {
              "default": mod
            };
          };

          __classPrivateFieldGet = function (receiver, state, kind, f) {
            if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
            if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
            return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
          };

          __classPrivateFieldSet = function (receiver, state, value, kind, f) {
            if (kind === "m") throw new TypeError("Private method is not writable");
            if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
            if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
            return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
          };

          __classPrivateFieldIn = function (state, receiver) {
            if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function") throw new TypeError("Cannot use 'in' operator on non-object");
            return typeof state === "function" ? receiver === state : state.has(receiver);
          };

          exporter("__extends", __extends);
          exporter("__assign", __assign);
          exporter("__rest", __rest);
          exporter("__decorate", __decorate);
          exporter("__param", __param);
          exporter("__metadata", __metadata);
          exporter("__awaiter", __awaiter);
          exporter("__generator", __generator);
          exporter("__exportStar", __exportStar);
          exporter("__createBinding", __createBinding);
          exporter("__values", __values);
          exporter("__read", __read);
          exporter("__spread", __spread);
          exporter("__spreadArrays", __spreadArrays);
          exporter("__spreadArray", __spreadArray);
          exporter("__await", __await);
          exporter("__asyncGenerator", __asyncGenerator);
          exporter("__asyncDelegator", __asyncDelegator);
          exporter("__asyncValues", __asyncValues);
          exporter("__makeTemplateObject", __makeTemplateObject);
          exporter("__importStar", __importStar);
          exporter("__importDefault", __importDefault);
          exporter("__classPrivateFieldGet", __classPrivateFieldGet);
          exporter("__classPrivateFieldSet", __classPrivateFieldSet);
          exporter("__classPrivateFieldIn", __classPrivateFieldIn);
        }); // #endregion ORIGINAL CODE


        module.exports;
        module.exports.__esModule;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/tslib4.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        // #region ORIGINAL CODE

        /******************************************************************************
        Copyright (c) Microsoft Corporation.
        
        Permission to use, copy, modify, and/or distribute this software for any
        purpose with or without fee is hereby granted.
        
        THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
        REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
        AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
        INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
        LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
        OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
        PERFORMANCE OF THIS SOFTWARE.
        ***************************************************************************** */

        /* global global, define, System, Reflect, Promise */
        var __extends;

        var __assign;

        var __rest;

        var __decorate;

        var __param;

        var __metadata;

        var __awaiter;

        var __generator;

        var __exportStar;

        var __values;

        var __read;

        var __spread;

        var __spreadArrays;

        var __spreadArray;

        var __await;

        var __asyncGenerator;

        var __asyncDelegator;

        var __asyncValues;

        var __makeTemplateObject;

        var __importStar;

        var __importDefault;

        var __classPrivateFieldGet;

        var __classPrivateFieldSet;

        var __classPrivateFieldIn;

        var __createBinding;

        (function (factory) {
          var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};

          if (typeof define === "function" && define.amd) {
            define("tslib", ["exports"], function (exports) {
              factory(createExporter(root, createExporter(exports)));
            });
          } else if (typeof module === "object" && typeof module.exports === "object") {
            factory(createExporter(root, createExporter(module.exports)));
          } else {
            factory(createExporter(root));
          }

          function createExporter(exports, previous) {
            if (exports !== root) {
              if (typeof Object.create === "function") {
                Object.defineProperty(exports, "__esModule", {
                  value: true
                });
              } else {
                exports.__esModule = true;
              }
            }

            return function (id, v) {
              return exports[id] = previous ? previous(id, v) : v;
            };
          }
        })(function (exporter) {
          var extendStatics = Object.setPrototypeOf || {
            __proto__: []
          } instanceof Array && function (d, b) {
            d.__proto__ = b;
          } || function (d, b) {
            for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
          };

          __extends = function (d, b) {
            if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);

            function __() {
              this.constructor = d;
            }

            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
          };

          __assign = Object.assign || function (t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
              s = arguments[i];

              for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }

            return t;
          };

          __rest = function (s, e) {
            var t = {};

            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];

            if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
            }
            return t;
          };

          __decorate = function (decorators, target, key, desc) {
            var c = arguments.length,
                r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                d;
            if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
            return c > 3 && r && Object.defineProperty(target, key, r), r;
          };

          __param = function (paramIndex, decorator) {
            return function (target, key) {
              decorator(target, key, paramIndex);
            };
          };

          __metadata = function (metadataKey, metadataValue) {
            if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
          };

          __awaiter = function (thisArg, _arguments, P, generator) {
            function adopt(value) {
              return value instanceof P ? value : new P(function (resolve) {
                resolve(value);
              });
            }

            return new (P || (P = Promise))(function (resolve, reject) {
              function fulfilled(value) {
                try {
                  step(generator.next(value));
                } catch (e) {
                  reject(e);
                }
              }

              function rejected(value) {
                try {
                  step(generator["throw"](value));
                } catch (e) {
                  reject(e);
                }
              }

              function step(result) {
                result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
              }

              step((generator = generator.apply(thisArg, _arguments || [])).next());
            });
          };

          __generator = function (thisArg, body) {
            var _ = {
              label: 0,
              sent: function () {
                if (t[0] & 1) throw t[1];
                return t[1];
              },
              trys: [],
              ops: []
            },
                f,
                y,
                t,
                g;
            return g = {
              next: verb(0),
              "throw": verb(1),
              "return": verb(2)
            }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
              return this;
            }), g;

            function verb(n) {
              return function (v) {
                return step([n, v]);
              };
            }

            function step(op) {
              if (f) throw new TypeError("Generator is already executing.");

              while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];

                switch (op[0]) {
                  case 0:
                  case 1:
                    t = op;
                    break;

                  case 4:
                    _.label++;
                    return {
                      value: op[1],
                      done: false
                    };

                  case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;

                  case 7:
                    op = _.ops.pop();

                    _.trys.pop();

                    continue;

                  default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                      _ = 0;
                      continue;
                    }

                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                      _.label = op[1];
                      break;
                    }

                    if (op[0] === 6 && _.label < t[1]) {
                      _.label = t[1];
                      t = op;
                      break;
                    }

                    if (t && _.label < t[2]) {
                      _.label = t[2];

                      _.ops.push(op);

                      break;
                    }

                    if (t[2]) _.ops.pop();

                    _.trys.pop();

                    continue;
                }

                op = body.call(thisArg, _);
              } catch (e) {
                op = [6, e];
                y = 0;
              } finally {
                f = t = 0;
              }

              if (op[0] & 5) throw op[1];
              return {
                value: op[0] ? op[1] : void 0,
                done: true
              };
            }
          };

          __exportStar = function (m, o) {
            for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
          };

          __createBinding = Object.create ? function (o, m, k, k2) {
            if (k2 === undefined) k2 = k;
            var desc = Object.getOwnPropertyDescriptor(m, k);

            if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
              desc = {
                enumerable: true,
                get: function () {
                  return m[k];
                }
              };
            }

            Object.defineProperty(o, k2, desc);
          } : function (o, m, k, k2) {
            if (k2 === undefined) k2 = k;
            o[k2] = m[k];
          };

          __values = function (o) {
            var s = typeof Symbol === "function" && Symbol.iterator,
                m = s && o[s],
                i = 0;
            if (m) return m.call(o);
            if (o && typeof o.length === "number") return {
              next: function () {
                if (o && i >= o.length) o = void 0;
                return {
                  value: o && o[i++],
                  done: !o
                };
              }
            };
            throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
          };

          __read = function (o, n) {
            var m = typeof Symbol === "function" && o[Symbol.iterator];
            if (!m) return o;
            var i = m.call(o),
                r,
                ar = [],
                e;

            try {
              while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
            } catch (error) {
              e = {
                error: error
              };
            } finally {
              try {
                if (r && !r.done && (m = i["return"])) m.call(i);
              } finally {
                if (e) throw e.error;
              }
            }

            return ar;
          };
          /** @deprecated */


          __spread = function () {
            for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));

            return ar;
          };
          /** @deprecated */


          __spreadArrays = function () {
            for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;

            for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];

            return r;
          };

          __spreadArray = function (to, from, pack) {
            if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
              if (ar || !(i in from)) {
                if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                ar[i] = from[i];
              }
            }
            return to.concat(ar || Array.prototype.slice.call(from));
          };

          __await = function (v) {
            return this instanceof __await ? (this.v = v, this) : new __await(v);
          };

          __asyncGenerator = function (thisArg, _arguments, generator) {
            if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
            var g = generator.apply(thisArg, _arguments || []),
                i,
                q = [];
            return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
              return this;
            }, i;

            function verb(n) {
              if (g[n]) i[n] = function (v) {
                return new Promise(function (a, b) {
                  q.push([n, v, a, b]) > 1 || resume(n, v);
                });
              };
            }

            function resume(n, v) {
              try {
                step(g[n](v));
              } catch (e) {
                settle(q[0][3], e);
              }
            }

            function step(r) {
              r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
            }

            function fulfill(value) {
              resume("next", value);
            }

            function reject(value) {
              resume("throw", value);
            }

            function settle(f, v) {
              if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
            }
          };

          __asyncDelegator = function (o) {
            var i, p;
            return i = {}, verb("next"), verb("throw", function (e) {
              throw e;
            }), verb("return"), i[Symbol.iterator] = function () {
              return this;
            }, i;

            function verb(n, f) {
              i[n] = o[n] ? function (v) {
                return (p = !p) ? {
                  value: __await(o[n](v)),
                  done: n === "return"
                } : f ? f(v) : v;
              } : f;
            }
          };

          __asyncValues = function (o) {
            if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
            var m = o[Symbol.asyncIterator],
                i;
            return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
              return this;
            }, i);

            function verb(n) {
              i[n] = o[n] && function (v) {
                return new Promise(function (resolve, reject) {
                  v = o[n](v), settle(resolve, reject, v.done, v.value);
                });
              };
            }

            function settle(resolve, reject, d, v) {
              Promise.resolve(v).then(function (v) {
                resolve({
                  value: v,
                  done: d
                });
              }, reject);
            }
          };

          __makeTemplateObject = function (cooked, raw) {
            if (Object.defineProperty) {
              Object.defineProperty(cooked, "raw", {
                value: raw
              });
            } else {
              cooked.raw = raw;
            }

            return cooked;
          };

          var __setModuleDefault = Object.create ? function (o, v) {
            Object.defineProperty(o, "default", {
              enumerable: true,
              value: v
            });
          } : function (o, v) {
            o["default"] = v;
          };

          __importStar = function (mod) {
            if (mod && mod.__esModule) return mod;
            var result = {};
            if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);

            __setModuleDefault(result, mod);

            return result;
          };

          __importDefault = function (mod) {
            return mod && mod.__esModule ? mod : {
              "default": mod
            };
          };

          __classPrivateFieldGet = function (receiver, state, kind, f) {
            if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
            if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
            return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
          };

          __classPrivateFieldSet = function (receiver, state, value, kind, f) {
            if (kind === "m") throw new TypeError("Private method is not writable");
            if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
            if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
            return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
          };

          __classPrivateFieldIn = function (state, receiver) {
            if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function") throw new TypeError("Cannot use 'in' operator on non-object");
            return typeof state === "function" ? receiver === state : state.has(receiver);
          };

          exporter("__extends", __extends);
          exporter("__assign", __assign);
          exporter("__rest", __rest);
          exporter("__decorate", __decorate);
          exporter("__param", __param);
          exporter("__metadata", __metadata);
          exporter("__awaiter", __awaiter);
          exporter("__generator", __generator);
          exporter("__exportStar", __exportStar);
          exporter("__createBinding", __createBinding);
          exporter("__values", __values);
          exporter("__read", __read);
          exporter("__spread", __spread);
          exporter("__spreadArrays", __spreadArrays);
          exporter("__spreadArray", __spreadArray);
          exporter("__await", __await);
          exporter("__asyncGenerator", __asyncGenerator);
          exporter("__asyncDelegator", __asyncDelegator);
          exporter("__asyncValues", __asyncValues);
          exporter("__makeTemplateObject", __makeTemplateObject);
          exporter("__importStar", __importStar);
          exporter("__importDefault", __importDefault);
          exporter("__classPrivateFieldGet", __classPrivateFieldGet);
          exporter("__classPrivateFieldSet", __classPrivateFieldSet);
          exporter("__classPrivateFieldIn", __classPrivateFieldIn);
        }); // #endregion ORIGINAL CODE


        module.exports;
        module.exports.__esModule;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/tslib5.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        // #region ORIGINAL CODE

        /******************************************************************************
        Copyright (c) Microsoft Corporation.
        
        Permission to use, copy, modify, and/or distribute this software for any
        purpose with or without fee is hereby granted.
        
        THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
        REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
        AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
        INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
        LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
        OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
        PERFORMANCE OF THIS SOFTWARE.
        ***************************************************************************** */

        /* global global, define, System, Reflect, Promise */
        var __extends;

        var __assign;

        var __rest;

        var __decorate;

        var __param;

        var __metadata;

        var __awaiter;

        var __generator;

        var __exportStar;

        var __values;

        var __read;

        var __spread;

        var __spreadArrays;

        var __spreadArray;

        var __await;

        var __asyncGenerator;

        var __asyncDelegator;

        var __asyncValues;

        var __makeTemplateObject;

        var __importStar;

        var __importDefault;

        var __classPrivateFieldGet;

        var __classPrivateFieldSet;

        var __classPrivateFieldIn;

        var __createBinding;

        (function (factory) {
          var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};

          if (typeof define === "function" && define.amd) {
            define("tslib", ["exports"], function (exports) {
              factory(createExporter(root, createExporter(exports)));
            });
          } else if (typeof module === "object" && typeof module.exports === "object") {
            factory(createExporter(root, createExporter(module.exports)));
          } else {
            factory(createExporter(root));
          }

          function createExporter(exports, previous) {
            if (exports !== root) {
              if (typeof Object.create === "function") {
                Object.defineProperty(exports, "__esModule", {
                  value: true
                });
              } else {
                exports.__esModule = true;
              }
            }

            return function (id, v) {
              return exports[id] = previous ? previous(id, v) : v;
            };
          }
        })(function (exporter) {
          var extendStatics = Object.setPrototypeOf || {
            __proto__: []
          } instanceof Array && function (d, b) {
            d.__proto__ = b;
          } || function (d, b) {
            for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
          };

          __extends = function (d, b) {
            if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);

            function __() {
              this.constructor = d;
            }

            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
          };

          __assign = Object.assign || function (t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
              s = arguments[i];

              for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }

            return t;
          };

          __rest = function (s, e) {
            var t = {};

            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];

            if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
            }
            return t;
          };

          __decorate = function (decorators, target, key, desc) {
            var c = arguments.length,
                r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                d;
            if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
            return c > 3 && r && Object.defineProperty(target, key, r), r;
          };

          __param = function (paramIndex, decorator) {
            return function (target, key) {
              decorator(target, key, paramIndex);
            };
          };

          __metadata = function (metadataKey, metadataValue) {
            if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
          };

          __awaiter = function (thisArg, _arguments, P, generator) {
            function adopt(value) {
              return value instanceof P ? value : new P(function (resolve) {
                resolve(value);
              });
            }

            return new (P || (P = Promise))(function (resolve, reject) {
              function fulfilled(value) {
                try {
                  step(generator.next(value));
                } catch (e) {
                  reject(e);
                }
              }

              function rejected(value) {
                try {
                  step(generator["throw"](value));
                } catch (e) {
                  reject(e);
                }
              }

              function step(result) {
                result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
              }

              step((generator = generator.apply(thisArg, _arguments || [])).next());
            });
          };

          __generator = function (thisArg, body) {
            var _ = {
              label: 0,
              sent: function () {
                if (t[0] & 1) throw t[1];
                return t[1];
              },
              trys: [],
              ops: []
            },
                f,
                y,
                t,
                g;
            return g = {
              next: verb(0),
              "throw": verb(1),
              "return": verb(2)
            }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
              return this;
            }), g;

            function verb(n) {
              return function (v) {
                return step([n, v]);
              };
            }

            function step(op) {
              if (f) throw new TypeError("Generator is already executing.");

              while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];

                switch (op[0]) {
                  case 0:
                  case 1:
                    t = op;
                    break;

                  case 4:
                    _.label++;
                    return {
                      value: op[1],
                      done: false
                    };

                  case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;

                  case 7:
                    op = _.ops.pop();

                    _.trys.pop();

                    continue;

                  default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                      _ = 0;
                      continue;
                    }

                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                      _.label = op[1];
                      break;
                    }

                    if (op[0] === 6 && _.label < t[1]) {
                      _.label = t[1];
                      t = op;
                      break;
                    }

                    if (t && _.label < t[2]) {
                      _.label = t[2];

                      _.ops.push(op);

                      break;
                    }

                    if (t[2]) _.ops.pop();

                    _.trys.pop();

                    continue;
                }

                op = body.call(thisArg, _);
              } catch (e) {
                op = [6, e];
                y = 0;
              } finally {
                f = t = 0;
              }

              if (op[0] & 5) throw op[1];
              return {
                value: op[0] ? op[1] : void 0,
                done: true
              };
            }
          };

          __exportStar = function (m, o) {
            for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
          };

          __createBinding = Object.create ? function (o, m, k, k2) {
            if (k2 === undefined) k2 = k;
            var desc = Object.getOwnPropertyDescriptor(m, k);

            if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
              desc = {
                enumerable: true,
                get: function () {
                  return m[k];
                }
              };
            }

            Object.defineProperty(o, k2, desc);
          } : function (o, m, k, k2) {
            if (k2 === undefined) k2 = k;
            o[k2] = m[k];
          };

          __values = function (o) {
            var s = typeof Symbol === "function" && Symbol.iterator,
                m = s && o[s],
                i = 0;
            if (m) return m.call(o);
            if (o && typeof o.length === "number") return {
              next: function () {
                if (o && i >= o.length) o = void 0;
                return {
                  value: o && o[i++],
                  done: !o
                };
              }
            };
            throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
          };

          __read = function (o, n) {
            var m = typeof Symbol === "function" && o[Symbol.iterator];
            if (!m) return o;
            var i = m.call(o),
                r,
                ar = [],
                e;

            try {
              while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
            } catch (error) {
              e = {
                error: error
              };
            } finally {
              try {
                if (r && !r.done && (m = i["return"])) m.call(i);
              } finally {
                if (e) throw e.error;
              }
            }

            return ar;
          };
          /** @deprecated */


          __spread = function () {
            for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));

            return ar;
          };
          /** @deprecated */


          __spreadArrays = function () {
            for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;

            for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];

            return r;
          };

          __spreadArray = function (to, from, pack) {
            if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
              if (ar || !(i in from)) {
                if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                ar[i] = from[i];
              }
            }
            return to.concat(ar || Array.prototype.slice.call(from));
          };

          __await = function (v) {
            return this instanceof __await ? (this.v = v, this) : new __await(v);
          };

          __asyncGenerator = function (thisArg, _arguments, generator) {
            if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
            var g = generator.apply(thisArg, _arguments || []),
                i,
                q = [];
            return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
              return this;
            }, i;

            function verb(n) {
              if (g[n]) i[n] = function (v) {
                return new Promise(function (a, b) {
                  q.push([n, v, a, b]) > 1 || resume(n, v);
                });
              };
            }

            function resume(n, v) {
              try {
                step(g[n](v));
              } catch (e) {
                settle(q[0][3], e);
              }
            }

            function step(r) {
              r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
            }

            function fulfill(value) {
              resume("next", value);
            }

            function reject(value) {
              resume("throw", value);
            }

            function settle(f, v) {
              if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
            }
          };

          __asyncDelegator = function (o) {
            var i, p;
            return i = {}, verb("next"), verb("throw", function (e) {
              throw e;
            }), verb("return"), i[Symbol.iterator] = function () {
              return this;
            }, i;

            function verb(n, f) {
              i[n] = o[n] ? function (v) {
                return (p = !p) ? {
                  value: __await(o[n](v)),
                  done: n === "return"
                } : f ? f(v) : v;
              } : f;
            }
          };

          __asyncValues = function (o) {
            if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
            var m = o[Symbol.asyncIterator],
                i;
            return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
              return this;
            }, i);

            function verb(n) {
              i[n] = o[n] && function (v) {
                return new Promise(function (resolve, reject) {
                  v = o[n](v), settle(resolve, reject, v.done, v.value);
                });
              };
            }

            function settle(resolve, reject, d, v) {
              Promise.resolve(v).then(function (v) {
                resolve({
                  value: v,
                  done: d
                });
              }, reject);
            }
          };

          __makeTemplateObject = function (cooked, raw) {
            if (Object.defineProperty) {
              Object.defineProperty(cooked, "raw", {
                value: raw
              });
            } else {
              cooked.raw = raw;
            }

            return cooked;
          };

          var __setModuleDefault = Object.create ? function (o, v) {
            Object.defineProperty(o, "default", {
              enumerable: true,
              value: v
            });
          } : function (o, v) {
            o["default"] = v;
          };

          __importStar = function (mod) {
            if (mod && mod.__esModule) return mod;
            var result = {};
            if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);

            __setModuleDefault(result, mod);

            return result;
          };

          __importDefault = function (mod) {
            return mod && mod.__esModule ? mod : {
              "default": mod
            };
          };

          __classPrivateFieldGet = function (receiver, state, kind, f) {
            if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
            if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
            return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
          };

          __classPrivateFieldSet = function (receiver, state, value, kind, f) {
            if (kind === "m") throw new TypeError("Private method is not writable");
            if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
            if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
            return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
          };

          __classPrivateFieldIn = function (state, receiver) {
            if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function") throw new TypeError("Cannot use 'in' operator on non-object");
            return typeof state === "function" ? receiver === state : state.has(receiver);
          };

          exporter("__extends", __extends);
          exporter("__assign", __assign);
          exporter("__rest", __rest);
          exporter("__decorate", __decorate);
          exporter("__param", __param);
          exporter("__metadata", __metadata);
          exporter("__awaiter", __awaiter);
          exporter("__generator", __generator);
          exporter("__exportStar", __exportStar);
          exporter("__createBinding", __createBinding);
          exporter("__values", __values);
          exporter("__read", __read);
          exporter("__spread", __spread);
          exporter("__spreadArrays", __spreadArrays);
          exporter("__spreadArray", __spreadArray);
          exporter("__await", __await);
          exporter("__asyncGenerator", __asyncGenerator);
          exporter("__asyncDelegator", __asyncDelegator);
          exporter("__asyncValues", __asyncValues);
          exporter("__makeTemplateObject", __makeTemplateObject);
          exporter("__importStar", __importStar);
          exporter("__importDefault", __importDefault);
          exporter("__classPrivateFieldGet", __classPrivateFieldGet);
          exporter("__classPrivateFieldSet", __classPrivateFieldSet);
          exporter("__classPrivateFieldIn", __classPrivateFieldIn);
        }); // #endregion ORIGINAL CODE


        module.exports;
        module.exports.__esModule;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/tslib6.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        // #region ORIGINAL CODE

        /******************************************************************************
        Copyright (c) Microsoft Corporation.
        
        Permission to use, copy, modify, and/or distribute this software for any
        purpose with or without fee is hereby granted.
        
        THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
        REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
        AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
        INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
        LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
        OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
        PERFORMANCE OF THIS SOFTWARE.
        ***************************************************************************** */

        /* global global, define, System, Reflect, Promise */
        var __extends;

        var __assign;

        var __rest;

        var __decorate;

        var __param;

        var __metadata;

        var __awaiter;

        var __generator;

        var __exportStar;

        var __values;

        var __read;

        var __spread;

        var __spreadArrays;

        var __spreadArray;

        var __await;

        var __asyncGenerator;

        var __asyncDelegator;

        var __asyncValues;

        var __makeTemplateObject;

        var __importStar;

        var __importDefault;

        var __classPrivateFieldGet;

        var __classPrivateFieldSet;

        var __classPrivateFieldIn;

        var __createBinding;

        (function (factory) {
          var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};

          if (typeof define === "function" && define.amd) {
            define("tslib", ["exports"], function (exports) {
              factory(createExporter(root, createExporter(exports)));
            });
          } else if (typeof module === "object" && typeof module.exports === "object") {
            factory(createExporter(root, createExporter(module.exports)));
          } else {
            factory(createExporter(root));
          }

          function createExporter(exports, previous) {
            if (exports !== root) {
              if (typeof Object.create === "function") {
                Object.defineProperty(exports, "__esModule", {
                  value: true
                });
              } else {
                exports.__esModule = true;
              }
            }

            return function (id, v) {
              return exports[id] = previous ? previous(id, v) : v;
            };
          }
        })(function (exporter) {
          var extendStatics = Object.setPrototypeOf || {
            __proto__: []
          } instanceof Array && function (d, b) {
            d.__proto__ = b;
          } || function (d, b) {
            for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
          };

          __extends = function (d, b) {
            if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);

            function __() {
              this.constructor = d;
            }

            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
          };

          __assign = Object.assign || function (t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
              s = arguments[i];

              for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }

            return t;
          };

          __rest = function (s, e) {
            var t = {};

            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];

            if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
            }
            return t;
          };

          __decorate = function (decorators, target, key, desc) {
            var c = arguments.length,
                r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                d;
            if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
            return c > 3 && r && Object.defineProperty(target, key, r), r;
          };

          __param = function (paramIndex, decorator) {
            return function (target, key) {
              decorator(target, key, paramIndex);
            };
          };

          __metadata = function (metadataKey, metadataValue) {
            if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
          };

          __awaiter = function (thisArg, _arguments, P, generator) {
            function adopt(value) {
              return value instanceof P ? value : new P(function (resolve) {
                resolve(value);
              });
            }

            return new (P || (P = Promise))(function (resolve, reject) {
              function fulfilled(value) {
                try {
                  step(generator.next(value));
                } catch (e) {
                  reject(e);
                }
              }

              function rejected(value) {
                try {
                  step(generator["throw"](value));
                } catch (e) {
                  reject(e);
                }
              }

              function step(result) {
                result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
              }

              step((generator = generator.apply(thisArg, _arguments || [])).next());
            });
          };

          __generator = function (thisArg, body) {
            var _ = {
              label: 0,
              sent: function () {
                if (t[0] & 1) throw t[1];
                return t[1];
              },
              trys: [],
              ops: []
            },
                f,
                y,
                t,
                g;
            return g = {
              next: verb(0),
              "throw": verb(1),
              "return": verb(2)
            }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
              return this;
            }), g;

            function verb(n) {
              return function (v) {
                return step([n, v]);
              };
            }

            function step(op) {
              if (f) throw new TypeError("Generator is already executing.");

              while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];

                switch (op[0]) {
                  case 0:
                  case 1:
                    t = op;
                    break;

                  case 4:
                    _.label++;
                    return {
                      value: op[1],
                      done: false
                    };

                  case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;

                  case 7:
                    op = _.ops.pop();

                    _.trys.pop();

                    continue;

                  default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                      _ = 0;
                      continue;
                    }

                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                      _.label = op[1];
                      break;
                    }

                    if (op[0] === 6 && _.label < t[1]) {
                      _.label = t[1];
                      t = op;
                      break;
                    }

                    if (t && _.label < t[2]) {
                      _.label = t[2];

                      _.ops.push(op);

                      break;
                    }

                    if (t[2]) _.ops.pop();

                    _.trys.pop();

                    continue;
                }

                op = body.call(thisArg, _);
              } catch (e) {
                op = [6, e];
                y = 0;
              } finally {
                f = t = 0;
              }

              if (op[0] & 5) throw op[1];
              return {
                value: op[0] ? op[1] : void 0,
                done: true
              };
            }
          };

          __exportStar = function (m, o) {
            for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
          };

          __createBinding = Object.create ? function (o, m, k, k2) {
            if (k2 === undefined) k2 = k;
            var desc = Object.getOwnPropertyDescriptor(m, k);

            if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
              desc = {
                enumerable: true,
                get: function () {
                  return m[k];
                }
              };
            }

            Object.defineProperty(o, k2, desc);
          } : function (o, m, k, k2) {
            if (k2 === undefined) k2 = k;
            o[k2] = m[k];
          };

          __values = function (o) {
            var s = typeof Symbol === "function" && Symbol.iterator,
                m = s && o[s],
                i = 0;
            if (m) return m.call(o);
            if (o && typeof o.length === "number") return {
              next: function () {
                if (o && i >= o.length) o = void 0;
                return {
                  value: o && o[i++],
                  done: !o
                };
              }
            };
            throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
          };

          __read = function (o, n) {
            var m = typeof Symbol === "function" && o[Symbol.iterator];
            if (!m) return o;
            var i = m.call(o),
                r,
                ar = [],
                e;

            try {
              while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
            } catch (error) {
              e = {
                error: error
              };
            } finally {
              try {
                if (r && !r.done && (m = i["return"])) m.call(i);
              } finally {
                if (e) throw e.error;
              }
            }

            return ar;
          };
          /** @deprecated */


          __spread = function () {
            for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));

            return ar;
          };
          /** @deprecated */


          __spreadArrays = function () {
            for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;

            for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];

            return r;
          };

          __spreadArray = function (to, from, pack) {
            if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
              if (ar || !(i in from)) {
                if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                ar[i] = from[i];
              }
            }
            return to.concat(ar || Array.prototype.slice.call(from));
          };

          __await = function (v) {
            return this instanceof __await ? (this.v = v, this) : new __await(v);
          };

          __asyncGenerator = function (thisArg, _arguments, generator) {
            if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
            var g = generator.apply(thisArg, _arguments || []),
                i,
                q = [];
            return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
              return this;
            }, i;

            function verb(n) {
              if (g[n]) i[n] = function (v) {
                return new Promise(function (a, b) {
                  q.push([n, v, a, b]) > 1 || resume(n, v);
                });
              };
            }

            function resume(n, v) {
              try {
                step(g[n](v));
              } catch (e) {
                settle(q[0][3], e);
              }
            }

            function step(r) {
              r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
            }

            function fulfill(value) {
              resume("next", value);
            }

            function reject(value) {
              resume("throw", value);
            }

            function settle(f, v) {
              if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
            }
          };

          __asyncDelegator = function (o) {
            var i, p;
            return i = {}, verb("next"), verb("throw", function (e) {
              throw e;
            }), verb("return"), i[Symbol.iterator] = function () {
              return this;
            }, i;

            function verb(n, f) {
              i[n] = o[n] ? function (v) {
                return (p = !p) ? {
                  value: __await(o[n](v)),
                  done: n === "return"
                } : f ? f(v) : v;
              } : f;
            }
          };

          __asyncValues = function (o) {
            if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
            var m = o[Symbol.asyncIterator],
                i;
            return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
              return this;
            }, i);

            function verb(n) {
              i[n] = o[n] && function (v) {
                return new Promise(function (resolve, reject) {
                  v = o[n](v), settle(resolve, reject, v.done, v.value);
                });
              };
            }

            function settle(resolve, reject, d, v) {
              Promise.resolve(v).then(function (v) {
                resolve({
                  value: v,
                  done: d
                });
              }, reject);
            }
          };

          __makeTemplateObject = function (cooked, raw) {
            if (Object.defineProperty) {
              Object.defineProperty(cooked, "raw", {
                value: raw
              });
            } else {
              cooked.raw = raw;
            }

            return cooked;
          };

          var __setModuleDefault = Object.create ? function (o, v) {
            Object.defineProperty(o, "default", {
              enumerable: true,
              value: v
            });
          } : function (o, v) {
            o["default"] = v;
          };

          __importStar = function (mod) {
            if (mod && mod.__esModule) return mod;
            var result = {};
            if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);

            __setModuleDefault(result, mod);

            return result;
          };

          __importDefault = function (mod) {
            return mod && mod.__esModule ? mod : {
              "default": mod
            };
          };

          __classPrivateFieldGet = function (receiver, state, kind, f) {
            if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
            if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
            return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
          };

          __classPrivateFieldSet = function (receiver, state, value, kind, f) {
            if (kind === "m") throw new TypeError("Private method is not writable");
            if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
            if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
            return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
          };

          __classPrivateFieldIn = function (state, receiver) {
            if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function") throw new TypeError("Cannot use 'in' operator on non-object");
            return typeof state === "function" ? receiver === state : state.has(receiver);
          };

          exporter("__extends", __extends);
          exporter("__assign", __assign);
          exporter("__rest", __rest);
          exporter("__decorate", __decorate);
          exporter("__param", __param);
          exporter("__metadata", __metadata);
          exporter("__awaiter", __awaiter);
          exporter("__generator", __generator);
          exporter("__exportStar", __exportStar);
          exporter("__createBinding", __createBinding);
          exporter("__values", __values);
          exporter("__read", __read);
          exporter("__spread", __spread);
          exporter("__spreadArrays", __spreadArrays);
          exporter("__spreadArray", __spreadArray);
          exporter("__await", __await);
          exporter("__asyncGenerator", __asyncGenerator);
          exporter("__asyncDelegator", __asyncDelegator);
          exporter("__asyncValues", __asyncValues);
          exporter("__makeTemplateObject", __makeTemplateObject);
          exporter("__importStar", __importStar);
          exporter("__importDefault", __importDefault);
          exporter("__classPrivateFieldGet", __classPrivateFieldGet);
          exporter("__classPrivateFieldSet", __classPrivateFieldSet);
          exporter("__classPrivateFieldIn", __classPrivateFieldIn);
        }); // #endregion ORIGINAL CODE


        module.exports;
        module.exports.__esModule;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/tslib7.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        // #region ORIGINAL CODE

        /******************************************************************************
        Copyright (c) Microsoft Corporation.
        
        Permission to use, copy, modify, and/or distribute this software for any
        purpose with or without fee is hereby granted.
        
        THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
        REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
        AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
        INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
        LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
        OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
        PERFORMANCE OF THIS SOFTWARE.
        ***************************************************************************** */

        /* global global, define, System, Reflect, Promise */
        var __extends;

        var __assign;

        var __rest;

        var __decorate;

        var __param;

        var __metadata;

        var __awaiter;

        var __generator;

        var __exportStar;

        var __values;

        var __read;

        var __spread;

        var __spreadArrays;

        var __spreadArray;

        var __await;

        var __asyncGenerator;

        var __asyncDelegator;

        var __asyncValues;

        var __makeTemplateObject;

        var __importStar;

        var __importDefault;

        var __classPrivateFieldGet;

        var __classPrivateFieldSet;

        var __classPrivateFieldIn;

        var __createBinding;

        (function (factory) {
          var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};

          if (typeof define === "function" && define.amd) {
            define("tslib", ["exports"], function (exports) {
              factory(createExporter(root, createExporter(exports)));
            });
          } else if (typeof module === "object" && typeof module.exports === "object") {
            factory(createExporter(root, createExporter(module.exports)));
          } else {
            factory(createExporter(root));
          }

          function createExporter(exports, previous) {
            if (exports !== root) {
              if (typeof Object.create === "function") {
                Object.defineProperty(exports, "__esModule", {
                  value: true
                });
              } else {
                exports.__esModule = true;
              }
            }

            return function (id, v) {
              return exports[id] = previous ? previous(id, v) : v;
            };
          }
        })(function (exporter) {
          var extendStatics = Object.setPrototypeOf || {
            __proto__: []
          } instanceof Array && function (d, b) {
            d.__proto__ = b;
          } || function (d, b) {
            for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
          };

          __extends = function (d, b) {
            if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);

            function __() {
              this.constructor = d;
            }

            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
          };

          __assign = Object.assign || function (t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
              s = arguments[i];

              for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }

            return t;
          };

          __rest = function (s, e) {
            var t = {};

            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];

            if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
            }
            return t;
          };

          __decorate = function (decorators, target, key, desc) {
            var c = arguments.length,
                r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                d;
            if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
            return c > 3 && r && Object.defineProperty(target, key, r), r;
          };

          __param = function (paramIndex, decorator) {
            return function (target, key) {
              decorator(target, key, paramIndex);
            };
          };

          __metadata = function (metadataKey, metadataValue) {
            if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
          };

          __awaiter = function (thisArg, _arguments, P, generator) {
            function adopt(value) {
              return value instanceof P ? value : new P(function (resolve) {
                resolve(value);
              });
            }

            return new (P || (P = Promise))(function (resolve, reject) {
              function fulfilled(value) {
                try {
                  step(generator.next(value));
                } catch (e) {
                  reject(e);
                }
              }

              function rejected(value) {
                try {
                  step(generator["throw"](value));
                } catch (e) {
                  reject(e);
                }
              }

              function step(result) {
                result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
              }

              step((generator = generator.apply(thisArg, _arguments || [])).next());
            });
          };

          __generator = function (thisArg, body) {
            var _ = {
              label: 0,
              sent: function () {
                if (t[0] & 1) throw t[1];
                return t[1];
              },
              trys: [],
              ops: []
            },
                f,
                y,
                t,
                g;
            return g = {
              next: verb(0),
              "throw": verb(1),
              "return": verb(2)
            }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
              return this;
            }), g;

            function verb(n) {
              return function (v) {
                return step([n, v]);
              };
            }

            function step(op) {
              if (f) throw new TypeError("Generator is already executing.");

              while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];

                switch (op[0]) {
                  case 0:
                  case 1:
                    t = op;
                    break;

                  case 4:
                    _.label++;
                    return {
                      value: op[1],
                      done: false
                    };

                  case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;

                  case 7:
                    op = _.ops.pop();

                    _.trys.pop();

                    continue;

                  default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                      _ = 0;
                      continue;
                    }

                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                      _.label = op[1];
                      break;
                    }

                    if (op[0] === 6 && _.label < t[1]) {
                      _.label = t[1];
                      t = op;
                      break;
                    }

                    if (t && _.label < t[2]) {
                      _.label = t[2];

                      _.ops.push(op);

                      break;
                    }

                    if (t[2]) _.ops.pop();

                    _.trys.pop();

                    continue;
                }

                op = body.call(thisArg, _);
              } catch (e) {
                op = [6, e];
                y = 0;
              } finally {
                f = t = 0;
              }

              if (op[0] & 5) throw op[1];
              return {
                value: op[0] ? op[1] : void 0,
                done: true
              };
            }
          };

          __exportStar = function (m, o) {
            for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
          };

          __createBinding = Object.create ? function (o, m, k, k2) {
            if (k2 === undefined) k2 = k;
            var desc = Object.getOwnPropertyDescriptor(m, k);

            if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
              desc = {
                enumerable: true,
                get: function () {
                  return m[k];
                }
              };
            }

            Object.defineProperty(o, k2, desc);
          } : function (o, m, k, k2) {
            if (k2 === undefined) k2 = k;
            o[k2] = m[k];
          };

          __values = function (o) {
            var s = typeof Symbol === "function" && Symbol.iterator,
                m = s && o[s],
                i = 0;
            if (m) return m.call(o);
            if (o && typeof o.length === "number") return {
              next: function () {
                if (o && i >= o.length) o = void 0;
                return {
                  value: o && o[i++],
                  done: !o
                };
              }
            };
            throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
          };

          __read = function (o, n) {
            var m = typeof Symbol === "function" && o[Symbol.iterator];
            if (!m) return o;
            var i = m.call(o),
                r,
                ar = [],
                e;

            try {
              while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
            } catch (error) {
              e = {
                error: error
              };
            } finally {
              try {
                if (r && !r.done && (m = i["return"])) m.call(i);
              } finally {
                if (e) throw e.error;
              }
            }

            return ar;
          };
          /** @deprecated */


          __spread = function () {
            for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));

            return ar;
          };
          /** @deprecated */


          __spreadArrays = function () {
            for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;

            for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];

            return r;
          };

          __spreadArray = function (to, from, pack) {
            if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
              if (ar || !(i in from)) {
                if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                ar[i] = from[i];
              }
            }
            return to.concat(ar || Array.prototype.slice.call(from));
          };

          __await = function (v) {
            return this instanceof __await ? (this.v = v, this) : new __await(v);
          };

          __asyncGenerator = function (thisArg, _arguments, generator) {
            if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
            var g = generator.apply(thisArg, _arguments || []),
                i,
                q = [];
            return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
              return this;
            }, i;

            function verb(n) {
              if (g[n]) i[n] = function (v) {
                return new Promise(function (a, b) {
                  q.push([n, v, a, b]) > 1 || resume(n, v);
                });
              };
            }

            function resume(n, v) {
              try {
                step(g[n](v));
              } catch (e) {
                settle(q[0][3], e);
              }
            }

            function step(r) {
              r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
            }

            function fulfill(value) {
              resume("next", value);
            }

            function reject(value) {
              resume("throw", value);
            }

            function settle(f, v) {
              if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
            }
          };

          __asyncDelegator = function (o) {
            var i, p;
            return i = {}, verb("next"), verb("throw", function (e) {
              throw e;
            }), verb("return"), i[Symbol.iterator] = function () {
              return this;
            }, i;

            function verb(n, f) {
              i[n] = o[n] ? function (v) {
                return (p = !p) ? {
                  value: __await(o[n](v)),
                  done: n === "return"
                } : f ? f(v) : v;
              } : f;
            }
          };

          __asyncValues = function (o) {
            if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
            var m = o[Symbol.asyncIterator],
                i;
            return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
              return this;
            }, i);

            function verb(n) {
              i[n] = o[n] && function (v) {
                return new Promise(function (resolve, reject) {
                  v = o[n](v), settle(resolve, reject, v.done, v.value);
                });
              };
            }

            function settle(resolve, reject, d, v) {
              Promise.resolve(v).then(function (v) {
                resolve({
                  value: v,
                  done: d
                });
              }, reject);
            }
          };

          __makeTemplateObject = function (cooked, raw) {
            if (Object.defineProperty) {
              Object.defineProperty(cooked, "raw", {
                value: raw
              });
            } else {
              cooked.raw = raw;
            }

            return cooked;
          };

          var __setModuleDefault = Object.create ? function (o, v) {
            Object.defineProperty(o, "default", {
              enumerable: true,
              value: v
            });
          } : function (o, v) {
            o["default"] = v;
          };

          __importStar = function (mod) {
            if (mod && mod.__esModule) return mod;
            var result = {};
            if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);

            __setModuleDefault(result, mod);

            return result;
          };

          __importDefault = function (mod) {
            return mod && mod.__esModule ? mod : {
              "default": mod
            };
          };

          __classPrivateFieldGet = function (receiver, state, kind, f) {
            if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
            if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
            return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
          };

          __classPrivateFieldSet = function (receiver, state, value, kind, f) {
            if (kind === "m") throw new TypeError("Private method is not writable");
            if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
            if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
            return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
          };

          __classPrivateFieldIn = function (state, receiver) {
            if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function") throw new TypeError("Cannot use 'in' operator on non-object");
            return typeof state === "function" ? receiver === state : state.has(receiver);
          };

          exporter("__extends", __extends);
          exporter("__assign", __assign);
          exporter("__rest", __rest);
          exporter("__decorate", __decorate);
          exporter("__param", __param);
          exporter("__metadata", __metadata);
          exporter("__awaiter", __awaiter);
          exporter("__generator", __generator);
          exporter("__exportStar", __exportStar);
          exporter("__createBinding", __createBinding);
          exporter("__values", __values);
          exporter("__read", __read);
          exporter("__spread", __spread);
          exporter("__spreadArrays", __spreadArrays);
          exporter("__spreadArray", __spreadArray);
          exporter("__await", __await);
          exporter("__asyncGenerator", __asyncGenerator);
          exporter("__asyncDelegator", __asyncDelegator);
          exporter("__asyncValues", __asyncValues);
          exporter("__makeTemplateObject", __makeTemplateObject);
          exporter("__importStar", __importStar);
          exporter("__importDefault", __importDefault);
          exporter("__classPrivateFieldGet", __classPrivateFieldGet);
          exporter("__classPrivateFieldSet", __classPrivateFieldSet);
          exporter("__classPrivateFieldIn", __classPrivateFieldIn);
        }); // #endregion ORIGINAL CODE


        module.exports;
        module.exports.__esModule;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/tslib8.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        // #region ORIGINAL CODE

        /******************************************************************************
        Copyright (c) Microsoft Corporation.
        
        Permission to use, copy, modify, and/or distribute this software for any
        purpose with or without fee is hereby granted.
        
        THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
        REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
        AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
        INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
        LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
        OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
        PERFORMANCE OF THIS SOFTWARE.
        ***************************************************************************** */

        /* global global, define, System, Reflect, Promise */
        var __extends;

        var __assign;

        var __rest;

        var __decorate;

        var __param;

        var __metadata;

        var __awaiter;

        var __generator;

        var __exportStar;

        var __values;

        var __read;

        var __spread;

        var __spreadArrays;

        var __spreadArray;

        var __await;

        var __asyncGenerator;

        var __asyncDelegator;

        var __asyncValues;

        var __makeTemplateObject;

        var __importStar;

        var __importDefault;

        var __classPrivateFieldGet;

        var __classPrivateFieldSet;

        var __classPrivateFieldIn;

        var __createBinding;

        (function (factory) {
          var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};

          if (typeof define === "function" && define.amd) {
            define("tslib", ["exports"], function (exports) {
              factory(createExporter(root, createExporter(exports)));
            });
          } else if (typeof module === "object" && typeof module.exports === "object") {
            factory(createExporter(root, createExporter(module.exports)));
          } else {
            factory(createExporter(root));
          }

          function createExporter(exports, previous) {
            if (exports !== root) {
              if (typeof Object.create === "function") {
                Object.defineProperty(exports, "__esModule", {
                  value: true
                });
              } else {
                exports.__esModule = true;
              }
            }

            return function (id, v) {
              return exports[id] = previous ? previous(id, v) : v;
            };
          }
        })(function (exporter) {
          var extendStatics = Object.setPrototypeOf || {
            __proto__: []
          } instanceof Array && function (d, b) {
            d.__proto__ = b;
          } || function (d, b) {
            for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
          };

          __extends = function (d, b) {
            if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);

            function __() {
              this.constructor = d;
            }

            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
          };

          __assign = Object.assign || function (t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
              s = arguments[i];

              for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }

            return t;
          };

          __rest = function (s, e) {
            var t = {};

            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];

            if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
            }
            return t;
          };

          __decorate = function (decorators, target, key, desc) {
            var c = arguments.length,
                r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                d;
            if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
            return c > 3 && r && Object.defineProperty(target, key, r), r;
          };

          __param = function (paramIndex, decorator) {
            return function (target, key) {
              decorator(target, key, paramIndex);
            };
          };

          __metadata = function (metadataKey, metadataValue) {
            if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
          };

          __awaiter = function (thisArg, _arguments, P, generator) {
            function adopt(value) {
              return value instanceof P ? value : new P(function (resolve) {
                resolve(value);
              });
            }

            return new (P || (P = Promise))(function (resolve, reject) {
              function fulfilled(value) {
                try {
                  step(generator.next(value));
                } catch (e) {
                  reject(e);
                }
              }

              function rejected(value) {
                try {
                  step(generator["throw"](value));
                } catch (e) {
                  reject(e);
                }
              }

              function step(result) {
                result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
              }

              step((generator = generator.apply(thisArg, _arguments || [])).next());
            });
          };

          __generator = function (thisArg, body) {
            var _ = {
              label: 0,
              sent: function () {
                if (t[0] & 1) throw t[1];
                return t[1];
              },
              trys: [],
              ops: []
            },
                f,
                y,
                t,
                g;
            return g = {
              next: verb(0),
              "throw": verb(1),
              "return": verb(2)
            }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
              return this;
            }), g;

            function verb(n) {
              return function (v) {
                return step([n, v]);
              };
            }

            function step(op) {
              if (f) throw new TypeError("Generator is already executing.");

              while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];

                switch (op[0]) {
                  case 0:
                  case 1:
                    t = op;
                    break;

                  case 4:
                    _.label++;
                    return {
                      value: op[1],
                      done: false
                    };

                  case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;

                  case 7:
                    op = _.ops.pop();

                    _.trys.pop();

                    continue;

                  default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                      _ = 0;
                      continue;
                    }

                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                      _.label = op[1];
                      break;
                    }

                    if (op[0] === 6 && _.label < t[1]) {
                      _.label = t[1];
                      t = op;
                      break;
                    }

                    if (t && _.label < t[2]) {
                      _.label = t[2];

                      _.ops.push(op);

                      break;
                    }

                    if (t[2]) _.ops.pop();

                    _.trys.pop();

                    continue;
                }

                op = body.call(thisArg, _);
              } catch (e) {
                op = [6, e];
                y = 0;
              } finally {
                f = t = 0;
              }

              if (op[0] & 5) throw op[1];
              return {
                value: op[0] ? op[1] : void 0,
                done: true
              };
            }
          };

          __exportStar = function (m, o) {
            for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
          };

          __createBinding = Object.create ? function (o, m, k, k2) {
            if (k2 === undefined) k2 = k;
            var desc = Object.getOwnPropertyDescriptor(m, k);

            if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
              desc = {
                enumerable: true,
                get: function () {
                  return m[k];
                }
              };
            }

            Object.defineProperty(o, k2, desc);
          } : function (o, m, k, k2) {
            if (k2 === undefined) k2 = k;
            o[k2] = m[k];
          };

          __values = function (o) {
            var s = typeof Symbol === "function" && Symbol.iterator,
                m = s && o[s],
                i = 0;
            if (m) return m.call(o);
            if (o && typeof o.length === "number") return {
              next: function () {
                if (o && i >= o.length) o = void 0;
                return {
                  value: o && o[i++],
                  done: !o
                };
              }
            };
            throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
          };

          __read = function (o, n) {
            var m = typeof Symbol === "function" && o[Symbol.iterator];
            if (!m) return o;
            var i = m.call(o),
                r,
                ar = [],
                e;

            try {
              while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
            } catch (error) {
              e = {
                error: error
              };
            } finally {
              try {
                if (r && !r.done && (m = i["return"])) m.call(i);
              } finally {
                if (e) throw e.error;
              }
            }

            return ar;
          };
          /** @deprecated */


          __spread = function () {
            for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));

            return ar;
          };
          /** @deprecated */


          __spreadArrays = function () {
            for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;

            for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];

            return r;
          };

          __spreadArray = function (to, from, pack) {
            if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
              if (ar || !(i in from)) {
                if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                ar[i] = from[i];
              }
            }
            return to.concat(ar || Array.prototype.slice.call(from));
          };

          __await = function (v) {
            return this instanceof __await ? (this.v = v, this) : new __await(v);
          };

          __asyncGenerator = function (thisArg, _arguments, generator) {
            if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
            var g = generator.apply(thisArg, _arguments || []),
                i,
                q = [];
            return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
              return this;
            }, i;

            function verb(n) {
              if (g[n]) i[n] = function (v) {
                return new Promise(function (a, b) {
                  q.push([n, v, a, b]) > 1 || resume(n, v);
                });
              };
            }

            function resume(n, v) {
              try {
                step(g[n](v));
              } catch (e) {
                settle(q[0][3], e);
              }
            }

            function step(r) {
              r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
            }

            function fulfill(value) {
              resume("next", value);
            }

            function reject(value) {
              resume("throw", value);
            }

            function settle(f, v) {
              if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
            }
          };

          __asyncDelegator = function (o) {
            var i, p;
            return i = {}, verb("next"), verb("throw", function (e) {
              throw e;
            }), verb("return"), i[Symbol.iterator] = function () {
              return this;
            }, i;

            function verb(n, f) {
              i[n] = o[n] ? function (v) {
                return (p = !p) ? {
                  value: __await(o[n](v)),
                  done: n === "return"
                } : f ? f(v) : v;
              } : f;
            }
          };

          __asyncValues = function (o) {
            if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
            var m = o[Symbol.asyncIterator],
                i;
            return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
              return this;
            }, i);

            function verb(n) {
              i[n] = o[n] && function (v) {
                return new Promise(function (resolve, reject) {
                  v = o[n](v), settle(resolve, reject, v.done, v.value);
                });
              };
            }

            function settle(resolve, reject, d, v) {
              Promise.resolve(v).then(function (v) {
                resolve({
                  value: v,
                  done: d
                });
              }, reject);
            }
          };

          __makeTemplateObject = function (cooked, raw) {
            if (Object.defineProperty) {
              Object.defineProperty(cooked, "raw", {
                value: raw
              });
            } else {
              cooked.raw = raw;
            }

            return cooked;
          };

          var __setModuleDefault = Object.create ? function (o, v) {
            Object.defineProperty(o, "default", {
              enumerable: true,
              value: v
            });
          } : function (o, v) {
            o["default"] = v;
          };

          __importStar = function (mod) {
            if (mod && mod.__esModule) return mod;
            var result = {};
            if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);

            __setModuleDefault(result, mod);

            return result;
          };

          __importDefault = function (mod) {
            return mod && mod.__esModule ? mod : {
              "default": mod
            };
          };

          __classPrivateFieldGet = function (receiver, state, kind, f) {
            if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
            if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
            return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
          };

          __classPrivateFieldSet = function (receiver, state, value, kind, f) {
            if (kind === "m") throw new TypeError("Private method is not writable");
            if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
            if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
            return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
          };

          __classPrivateFieldIn = function (state, receiver) {
            if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function") throw new TypeError("Cannot use 'in' operator on non-object");
            return typeof state === "function" ? receiver === state : state.has(receiver);
          };

          exporter("__extends", __extends);
          exporter("__assign", __assign);
          exporter("__rest", __rest);
          exporter("__decorate", __decorate);
          exporter("__param", __param);
          exporter("__metadata", __metadata);
          exporter("__awaiter", __awaiter);
          exporter("__generator", __generator);
          exporter("__exportStar", __exportStar);
          exporter("__createBinding", __createBinding);
          exporter("__values", __values);
          exporter("__read", __read);
          exporter("__spread", __spread);
          exporter("__spreadArrays", __spreadArrays);
          exporter("__spreadArray", __spreadArray);
          exporter("__await", __await);
          exporter("__asyncGenerator", __asyncGenerator);
          exporter("__asyncDelegator", __asyncDelegator);
          exporter("__asyncValues", __asyncValues);
          exporter("__makeTemplateObject", __makeTemplateObject);
          exporter("__importStar", __importStar);
          exporter("__importDefault", __importDefault);
          exporter("__classPrivateFieldGet", __classPrivateFieldGet);
          exporter("__classPrivateFieldSet", __classPrivateFieldSet);
          exporter("__classPrivateFieldIn", __classPrivateFieldIn);
        }); // #endregion ORIGINAL CODE


        module.exports;
        module.exports.__esModule;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/tslib9.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        // #region ORIGINAL CODE

        /******************************************************************************
        Copyright (c) Microsoft Corporation.
        
        Permission to use, copy, modify, and/or distribute this software for any
        purpose with or without fee is hereby granted.
        
        THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
        REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
        AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
        INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
        LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
        OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
        PERFORMANCE OF THIS SOFTWARE.
        ***************************************************************************** */

        /* global global, define, System, Reflect, Promise */
        var __extends;

        var __assign;

        var __rest;

        var __decorate;

        var __param;

        var __metadata;

        var __awaiter;

        var __generator;

        var __exportStar;

        var __values;

        var __read;

        var __spread;

        var __spreadArrays;

        var __spreadArray;

        var __await;

        var __asyncGenerator;

        var __asyncDelegator;

        var __asyncValues;

        var __makeTemplateObject;

        var __importStar;

        var __importDefault;

        var __classPrivateFieldGet;

        var __classPrivateFieldSet;

        var __classPrivateFieldIn;

        var __createBinding;

        (function (factory) {
          var root = typeof global === "object" ? global : typeof self === "object" ? self : typeof this === "object" ? this : {};

          if (typeof define === "function" && define.amd) {
            define("tslib", ["exports"], function (exports) {
              factory(createExporter(root, createExporter(exports)));
            });
          } else if (typeof module === "object" && typeof module.exports === "object") {
            factory(createExporter(root, createExporter(module.exports)));
          } else {
            factory(createExporter(root));
          }

          function createExporter(exports, previous) {
            if (exports !== root) {
              if (typeof Object.create === "function") {
                Object.defineProperty(exports, "__esModule", {
                  value: true
                });
              } else {
                exports.__esModule = true;
              }
            }

            return function (id, v) {
              return exports[id] = previous ? previous(id, v) : v;
            };
          }
        })(function (exporter) {
          var extendStatics = Object.setPrototypeOf || {
            __proto__: []
          } instanceof Array && function (d, b) {
            d.__proto__ = b;
          } || function (d, b) {
            for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];
          };

          __extends = function (d, b) {
            if (typeof b !== "function" && b !== null) throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
            extendStatics(d, b);

            function __() {
              this.constructor = d;
            }

            d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
          };

          __assign = Object.assign || function (t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
              s = arguments[i];

              for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }

            return t;
          };

          __rest = function (s, e) {
            var t = {};

            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];

            if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
              if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
            }
            return t;
          };

          __decorate = function (decorators, target, key, desc) {
            var c = arguments.length,
                r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
                d;
            if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
            return c > 3 && r && Object.defineProperty(target, key, r), r;
          };

          __param = function (paramIndex, decorator) {
            return function (target, key) {
              decorator(target, key, paramIndex);
            };
          };

          __metadata = function (metadataKey, metadataValue) {
            if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
          };

          __awaiter = function (thisArg, _arguments, P, generator) {
            function adopt(value) {
              return value instanceof P ? value : new P(function (resolve) {
                resolve(value);
              });
            }

            return new (P || (P = Promise))(function (resolve, reject) {
              function fulfilled(value) {
                try {
                  step(generator.next(value));
                } catch (e) {
                  reject(e);
                }
              }

              function rejected(value) {
                try {
                  step(generator["throw"](value));
                } catch (e) {
                  reject(e);
                }
              }

              function step(result) {
                result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
              }

              step((generator = generator.apply(thisArg, _arguments || [])).next());
            });
          };

          __generator = function (thisArg, body) {
            var _ = {
              label: 0,
              sent: function () {
                if (t[0] & 1) throw t[1];
                return t[1];
              },
              trys: [],
              ops: []
            },
                f,
                y,
                t,
                g;
            return g = {
              next: verb(0),
              "throw": verb(1),
              "return": verb(2)
            }, typeof Symbol === "function" && (g[Symbol.iterator] = function () {
              return this;
            }), g;

            function verb(n) {
              return function (v) {
                return step([n, v]);
              };
            }

            function step(op) {
              if (f) throw new TypeError("Generator is already executing.");

              while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];

                switch (op[0]) {
                  case 0:
                  case 1:
                    t = op;
                    break;

                  case 4:
                    _.label++;
                    return {
                      value: op[1],
                      done: false
                    };

                  case 5:
                    _.label++;
                    y = op[1];
                    op = [0];
                    continue;

                  case 7:
                    op = _.ops.pop();

                    _.trys.pop();

                    continue;

                  default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                      _ = 0;
                      continue;
                    }

                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                      _.label = op[1];
                      break;
                    }

                    if (op[0] === 6 && _.label < t[1]) {
                      _.label = t[1];
                      t = op;
                      break;
                    }

                    if (t && _.label < t[2]) {
                      _.label = t[2];

                      _.ops.push(op);

                      break;
                    }

                    if (t[2]) _.ops.pop();

                    _.trys.pop();

                    continue;
                }

                op = body.call(thisArg, _);
              } catch (e) {
                op = [6, e];
                y = 0;
              } finally {
                f = t = 0;
              }

              if (op[0] & 5) throw op[1];
              return {
                value: op[0] ? op[1] : void 0,
                done: true
              };
            }
          };

          __exportStar = function (m, o) {
            for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
          };

          __createBinding = Object.create ? function (o, m, k, k2) {
            if (k2 === undefined) k2 = k;
            var desc = Object.getOwnPropertyDescriptor(m, k);

            if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
              desc = {
                enumerable: true,
                get: function () {
                  return m[k];
                }
              };
            }

            Object.defineProperty(o, k2, desc);
          } : function (o, m, k, k2) {
            if (k2 === undefined) k2 = k;
            o[k2] = m[k];
          };

          __values = function (o) {
            var s = typeof Symbol === "function" && Symbol.iterator,
                m = s && o[s],
                i = 0;
            if (m) return m.call(o);
            if (o && typeof o.length === "number") return {
              next: function () {
                if (o && i >= o.length) o = void 0;
                return {
                  value: o && o[i++],
                  done: !o
                };
              }
            };
            throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
          };

          __read = function (o, n) {
            var m = typeof Symbol === "function" && o[Symbol.iterator];
            if (!m) return o;
            var i = m.call(o),
                r,
                ar = [],
                e;

            try {
              while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
            } catch (error) {
              e = {
                error: error
              };
            } finally {
              try {
                if (r && !r.done && (m = i["return"])) m.call(i);
              } finally {
                if (e) throw e.error;
              }
            }

            return ar;
          };
          /** @deprecated */


          __spread = function () {
            for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));

            return ar;
          };
          /** @deprecated */


          __spreadArrays = function () {
            for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;

            for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];

            return r;
          };

          __spreadArray = function (to, from, pack) {
            if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
              if (ar || !(i in from)) {
                if (!ar) ar = Array.prototype.slice.call(from, 0, i);
                ar[i] = from[i];
              }
            }
            return to.concat(ar || Array.prototype.slice.call(from));
          };

          __await = function (v) {
            return this instanceof __await ? (this.v = v, this) : new __await(v);
          };

          __asyncGenerator = function (thisArg, _arguments, generator) {
            if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
            var g = generator.apply(thisArg, _arguments || []),
                i,
                q = [];
            return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
              return this;
            }, i;

            function verb(n) {
              if (g[n]) i[n] = function (v) {
                return new Promise(function (a, b) {
                  q.push([n, v, a, b]) > 1 || resume(n, v);
                });
              };
            }

            function resume(n, v) {
              try {
                step(g[n](v));
              } catch (e) {
                settle(q[0][3], e);
              }
            }

            function step(r) {
              r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
            }

            function fulfill(value) {
              resume("next", value);
            }

            function reject(value) {
              resume("throw", value);
            }

            function settle(f, v) {
              if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
            }
          };

          __asyncDelegator = function (o) {
            var i, p;
            return i = {}, verb("next"), verb("throw", function (e) {
              throw e;
            }), verb("return"), i[Symbol.iterator] = function () {
              return this;
            }, i;

            function verb(n, f) {
              i[n] = o[n] ? function (v) {
                return (p = !p) ? {
                  value: __await(o[n](v)),
                  done: n === "return"
                } : f ? f(v) : v;
              } : f;
            }
          };

          __asyncValues = function (o) {
            if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
            var m = o[Symbol.asyncIterator],
                i;
            return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () {
              return this;
            }, i);

            function verb(n) {
              i[n] = o[n] && function (v) {
                return new Promise(function (resolve, reject) {
                  v = o[n](v), settle(resolve, reject, v.done, v.value);
                });
              };
            }

            function settle(resolve, reject, d, v) {
              Promise.resolve(v).then(function (v) {
                resolve({
                  value: v,
                  done: d
                });
              }, reject);
            }
          };

          __makeTemplateObject = function (cooked, raw) {
            if (Object.defineProperty) {
              Object.defineProperty(cooked, "raw", {
                value: raw
              });
            } else {
              cooked.raw = raw;
            }

            return cooked;
          };

          var __setModuleDefault = Object.create ? function (o, v) {
            Object.defineProperty(o, "default", {
              enumerable: true,
              value: v
            });
          } : function (o, v) {
            o["default"] = v;
          };

          __importStar = function (mod) {
            if (mod && mod.__esModule) return mod;
            var result = {};
            if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);

            __setModuleDefault(result, mod);

            return result;
          };

          __importDefault = function (mod) {
            return mod && mod.__esModule ? mod : {
              "default": mod
            };
          };

          __classPrivateFieldGet = function (receiver, state, kind, f) {
            if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
            if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
            return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
          };

          __classPrivateFieldSet = function (receiver, state, value, kind, f) {
            if (kind === "m") throw new TypeError("Private method is not writable");
            if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
            if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
            return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
          };

          __classPrivateFieldIn = function (state, receiver) {
            if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function") throw new TypeError("Cannot use 'in' operator on non-object");
            return typeof state === "function" ? receiver === state : state.has(receiver);
          };

          exporter("__extends", __extends);
          exporter("__assign", __assign);
          exporter("__rest", __rest);
          exporter("__decorate", __decorate);
          exporter("__param", __param);
          exporter("__metadata", __metadata);
          exporter("__awaiter", __awaiter);
          exporter("__generator", __generator);
          exporter("__exportStar", __exportStar);
          exporter("__createBinding", __createBinding);
          exporter("__values", __values);
          exporter("__read", __read);
          exporter("__spread", __spread);
          exporter("__spreadArrays", __spreadArrays);
          exporter("__spreadArray", __spreadArray);
          exporter("__await", __await);
          exporter("__asyncGenerator", __asyncGenerator);
          exporter("__asyncDelegator", __asyncDelegator);
          exporter("__asyncValues", __asyncValues);
          exporter("__makeTemplateObject", __makeTemplateObject);
          exporter("__importStar", __importStar);
          exporter("__importDefault", __importDefault);
          exporter("__classPrivateFieldGet", __classPrivateFieldGet);
          exporter("__classPrivateFieldSet", __classPrivateFieldSet);
          exporter("__classPrivateFieldIn", __classPrivateFieldIn);
        }); // #endregion ORIGINAL CODE


        module.exports;
        module.exports.__esModule;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/typeof.js", [], function (exports) {
  'use strict';

  return {
    execute: function () {
      exports('default', _typeof);

      function _typeof(obj) {
        "@babel/helpers - typeof";

        return _typeof = exports('default', "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
          return typeof obj;
        } : function (obj) {
          return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
        }), _typeof(obj);
      }
    }
  };
});

System.register("chunks:///_virtual/types.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        }); // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/UnicodeExtensionValue.js", ['./cjs-loader.mjs', './utils7.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.UnicodeExtensionValue = void 0;

        var utils_1 = require("./utils");
        /**
         * https://tc39.es/ecma402/#sec-unicodeextensionvalue
         * @param extension
         * @param key
         */


        function UnicodeExtensionValue(extension, key) {
          (0, utils_1.invariant)(key.length === 2, 'key must have 2 elements');
          var size = extension.length;
          var searchValue = "-".concat(key, "-");
          var pos = extension.indexOf(searchValue);

          if (pos !== -1) {
            var start = pos + 4;
            var end = start;
            var k = start;
            var done = false;

            while (!done) {
              var e = extension.indexOf('-', k);
              var len = void 0;

              if (e === -1) {
                len = size - k;
              } else {
                len = e - k;
              }

              if (len === 2) {
                done = true;
              } else if (e === -1) {
                end = size;
                done = true;
              } else {
                end = e;
                k = e + 1;
              }
            }

            return extension.slice(start, end);
          }

          searchValue = "-".concat(key);
          pos = extension.indexOf(searchValue);

          if (pos !== -1 && pos + 3 === size) {
            return '';
          }

          return undefined;
        }

        exports.UnicodeExtensionValue = UnicodeExtensionValue; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.UnicodeExtensionValue;
      }, () => ({
        './utils': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/UnicodeExtensionValue2.js", ['./cjs-loader.mjs', './utils10.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.UnicodeExtensionValue = void 0;

        var utils_1 = require("./utils");
        /**
         * https://tc39.es/ecma402/#sec-unicodeextensionvalue
         * @param extension
         * @param key
         */


        function UnicodeExtensionValue(extension, key) {
          (0, utils_1.invariant)(key.length === 2, 'key must have 2 elements');
          var size = extension.length;
          var searchValue = "-".concat(key, "-");
          var pos = extension.indexOf(searchValue);

          if (pos !== -1) {
            var start = pos + 4;
            var end = start;
            var k = start;
            var done = false;

            while (!done) {
              var e = extension.indexOf('-', k);
              var len = void 0;

              if (e === -1) {
                len = size - k;
              } else {
                len = e - k;
              }

              if (len === 2) {
                done = true;
              } else if (e === -1) {
                end = size;
                done = true;
              } else {
                end = e;
                k = e + 1;
              }
            }

            return extension.slice(start, end);
          }

          searchValue = "-".concat(key);
          pos = extension.indexOf(searchValue);

          if (pos !== -1 && pos + 3 === size) {
            return '';
          }

          return undefined;
        }

        exports.UnicodeExtensionValue = UnicodeExtensionValue; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.UnicodeExtensionValue;
      }, () => ({
        './utils': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/UnicodeExtensionValue3.js", ['./cjs-loader.mjs', './utils11.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.UnicodeExtensionValue = void 0;

        var utils_1 = require("./utils");
        /**
         * https://tc39.es/ecma402/#sec-unicodeextensionvalue
         * @param extension
         * @param key
         */


        function UnicodeExtensionValue(extension, key) {
          (0, utils_1.invariant)(key.length === 2, 'key must have 2 elements');
          var size = extension.length;
          var searchValue = "-".concat(key, "-");
          var pos = extension.indexOf(searchValue);

          if (pos !== -1) {
            var start = pos + 4;
            var end = start;
            var k = start;
            var done = false;

            while (!done) {
              var e = extension.indexOf('-', k);
              var len = void 0;

              if (e === -1) {
                len = size - k;
              } else {
                len = e - k;
              }

              if (len === 2) {
                done = true;
              } else if (e === -1) {
                end = size;
                done = true;
              } else {
                end = e;
                k = e + 1;
              }
            }

            return extension.slice(start, end);
          }

          searchValue = "-".concat(key);
          pos = extension.indexOf(searchValue);

          if (pos !== -1 && pos + 3 === size) {
            return '';
          }

          return undefined;
        }

        exports.UnicodeExtensionValue = UnicodeExtensionValue; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.UnicodeExtensionValue;
      }, () => ({
        './utils': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/UnicodeExtensionValue4.js", ['./cjs-loader.mjs', './utils12.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.UnicodeExtensionValue = void 0;

        var utils_1 = require("./utils");
        /**
         * https://tc39.es/ecma402/#sec-unicodeextensionvalue
         * @param extension
         * @param key
         */


        function UnicodeExtensionValue(extension, key) {
          (0, utils_1.invariant)(key.length === 2, 'key must have 2 elements');
          var size = extension.length;
          var searchValue = "-".concat(key, "-");
          var pos = extension.indexOf(searchValue);

          if (pos !== -1) {
            var start = pos + 4;
            var end = start;
            var k = start;
            var done = false;

            while (!done) {
              var e = extension.indexOf('-', k);
              var len = void 0;

              if (e === -1) {
                len = size - k;
              } else {
                len = e - k;
              }

              if (len === 2) {
                done = true;
              } else if (e === -1) {
                end = size;
                done = true;
              } else {
                end = e;
                k = e + 1;
              }
            }

            return extension.slice(start, end);
          }

          searchValue = "-".concat(key);
          pos = extension.indexOf(searchValue);

          if (pos !== -1 && pos + 3 === size) {
            return '';
          }

          return undefined;
        }

        exports.UnicodeExtensionValue = UnicodeExtensionValue; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.UnicodeExtensionValue;
      }, () => ({
        './utils': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/UnicodeExtensionValue5.js", ['./cjs-loader.mjs', './utils13.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.UnicodeExtensionValue = void 0;

        var utils_1 = require("./utils");
        /**
         * https://tc39.es/ecma402/#sec-unicodeextensionvalue
         * @param extension
         * @param key
         */


        function UnicodeExtensionValue(extension, key) {
          (0, utils_1.invariant)(key.length === 2, 'key must have 2 elements');
          var size = extension.length;
          var searchValue = "-".concat(key, "-");
          var pos = extension.indexOf(searchValue);

          if (pos !== -1) {
            var start = pos + 4;
            var end = start;
            var k = start;
            var done = false;

            while (!done) {
              var e = extension.indexOf('-', k);
              var len = void 0;

              if (e === -1) {
                len = size - k;
              } else {
                len = e - k;
              }

              if (len === 2) {
                done = true;
              } else if (e === -1) {
                end = size;
                done = true;
              } else {
                end = e;
                k = e + 1;
              }
            }

            return extension.slice(start, end);
          }

          searchValue = "-".concat(key);
          pos = extension.indexOf(searchValue);

          if (pos !== -1 && pos + 3 === size) {
            return '';
          }

          return undefined;
        }

        exports.UnicodeExtensionValue = UnicodeExtensionValue; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.UnicodeExtensionValue;
      }, () => ({
        './utils': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/UnicodeExtensionValue6.js", ['./cjs-loader.mjs', './utils14.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.UnicodeExtensionValue = void 0;

        var utils_1 = require("./utils");
        /**
         * https://tc39.es/ecma402/#sec-unicodeextensionvalue
         * @param extension
         * @param key
         */


        function UnicodeExtensionValue(extension, key) {
          (0, utils_1.invariant)(key.length === 2, 'key must have 2 elements');
          var size = extension.length;
          var searchValue = "-".concat(key, "-");
          var pos = extension.indexOf(searchValue);

          if (pos !== -1) {
            var start = pos + 4;
            var end = start;
            var k = start;
            var done = false;

            while (!done) {
              var e = extension.indexOf('-', k);
              var len = void 0;

              if (e === -1) {
                len = size - k;
              } else {
                len = e - k;
              }

              if (len === 2) {
                done = true;
              } else if (e === -1) {
                end = size;
                done = true;
              } else {
                end = e;
                k = e + 1;
              }
            }

            return extension.slice(start, end);
          }

          searchValue = "-".concat(key);
          pos = extension.indexOf(searchValue);

          if (pos !== -1 && pos + 3 === size) {
            return '';
          }

          return undefined;
        }

        exports.UnicodeExtensionValue = UnicodeExtensionValue; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.UnicodeExtensionValue;
      }, () => ({
        './utils': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/UnicodeExtensionValue7.js", ['./cjs-loader.mjs', './utils15.js'], function (exports, module) {
  'use strict';

  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.UnicodeExtensionValue = void 0;

        var utils_1 = require("./utils");
        /**
         * https://tc39.es/ecma402/#sec-unicodeextensionvalue
         * @param extension
         * @param key
         */


        function UnicodeExtensionValue(extension, key) {
          (0, utils_1.invariant)(key.length === 2, 'key must have 2 elements');
          var size = extension.length;
          var searchValue = "-".concat(key, "-");
          var pos = extension.indexOf(searchValue);

          if (pos !== -1) {
            var start = pos + 4;
            var end = start;
            var k = start;
            var done = false;

            while (!done) {
              var e = extension.indexOf('-', k);
              var len = void 0;

              if (e === -1) {
                len = size - k;
              } else {
                len = e - k;
              }

              if (len === 2) {
                done = true;
              } else if (e === -1) {
                end = size;
                done = true;
              } else {
                end = e;
                k = e + 1;
              }
            }

            return extension.slice(start, end);
          }

          searchValue = "-".concat(key);
          pos = extension.indexOf(searchValue);

          if (pos !== -1 && pos + 3 === size) {
            return '';
          }

          return undefined;
        }

        exports.UnicodeExtensionValue = UnicodeExtensionValue; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.UnicodeExtensionValue;
      }, () => ({
        './utils': __cjsMetaURL$1
      }));
    }
  };
});

System.register("chunks:///_virtual/unsupportedIterableToArray.js", ['./arrayLikeToArray.js'], function (exports) {
  'use strict';

  var _arrayLikeToArray;

  return {
    setters: [function (module) {
      _arrayLikeToArray = module.default;
    }],
    execute: function () {
      exports('default', _unsupportedIterableToArray);

      function _unsupportedIterableToArray(o, minLen) {
        if (!o) return;
        if (typeof o === "string") return _arrayLikeToArray(o, minLen);
        var n = Object.prototype.toString.call(o).slice(8, -1);
        if (n === "Object" && o.constructor) n = o.constructor.name;
        if (n === "Map" || n === "Set") return Array.from(o);
        if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
      }
    }
  };
});

System.register("chunks:///_virtual/utils.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.shortMorePenalty = exports.shortLessPenalty = exports.longMorePenalty = exports.longLessPenalty = exports.differentNumericTypePenalty = exports.additionPenalty = exports.removalPenalty = exports.DATE_TIME_PROPS = void 0;
        exports.DATE_TIME_PROPS = ['weekday', 'era', 'year', 'month', 'day', 'hour', 'minute', 'second', 'timeZoneName'];
        exports.removalPenalty = 120;
        exports.additionPenalty = 20;
        exports.differentNumericTypePenalty = 15;
        exports.longLessPenalty = 8;
        exports.longMorePenalty = 6;
        exports.shortLessPenalty = 6;
        exports.shortMorePenalty = 3; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.shortMorePenalty;
        module.exports.shortLessPenalty;
        module.exports.longMorePenalty;
        module.exports.longLessPenalty;
        module.exports.differentNumericTypePenalty;
        module.exports.additionPenalty;
        module.exports.removalPenalty;
        module.exports.DATE_TIME_PROPS;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/utils10.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.invariant = exports.UNICODE_EXTENSION_SEQUENCE_REGEX = void 0;
        exports.UNICODE_EXTENSION_SEQUENCE_REGEX = /-u(?:-[0-9a-z]{2,8})+/gi;

        function invariant(condition, message, Err) {
          if (Err === void 0) {
            Err = Error;
          }

          if (!condition) {
            throw new Err(message);
          }
        }

        exports.invariant = invariant; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.invariant;
        module.exports.UNICODE_EXTENSION_SEQUENCE_REGEX;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/utils11.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.invariant = exports.UNICODE_EXTENSION_SEQUENCE_REGEX = void 0;
        exports.UNICODE_EXTENSION_SEQUENCE_REGEX = /-u(?:-[0-9a-z]{2,8})+/gi;

        function invariant(condition, message, Err) {
          if (Err === void 0) {
            Err = Error;
          }

          if (!condition) {
            throw new Err(message);
          }
        }

        exports.invariant = invariant; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.invariant;
        module.exports.UNICODE_EXTENSION_SEQUENCE_REGEX;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/utils12.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.invariant = exports.UNICODE_EXTENSION_SEQUENCE_REGEX = void 0;
        exports.UNICODE_EXTENSION_SEQUENCE_REGEX = /-u(?:-[0-9a-z]{2,8})+/gi;

        function invariant(condition, message, Err) {
          if (Err === void 0) {
            Err = Error;
          }

          if (!condition) {
            throw new Err(message);
          }
        }

        exports.invariant = invariant; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.invariant;
        module.exports.UNICODE_EXTENSION_SEQUENCE_REGEX;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/utils13.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.invariant = exports.UNICODE_EXTENSION_SEQUENCE_REGEX = void 0;
        exports.UNICODE_EXTENSION_SEQUENCE_REGEX = /-u(?:-[0-9a-z]{2,8})+/gi;

        function invariant(condition, message, Err) {
          if (Err === void 0) {
            Err = Error;
          }

          if (!condition) {
            throw new Err(message);
          }
        }

        exports.invariant = invariant; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.invariant;
        module.exports.UNICODE_EXTENSION_SEQUENCE_REGEX;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/utils14.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.invariant = exports.UNICODE_EXTENSION_SEQUENCE_REGEX = void 0;
        exports.UNICODE_EXTENSION_SEQUENCE_REGEX = /-u(?:-[0-9a-z]{2,8})+/gi;

        function invariant(condition, message, Err) {
          if (Err === void 0) {
            Err = Error;
          }

          if (!condition) {
            throw new Err(message);
          }
        }

        exports.invariant = invariant; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.invariant;
        module.exports.UNICODE_EXTENSION_SEQUENCE_REGEX;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/utils15.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.invariant = exports.UNICODE_EXTENSION_SEQUENCE_REGEX = void 0;
        exports.UNICODE_EXTENSION_SEQUENCE_REGEX = /-u(?:-[0-9a-z]{2,8})+/gi;

        function invariant(condition, message, Err) {
          if (Err === void 0) {
            Err = Error;
          }

          if (!condition) {
            throw new Err(message);
          }
        }

        exports.invariant = invariant; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.invariant;
        module.exports.UNICODE_EXTENSION_SEQUENCE_REGEX;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/utils2.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.invariant = exports.UNICODE_EXTENSION_SEQUENCE_REGEX = exports.defineProperty = exports.isLiteralPart = exports.getMultiInternalSlots = exports.getInternalSlot = exports.setMultiInternalSlots = exports.setInternalSlot = exports.repeat = exports.getMagnitude = void 0;
        /**
         * Cannot do Math.log(x) / Math.log(10) bc if IEEE floating point issue
         * @param x number
         */

        function getMagnitude(x) {
          // Cannot count string length via Number.toString because it may use scientific notation
          // for very small or very large numbers.
          return Math.floor(Math.log(x) * Math.LOG10E);
        }

        exports.getMagnitude = getMagnitude;

        function repeat(s, times) {
          if (typeof s.repeat === 'function') {
            return s.repeat(times);
          }

          var arr = new Array(times);

          for (var i = 0; i < arr.length; i++) {
            arr[i] = s;
          }

          return arr.join('');
        }

        exports.repeat = repeat;

        function setInternalSlot(map, pl, field, value) {
          if (!map.get(pl)) {
            map.set(pl, Object.create(null));
          }

          var slots = map.get(pl);
          slots[field] = value;
        }

        exports.setInternalSlot = setInternalSlot;

        function setMultiInternalSlots(map, pl, props) {
          for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {
            var k = _a[_i];
            setInternalSlot(map, pl, k, props[k]);
          }
        }

        exports.setMultiInternalSlots = setMultiInternalSlots;

        function getInternalSlot(map, pl, field) {
          return getMultiInternalSlots(map, pl, field)[field];
        }

        exports.getInternalSlot = getInternalSlot;

        function getMultiInternalSlots(map, pl) {
          var fields = [];

          for (var _i = 2; _i < arguments.length; _i++) {
            fields[_i - 2] = arguments[_i];
          }

          var slots = map.get(pl);

          if (!slots) {
            throw new TypeError("".concat(pl, " InternalSlot has not been initialized"));
          }

          return fields.reduce(function (all, f) {
            all[f] = slots[f];
            return all;
          }, Object.create(null));
        }

        exports.getMultiInternalSlots = getMultiInternalSlots;

        function isLiteralPart(patternPart) {
          return patternPart.type === 'literal';
        }

        exports.isLiteralPart = isLiteralPart;
        /*
          17 ECMAScript Standard Built-in Objects:
            Every built-in Function object, including constructors, that is not
            identified as an anonymous function has a name property whose value
            is a String.
             Unless otherwise specified, the name property of a built-in Function
            object, if it exists, has the attributes { [[Writable]]: false,
            [[Enumerable]]: false, [[Configurable]]: true }.
        */

        function defineProperty(target, name, _a) {
          var value = _a.value;
          Object.defineProperty(target, name, {
            configurable: true,
            enumerable: false,
            writable: true,
            value: value
          });
        }

        exports.defineProperty = defineProperty;
        exports.UNICODE_EXTENSION_SEQUENCE_REGEX = /-u(?:-[0-9a-z]{2,8})+/gi;

        function invariant(condition, message, Err) {
          if (Err === void 0) {
            Err = Error;
          }

          if (!condition) {
            throw new Err(message);
          }
        }

        exports.invariant = invariant; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.invariant;
        module.exports.UNICODE_EXTENSION_SEQUENCE_REGEX;
        module.exports.defineProperty;
        module.exports.isLiteralPart;
        module.exports.getMultiInternalSlots;
        module.exports.getInternalSlot;
        module.exports.setMultiInternalSlots;
        module.exports.setInternalSlot;
        module.exports.repeat;
        module.exports.getMagnitude;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/utils3.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.invariant = exports.UNICODE_EXTENSION_SEQUENCE_REGEX = exports.defineProperty = exports.isLiteralPart = exports.getMultiInternalSlots = exports.getInternalSlot = exports.setMultiInternalSlots = exports.setInternalSlot = exports.repeat = exports.getMagnitude = void 0;
        /**
         * Cannot do Math.log(x) / Math.log(10) bc if IEEE floating point issue
         * @param x number
         */

        function getMagnitude(x) {
          // Cannot count string length via Number.toString because it may use scientific notation
          // for very small or very large numbers.
          return Math.floor(Math.log(x) * Math.LOG10E);
        }

        exports.getMagnitude = getMagnitude;

        function repeat(s, times) {
          if (typeof s.repeat === 'function') {
            return s.repeat(times);
          }

          var arr = new Array(times);

          for (var i = 0; i < arr.length; i++) {
            arr[i] = s;
          }

          return arr.join('');
        }

        exports.repeat = repeat;

        function setInternalSlot(map, pl, field, value) {
          if (!map.get(pl)) {
            map.set(pl, Object.create(null));
          }

          var slots = map.get(pl);
          slots[field] = value;
        }

        exports.setInternalSlot = setInternalSlot;

        function setMultiInternalSlots(map, pl, props) {
          for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {
            var k = _a[_i];
            setInternalSlot(map, pl, k, props[k]);
          }
        }

        exports.setMultiInternalSlots = setMultiInternalSlots;

        function getInternalSlot(map, pl, field) {
          return getMultiInternalSlots(map, pl, field)[field];
        }

        exports.getInternalSlot = getInternalSlot;

        function getMultiInternalSlots(map, pl) {
          var fields = [];

          for (var _i = 2; _i < arguments.length; _i++) {
            fields[_i - 2] = arguments[_i];
          }

          var slots = map.get(pl);

          if (!slots) {
            throw new TypeError("".concat(pl, " InternalSlot has not been initialized"));
          }

          return fields.reduce(function (all, f) {
            all[f] = slots[f];
            return all;
          }, Object.create(null));
        }

        exports.getMultiInternalSlots = getMultiInternalSlots;

        function isLiteralPart(patternPart) {
          return patternPart.type === 'literal';
        }

        exports.isLiteralPart = isLiteralPart;
        /*
          17 ECMAScript Standard Built-in Objects:
            Every built-in Function object, including constructors, that is not
            identified as an anonymous function has a name property whose value
            is a String.
             Unless otherwise specified, the name property of a built-in Function
            object, if it exists, has the attributes { [[Writable]]: false,
            [[Enumerable]]: false, [[Configurable]]: true }.
        */

        function defineProperty(target, name, _a) {
          var value = _a.value;
          Object.defineProperty(target, name, {
            configurable: true,
            enumerable: false,
            writable: true,
            value: value
          });
        }

        exports.defineProperty = defineProperty;
        exports.UNICODE_EXTENSION_SEQUENCE_REGEX = /-u(?:-[0-9a-z]{2,8})+/gi;

        function invariant(condition, message, Err) {
          if (Err === void 0) {
            Err = Error;
          }

          if (!condition) {
            throw new Err(message);
          }
        }

        exports.invariant = invariant; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.invariant;
        module.exports.UNICODE_EXTENSION_SEQUENCE_REGEX;
        module.exports.defineProperty;
        module.exports.isLiteralPart;
        module.exports.getMultiInternalSlots;
        module.exports.getInternalSlot;
        module.exports.setMultiInternalSlots;
        module.exports.setInternalSlot;
        module.exports.repeat;
        module.exports.getMagnitude;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/utils4.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.invariant = exports.UNICODE_EXTENSION_SEQUENCE_REGEX = exports.defineProperty = exports.isLiteralPart = exports.getMultiInternalSlots = exports.getInternalSlot = exports.setMultiInternalSlots = exports.setInternalSlot = exports.repeat = exports.getMagnitude = void 0;
        /**
         * Cannot do Math.log(x) / Math.log(10) bc if IEEE floating point issue
         * @param x number
         */

        function getMagnitude(x) {
          // Cannot count string length via Number.toString because it may use scientific notation
          // for very small or very large numbers.
          return Math.floor(Math.log(x) * Math.LOG10E);
        }

        exports.getMagnitude = getMagnitude;

        function repeat(s, times) {
          if (typeof s.repeat === 'function') {
            return s.repeat(times);
          }

          var arr = new Array(times);

          for (var i = 0; i < arr.length; i++) {
            arr[i] = s;
          }

          return arr.join('');
        }

        exports.repeat = repeat;

        function setInternalSlot(map, pl, field, value) {
          if (!map.get(pl)) {
            map.set(pl, Object.create(null));
          }

          var slots = map.get(pl);
          slots[field] = value;
        }

        exports.setInternalSlot = setInternalSlot;

        function setMultiInternalSlots(map, pl, props) {
          for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {
            var k = _a[_i];
            setInternalSlot(map, pl, k, props[k]);
          }
        }

        exports.setMultiInternalSlots = setMultiInternalSlots;

        function getInternalSlot(map, pl, field) {
          return getMultiInternalSlots(map, pl, field)[field];
        }

        exports.getInternalSlot = getInternalSlot;

        function getMultiInternalSlots(map, pl) {
          var fields = [];

          for (var _i = 2; _i < arguments.length; _i++) {
            fields[_i - 2] = arguments[_i];
          }

          var slots = map.get(pl);

          if (!slots) {
            throw new TypeError("".concat(pl, " InternalSlot has not been initialized"));
          }

          return fields.reduce(function (all, f) {
            all[f] = slots[f];
            return all;
          }, Object.create(null));
        }

        exports.getMultiInternalSlots = getMultiInternalSlots;

        function isLiteralPart(patternPart) {
          return patternPart.type === 'literal';
        }

        exports.isLiteralPart = isLiteralPart;
        /*
          17 ECMAScript Standard Built-in Objects:
            Every built-in Function object, including constructors, that is not
            identified as an anonymous function has a name property whose value
            is a String.
             Unless otherwise specified, the name property of a built-in Function
            object, if it exists, has the attributes { [[Writable]]: false,
            [[Enumerable]]: false, [[Configurable]]: true }.
        */

        function defineProperty(target, name, _a) {
          var value = _a.value;
          Object.defineProperty(target, name, {
            configurable: true,
            enumerable: false,
            writable: true,
            value: value
          });
        }

        exports.defineProperty = defineProperty;
        exports.UNICODE_EXTENSION_SEQUENCE_REGEX = /-u(?:-[0-9a-z]{2,8})+/gi;

        function invariant(condition, message, Err) {
          if (Err === void 0) {
            Err = Error;
          }

          if (!condition) {
            throw new Err(message);
          }
        }

        exports.invariant = invariant; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.invariant;
        module.exports.UNICODE_EXTENSION_SEQUENCE_REGEX;
        module.exports.defineProperty;
        module.exports.isLiteralPart;
        module.exports.getMultiInternalSlots;
        module.exports.getInternalSlot;
        module.exports.setMultiInternalSlots;
        module.exports.setInternalSlot;
        module.exports.repeat;
        module.exports.getMagnitude;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/utils5.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.invariant = exports.UNICODE_EXTENSION_SEQUENCE_REGEX = exports.defineProperty = exports.isLiteralPart = exports.getMultiInternalSlots = exports.getInternalSlot = exports.setMultiInternalSlots = exports.setInternalSlot = exports.repeat = exports.getMagnitude = void 0;
        /**
         * Cannot do Math.log(x) / Math.log(10) bc if IEEE floating point issue
         * @param x number
         */

        function getMagnitude(x) {
          // Cannot count string length via Number.toString because it may use scientific notation
          // for very small or very large numbers.
          return Math.floor(Math.log(x) * Math.LOG10E);
        }

        exports.getMagnitude = getMagnitude;

        function repeat(s, times) {
          if (typeof s.repeat === 'function') {
            return s.repeat(times);
          }

          var arr = new Array(times);

          for (var i = 0; i < arr.length; i++) {
            arr[i] = s;
          }

          return arr.join('');
        }

        exports.repeat = repeat;

        function setInternalSlot(map, pl, field, value) {
          if (!map.get(pl)) {
            map.set(pl, Object.create(null));
          }

          var slots = map.get(pl);
          slots[field] = value;
        }

        exports.setInternalSlot = setInternalSlot;

        function setMultiInternalSlots(map, pl, props) {
          for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {
            var k = _a[_i];
            setInternalSlot(map, pl, k, props[k]);
          }
        }

        exports.setMultiInternalSlots = setMultiInternalSlots;

        function getInternalSlot(map, pl, field) {
          return getMultiInternalSlots(map, pl, field)[field];
        }

        exports.getInternalSlot = getInternalSlot;

        function getMultiInternalSlots(map, pl) {
          var fields = [];

          for (var _i = 2; _i < arguments.length; _i++) {
            fields[_i - 2] = arguments[_i];
          }

          var slots = map.get(pl);

          if (!slots) {
            throw new TypeError("".concat(pl, " InternalSlot has not been initialized"));
          }

          return fields.reduce(function (all, f) {
            all[f] = slots[f];
            return all;
          }, Object.create(null));
        }

        exports.getMultiInternalSlots = getMultiInternalSlots;

        function isLiteralPart(patternPart) {
          return patternPart.type === 'literal';
        }

        exports.isLiteralPart = isLiteralPart;
        /*
          17 ECMAScript Standard Built-in Objects:
            Every built-in Function object, including constructors, that is not
            identified as an anonymous function has a name property whose value
            is a String.
             Unless otherwise specified, the name property of a built-in Function
            object, if it exists, has the attributes { [[Writable]]: false,
            [[Enumerable]]: false, [[Configurable]]: true }.
        */

        function defineProperty(target, name, _a) {
          var value = _a.value;
          Object.defineProperty(target, name, {
            configurable: true,
            enumerable: false,
            writable: true,
            value: value
          });
        }

        exports.defineProperty = defineProperty;
        exports.UNICODE_EXTENSION_SEQUENCE_REGEX = /-u(?:-[0-9a-z]{2,8})+/gi;

        function invariant(condition, message, Err) {
          if (Err === void 0) {
            Err = Error;
          }

          if (!condition) {
            throw new Err(message);
          }
        }

        exports.invariant = invariant; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.invariant;
        module.exports.UNICODE_EXTENSION_SEQUENCE_REGEX;
        module.exports.defineProperty;
        module.exports.isLiteralPart;
        module.exports.getMultiInternalSlots;
        module.exports.getInternalSlot;
        module.exports.setMultiInternalSlots;
        module.exports.setInternalSlot;
        module.exports.repeat;
        module.exports.getMagnitude;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/utils6.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.invariant = exports.UNICODE_EXTENSION_SEQUENCE_REGEX = exports.defineProperty = exports.isLiteralPart = exports.getMultiInternalSlots = exports.getInternalSlot = exports.setMultiInternalSlots = exports.setInternalSlot = exports.repeat = exports.getMagnitude = void 0;
        /**
         * Cannot do Math.log(x) / Math.log(10) bc if IEEE floating point issue
         * @param x number
         */

        function getMagnitude(x) {
          // Cannot count string length via Number.toString because it may use scientific notation
          // for very small or very large numbers.
          return Math.floor(Math.log(x) * Math.LOG10E);
        }

        exports.getMagnitude = getMagnitude;

        function repeat(s, times) {
          if (typeof s.repeat === 'function') {
            return s.repeat(times);
          }

          var arr = new Array(times);

          for (var i = 0; i < arr.length; i++) {
            arr[i] = s;
          }

          return arr.join('');
        }

        exports.repeat = repeat;

        function setInternalSlot(map, pl, field, value) {
          if (!map.get(pl)) {
            map.set(pl, Object.create(null));
          }

          var slots = map.get(pl);
          slots[field] = value;
        }

        exports.setInternalSlot = setInternalSlot;

        function setMultiInternalSlots(map, pl, props) {
          for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {
            var k = _a[_i];
            setInternalSlot(map, pl, k, props[k]);
          }
        }

        exports.setMultiInternalSlots = setMultiInternalSlots;

        function getInternalSlot(map, pl, field) {
          return getMultiInternalSlots(map, pl, field)[field];
        }

        exports.getInternalSlot = getInternalSlot;

        function getMultiInternalSlots(map, pl) {
          var fields = [];

          for (var _i = 2; _i < arguments.length; _i++) {
            fields[_i - 2] = arguments[_i];
          }

          var slots = map.get(pl);

          if (!slots) {
            throw new TypeError("".concat(pl, " InternalSlot has not been initialized"));
          }

          return fields.reduce(function (all, f) {
            all[f] = slots[f];
            return all;
          }, Object.create(null));
        }

        exports.getMultiInternalSlots = getMultiInternalSlots;

        function isLiteralPart(patternPart) {
          return patternPart.type === 'literal';
        }

        exports.isLiteralPart = isLiteralPart;
        /*
          17 ECMAScript Standard Built-in Objects:
            Every built-in Function object, including constructors, that is not
            identified as an anonymous function has a name property whose value
            is a String.
             Unless otherwise specified, the name property of a built-in Function
            object, if it exists, has the attributes { [[Writable]]: false,
            [[Enumerable]]: false, [[Configurable]]: true }.
        */

        function defineProperty(target, name, _a) {
          var value = _a.value;
          Object.defineProperty(target, name, {
            configurable: true,
            enumerable: false,
            writable: true,
            value: value
          });
        }

        exports.defineProperty = defineProperty;
        exports.UNICODE_EXTENSION_SEQUENCE_REGEX = /-u(?:-[0-9a-z]{2,8})+/gi;

        function invariant(condition, message, Err) {
          if (Err === void 0) {
            Err = Error;
          }

          if (!condition) {
            throw new Err(message);
          }
        }

        exports.invariant = invariant; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.invariant;
        module.exports.UNICODE_EXTENSION_SEQUENCE_REGEX;
        module.exports.defineProperty;
        module.exports.isLiteralPart;
        module.exports.getMultiInternalSlots;
        module.exports.getInternalSlot;
        module.exports.setMultiInternalSlots;
        module.exports.setInternalSlot;
        module.exports.repeat;
        module.exports.getMagnitude;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/utils7.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.invariant = exports.UNICODE_EXTENSION_SEQUENCE_REGEX = void 0;
        exports.UNICODE_EXTENSION_SEQUENCE_REGEX = /-u(?:-[0-9a-z]{2,8})+/gi;

        function invariant(condition, message, Err) {
          if (Err === void 0) {
            Err = Error;
          }

          if (!condition) {
            throw new Err(message);
          }
        }

        exports.invariant = invariant; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.invariant;
        module.exports.UNICODE_EXTENSION_SEQUENCE_REGEX;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/utils8.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.invariant = exports.UNICODE_EXTENSION_SEQUENCE_REGEX = exports.defineProperty = exports.isLiteralPart = exports.getMultiInternalSlots = exports.getInternalSlot = exports.setMultiInternalSlots = exports.setInternalSlot = exports.repeat = exports.getMagnitude = void 0;
        /**
         * Cannot do Math.log(x) / Math.log(10) bc if IEEE floating point issue
         * @param x number
         */

        function getMagnitude(x) {
          // Cannot count string length via Number.toString because it may use scientific notation
          // for very small or very large numbers.
          return Math.floor(Math.log(x) * Math.LOG10E);
        }

        exports.getMagnitude = getMagnitude;

        function repeat(s, times) {
          if (typeof s.repeat === 'function') {
            return s.repeat(times);
          }

          var arr = new Array(times);

          for (var i = 0; i < arr.length; i++) {
            arr[i] = s;
          }

          return arr.join('');
        }

        exports.repeat = repeat;

        function setInternalSlot(map, pl, field, value) {
          if (!map.get(pl)) {
            map.set(pl, Object.create(null));
          }

          var slots = map.get(pl);
          slots[field] = value;
        }

        exports.setInternalSlot = setInternalSlot;

        function setMultiInternalSlots(map, pl, props) {
          for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {
            var k = _a[_i];
            setInternalSlot(map, pl, k, props[k]);
          }
        }

        exports.setMultiInternalSlots = setMultiInternalSlots;

        function getInternalSlot(map, pl, field) {
          return getMultiInternalSlots(map, pl, field)[field];
        }

        exports.getInternalSlot = getInternalSlot;

        function getMultiInternalSlots(map, pl) {
          var fields = [];

          for (var _i = 2; _i < arguments.length; _i++) {
            fields[_i - 2] = arguments[_i];
          }

          var slots = map.get(pl);

          if (!slots) {
            throw new TypeError("".concat(pl, " InternalSlot has not been initialized"));
          }

          return fields.reduce(function (all, f) {
            all[f] = slots[f];
            return all;
          }, Object.create(null));
        }

        exports.getMultiInternalSlots = getMultiInternalSlots;

        function isLiteralPart(patternPart) {
          return patternPart.type === 'literal';
        }

        exports.isLiteralPart = isLiteralPart;
        /*
          17 ECMAScript Standard Built-in Objects:
            Every built-in Function object, including constructors, that is not
            identified as an anonymous function has a name property whose value
            is a String.
             Unless otherwise specified, the name property of a built-in Function
            object, if it exists, has the attributes { [[Writable]]: false,
            [[Enumerable]]: false, [[Configurable]]: true }.
        */

        function defineProperty(target, name, _a) {
          var value = _a.value;
          Object.defineProperty(target, name, {
            configurable: true,
            enumerable: false,
            writable: true,
            value: value
          });
        }

        exports.defineProperty = defineProperty;
        exports.UNICODE_EXTENSION_SEQUENCE_REGEX = /-u(?:-[0-9a-z]{2,8})+/gi;

        function invariant(condition, message, Err) {
          if (Err === void 0) {
            Err = Error;
          }

          if (!condition) {
            throw new Err(message);
          }
        }

        exports.invariant = invariant; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.invariant;
        module.exports.UNICODE_EXTENSION_SEQUENCE_REGEX;
        module.exports.defineProperty;
        module.exports.isLiteralPart;
        module.exports.getMultiInternalSlots;
        module.exports.getInternalSlot;
        module.exports.setMultiInternalSlots;
        module.exports.setInternalSlot;
        module.exports.repeat;
        module.exports.getMagnitude;
      }, {});
    }
  };
});

System.register("chunks:///_virtual/utils9.js", ['./cjs-loader.mjs'], function (exports, module) {
  'use strict';

  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      const __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports, require, module, __filename, __dirname) {
        Object.defineProperty(exports, "__esModule", {
          value: true
        });
        exports.invariant = exports.UNICODE_EXTENSION_SEQUENCE_REGEX = exports.defineProperty = exports.isLiteralPart = exports.getMultiInternalSlots = exports.getInternalSlot = exports.setMultiInternalSlots = exports.setInternalSlot = exports.repeat = exports.getMagnitude = void 0;
        /**
         * Cannot do Math.log(x) / Math.log(10) bc if IEEE floating point issue
         * @param x number
         */

        function getMagnitude(x) {
          // Cannot count string length via Number.toString because it may use scientific notation
          // for very small or very large numbers.
          return Math.floor(Math.log(x) * Math.LOG10E);
        }

        exports.getMagnitude = getMagnitude;

        function repeat(s, times) {
          if (typeof s.repeat === 'function') {
            return s.repeat(times);
          }

          var arr = new Array(times);

          for (var i = 0; i < arr.length; i++) {
            arr[i] = s;
          }

          return arr.join('');
        }

        exports.repeat = repeat;

        function setInternalSlot(map, pl, field, value) {
          if (!map.get(pl)) {
            map.set(pl, Object.create(null));
          }

          var slots = map.get(pl);
          slots[field] = value;
        }

        exports.setInternalSlot = setInternalSlot;

        function setMultiInternalSlots(map, pl, props) {
          for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {
            var k = _a[_i];
            setInternalSlot(map, pl, k, props[k]);
          }
        }

        exports.setMultiInternalSlots = setMultiInternalSlots;

        function getInternalSlot(map, pl, field) {
          return getMultiInternalSlots(map, pl, field)[field];
        }

        exports.getInternalSlot = getInternalSlot;

        function getMultiInternalSlots(map, pl) {
          var fields = [];

          for (var _i = 2; _i < arguments.length; _i++) {
            fields[_i - 2] = arguments[_i];
          }

          var slots = map.get(pl);

          if (!slots) {
            throw new TypeError("".concat(pl, " InternalSlot has not been initialized"));
          }

          return fields.reduce(function (all, f) {
            all[f] = slots[f];
            return all;
          }, Object.create(null));
        }

        exports.getMultiInternalSlots = getMultiInternalSlots;

        function isLiteralPart(patternPart) {
          return patternPart.type === 'literal';
        }

        exports.isLiteralPart = isLiteralPart;
        /*
          17 ECMAScript Standard Built-in Objects:
            Every built-in Function object, including constructors, that is not
            identified as an anonymous function has a name property whose value
            is a String.
             Unless otherwise specified, the name property of a built-in Function
            object, if it exists, has the attributes { [[Writable]]: false,
            [[Enumerable]]: false, [[Configurable]]: true }.
        */

        function defineProperty(target, name, _a) {
          var value = _a.value;
          Object.defineProperty(target, name, {
            configurable: true,
            enumerable: false,
            writable: true,
            value: value
          });
        }

        exports.defineProperty = defineProperty;
        exports.UNICODE_EXTENSION_SEQUENCE_REGEX = /-u(?:-[0-9a-z]{2,8})+/gi;

        function invariant(condition, message, Err) {
          if (Err === void 0) {
            Err = Error;
          }

          if (!condition) {
            throw new Err(message);
          }
        }

        exports.invariant = invariant; // #endregion ORIGINAL CODE

        module.exports;
        module.exports.__esModule;
        module.exports.invariant;
        module.exports.UNICODE_EXTENSION_SEQUENCE_REGEX;
        module.exports.defineProperty;
        module.exports.isLiteralPart;
        module.exports.getMultiInternalSlots;
        module.exports.getInternalSlot;
        module.exports.setMultiInternalSlots;
        module.exports.setInternalSlot;
        module.exports.repeat;
        module.exports.getMagnitude;
      }, {});
    }
  };
});

} }; });