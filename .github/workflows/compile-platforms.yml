name: 🏗️ Compile

on: [push, pull_request]

jobs:
  compile_windows:
    runs-on: windows-2019
    name: "Windows"
    steps:
      - uses: actions/checkout@v2
      - name: Checkout cocos-engines
        shell: bash
        run: |
          set -x
          git clone --branch v3.6.1 --depth 1 https://github.com/cocos/cocos-engine engine
          cd engine
          EXT_VERSION=`node ./.github/workflows/get-native-external-version.js`
          cd native
          rm -rf external
          git clone --branch $EXT_VERSION --depth 1 https://github.com/cocos/cocos-engine-external external
      - uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: r21e
          add-to-path: false
      - name: set cocos_engine
        env:
          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
        shell: bash
        run: |
          set -x
          ROOT=${GITHUB_WORKSPACE//\\//}
          COCOS_X_PATH=$ROOT/engine/native
          NATIVE_DIR=$ROOT/NewProject/native/engine/win64
          RES_PATH=$ROOT/NewProject/build/windows
          sed -i "s@^.*COCOS_X_PATH.*@set(COCOS_X_PATH $COCOS_X_PATH)@g"    NewProject/build/win64/proj/cfg.cmake
          cd NATIVE_DIR/proj
          cmake -S $NATIVE_DIR -B . -DRES_DIR=$RES_DIR
          cmake --build . --config Debug
          echo "Compile Windows Debug done!"

  compile_android:
    name: "Android"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Checkout cocos-engines
        shell: bash
        run: |
          set -x
          git clone --branch v3.6.1 --depth 1 https://github.com/cocos/cocos-engine engine
          cd engine
          EXT_VERSION=`node ./.github/workflows/get-native-external-version.js`
          cd native
          rm -rf external
          git clone --branch $EXT_VERSION --depth 1 https://github.com/cocos/cocos-engine-external external
      - uses: nttld/setup-ndk@v1
        id: setup-ndk
        with:
          ndk-version: r21e
          add-to-path: false

      - name: set cocos_engine
        env:
          ANDROID_NDK_HOME: ${{ steps.setup-ndk.outputs.ndk-path }}
        shell: bash
        run: |
          set -x
          COCOS_X_PATH=$GITHUB_WORKSPACE/engine/native
          NATIVE_DIR=$GITHUB_WORKSPACE/NewProject/native/engine/android
          KEYSTORE=$GITHUB_WORKSPACE/NewProject/native/engine/android/debug.keystore
          RES_PATH=$GITHUB_WORKSPACE/NewProject/build/android
          sed -i "s@^.*COCOS_X_PATH.*@set(COCOS_X_PATH $COCOS_X_PATH)@g"    NewProject/build/android/proj/cfg.cmake
          sed -i "s@^RES_PATH.*@RES_PATH=$RES_PATH@g"                       NewProject/build/android/proj/gradle.properties
          sed -i "s@^COCOS_ENGINE_PATH.*@COCOS_ENGINE_PATH=$COCOS_X_PATH@g"                       NewProject/build/android/proj/gradle.properties
          sed -i "s@^NATIVE_DIR.*@NATIVE_DIR=$NATIVE_DIR@g"                 NewProject/build/android/proj/gradle.properties
          sed -i "s@^PROP_NDK_PATH.*@PROP_NDK_PATH=$ANDROID_NDK_HOME@g"     NewProject/build/android/proj/gradle.properties
          sed -i "s@^RELEASE_STORE_FILE.*@RELEASE_STORE_FILE=$KEYSTORE@g"   NewProject/build/android/proj/gradle.properties
          sed -i "s@^sdk.dir.*@sdk.dir=$ANDROID_HOME@g"                     NewProject/build/android/proj/local.properties
          echo "inspect gradle.properties"
          cat NewProject/build/android/proj/gradle.properties
          # install android cmake
          $ANDROID_HOME/tools/bin/sdkmanager "cmake;3.18.1"

      - name: Compile
        shell: bash
        run: |
          set -x
          cd NewProject/build/android/proj
          chmod +x gradlew
          ./gradlew assembleDebug
          echo "Compile Android Debug Done!"

  # compile_mac:
  #   name: "MacOS"
  #   runs-on: macos-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-python@v2
  #       with:
  #         python-version: "3.x"
  #     - name: Download external libraries
  #       shell: bash
  #       run: |
  #         EXT_VERSION=`grep version external/config.json  |awk -F'"' '{print $4}'`
  #         rm external/config.json
  #         git clone --branch $EXT_VERSION --depth 1 https://github.com/cocos-creator/engine-native-external external
  #     - name: Generate bindings
  #       run: |
  #         python -m pip install PyYAML==5.4.1 Cheetah3
  #         python ./tools/tojs/genbindings.py
  #         rm ./tools/tojs/userconf.ini
  #     - name: Compile
  #       env:
  #         COCOS_ENGINE_DEV: 1
  #       run: |
  #         NUM_OF_CORES=`getconf _NPROCESSORS_ONLN`
  #         COCOS2DX_ROOT=$GITHUB_WORKSPACE   
  #         echo "Compiling MacOSX ... "
  #         cd  $COCOS2DX_ROOT/templates/mac
  #         mkdir -p build-mac/proj
  #         touch build-mac/proj/cfg.cmake
  #         echo "set(CC_USE_VULKAN OFF)" >> build-mac/proj/cfg.cmake
  #         echo "set(CC_USE_GLES2 OFF)" >> build-mac/proj/cfg.cmake
  #         echo "set(CC_USE_METAL ON)" >> build-mac/proj/cfg.cmake
  #         echo "set(USE_WEBSOCKET_SERVER OFF)" >> build-mac/proj/cfg.cmake
  #         echo "set(CMAKE_CXX_STANDARD_REQUIRED ON)" >> build-mac/proj/cfg.cmake
  #         mkdir build-mac/assets

  #         RES_DIR=$COCOS2DX_ROOT/templates/mac/build-mac
  #         cd build-mac
  #         cmake ../ -GXcode -DCC_USE_GLES3=ON -DCMAKE_OSX_ARCHITECTURES=x86_64 -DRES_DIR=$RES_DIR -DCOCOS_X_PATH=$COCOS2DX_ROOT
  #         set +e
  #         cmake --build . --config Release -- -quiet -jobs $NUM_OF_CORES -arch x86_64
  #         retcode=$?
  #         set -e
  #         if [ $retcode -ne 0 ]; then
  #             echo "-----------------------------------------------------------------------------------------------"
  #             echo "------------------------------------ recompile without `-quiet` -------------------------------"
  #             echo "-----------------------------------------------------------------------------------------------"
  #             cmake --build . --config Release -- -jobs $NUM_OF_CORES -arch x86_64
  #         fi
  #         echo "Compile MacOSX x86_64 Release Done!"

  #         cd ..
  #         mkdir build-mac-apple-silicon
  #         cd build-mac-apple-silicon
  #         cmake ../ -GXcode -DCC_USE_GLES3=OFF -DCMAKE_OSX_ARCHITECTURES=arm64 -DRES_DIR=$RES_DIR -DCOCOS_X_PATH=$COCOS2DX_ROOT
  #         cmake --build . --config Release -- -quiet -jobs $NUM_OF_CORES -arch arm64
  #         echo "Compile MacOSX ARM64 Release Done!"

  # compile_iOS:
  #   name: "iOS"
  #   runs-on: macos-latest
  #   steps:
  #     - uses: maxim-lobanov/setup-xcode@v1
  #       with:
  #         xcode-version: latest-stable
  #     - uses: actions/checkout@v2
  #     - uses: actions/setup-python@v2
  #       with:
  #         python-version: "3.x"
  #     - name: Download external libraries
  #       shell: bash
  #       run: |
  #         EXT_VERSION=`grep version external/config.json  |awk -F'"' '{print $4}'`
  #         rm external/config.json
  #         git clone --branch $EXT_VERSION --depth 1 https://github.com/cocos-creator/engine-native-external external
  #     - name: Generate bindings
  #       run: |
  #         python -m pip install PyYAML==5.4.1  Cheetah3
  #         python ./tools/tojs/genbindings.py
  #         rm ./tools/tojs/userconf.ini
  #     - name: Compile
  #       env:
  #         COCOS_ENGINE_DEV: 1
  #       run: |
  #         set -x
  #         NUM_OF_CORES=`getconf _NPROCESSORS_ONLN`
  #         COCOS2DX_ROOT=$GITHUB_WORKSPACE  
  #         echo "Compiling iOS ... "
  #         cd  $COCOS2DX_ROOT/templates/ios
  #         mkdir -p build-ios/proj
  #         touch build-ios/proj/cfg.cmake
  #         echo "set(CC_USE_GLES3 OFF)" >> build-ios/proj/cfg.cmake
  #         echo "set(CC_USE_VULKAN OFF)" >> build-ios/proj/cfg.cmake
  #         echo "set(CC_USE_GLES2 OFF)" >> build-ios/proj/cfg.cmake
  #         echo "set(CC_USE_METAL ON)" >> build-ios/proj/cfg.cmake
  #         echo "set(TARGET_IOS_VERSION 12.0)" >> build-ios/proj/cfg.cmake
  #         echo "set(USE_WEBSOCKET_SERVER OFF)" >> build-ios/proj/cfg.cmake
  #         echo "set(USE_DRAGONBONES OFF)" >> build-ios/proj/cfg.cmake
  #         echo "set(CMAKE_CXX_STANDARD_REQUIRED OFF)" >> build-ios/proj/cfg.cmake
  #         echo "set(MACOSX_BUNDLE_GUI_IDENTIFIER com.cocos.demo.ios)" >> build-ios/proj/cfg.cmake
  #         mkdir build-ios/assets
  #         cd build-ios
  #         RES_DIR=$COCOS2DX_ROOT/templates/ios/build-ios
  #         cmake ../ -GXcode -DCMAKE_SYSTEM_NAME=iOS \
  #             -DCMAKE_OSX_SYSROOT=iphoneos \
  #             -DCMAKE_OSX_ARCHITECTURES=arm64 \
  #             -DRES_DIR=$RES_DIR \
  #             -DCOCOS_X_PATH=$COCOS2DX_ROOT
  #         set +e
  #         #cmake --build . --config Debug -- -quiet -jobs $NUM_OF_CORES -allowProvisioningUpdates CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO 
  #         cmake --build . --config Debug -- -quiet -jobs $NUM_OF_CORES CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO
  #         retcode=$?
  #         set -e
  #         if [ $retcode -ne 0 ]; then
  #             echo "-----------------------------------------------------------------------------------------------"
  #             echo "------------------------------------ recompile without `-quiet` -------------------------------"
  #             echo "-----------------------------------------------------------------------------------------------"
  #             cmake --build . --config Debug --  -jobs $NUM_OF_CORES CODE_SIGNING_REQUIRED=NO CODE_SIGNING_ALLOWED=NO
  #         fi
  #         echo "Compile iOS Done!"
